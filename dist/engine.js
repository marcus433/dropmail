(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.SyncEngine = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof requireb=="function"&&requireb;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof requireb=="function"&&requireb;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(requireb,module,exports){
/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 1.0.0 Copyright (c) 2011-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

/*jslint node: true */
/*global module, process */
'use strict';

/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requirebFn]. Node's requireb function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.requireb
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
function amdefine(module, requirebFn) {
    'use strict';
    var defineCache = {},
        loaderCache = {},
        alreadyCalled = false,
        path = requireb('path'),
        makerequireb, stringrequireb;

    /**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
    function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i+= 1) {
            part = ary[i];
            if (part === '.') {
                ary.splice(i, 1);
                i -= 1;
            } else if (part === '..') {
                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                    //End of the line. Keep at least one non-dot
                    //path segment at the front so it can be mapped
                    //correctly to disk. Otherwise, there is likely
                    //no path mapping for a path starting with '..'.
                    //This can still fail, but catches the most reasonable
                    //uses of ..
                    break;
                } else if (i > 0) {
                    ary.splice(i - 1, 2);
                    i -= 2;
                }
            }
        }
    }

    function normalize(name, baseName) {
        var baseParts;

        //Adjust any relative paths.
        if (name && name.charAt(0) === '.') {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level requireb that will
            //be relative to baseUrl in the end.
            if (baseName) {
                baseParts = baseName.split('/');
                baseParts = baseParts.slice(0, baseParts.length - 1);
                baseParts = baseParts.concat(name.split('/'));
                trimDots(baseParts);
                name = baseParts.join('/');
            }
        }

        return name;
    }

    /**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(id) {
        function load(value) {
            loaderCache[id] = value;
        }

        load.fromText = function (id, text) {
            //This one is difficult because the text can/probably uses
            //define, and any relative paths and requirebs should be relative
            //to that id was it would be found on disk. But this would requireb
            //bootstrapping a module/requireb fairly deeply from node core.
            //Not sure how best to go about that yet.
            throw new Error('amdefine does not implement load.fromText');
        };

        return load;
    }

    makerequireb = function (systemrequireb, exports, module, relId) {
        function amdrequireb(deps, callback) {
            if (typeof deps === 'string') {
                //Synchronous, single module requireb('')
                return stringrequireb(systemrequireb, exports, module, deps, relId);
            } else {
                //Array of dependencies with a callback.

                //Convert the dependencies to modules.
                deps = deps.map(function (depName) {
                    return stringrequireb(systemrequireb, exports, module, depName, relId);
                });

                //Wait for next tick to call back the requireb call.
                if (callback) {
                    process.nextTick(function () {
                        callback.apply(null, deps);
                    });
                }
            }
        }

        amdrequireb.toUrl = function (filePath) {
            if (filePath.indexOf('.') === 0) {
                return normalize(filePath, path.dirname(module.filename));
            } else {
                return filePath;
            }
        };

        return amdrequireb;
    };

    //Favor explicit value, passed in if the module wants to support Node 0.4.
    requirebFn = requirebFn || function req() {
        return module.requireb.apply(module, arguments);
    };

    function runFactory(id, deps, factory) {
        var r, e, m, result;

        if (id) {
            e = loaderCache[id] = {};
            m = {
                id: id,
                uri: __filename,
                exports: e
            };
            r = makerequireb(requirebFn, e, m, id);
        } else {
            //Only support one define call per file
            if (alreadyCalled) {
                throw new Error('amdefine with no module ID cannot be called more than once per file.');
            }
            alreadyCalled = true;

            //Use the real variables from node
            //Use module.exports for exports, since
            //the exports in here is amdefine exports.
            e = module.exports;
            m = module;
            r = makerequireb(requirebFn, e, m, module.id);
        }

        //If there are dependencies, they are strings, so need
        //to convert them to dependency values.
        if (deps) {
            deps = deps.map(function (depName) {
                return r(depName);
            });
        }

        //Call the factory with the right dependencies.
        if (typeof factory === 'function') {
            result = factory.apply(m.exports, deps);
        } else {
            result = factory;
        }

        if (result !== undefined) {
            m.exports = result;
            if (id) {
                loaderCache[id] = m.exports;
            }
        }
    }

    stringrequireb = function (systemrequireb, exports, module, id, relId) {
        //Split the ID by a ! so that
        var index = id.indexOf('!'),
            originalId = id,
            prefix, plugin;

        if (index === -1) {
            id = normalize(id, relId);

            //Straight module lookup. If it is one of the special dependencies,
            //deal with it, otherwise, delegate to node.
            if (id === 'requireb') {
                return makerequireb(systemrequireb, exports, module, relId);
            } else if (id === 'exports') {
                return exports;
            } else if (id === 'module') {
                return module;
            } else if (loaderCache.hasOwnProperty(id)) {
                return loaderCache[id];
            } else if (defineCache[id]) {
                runFactory.apply(null, defineCache[id]);
                return loaderCache[id];
            } else {
                if(systemrequireb) {
                    return systemrequireb(originalId);
                } else {
                    throw new Error('No module with ID: ' + id);
                }
            }
        } else {
            //There is a plugin in play.
            prefix = id.substring(0, index);
            id = id.substring(index + 1, id.length);

            plugin = stringrequireb(systemrequireb, exports, module, prefix, relId);

            if (plugin.normalize) {
                id = plugin.normalize(id, makeNormalize(relId));
            } else {
                //Normalize the ID normally.
                id = normalize(id, relId);
            }

            if (loaderCache[id]) {
                return loaderCache[id];
            } else {
                plugin.load(id, makerequireb(systemrequireb, exports, module, relId), makeLoad(id), {});

                return loaderCache[id];
            }
        }
    };

    //Create a define function specific to the module asking for amdefine.
    function define(id, deps, factory) {
        if (Array.isArray(id)) {
            factory = deps;
            deps = id;
            id = undefined;
        } else if (typeof id !== 'string') {
            factory = id;
            id = deps = undefined;
        }

        if (deps && !Array.isArray(deps)) {
            factory = deps;
            deps = undefined;
        }

        if (!deps) {
            deps = ['requireb', 'exports', 'module'];
        }

        //Set up properties for this module. If an ID, then use
        //internal cache. If no ID, then use the external variables
        //for this node module.
        if (id) {
            //Put the module in deep freeze until there is a
            //requireb call for it.
            defineCache[id] = [id, deps, factory];
        } else {
            runFactory(id, deps, factory);
        }
    }

    //define.requireb, which has access to all the values in the
    //cache. Useful for AMD modules that all have IDs in the file,
    //but need to finally export a value to node based on one of those
    //IDs.
    define.requireb = function (id) {
        if (loaderCache[id]) {
            return loaderCache[id];
        }

        if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
        }
    };

    define.amd = {};

    return define;
}

module.exports = amdefine;

},{"path":98}],2:[function(requireb,module,exports){
'use strict';
let Promise = requireb('bluebird');

/**
 * Wraps static and instance methods whose name ends with Async, or are
 * GeneratorFunctions. Any GeneratorFunction is wrapped with
 * bluebird.coroutine(), and others with bluebird.method(). Accepts an optional
 * array of method names, wrapping only those found in the array, and disabling
 * the Async suffix check. Returns the class.
 *
 * @param   {function} klass         The class to wrap
 * @param   {string[]} [methodNames] Optional array of method names
 * @returns {function} The supplied class
 * @throws  {Error}    If methodNames is provided, but is not an array
 */
function wrap(klass, methodNames) {
  validateMethodNames(methodNames);
  wrapStaticMethods(klass, methodNames);
  wrapInstanceMethods(klass, methodNames);
  return klass;
}

/**
 * Wraps static methods whose name ends with Async or are GeneratorFunctions.
 * Any GeneratorFunction is wrapped with bluebird.coroutine(), and others with
 * bluebird.method(). Accepts an optional array of method names, wrapping only
 * those found in the array, and disabling the Async suffix check. Returns the
 * class.
 *
 * @param   {function} klass         The class to wrap
 * @param   {string[]} [methodNames] Optional array of method names
 * @returns {function} The supplied class
 * @throws  {Error}    If methodNames is provided, but is not an array
 */
function wrapStaticMethods(klass, methodNames) {
  validateMethodNames(methodNames);
  wrapFunctions(klass, methodNames);
  return klass;
}

/**
 * Wraps instance methods whose name ends with Async, or are GeneratorFunctions.
 * Any GeneratorFunction is wrapped with bluebird.coroutine(), and others with
 * bluebird.method(). Accepts an optional array of method names, wrapping only
 * those found in the array, and disabling the Async suffix check. Returns the
 * class.
 *
 * @param   {function} klass         The class to wrap
 * @param   {string[]} [methodNames] Optional array of method names
 * @returns {function} The supplied class
 * @throws  {Error}    If methodNames is provided, but is not an array
 */
function wrapInstanceMethods(klass, methodNames) {
  validateMethodNames(methodNames);
  wrapFunctions(klass.prototype, methodNames);
  return klass;
}

/**
 * Helper function that validates the methodNames parameter.
 *
 * @param {string[]} [methodNames] Optional array of method names
 * @throws {Error}   If methodNames is provided, but is not an array
 */
function validateMethodNames(methodNames) {
  if (methodNames && !(methodNames instanceof Array)) {
    throw new Error('Optional methodNames should be an array if provided');
  }
}

function wrapFunctions(target, methodNames) {
  _actualMethodKeys(target).forEach(function(key) {
    let constructor = target[key].constructor.name;

    if (methodNames) {
      if (methodNames.indexOf(key) === -1) return;
    } else if (!key.endsWith('Async') && constructor !== 'GeneratorFunction') {
      return;
    }

    if (target[key].constructor.name === 'GeneratorFunction') {
      target[key] = Promise.coroutine(target[key]);
    } else {
      target[key] = Promise.method(target[key]);
    }
  });
}

function _actualMethodKeys(target) {
  return Object.getOwnPropertyNames(target)
    .filter(key => {
      var propertyDescriptor = Object.getOwnPropertyDescriptor(target, key);
      return !propertyDescriptor.get && !propertyDescriptor.set;
    })
    .filter(key => typeof target[key] === 'function');
}

module.exports = {
  wrap,
  wrapStaticMethods,
  wrapInstanceMethods
};

},{"bluebird":4}],3:[function(requireb,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],4:[function(requireb,module,exports){
/* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2015 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
/**
 * bluebird build version 2.10.2
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
*/
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var SomePromiseArray = Promise._SomePromiseArray;
function any(promises) {
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function (promises) {
    return any(promises);
};

Promise.prototype.any = function () {
    return any(this);
};

};

},{}],2:[function(_dereq_,module,exports){
"use strict";
var firstLineError;
try {throw new Error(); } catch (e) {firstLineError = e;}
var schedule = _dereq_("./schedule.js");
var Queue = _dereq_("./queue.js");
var util = _dereq_("./util.js");

function Async() {
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._trampolineEnabled = true;
    var self = this;
    this.drainQueues = function () {
        self._drainQueues();
    };
    this._schedule =
        schedule.isStatic ? schedule(this.drainQueues) : schedule;
}

Async.prototype.disableTrampolineIfNecessary = function() {
    if (util.hasDevTools) {
        this._trampolineEnabled = false;
    }
};

Async.prototype.enableTrampoline = function() {
    if (!this._trampolineEnabled) {
        this._trampolineEnabled = true;
        this._schedule = function(fn) {
            setTimeout(fn, 0);
        };
    }
};

Async.prototype.haveItemsQueued = function () {
    return this._normalQueue.length() > 0;
};

Async.prototype.throwLater = function(fn, arg) {
    if (arguments.length === 1) {
        arg = fn;
        fn = function () { throw arg; };
    }
    if (typeof setTimeout !== "undefined") {
        setTimeout(function() {
            fn(arg);
        }, 0);
    } else try {
        this._schedule(function() {
            fn(arg);
        });
    } catch (e) {
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
    }
};

function AsyncInvokeLater(fn, receiver, arg) {
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) {
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) {
    this._normalQueue._pushOne(promise);
    this._queueTick();
}

if (!util.hasDevTools) {
    Async.prototype.invokeLater = AsyncInvokeLater;
    Async.prototype.invoke = AsyncInvoke;
    Async.prototype.settlePromises = AsyncSettlePromises;
} else {
    if (schedule.isStatic) {
        schedule = function(fn) { setTimeout(fn, 0); };
    }
    Async.prototype.invokeLater = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvokeLater.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                setTimeout(function() {
                    fn.call(receiver, arg);
                }, 100);
            });
        }
    };

    Async.prototype.invoke = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvoke.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                fn.call(receiver, arg);
            });
        }
    };

    Async.prototype.settlePromises = function(promise) {
        if (this._trampolineEnabled) {
            AsyncSettlePromises.call(this, promise);
        } else {
            this._schedule(function() {
                promise._settlePromises();
            });
        }
    };
}

Async.prototype.invokeFirst = function (fn, receiver, arg) {
    this._normalQueue.unshift(fn, receiver, arg);
    this._queueTick();
};

Async.prototype._drainQueue = function(queue) {
    while (queue.length() > 0) {
        var fn = queue.shift();
        if (typeof fn !== "function") {
            fn._settlePromises();
            continue;
        }
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
    }
};

Async.prototype._drainQueues = function () {
    this._drainQueue(this._normalQueue);
    this._reset();
    this._drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () {
    if (!this._isTickUsed) {
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
    }
};

Async.prototype._reset = function () {
    this._isTickUsed = false;
};

module.exports = new Async();
module.exports.firstLineError = firstLineError;

},{"./queue.js":28,"./schedule.js":31,"./util.js":38}],3:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise) {
var rejectThis = function(_, e) {
    this._reject(e);
};

var targetRejected = function(e, context) {
    context.promiseRejectionQueued = true;
    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
};

var bindingResolved = function(thisArg, context) {
    if (this._isPending()) {
        this._resolveCallback(context.target);
    }
};

var bindingRejected = function(e, context) {
    if (!context.promiseRejectionQueued) this._reject(e);
};

Promise.prototype.bind = function (thisArg) {
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);
    ret._propagateFrom(this, 1);
    var target = this._target();

    ret._setBoundTo(maybePromise);
    if (maybePromise instanceof Promise) {
        var context = {
            promiseRejectionQueued: false,
            promise: ret,
            target: target,
            bindingPromise: maybePromise
        };
        target._then(INTERNAL, targetRejected, ret._progress, ret, context);
        maybePromise._then(
            bindingResolved, bindingRejected, ret._progress, ret, context);
    } else {
        ret._resolveCallback(target);
    }
    return ret;
};

Promise.prototype._setBoundTo = function (obj) {
    if (obj !== undefined) {
        this._bitField = this._bitField | 131072;
        this._boundTo = obj;
    } else {
        this._bitField = this._bitField & (~131072);
    }
};

Promise.prototype._isBound = function () {
    return (this._bitField & 131072) === 131072;
};

Promise.bind = function (thisArg, value) {
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);

    ret._setBoundTo(maybePromise);
    if (maybePromise instanceof Promise) {
        maybePromise._then(function() {
            ret._resolveCallback(value);
        }, ret._reject, ret._progress, ret, null);
    } else {
        ret._resolveCallback(value);
    }
    return ret;
};
};

},{}],4:[function(_dereq_,module,exports){
"use strict";
var old;
if (typeof Promise !== "undefined") old = Promise;
function noConflict() {
    try { if (Promise === bluebird) Promise = old; }
    catch (e) {}
    return bluebird;
}
var bluebird = _dereq_("./promise.js")();
bluebird.noConflict = noConflict;
module.exports = bluebird;

},{"./promise.js":23}],5:[function(_dereq_,module,exports){
"use strict";
var cr = Object.create;
if (cr) {
    var callerCache = cr(null);
    var getterCache = cr(null);
    callerCache[" size"] = getterCache[" size"] = 0;
}

module.exports = function(Promise) {
var util = _dereq_("./util.js");
var canEvaluate = util.canEvaluate;
var isIdentifier = util.isIdentifier;

var getMethodCaller;
var getGetter;
if (!true) {
var makeMethodCaller = function (methodName) {
    return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
};

var makeGetter = function (propertyName) {
    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
};

var getCompiled = function(name, compiler, cache) {
    var ret = cache[name];
    if (typeof ret !== "function") {
        if (!isIdentifier(name)) {
            return null;
        }
        ret = compiler(name);
        cache[name] = ret;
        cache[" size"]++;
        if (cache[" size"] > 512) {
            var keys = Object.keys(cache);
            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
            cache[" size"] = keys.length - 256;
        }
    }
    return ret;
};

getMethodCaller = function(name) {
    return getCompiled(name, makeMethodCaller, callerCache);
};

getGetter = function(name) {
    return getCompiled(name, makeGetter, getterCache);
};
}

function ensureMethod(obj, methodName) {
    var fn;
    if (obj != null) fn = obj[methodName];
    if (typeof fn !== "function") {
        var message = "Object " + util.classString(obj) + " has no method '" +
            util.toString(methodName) + "'";
        throw new Promise.TypeError(message);
    }
    return fn;
}

function caller(obj) {
    var methodName = this.pop();
    var fn = ensureMethod(obj, methodName);
    return fn.apply(obj, this);
}
Promise.prototype.call = function (methodName) {
    var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
    if (!true) {
        if (canEvaluate) {
            var maybeCaller = getMethodCaller(methodName);
            if (maybeCaller !== null) {
                return this._then(
                    maybeCaller, undefined, undefined, args, undefined);
            }
        }
    }
    args.push(methodName);
    return this._then(caller, undefined, undefined, args, undefined);
};

function namedGetter(obj) {
    return obj[this];
}
function indexedGetter(obj) {
    var index = +this;
    if (index < 0) index = Math.max(0, index + obj.length);
    return obj[index];
}
Promise.prototype.get = function (propertyName) {
    var isIndex = (typeof propertyName === "number");
    var getter;
    if (!isIndex) {
        if (canEvaluate) {
            var maybeGetter = getGetter(propertyName);
            getter = maybeGetter !== null ? maybeGetter : namedGetter;
        } else {
            getter = namedGetter;
        }
    } else {
        getter = indexedGetter;
    }
    return this._then(getter, undefined, undefined, propertyName, undefined);
};
};

},{"./util.js":38}],6:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var errors = _dereq_("./errors.js");
var async = _dereq_("./async.js");
var CancellationError = errors.CancellationError;

Promise.prototype._cancel = function (reason) {
    if (!this.isCancellable()) return this;
    var parent;
    var promiseToReject = this;
    while ((parent = promiseToReject._cancellationParent) !== undefined &&
        parent.isCancellable()) {
        promiseToReject = parent;
    }
    this._unsetCancellable();
    promiseToReject._target()._rejectCallback(reason, false, true);
};

Promise.prototype.cancel = function (reason) {
    if (!this.isCancellable()) return this;
    if (reason === undefined) reason = new CancellationError();
    async.invokeLater(this._cancel, this, reason);
    return this;
};

Promise.prototype.cancellable = function () {
    if (this._cancellable()) return this;
    async.enableTrampoline();
    this._setCancellable();
    this._cancellationParent = undefined;
    return this;
};

Promise.prototype.uncancellable = function () {
    var ret = this.then();
    ret._unsetCancellable();
    return ret;
};

Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
    var ret = this._then(didFulfill, didReject, didProgress,
                         undefined, undefined);

    ret._setCancellable();
    ret._cancellationParent = undefined;
    return ret;
};
};

},{"./async.js":2,"./errors.js":13}],7:[function(_dereq_,module,exports){
"use strict";
module.exports = function() {
var async = _dereq_("./async.js");
var util = _dereq_("./util.js");
var bluebirdFramePattern =
    /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
var stackFramePattern = null;
var formatStack = null;
var indentStackFrames = false;
var warn;

function CapturedTrace(parent) {
    this._parent = parent;
    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
    captureStackTrace(this, CapturedTrace);
    if (length > 32) this.uncycle();
}
util.inherits(CapturedTrace, Error);

CapturedTrace.prototype.uncycle = function() {
    var length = this._length;
    if (length < 2) return;
    var nodes = [];
    var stackToIndex = {};

    for (var i = 0, node = this; node !== undefined; ++i) {
        nodes.push(node);
        node = node._parent;
    }
    length = this._length = i;
    for (var i = length - 1; i >= 0; --i) {
        var stack = nodes[i].stack;
        if (stackToIndex[stack] === undefined) {
            stackToIndex[stack] = i;
        }
    }
    for (var i = 0; i < length; ++i) {
        var currentStack = nodes[i].stack;
        var index = stackToIndex[currentStack];
        if (index !== undefined && index !== i) {
            if (index > 0) {
                nodes[index - 1]._parent = undefined;
                nodes[index - 1]._length = 1;
            }
            nodes[i]._parent = undefined;
            nodes[i]._length = 1;
            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

            if (index < length - 1) {
                cycleEdgeNode._parent = nodes[index + 1];
                cycleEdgeNode._parent.uncycle();
                cycleEdgeNode._length =
                    cycleEdgeNode._parent._length + 1;
            } else {
                cycleEdgeNode._parent = undefined;
                cycleEdgeNode._length = 1;
            }
            var currentChildLength = cycleEdgeNode._length + 1;
            for (var j = i - 2; j >= 0; --j) {
                nodes[j]._length = currentChildLength;
                currentChildLength++;
            }
            return;
        }
    }
};

CapturedTrace.prototype.parent = function() {
    return this._parent;
};

CapturedTrace.prototype.hasParent = function() {
    return this._parent !== undefined;
};

CapturedTrace.prototype.attachExtraTrace = function(error) {
    if (error.__stackCleaned__) return;
    this.uncycle();
    var parsed = CapturedTrace.parseStackAndMessage(error);
    var message = parsed.message;
    var stacks = [parsed.stack];

    var trace = this;
    while (trace !== undefined) {
        stacks.push(cleanStack(trace.stack.split("\n")));
        trace = trace._parent;
    }
    removeCommonRoots(stacks);
    removeDuplicateOrEmptyJumps(stacks);
    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
    util.notEnumerableProp(error, "__stackCleaned__", true);
};

function reconstructStack(message, stacks) {
    for (var i = 0; i < stacks.length - 1; ++i) {
        stacks[i].push("From previous event:");
        stacks[i] = stacks[i].join("\n");
    }
    if (i < stacks.length) {
        stacks[i] = stacks[i].join("\n");
    }
    return message + "\n" + stacks.join("\n");
}

function removeDuplicateOrEmptyJumps(stacks) {
    for (var i = 0; i < stacks.length; ++i) {
        if (stacks[i].length === 0 ||
            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
            stacks.splice(i, 1);
            i--;
        }
    }
}

function removeCommonRoots(stacks) {
    var current = stacks[0];
    for (var i = 1; i < stacks.length; ++i) {
        var prev = stacks[i];
        var currentLastIndex = current.length - 1;
        var currentLastLine = current[currentLastIndex];
        var commonRootMeetPoint = -1;

        for (var j = prev.length - 1; j >= 0; --j) {
            if (prev[j] === currentLastLine) {
                commonRootMeetPoint = j;
                break;
            }
        }

        for (var j = commonRootMeetPoint; j >= 0; --j) {
            var line = prev[j];
            if (current[currentLastIndex] === line) {
                current.pop();
                currentLastIndex--;
            } else {
                break;
            }
        }
        current = prev;
    }
}

function cleanStack(stack) {
    var ret = [];
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        var isTraceLine = stackFramePattern.test(line) ||
            "    (No stack trace)" === line;
        var isInternalFrame = isTraceLine && shouldIgnore(line);
        if (isTraceLine && !isInternalFrame) {
            if (indentStackFrames && line.charAt(0) !== " ") {
                line = "    " + line;
            }
            ret.push(line);
        }
    }
    return ret;
}

function stackFramesAsArray(error) {
    var stack = error.stack.replace(/\s+$/g, "").split("\n");
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
            break;
        }
    }
    if (i > 0) {
        stack = stack.slice(i);
    }
    return stack;
}

CapturedTrace.parseStackAndMessage = function(error) {
    var stack = error.stack;
    var message = error.toString();
    stack = typeof stack === "string" && stack.length > 0
                ? stackFramesAsArray(error) : ["    (No stack trace)"];
    return {
        message: message,
        stack: cleanStack(stack)
    };
};

CapturedTrace.formatAndLogError = function(error, title) {
    if (typeof console !== "undefined") {
        var message;
        if (typeof error === "object" || typeof error === "function") {
            var stack = error.stack;
            message = title + formatStack(stack, error);
        } else {
            message = title + String(error);
        }
        if (typeof warn === "function") {
            warn(message);
        } else if (typeof console.log === "function" ||
            typeof console.log === "object") {
            console.log(message);
        }
    }
};

CapturedTrace.unhandledRejection = function (reason) {
    CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
};

CapturedTrace.isSupported = function () {
    return typeof captureStackTrace === "function";
};

CapturedTrace.fireRejectionEvent =
function(name, localHandler, reason, promise) {
    var localEventFired = false;
    try {
        if (typeof localHandler === "function") {
            localEventFired = true;
            if (name === "rejectionHandled") {
                localHandler(promise);
            } else {
                localHandler(reason, promise);
            }
        }
    } catch (e) {
        async.throwLater(e);
    }

    var globalEventFired = false;
    try {
        globalEventFired = fireGlobalEvent(name, reason, promise);
    } catch (e) {
        globalEventFired = true;
        async.throwLater(e);
    }

    var domEventFired = false;
    if (fireDomEvent) {
        try {
            domEventFired = fireDomEvent(name.toLowerCase(), {
                reason: reason,
                promise: promise
            });
        } catch (e) {
            domEventFired = true;
            async.throwLater(e);
        }
    }

    if (!globalEventFired && !localEventFired && !domEventFired &&
        name === "unhandledRejection") {
        CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
    }
};

function formatNonError(obj) {
    var str;
    if (typeof obj === "function") {
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
    } else {
        str = obj.toString();
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) {
            try {
                var newStr = JSON.stringify(obj);
                str = newStr;
            }
            catch(e) {

            }
        }
        if (str.length === 0) {
            str = "(empty array)";
        }
    }
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) {
    var maxChars = 41;
    if (str.length < maxChars) {
        return str;
    }
    return str.substr(0, maxChars - 3) + "...";
}

var shouldIgnore = function() { return false; };
var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
function parseLineInfo(line) {
    var matches = line.match(parseLineInfoRegex);
    if (matches) {
        return {
            fileName: matches[1],
            line: parseInt(matches[2], 10)
        };
    }
}
CapturedTrace.setBounds = function(firstLineError, lastLineError) {
    if (!CapturedTrace.isSupported()) return;
    var firstStackLines = firstLineError.stack.split("\n");
    var lastStackLines = lastLineError.stack.split("\n");
    var firstIndex = -1;
    var lastIndex = -1;
    var firstFileName;
    var lastFileName;
    for (var i = 0; i < firstStackLines.length; ++i) {
        var result = parseLineInfo(firstStackLines[i]);
        if (result) {
            firstFileName = result.fileName;
            firstIndex = result.line;
            break;
        }
    }
    for (var i = 0; i < lastStackLines.length; ++i) {
        var result = parseLineInfo(lastStackLines[i]);
        if (result) {
            lastFileName = result.fileName;
            lastIndex = result.line;
            break;
        }
    }
    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
        firstFileName !== lastFileName || firstIndex >= lastIndex) {
        return;
    }

    shouldIgnore = function(line) {
        if (bluebirdFramePattern.test(line)) return true;
        var info = parseLineInfo(line);
        if (info) {
            if (info.fileName === firstFileName &&
                (firstIndex <= info.line && info.line <= lastIndex)) {
                return true;
            }
        }
        return false;
    };
};

var captureStackTrace = (function stackDetection() {
    var v8stackFramePattern = /^\s*at\s*/;
    var v8stackFormatter = function(stack, error) {
        if (typeof stack === "string") return stack;

        if (error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") {
        Error.stackTraceLimit = Error.stackTraceLimit + 6;
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        var captureStackTrace = Error.captureStackTrace;

        shouldIgnore = function(line) {
            return bluebirdFramePattern.test(line);
        };
        return function(receiver, ignoreUntil) {
            Error.stackTraceLimit = Error.stackTraceLimit + 6;
            captureStackTrace(receiver, ignoreUntil);
            Error.stackTraceLimit = Error.stackTraceLimit - 6;
        };
    }
    var err = new Error();

    if (typeof err.stack === "string" &&
        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
        stackFramePattern = /@/;
        formatStack = v8stackFormatter;
        indentStackFrames = true;
        return function captureStackTrace(o) {
            o.stack = new Error().stack;
        };
    }

    var hasStackAfterThrow;
    try { throw new Error(); }
    catch(e) {
        hasStackAfterThrow = ("stack" in e);
    }
    if (!("stack" in err) && hasStackAfterThrow &&
        typeof Error.stackTraceLimit === "number") {
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        return function captureStackTrace(o) {
            Error.stackTraceLimit = Error.stackTraceLimit + 6;
            try { throw new Error(); }
            catch(e) { o.stack = e.stack; }
            Error.stackTraceLimit = Error.stackTraceLimit - 6;
        };
    }

    formatStack = function(stack, error) {
        if (typeof stack === "string") return stack;

        if ((typeof error === "object" ||
            typeof error === "function") &&
            error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    return null;

})([]);

var fireDomEvent;
var fireGlobalEvent = (function() {
    if (util.isNode) {
        return function(name, reason, promise) {
            if (name === "rejectionHandled") {
                return process.emit(name, promise);
            } else {
                return process.emit(name, reason, promise);
            }
        };
    } else {
        var customEventWorks = false;
        var anyEventWorks = true;
        try {
            var ev = new self.CustomEvent("test");
            customEventWorks = ev instanceof CustomEvent;
        } catch (e) {}
        if (!customEventWorks) {
            try {
                var event = document.createEvent("CustomEvent");
                event.initCustomEvent("testingtheevent", false, true, {});
                self.dispatchEvent(event);
            } catch (e) {
                anyEventWorks = false;
            }
        }
        if (anyEventWorks) {
            fireDomEvent = function(type, detail) {
                var event;
                if (customEventWorks) {
                    event = new self.CustomEvent(type, {
                        detail: detail,
                        bubbles: false,
                        cancelable: true
                    });
                } else if (self.dispatchEvent) {
                    event = document.createEvent("CustomEvent");
                    event.initCustomEvent(type, false, true, detail);
                }

                return event ? !self.dispatchEvent(event) : false;
            };
        }

        var toWindowMethodNameMap = {};
        toWindowMethodNameMap["unhandledRejection"] = ("on" +
            "unhandledRejection").toLowerCase();
        toWindowMethodNameMap["rejectionHandled"] = ("on" +
            "rejectionHandled").toLowerCase();

        return function(name, reason, promise) {
            var methodName = toWindowMethodNameMap[name];
            var method = self[methodName];
            if (!method) return false;
            if (name === "rejectionHandled") {
                method.call(self, promise);
            } else {
                method.call(self, reason, promise);
            }
            return true;
        };
    }
})();

if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
    warn = function (message) {
        console.warn(message);
    };
    if (util.isNode && process.stderr.isTTY) {
        warn = function(message) {
            process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
        };
    } else if (!util.isNode && typeof (new Error().stack) === "string") {
        warn = function(message) {
            console.warn("%c" + message, "color: red");
        };
    }
}

return CapturedTrace;
};

},{"./async.js":2,"./util.js":38}],8:[function(_dereq_,module,exports){
"use strict";
module.exports = function(NEXT_FILTER) {
var util = _dereq_("./util.js");
var errors = _dereq_("./errors.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var keys = _dereq_("./es5.js").keys;
var TypeError = errors.TypeError;

function CatchFilter(instances, callback, promise) {
    this._instances = instances;
    this._callback = callback;
    this._promise = promise;
}

function safePredicate(predicate, e) {
    var safeObject = {};
    var retfilter = tryCatch(predicate).call(safeObject, e);

    if (retfilter === errorObj) return retfilter;

    var safeKeys = keys(safeObject);
    if (safeKeys.length) {
        errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
        return errorObj;
    }
    return retfilter;
}

CatchFilter.prototype.doFilter = function (e) {
    var cb = this._callback;
    var promise = this._promise;
    var boundTo = promise._boundValue();
    for (var i = 0, len = this._instances.length; i < len; ++i) {
        var item = this._instances[i];
        var itemIsErrorType = item === Error ||
            (item != null && item.prototype instanceof Error);

        if (itemIsErrorType && e instanceof item) {
            var ret = tryCatch(cb).call(boundTo, e);
            if (ret === errorObj) {
                NEXT_FILTER.e = ret.e;
                return NEXT_FILTER;
            }
            return ret;
        } else if (typeof item === "function" && !itemIsErrorType) {
            var shouldHandle = safePredicate(item, e);
            if (shouldHandle === errorObj) {
                e = errorObj.e;
                break;
            } else if (shouldHandle) {
                var ret = tryCatch(cb).call(boundTo, e);
                if (ret === errorObj) {
                    NEXT_FILTER.e = ret.e;
                    return NEXT_FILTER;
                }
                return ret;
            }
        }
    }
    NEXT_FILTER.e = e;
    return NEXT_FILTER;
};

return CatchFilter;
};

},{"./errors.js":13,"./es5.js":14,"./util.js":38}],9:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, CapturedTrace, isDebugging) {
var contextStack = [];
function Context() {
    this._trace = new CapturedTrace(peekContext());
}
Context.prototype._pushContext = function () {
    if (!isDebugging()) return;
    if (this._trace !== undefined) {
        contextStack.push(this._trace);
    }
};

Context.prototype._popContext = function () {
    if (!isDebugging()) return;
    if (this._trace !== undefined) {
        contextStack.pop();
    }
};

function createContext() {
    if (isDebugging()) return new Context();
}

function peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return undefined;
}

Promise.prototype._peekContext = peekContext;
Promise.prototype._pushContext = Context.prototype._pushContext;
Promise.prototype._popContext = Context.prototype._popContext;

return createContext;
};

},{}],10:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, CapturedTrace) {
var getDomain = Promise._getDomain;
var async = _dereq_("./async.js");
var Warning = _dereq_("./errors.js").Warning;
var util = _dereq_("./util.js");
var canAttachTrace = util.canAttachTrace;
var unhandledRejectionHandled;
var possiblyUnhandledRejection;
var debugging = false || (util.isNode &&
                    (!!process.env["BLUEBIRD_DEBUG"] ||
                     process.env["NODE_ENV"] === "development"));

if (util.isNode && process.env["BLUEBIRD_DEBUG"] == 0) debugging = false;

if (debugging) {
    async.disableTrampolineIfNecessary();
}

Promise.prototype._ignoreRejections = function() {
    this._unsetRejectionIsUnhandled();
    this._bitField = this._bitField | 16777216;
};

Promise.prototype._ensurePossibleRejectionHandled = function () {
    if ((this._bitField & 16777216) !== 0) return;
    this._setRejectionIsUnhandled();
    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
};

Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
    CapturedTrace.fireRejectionEvent("rejectionHandled",
                                  unhandledRejectionHandled, undefined, this);
};

Promise.prototype._notifyUnhandledRejection = function () {
    if (this._isRejectionUnhandled()) {
        var reason = this._getCarriedStackTrace() || this._settledValue;
        this._setUnhandledRejectionIsNotified();
        CapturedTrace.fireRejectionEvent("unhandledRejection",
                                      possiblyUnhandledRejection, reason, this);
    }
};

Promise.prototype._setUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField | 524288;
};

Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField & (~524288);
};

Promise.prototype._isUnhandledRejectionNotified = function () {
    return (this._bitField & 524288) > 0;
};

Promise.prototype._setRejectionIsUnhandled = function () {
    this._bitField = this._bitField | 2097152;
};

Promise.prototype._unsetRejectionIsUnhandled = function () {
    this._bitField = this._bitField & (~2097152);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled = function () {
    return (this._bitField & 2097152) > 0;
};

Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
    this._bitField = this._bitField | 1048576;
    this._fulfillmentHandler0 = capturedTrace;
};

Promise.prototype._isCarryingStackTrace = function () {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._getCarriedStackTrace = function () {
    return this._isCarryingStackTrace()
        ? this._fulfillmentHandler0
        : undefined;
};

Promise.prototype._captureStackTrace = function () {
    if (debugging) {
        this._trace = new CapturedTrace(this._peekContext());
    }
    return this;
};

Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
    if (debugging && canAttachTrace(error)) {
        var trace = this._trace;
        if (trace !== undefined) {
            if (ignoreSelf) trace = trace._parent;
        }
        if (trace !== undefined) {
            trace.attachExtraTrace(error);
        } else if (!error.__stackCleaned__) {
            var parsed = CapturedTrace.parseStackAndMessage(error);
            util.notEnumerableProp(error, "stack",
                parsed.message + "\n" + parsed.stack.join("\n"));
            util.notEnumerableProp(error, "__stackCleaned__", true);
        }
    }
};

Promise.prototype._warn = function(message) {
    var warning = new Warning(message);
    var ctx = this._peekContext();
    if (ctx) {
        ctx.attachExtraTrace(warning);
    } else {
        var parsed = CapturedTrace.parseStackAndMessage(warning);
        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
    }
    CapturedTrace.formatAndLogError(warning, "");
};

Promise.onPossiblyUnhandledRejection = function (fn) {
    var domain = getDomain();
    possiblyUnhandledRejection =
        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                 : undefined;
};

Promise.onUnhandledRejectionHandled = function (fn) {
    var domain = getDomain();
    unhandledRejectionHandled =
        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                 : undefined;
};

Promise.longStackTraces = function () {
    if (async.haveItemsQueued() &&
        debugging === false
   ) {
        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
    }
    debugging = CapturedTrace.isSupported();
    if (debugging) {
        async.disableTrampolineIfNecessary();
    }
};

Promise.hasLongStackTraces = function () {
    return debugging && CapturedTrace.isSupported();
};

if (!CapturedTrace.isSupported()) {
    Promise.longStackTraces = function(){};
    debugging = false;
}

return function() {
    return debugging;
};
};

},{"./async.js":2,"./errors.js":13,"./util.js":38}],11:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util.js");
var isPrimitive = util.isPrimitive;

module.exports = function(Promise) {
var returner = function () {
    return this;
};
var thrower = function () {
    throw this;
};
var returnUndefined = function() {};
var throwUndefined = function() {
    throw undefined;
};

var wrapper = function (value, action) {
    if (action === 1) {
        return function () {
            throw value;
        };
    } else if (action === 2) {
        return function () {
            return value;
        };
    }
};


Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) {
    if (value === undefined) return this.then(returnUndefined);

    if (isPrimitive(value)) {
        return this._then(
            wrapper(value, 2),
            undefined,
            undefined,
            undefined,
            undefined
       );
    } else if (value instanceof Promise) {
        value._ignoreRejections();
    }
    return this._then(returner, undefined, undefined, value, undefined);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) {
    if (reason === undefined) return this.then(throwUndefined);

    if (isPrimitive(reason)) {
        return this._then(
            wrapper(reason, 1),
            undefined,
            undefined,
            undefined,
            undefined
       );
    }
    return this._then(thrower, undefined, undefined, reason, undefined);
};
};

},{"./util.js":38}],12:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseReduce = Promise.reduce;

Promise.prototype.each = function (fn) {
    return PromiseReduce(this, fn, null, INTERNAL);
};

Promise.each = function (promises, fn) {
    return PromiseReduce(promises, fn, null, INTERNAL);
};
};

},{}],13:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5.js");
var Objectfreeze = es5.freeze;
var util = _dereq_("./util.js");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) {
    function SubError(message) {
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        } else {
            Error.call(this);
        }
    }
    inherits(SubError, Error);
    return SubError;
}

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try {
    _TypeError = TypeError;
    _RangeError = RangeError;
} catch(e) {
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
}

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) {
    if (typeof Array.prototype[methods[i]] === "function") {
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
    }
}

es5.defineProperty(AggregateError.prototype, "length", {
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
});
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() {
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) {
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) {
            lines[j] = indent + lines[j];
        }
        str = lines.join("\n");
        ret += str + "\n";
    }
    level--;
    return ret;
};

function OperationalError(message) {
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) {
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
    } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }

}
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) {
    errorTypes = Objectfreeze({
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
    });
    notEnumerableProp(Error, "__BluebirdErrorTypes__", errorTypes);
}

module.exports = {
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
};

},{"./es5.js":14,"./util.js":38}],14:[function(_dereq_,module,exports){
var isES5 = (function(){
    "use strict";
    return this === undefined;
})();

if (isES5) {
    module.exports = {
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        getDescriptor: Object.getOwnPropertyDescriptor,
        keys: Object.keys,
        names: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5,
        propertyIsWritable: function(obj, prop) {
            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
            return !!(!descriptor || descriptor.writable || descriptor.set);
        }
    };
} else {
    var has = {}.hasOwnProperty;
    var str = {}.toString;
    var proto = {}.constructor.prototype;

    var ObjectKeys = function (o) {
        var ret = [];
        for (var key in o) {
            if (has.call(o, key)) {
                ret.push(key);
            }
        }
        return ret;
    };

    var ObjectGetDescriptor = function(o, key) {
        return {value: o[key]};
    };

    var ObjectDefineProperty = function (o, key, desc) {
        o[key] = desc.value;
        return o;
    };

    var ObjectFreeze = function (obj) {
        return obj;
    };

    var ObjectGetPrototypeOf = function (obj) {
        try {
            return Object(obj).constructor.prototype;
        }
        catch (e) {
            return proto;
        }
    };

    var ArrayIsArray = function (obj) {
        try {
            return str.call(obj) === "[object Array]";
        }
        catch(e) {
            return false;
        }
    };

    module.exports = {
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        names: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        getDescriptor: ObjectGetDescriptor,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5,
        propertyIsWritable: function() {
            return true;
        }
    };
}

},{}],15:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseMap = Promise.map;

Promise.prototype.filter = function (fn, options) {
    return PromiseMap(this, fn, options, INTERNAL);
};

Promise.filter = function (promises, fn, options) {
    return PromiseMap(promises, fn, options, INTERNAL);
};
};

},{}],16:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, NEXT_FILTER, tryConvertToPromise) {
var util = _dereq_("./util.js");
var isPrimitive = util.isPrimitive;
var thrower = util.thrower;

function returnThis() {
    return this;
}
function throwThis() {
    throw this;
}
function return$(r) {
    return function() {
        return r;
    };
}
function throw$(r) {
    return function() {
        throw r;
    };
}
function promisedFinally(ret, reasonOrValue, isFulfilled) {
    var then;
    if (isPrimitive(reasonOrValue)) {
        then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
    } else {
        then = isFulfilled ? returnThis : throwThis;
    }
    return ret._then(then, thrower, undefined, reasonOrValue, undefined);
}

function finallyHandler(reasonOrValue) {
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundValue())
                    : handler();

    if (ret !== undefined) {
        var maybePromise = tryConvertToPromise(ret, promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            return promisedFinally(maybePromise, reasonOrValue,
                                    promise.isFulfilled());
        }
    }

    if (promise.isRejected()) {
        NEXT_FILTER.e = reasonOrValue;
        return NEXT_FILTER;
    } else {
        return reasonOrValue;
    }
}

function tapHandler(value) {
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundValue(), value)
                    : handler(value);

    if (ret !== undefined) {
        var maybePromise = tryConvertToPromise(ret, promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            return promisedFinally(maybePromise, value, true);
        }
    }
    return value;
}

Promise.prototype._passThroughHandler = function (handler, isFinally) {
    if (typeof handler !== "function") return this.then();

    var promiseAndHandler = {
        promise: this,
        handler: handler
    };

    return this._then(
            isFinally ? finallyHandler : tapHandler,
            isFinally ? finallyHandler : undefined, undefined,
            promiseAndHandler, undefined);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) {
    return this._passThroughHandler(handler, true);
};

Promise.prototype.tap = function (handler) {
    return this._passThroughHandler(handler, false);
};
};

},{"./util.js":38}],17:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          apiRejection,
                          INTERNAL,
                          tryConvertToPromise) {
var errors = _dereq_("./errors.js");
var TypeError = errors.TypeError;
var util = _dereq_("./util.js");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
var yieldHandlers = [];

function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
    for (var i = 0; i < yieldHandlers.length; ++i) {
        traceParent._pushContext();
        var result = tryCatch(yieldHandlers[i])(value);
        traceParent._popContext();
        if (result === errorObj) {
            traceParent._pushContext();
            var ret = Promise.reject(errorObj.e);
            traceParent._popContext();
            return ret;
        }
        var maybePromise = tryConvertToPromise(result, traceParent);
        if (maybePromise instanceof Promise) return maybePromise;
    }
    return null;
}

function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
    var promise = this._promise = new Promise(INTERNAL);
    promise._captureStackTrace();
    this._stack = stack;
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = undefined;
    this._yieldHandlers = typeof yieldHandler === "function"
        ? [yieldHandler].concat(yieldHandlers)
        : yieldHandlers;
}

PromiseSpawn.prototype.promise = function () {
    return this._promise;
};

PromiseSpawn.prototype._run = function () {
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = undefined;
    this._next(undefined);
};

PromiseSpawn.prototype._continue = function (result) {
    if (result === errorObj) {
        return this._promise._rejectCallback(result.e, false, true);
    }

    var value = result.value;
    if (result.done === true) {
        this._promise._resolveCallback(value);
    } else {
        var maybePromise = tryConvertToPromise(value, this._promise);
        if (!(maybePromise instanceof Promise)) {
            maybePromise =
                promiseFromYieldHandler(maybePromise,
                                        this._yieldHandlers,
                                        this._promise);
            if (maybePromise === null) {
                this._throw(
                    new TypeError(
                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) +
                        "From coroutine:\u000a" +
                        this._stack.split("\n").slice(1, -7).join("\n")
                    )
                );
                return;
            }
        }
        maybePromise._then(
            this._next,
            this._throw,
            undefined,
            this,
            null
       );
    }
};

PromiseSpawn.prototype._throw = function (reason) {
    this._promise._attachExtraTrace(reason);
    this._promise._pushContext();
    var result = tryCatch(this._generator["throw"])
        .call(this._generator, reason);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._next = function (value) {
    this._promise._pushContext();
    var result = tryCatch(this._generator.next).call(this._generator, value);
    this._promise._popContext();
    this._continue(result);
};

Promise.coroutine = function (generatorFunction, options) {
    if (typeof generatorFunction !== "function") {
        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
    }
    var yieldHandler = Object(options).yieldHandler;
    var PromiseSpawn$ = PromiseSpawn;
    var stack = new Error().stack;
    return function () {
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                      stack);
        spawn._generator = generator;
        spawn._next(undefined);
        return spawn.promise();
    };
};

Promise.coroutine.addYieldHandler = function(fn) {
    if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    yieldHandlers.push(fn);
};

Promise.spawn = function (generatorFunction) {
    if (typeof generatorFunction !== "function") {
        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
    }
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},{"./errors.js":13,"./util.js":38}],18:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
var util = _dereq_("./util.js");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!true) {
if (canEvaluate) {
    var thenCallback = function(i) {
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    };

    var caller = function(count) {
        var values = [];
        for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
        return new Function("holder", "                                      \n\
            'use strict';                                                    \n\
            var callback = holder.fn;                                        \n\
            return callback(values);                                         \n\
            ".replace(/values/g, values.join(", ")));
    };
    var thenCallbacks = [];
    var callers = [undefined];
    for (var i = 1; i <= 5; ++i) {
        thenCallbacks.push(thenCallback(i));
        callers.push(caller(i));
    }

    var Holder = function(total, fn) {
        this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
        this.fn = fn;
        this.total = total;
        this.now = 0;
    };

    Holder.prototype.callers = callers;
    Holder.prototype.checkFulfillment = function(promise) {
        var now = this.now;
        now++;
        var total = this.total;
        if (now >= total) {
            var handler = this.callers[total];
            promise._pushContext();
            var ret = tryCatch(handler)(this);
            promise._popContext();
            if (ret === errorObj) {
                promise._rejectCallback(ret.e, false, true);
            } else {
                promise._resolveCallback(ret);
            }
        } else {
            this.now = now;
        }
    };

    var reject = function (reason) {
        this._reject(reason);
    };
}
}

Promise.join = function () {
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") {
        fn = arguments[last];
        if (!true) {
            if (last < 6 && canEvaluate) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var holder = new Holder(last, fn);
                var callbacks = thenCallbacks;
                for (var i = 0; i < last; ++i) {
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) {
                        maybePromise = maybePromise._target();
                        if (maybePromise._isPending()) {
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                        } else if (maybePromise._isFulfilled()) {
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        } else {
                            ret._reject(maybePromise._reason());
                        }
                    } else {
                        callbacks[i].call(ret, maybePromise, holder);
                    }
                }
                return ret;
            }
        }
    }
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
};

};

},{"./util.js":38}],19:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL) {
var getDomain = Promise._getDomain;
var async = _dereq_("./async.js");
var util = _dereq_("./util.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var PENDING = {};
var EMPTY_ARRAY = [];

function MappingPromiseArray(promises, fn, limit, _filter) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    var domain = getDomain();
    this._callback = domain === null ? fn : domain.bind(fn);
    this._preservedValues = _filter === INTERNAL
        ? new Array(this.length())
        : null;
    this._limit = limit;
    this._inFlight = 0;
    this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
    async.invoke(init, this, undefined);
}
util.inherits(MappingPromiseArray, PromiseArray);
function init() {this._init$(undefined, -2);}

MappingPromiseArray.prototype._init = function () {};

MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var limit = this._limit;
    if (values[index] === PENDING) {
        values[index] = value;
        if (limit >= 1) {
            this._inFlight--;
            this._drainQueue();
            if (this._isResolved()) return;
        }
    } else {
        if (limit >= 1 && this._inFlight >= limit) {
            values[index] = value;
            this._queue.push(index);
            return;
        }
        if (preservedValues !== null) preservedValues[index] = value;

        var callback = this._callback;
        var receiver = this._promise._boundValue();
        this._promise._pushContext();
        var ret = tryCatch(callback).call(receiver, value, index, length);
        this._promise._popContext();
        if (ret === errorObj) return this._reject(ret.e);

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            if (maybePromise._isPending()) {
                if (limit >= 1) this._inFlight++;
                values[index] = PENDING;
                return maybePromise._proxyPromiseArray(this, index);
            } else if (maybePromise._isFulfilled()) {
                ret = maybePromise._value();
            } else {
                return this._reject(maybePromise._reason());
            }
        }
        values[index] = ret;
    }
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= length) {
        if (preservedValues !== null) {
            this._filter(values, preservedValues);
        } else {
            this._resolve(values);
        }

    }
};

MappingPromiseArray.prototype._drainQueue = function () {
    var queue = this._queue;
    var limit = this._limit;
    var values = this._values;
    while (queue.length > 0 && this._inFlight < limit) {
        if (this._isResolved()) return;
        var index = queue.pop();
        this._promiseFulfilled(values[index], index);
    }
};

MappingPromiseArray.prototype._filter = function (booleans, values) {
    var len = values.length;
    var ret = new Array(len);
    var j = 0;
    for (var i = 0; i < len; ++i) {
        if (booleans[i]) ret[j++] = values[i];
    }
    ret.length = j;
    this._resolve(ret);
};

MappingPromiseArray.prototype.preservedValues = function () {
    return this._preservedValues;
};

function map(promises, fn, options, _filter) {
    var limit = typeof options === "object" && options !== null
        ? options.concurrency
        : 0;
    limit = typeof limit === "number" &&
        isFinite(limit) && limit >= 1 ? limit : 0;
    return new MappingPromiseArray(promises, fn, limit, _filter);
}

Promise.prototype.map = function (fn, options) {
    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

    return map(this, fn, options, null).promise();
};

Promise.map = function (promises, fn, options, _filter) {
    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    return map(promises, fn, options, _filter).promise();
};


};

},{"./async.js":2,"./util.js":38}],20:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util.js");
var tryCatch = util.tryCatch;

Promise.method = function (fn) {
    if (typeof fn !== "function") {
        throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    }
    return function () {
        var ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._pushContext();
        var value = tryCatch(fn).apply(this, arguments);
        ret._popContext();
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function (fn, args, ctx) {
    if (typeof fn !== "function") {
        return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    }
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._pushContext();
    var value = util.isArray(args)
        ? tryCatch(fn).apply(ctx, args)
        : tryCatch(fn).call(ctx, args);
    ret._popContext();
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.prototype._resolveFromSyncValue = function (value) {
    if (value === util.errorObj) {
        this._rejectCallback(value.e, false, true);
    } else {
        this._resolveCallback(value, true);
    }
};
};

},{"./util.js":38}],21:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var util = _dereq_("./util.js");
var async = _dereq_("./async.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function spreadAdapter(val, nodeback) {
    var promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    var ret =
        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

function successAdapter(val, nodeback) {
    var promise = this;
    var receiver = promise._boundValue();
    var ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}
function errorAdapter(reason, nodeback) {
    var promise = this;
    if (!reason) {
        var target = promise._target();
        var newReason = target._getCarriedStackTrace();
        newReason.cause = reason;
        reason = newReason;
    }
    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

Promise.prototype.asCallback =
Promise.prototype.nodeify = function (nodeback, options) {
    if (typeof nodeback == "function") {
        var adapter = successAdapter;
        if (options !== undefined && Object(options).spread) {
            adapter = spreadAdapter;
        }
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
    }
    return this;
};
};

},{"./async.js":2,"./util.js":38}],22:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, PromiseArray) {
var util = _dereq_("./util.js");
var async = _dereq_("./async.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

Promise.prototype.progressed = function (handler) {
    return this._then(undefined, undefined, handler, undefined, undefined);
};

Promise.prototype._progress = function (progressValue) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._target()._progressUnchecked(progressValue);

};

Promise.prototype._progressHandlerAt = function (index) {
    return index === 0
        ? this._progressHandler0
        : this[(index << 2) + index - 5 + 2];
};

Promise.prototype._doProgressWith = function (progression) {
    var progressValue = progression.value;
    var handler = progression.handler;
    var promise = progression.promise;
    var receiver = progression.receiver;

    var ret = tryCatch(handler).call(receiver, progressValue);
    if (ret === errorObj) {
        if (ret.e != null &&
            ret.e.name !== "StopProgressPropagation") {
            var trace = util.canAttachTrace(ret.e)
                ? ret.e : new Error(util.toString(ret.e));
            promise._attachExtraTrace(trace);
            promise._progress(ret.e);
        }
    } else if (ret instanceof Promise) {
        ret._then(promise._progress, null, null, promise, undefined);
    } else {
        promise._progress(ret);
    }
};


Promise.prototype._progressUnchecked = function (progressValue) {
    var len = this._length();
    var progress = this._progress;
    for (var i = 0; i < len; i++) {
        var handler = this._progressHandlerAt(i);
        var promise = this._promiseAt(i);
        if (!(promise instanceof Promise)) {
            var receiver = this._receiverAt(i);
            if (typeof handler === "function") {
                handler.call(receiver, progressValue, promise);
            } else if (receiver instanceof PromiseArray &&
                       !receiver._isResolved()) {
                receiver._promiseProgressed(progressValue, promise);
            }
            continue;
        }

        if (typeof handler === "function") {
            async.invoke(this._doProgressWith, this, {
                handler: handler,
                promise: promise,
                receiver: this._receiverAt(i),
                value: progressValue
            });
        } else {
            async.invoke(progress, promise, progressValue);
        }
    }
};
};

},{"./async.js":2,"./util.js":38}],23:[function(_dereq_,module,exports){
"use strict";
module.exports = function() {
var makeSelfResolutionError = function () {
    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
};
var reflect = function() {
    return new Promise.PromiseInspection(this._target());
};
var apiRejection = function(msg) {
    return Promise.reject(new TypeError(msg));
};

var util = _dereq_("./util.js");

var getDomain;
if (util.isNode) {
    getDomain = function() {
        var ret = process.domain;
        if (ret === undefined) ret = null;
        return ret;
    };
} else {
    getDomain = function() {
        return null;
    };
}
util.notEnumerableProp(Promise, "_getDomain", getDomain);

var UNDEFINED_BINDING = {};
var async = _dereq_("./async.js");
var errors = _dereq_("./errors.js");
var TypeError = Promise.TypeError = errors.TypeError;
Promise.RangeError = errors.RangeError;
Promise.CancellationError = errors.CancellationError;
Promise.TimeoutError = errors.TimeoutError;
Promise.OperationalError = errors.OperationalError;
Promise.RejectionError = errors.OperationalError;
Promise.AggregateError = errors.AggregateError;
var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {e: null};
var tryConvertToPromise = _dereq_("./thenables.js")(Promise, INTERNAL);
var PromiseArray =
    _dereq_("./promise_array.js")(Promise, INTERNAL,
                                    tryConvertToPromise, apiRejection);
var CapturedTrace = _dereq_("./captured_trace.js")();
var isDebugging = _dereq_("./debuggability.js")(Promise, CapturedTrace);
 /*jshint unused:false*/
var createContext =
    _dereq_("./context.js")(Promise, CapturedTrace, isDebugging);
var CatchFilter = _dereq_("./catch_filter.js")(NEXT_FILTER);
var PromiseResolver = _dereq_("./promise_resolver.js");
var nodebackForPromise = PromiseResolver._nodebackForPromise;
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
function Promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("the promise constructor requirebs a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
    }
    if (this.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
    }
    this._bitField = 0;
    this._fulfillmentHandler0 = undefined;
    this._rejectionHandler0 = undefined;
    this._progressHandler0 = undefined;
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._settledValue = undefined;
    if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (typeof item === "function") {
                catchInstances[j++] = item;
            } else {
                return Promise.reject(
                    new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
            }
        }
        catchInstances.length = j;
        fn = arguments[i];
        var catchFilter = new CatchFilter(catchInstances, fn, this);
        return this._then(undefined, catchFilter.doFilter, undefined,
            catchFilter, undefined);
    }
    return this._then(undefined, fn, undefined, undefined, undefined);
};

Promise.prototype.reflect = function () {
    return this._then(reflect, reflect, undefined, this, undefined);
};

Promise.prototype.then = function (didFulfill, didReject, didProgress) {
    if (isDebugging() && arguments.length > 0 &&
        typeof didFulfill !== "function" &&
        typeof didReject !== "function") {
        var msg = ".then() only accepts functions but was passed: " +
                util.classString(didFulfill);
        if (arguments.length > 1) {
            msg += ", " + util.classString(didReject);
        }
        this._warn(msg);
    }
    return this._then(didFulfill, didReject, didProgress,
        undefined, undefined);
};

Promise.prototype.done = function (didFulfill, didReject, didProgress) {
    var promise = this._then(didFulfill, didReject, didProgress,
        undefined, undefined);
    promise._setIsFinal();
};

Promise.prototype.spread = function (didFulfill, didReject) {
    return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
};

Promise.prototype.isCancellable = function () {
    return !this.isResolved() &&
        this._cancellable();
};

Promise.prototype.toJSON = function () {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: undefined,
        rejectionReason: undefined
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this.value();
        ret.isFulfilled = true;
    } else if (this.isRejected()) {
        ret.rejectionReason = this.reason();
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function () {
    return new PromiseArray(this).promise();
};

Promise.prototype.error = function (fn) {
    return this.caught(util.originatesFromRejection, fn);
};

Promise.is = function (val) {
    return val instanceof Promise;
};

Promise.fromNode = function(fn) {
    var ret = new Promise(INTERNAL);
    var result = tryCatch(fn)(nodebackForPromise(ret));
    if (result === errorObj) {
        ret._rejectCallback(result.e, true, true);
    }
    return ret;
};

Promise.all = function (promises) {
    return new PromiseArray(promises).promise();
};

Promise.defer = Promise.pending = function () {
    var promise = new Promise(INTERNAL);
    return new PromiseResolver(promise);
};

Promise.cast = function (obj) {
    var ret = tryConvertToPromise(obj);
    if (!(ret instanceof Promise)) {
        var val = ret;
        ret = new Promise(INTERNAL);
        ret._fulfillUnchecked(val);
    }
    return ret;
};

Promise.resolve = Promise.fulfilled = Promise.cast;

Promise.reject = Promise.rejected = function (reason) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._rejectCallback(reason, true);
    return ret;
};

Promise.setScheduler = function(fn) {
    if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    var prev = async._schedule;
    async._schedule = fn;
    return prev;
};

Promise.prototype._then = function (
    didFulfill,
    didReject,
    didProgress,
    receiver,
    internalData
) {
    var haveInternalData = internalData !== undefined;
    var ret = haveInternalData ? internalData : new Promise(INTERNAL);

    if (!haveInternalData) {
        ret._propagateFrom(this, 4 | 1);
        ret._captureStackTrace();
    }

    var target = this._target();
    if (target !== this) {
        if (receiver === undefined) receiver = this._boundTo;
        if (!haveInternalData) ret._setIsMigrated();
    }

    var callbackIndex = target._addCallbacks(didFulfill,
                                             didReject,
                                             didProgress,
                                             ret,
                                             receiver,
                                             getDomain());

    if (target._isResolved() && !target._isSettlePromisesQueued()) {
        async.invoke(
            target._settlePromiseAtPostResolution, target, callbackIndex);
    }

    return ret;
};

Promise.prototype._settlePromiseAtPostResolution = function (index) {
    if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
    this._settlePromiseAt(index);
};

Promise.prototype._length = function () {
    return this._bitField & 131071;
};

Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
    return (this._bitField & 939524096) > 0;
};

Promise.prototype._isFollowing = function () {
    return (this._bitField & 536870912) === 536870912;
};

Promise.prototype._setLength = function (len) {
    this._bitField = (this._bitField & -131072) |
        (len & 131071);
};

Promise.prototype._setFulfilled = function () {
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._setRejected = function () {
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._setFollowing = function () {
    this._bitField = this._bitField | 536870912;
};

Promise.prototype._setIsFinal = function () {
    this._bitField = this._bitField | 33554432;
};

Promise.prototype._isFinal = function () {
    return (this._bitField & 33554432) > 0;
};

Promise.prototype._cancellable = function () {
    return (this._bitField & 67108864) > 0;
};

Promise.prototype._setCancellable = function () {
    this._bitField = this._bitField | 67108864;
};

Promise.prototype._unsetCancellable = function () {
    this._bitField = this._bitField & (~67108864);
};

Promise.prototype._setIsMigrated = function () {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._unsetIsMigrated = function () {
    this._bitField = this._bitField & (~4194304);
};

Promise.prototype._isMigrated = function () {
    return (this._bitField & 4194304) > 0;
};

Promise.prototype._receiverAt = function (index) {
    var ret = index === 0
        ? this._receiver0
        : this[
            index * 5 - 5 + 4];
    if (ret === UNDEFINED_BINDING) {
        return undefined;
    } else if (ret === undefined && this._isBound()) {
        return this._boundValue();
    }
    return ret;
};

Promise.prototype._promiseAt = function (index) {
    return index === 0
        ? this._promise0
        : this[index * 5 - 5 + 3];
};

Promise.prototype._fulfillmentHandlerAt = function (index) {
    return index === 0
        ? this._fulfillmentHandler0
        : this[index * 5 - 5 + 0];
};

Promise.prototype._rejectionHandlerAt = function (index) {
    return index === 0
        ? this._rejectionHandler0
        : this[index * 5 - 5 + 1];
};

Promise.prototype._boundValue = function() {
    var ret = this._boundTo;
    if (ret !== undefined) {
        if (ret instanceof Promise) {
            if (ret.isFulfilled()) {
                return ret.value();
            } else {
                return undefined;
            }
        }
    }
    return ret;
};

Promise.prototype._migrateCallbacks = function (follower, index) {
    var fulfill = follower._fulfillmentHandlerAt(index);
    var reject = follower._rejectionHandlerAt(index);
    var progress = follower._progressHandlerAt(index);
    var promise = follower._promiseAt(index);
    var receiver = follower._receiverAt(index);
    if (promise instanceof Promise) promise._setIsMigrated();
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, progress, promise, receiver, null);
};

Promise.prototype._addCallbacks = function (
    fulfill,
    reject,
    progress,
    promise,
    receiver,
    domain
) {
    var index = this._length();

    if (index >= 131071 - 5) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        if (receiver !== undefined) this._receiver0 = receiver;
        if (typeof fulfill === "function" && !this._isCarryingStackTrace()) {
            this._fulfillmentHandler0 =
                domain === null ? fulfill : domain.bind(fulfill);
        }
        if (typeof reject === "function") {
            this._rejectionHandler0 =
                domain === null ? reject : domain.bind(reject);
        }
        if (typeof progress === "function") {
            this._progressHandler0 =
                domain === null ? progress : domain.bind(progress);
        }
    } else {
        var base = index * 5 - 5;
        this[base + 3] = promise;
        this[base + 4] = receiver;
        if (typeof fulfill === "function") {
            this[base + 0] =
                domain === null ? fulfill : domain.bind(fulfill);
        }
        if (typeof reject === "function") {
            this[base + 1] =
                domain === null ? reject : domain.bind(reject);
        }
        if (typeof progress === "function") {
            this[base + 2] =
                domain === null ? progress : domain.bind(progress);
        }
    }
    this._setLength(index + 1);
    return index;
};

Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
    var index = this._length();

    if (index >= 131071 - 5) {
        index = 0;
        this._setLength(0);
    }
    if (index === 0) {
        this._promise0 = promiseSlotValue;
        this._receiver0 = receiver;
    } else {
        var base = index * 5 - 5;
        this[base + 3] = promiseSlotValue;
        this[base + 4] = receiver;
    }
    this._setLength(index + 1);
};

Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
    this._setProxyHandlers(promiseArray, index);
};

Promise.prototype._resolveCallback = function(value, shouldBind) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    if (value === this)
        return this._rejectCallback(makeSelfResolutionError(), false, true);
    var maybePromise = tryConvertToPromise(value, this);
    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

    var propagationFlags = 1 | (shouldBind ? 4 : 0);
    this._propagateFrom(maybePromise, propagationFlags);
    var promise = maybePromise._target();
    if (promise._isPending()) {
        var len = this._length();
        for (var i = 0; i < len; ++i) {
            promise._migrateCallbacks(this, i);
        }
        this._setFollowing();
        this._setLength(0);
        this._setFollowee(promise);
    } else if (promise._isFulfilled()) {
        this._fulfillUnchecked(promise._value());
    } else {
        this._rejectUnchecked(promise._reason(),
            promise._getCarriedStackTrace());
    }
};

Promise.prototype._rejectCallback =
function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
    if (!shouldNotMarkOriginatingFromRejection) {
        util.markAsOriginatingFromRejection(reason);
    }
    var trace = util.ensureErrorObject(reason);
    var hasStack = trace === reason;
    this._attachExtraTrace(trace, synchronous ? hasStack : false);
    this._reject(reason, hasStack ? undefined : trace);
};

Promise.prototype._resolveFromResolver = function (resolver) {
    var promise = this;
    this._captureStackTrace();
    this._pushContext();
    var synchronous = true;
    var r = tryCatch(resolver)(function(value) {
        if (promise === null) return;
        promise._resolveCallback(value);
        promise = null;
    }, function (reason) {
        if (promise === null) return;
        promise._rejectCallback(reason, synchronous);
        promise = null;
    });
    synchronous = false;
    this._popContext();

    if (r !== undefined && r === errorObj && promise !== null) {
        promise._rejectCallback(r.e, true, true);
        promise = null;
    }
};

Promise.prototype._settlePromiseFromHandler = function (
    handler, receiver, value, promise
) {
    if (promise._isRejected()) return;
    promise._pushContext();
    var x;
    if (receiver === APPLY && !this._isRejected()) {
        x = tryCatch(handler).apply(this._boundValue(), value);
    } else {
        x = tryCatch(handler).call(receiver, value);
    }
    promise._popContext();

    if (x === errorObj || x === promise || x === NEXT_FILTER) {
        var err = x === promise ? makeSelfResolutionError() : x.e;
        promise._rejectCallback(err, false, true);
    } else {
        promise._resolveCallback(x);
    }
};

Promise.prototype._target = function() {
    var ret = this;
    while (ret._isFollowing()) ret = ret._followee();
    return ret;
};

Promise.prototype._followee = function() {
    return this._rejectionHandler0;
};

Promise.prototype._setFollowee = function(promise) {
    this._rejectionHandler0 = promise;
};

Promise.prototype._cleanValues = function () {
    if (this._cancellable()) {
        this._cancellationParent = undefined;
    }
};

Promise.prototype._propagateFrom = function (parent, flags) {
    if ((flags & 1) > 0 && parent._cancellable()) {
        this._setCancellable();
        this._cancellationParent = parent;
    }
    if ((flags & 4) > 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
};

Promise.prototype._fulfill = function (value) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._fulfillUnchecked(value);
};

Promise.prototype._reject = function (reason, carriedStackTrace) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._rejectUnchecked(reason, carriedStackTrace);
};

Promise.prototype._settlePromiseAt = function (index) {
    var promise = this._promiseAt(index);
    var isPromise = promise instanceof Promise;

    if (isPromise && promise._isMigrated()) {
        promise._unsetIsMigrated();
        return async.invoke(this._settlePromiseAt, this, index);
    }
    var handler = this._isFulfilled()
        ? this._fulfillmentHandlerAt(index)
        : this._rejectionHandlerAt(index);

    var carriedStackTrace =
        this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
    var value = this._settledValue;
    var receiver = this._receiverAt(index);
    this._clearCallbackDataAtIndex(index);

    if (typeof handler === "function") {
        if (!isPromise) {
            handler.call(receiver, value, promise);
        } else {
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (receiver instanceof PromiseArray) {
        if (!receiver._isResolved()) {
            if (this._isFulfilled()) {
                receiver._promiseFulfilled(value, promise);
            }
            else {
                receiver._promiseRejected(value, promise);
            }
        }
    } else if (isPromise) {
        if (this._isFulfilled()) {
            promise._fulfill(value);
        } else {
            promise._reject(value, carriedStackTrace);
        }
    }

    if (index >= 4 && (index & 31) === 4)
        async.invokeLater(this._setLength, this, 0);
};

Promise.prototype._clearCallbackDataAtIndex = function(index) {
    if (index === 0) {
        if (!this._isCarryingStackTrace()) {
            this._fulfillmentHandler0 = undefined;
        }
        this._rejectionHandler0 =
        this._progressHandler0 =
        this._receiver0 =
        this._promise0 = undefined;
    } else {
        var base = index * 5 - 5;
        this[base + 3] =
        this[base + 4] =
        this[base + 0] =
        this[base + 1] =
        this[base + 2] = undefined;
    }
};

Promise.prototype._isSettlePromisesQueued = function () {
    return (this._bitField &
            -1073741824) === -1073741824;
};

Promise.prototype._setSettlePromisesQueued = function () {
    this._bitField = this._bitField | -1073741824;
};

Promise.prototype._unsetSettlePromisesQueued = function () {
    this._bitField = this._bitField & (~-1073741824);
};

Promise.prototype._queueSettlePromises = function() {
    async.settlePromises(this);
    this._setSettlePromisesQueued();
};

Promise.prototype._fulfillUnchecked = function (value) {
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err, undefined);
    }
    this._setFulfilled();
    this._settledValue = value;
    this._cleanValues();

    if (this._length() > 0) {
        this._queueSettlePromises();
    }
};

Promise.prototype._rejectUncheckedCheckError = function (reason) {
    var trace = util.ensureErrorObject(reason);
    this._rejectUnchecked(reason, trace === reason ? undefined : trace);
};

Promise.prototype._rejectUnchecked = function (reason, trace) {
    if (reason === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err);
    }
    this._setRejected();
    this._settledValue = reason;
    this._cleanValues();

    if (this._isFinal()) {
        async.throwLater(function(e) {
            if ("stack" in e) {
                async.invokeFirst(
                    CapturedTrace.unhandledRejection, undefined, e);
            }
            throw e;
        }, trace === undefined ? reason : trace);
        return;
    }

    if (trace !== undefined && trace !== reason) {
        this._setCarriedStackTrace(trace);
    }

    if (this._length() > 0) {
        this._queueSettlePromises();
    } else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._settlePromises = function () {
    this._unsetSettlePromisesQueued();
    var len = this._length();
    for (var i = 0; i < len; i++) {
        this._settlePromiseAt(i);
    }
};

util.notEnumerableProp(Promise,
                       "_makeSelfResolutionError",
                       makeSelfResolutionError);

_dereq_("./progress.js")(Promise, PromiseArray);
_dereq_("./method.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_("./bind.js")(Promise, INTERNAL, tryConvertToPromise);
_dereq_("./finally.js")(Promise, NEXT_FILTER, tryConvertToPromise);
_dereq_("./direct_resolve.js")(Promise);
_dereq_("./synchronous_inspection.js")(Promise);
_dereq_("./join.js")(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
Promise.Promise = Promise;
_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
_dereq_('./cancel.js')(Promise);
_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
_dereq_('./nodeify.js')(Promise);
_dereq_('./call_get.js')(Promise);
_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
_dereq_('./settle.js')(Promise, PromiseArray);
_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
_dereq_('./promisify.js')(Promise, INTERNAL);
_dereq_('./any.js')(Promise);
_dereq_('./each.js')(Promise, INTERNAL);
_dereq_('./timers.js')(Promise, INTERNAL);
_dereq_('./filter.js')(Promise, INTERNAL);
                                                         
    util.toFastProperties(Promise);                                          
    util.toFastProperties(Promise.prototype);                                
    function fillTypes(value) {                                              
        var p = new Promise(INTERNAL);                                       
        p._fulfillmentHandler0 = value;                                      
        p._rejectionHandler0 = value;                                        
        p._progressHandler0 = value;                                         
        p._promise0 = value;                                                 
        p._receiver0 = value;                                                
        p._settledValue = value;                                             
    }                                                                        
    // Complete slack tracking, opt out of field-type tracking and           
    // stabilize map                                                         
    fillTypes({a: 1});                                                       
    fillTypes({b: 2});                                                       
    fillTypes({c: 3});                                                       
    fillTypes(1);                                                            
    fillTypes(function(){});                                                 
    fillTypes(undefined);                                                    
    fillTypes(false);                                                        
    fillTypes(new Promise(INTERNAL));                                        
    CapturedTrace.setBounds(async.firstLineError, util.lastLineError);       
    return Promise;                                                          

};

},{"./any.js":1,"./async.js":2,"./bind.js":3,"./call_get.js":5,"./cancel.js":6,"./captured_trace.js":7,"./catch_filter.js":8,"./context.js":9,"./debuggability.js":10,"./direct_resolve.js":11,"./each.js":12,"./errors.js":13,"./filter.js":15,"./finally.js":16,"./generators.js":17,"./join.js":18,"./map.js":19,"./method.js":20,"./nodeify.js":21,"./progress.js":22,"./promise_array.js":24,"./promise_resolver.js":25,"./promisify.js":26,"./props.js":27,"./race.js":29,"./reduce.js":30,"./settle.js":32,"./some.js":33,"./synchronous_inspection.js":34,"./thenables.js":35,"./timers.js":36,"./using.js":37,"./util.js":38}],24:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise,
    apiRejection) {
var util = _dereq_("./util.js");
var isArray = util.isArray;

function toResolutionValue(val) {
    switch(val) {
    case -2: return [];
    case -3: return {};
    }
}

function PromiseArray(values) {
    var promise = this._promise = new Promise(INTERNAL);
    var parent;
    if (values instanceof Promise) {
        parent = values;
        promise._propagateFrom(parent, 1 | 4);
    }
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(undefined, -2);
}
PromiseArray.prototype.length = function () {
    return this._length;
};

PromiseArray.prototype.promise = function () {
    return this._promise;
};

PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
    var values = tryConvertToPromise(this._values, this._promise);
    if (values instanceof Promise) {
        values = values._target();
        this._values = values;
        if (values._isFulfilled()) {
            values = values._value();
            if (!isArray(values)) {
                var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
                this.__hardReject__(err);
                return;
            }
        } else if (values._isPending()) {
            values._then(
                init,
                this._reject,
                undefined,
                this,
                resolveValueIfEmpty
           );
            return;
        } else {
            this._reject(values._reason());
            return;
        }
    } else if (!isArray(values)) {
        this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
        return;
    }

    if (values.length === 0) {
        if (resolveValueIfEmpty === -5) {
            this._resolveEmptyArray();
        }
        else {
            this._resolve(toResolutionValue(resolveValueIfEmpty));
        }
        return;
    }
    var len = this.getActualLength(values.length);
    this._length = len;
    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
    var promise = this._promise;
    for (var i = 0; i < len; ++i) {
        var isResolved = this._isResolved();
        var maybePromise = tryConvertToPromise(values[i], promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            if (isResolved) {
                maybePromise._ignoreRejections();
            } else if (maybePromise._isPending()) {
                maybePromise._proxyPromiseArray(this, i);
            } else if (maybePromise._isFulfilled()) {
                this._promiseFulfilled(maybePromise._value(), i);
            } else {
                this._promiseRejected(maybePromise._reason(), i);
            }
        } else if (!isResolved) {
            this._promiseFulfilled(maybePromise, i);
        }
    }
};

PromiseArray.prototype._isResolved = function () {
    return this._values === null;
};

PromiseArray.prototype._resolve = function (value) {
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype.__hardReject__ =
PromiseArray.prototype._reject = function (reason) {
    this._values = null;
    this._promise._rejectCallback(reason, false, true);
};

PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
    this._promise._progress({
        index: index,
        value: progressValue
    });
};


PromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
    }
};

PromiseArray.prototype._promiseRejected = function (reason, index) {
    this._totalResolved++;
    this._reject(reason);
};

PromiseArray.prototype.shouldCopyValues = function () {
    return true;
};

PromiseArray.prototype.getActualLength = function (len) {
    return len;
};

return PromiseArray;
};

},{"./util.js":38}],25:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util.js");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = _dereq_("./errors.js");
var TimeoutError = errors.TimeoutError;
var OperationalError = errors.OperationalError;
var haveGetters = util.haveGetters;
var es5 = _dereq_("./es5.js");

function isUntypedError(obj) {
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

var rErrorKey = /^(?:name|message|stack|cause)$/;
function wrapAsOperationalError(obj) {
    var ret;
    if (isUntypedError(obj)) {
        ret = new OperationalError(obj);
        ret.name = obj.name;
        ret.message = obj.message;
        ret.stack = obj.stack;
        var keys = es5.keys(obj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!rErrorKey.test(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    util.markAsOriginatingFromRejection(obj);
    return obj;
}

function nodebackForPromise(promise) {
    return function(err, value) {
        if (promise === null) return;

        if (err) {
            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        } else if (arguments.length > 2) {
            var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
            promise._fulfill(args);
        } else {
            promise._fulfill(value);
        }

        promise = null;
    };
}


var PromiseResolver;
if (!haveGetters) {
    PromiseResolver = function (promise) {
        this.promise = promise;
        this.asCallback = nodebackForPromise(promise);
        this.callback = this.asCallback;
    };
}
else {
    PromiseResolver = function (promise) {
        this.promise = promise;
    };
}
if (haveGetters) {
    var prop = {
        get: function() {
            return nodebackForPromise(this.promise);
        }
    };
    es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
    es5.defineProperty(PromiseResolver.prototype, "callback", prop);
}

PromiseResolver._nodebackForPromise = nodebackForPromise;

PromiseResolver.prototype.toString = function () {
    return "[object PromiseResolver]";
};

PromiseResolver.prototype.resolve =
PromiseResolver.prototype.fulfill = function (value) {
    if (!(this instanceof PromiseResolver)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
    }
    this.promise._resolveCallback(value);
};

PromiseResolver.prototype.reject = function (reason) {
    if (!(this instanceof PromiseResolver)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
    }
    this.promise._rejectCallback(reason);
};

PromiseResolver.prototype.progress = function (value) {
    if (!(this instanceof PromiseResolver)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
    }
    this.promise._progress(value);
};

PromiseResolver.prototype.cancel = function (err) {
    this.promise.cancel(err);
};

PromiseResolver.prototype.timeout = function () {
    this.reject(new TimeoutError("timeout"));
};

PromiseResolver.prototype.isResolved = function () {
    return this.promise.isResolved();
};

PromiseResolver.prototype.toJSON = function () {
    return this.promise.toJSON();
};

module.exports = PromiseResolver;

},{"./errors.js":13,"./es5.js":14,"./util.js":38}],26:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var THIS = {};
var util = _dereq_("./util.js");
var nodebackForPromise = _dereq_("./promise_resolver.js")
    ._nodebackForPromise;
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var TypeError = _dereq_("./errors").TypeError;
var defaultSuffix = "Async";
var defaultPromisified = {__isPromisified__: true};
var noCopyProps = [
    "arity",    "length",
    "name",
    "arguments",
    "caller",
    "callee",
    "prototype",
    "__isPromisified__"
];
var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

var defaultFilter = function(name) {
    return util.isIdentifier(name) &&
        name.charAt(0) !== "_" &&
        name !== "constructor";
};

function propsFilter(key) {
    return !noCopyPropsPattern.test(key);
}

function isPromisified(fn) {
    try {
        return fn.__isPromisified__ === true;
    }
    catch (e) {
        return false;
    }
}

function hasPromisified(obj, key, suffix) {
    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                            defaultPromisified);
    return val ? isPromisified(val) : false;
}
function checkValid(ret, suffix, suffixRegexp) {
    for (var i = 0; i < ret.length; i += 2) {
        var key = ret[i];
        if (suffixRegexp.test(key)) {
            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
            for (var j = 0; j < ret.length; j += 2) {
                if (ret[j] === keyWithoutAsyncSuffix) {
                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a"
                        .replace("%s", suffix));
                }
            }
        }
    }
}

function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
    var keys = util.inheritedDataKeys(obj);
    var ret = [];
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var value = obj[key];
        var passesDefaultFilter = filter === defaultFilter
            ? true : defaultFilter(key, value, obj);
        if (typeof value === "function" &&
            !isPromisified(value) &&
            !hasPromisified(obj, key, suffix) &&
            filter(key, value, obj, passesDefaultFilter)) {
            ret.push(key, value);
        }
    }
    checkValid(ret, suffix, suffixRegexp);
    return ret;
}

var escapeIdentRegex = function(str) {
    return str.replace(/([$])/, "\\$");
};

var makeNodePromisifiedEval;
if (!true) {
var switchCaseArgumentOrder = function(likelyArgumentCount) {
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 3);
    for(var i = likelyArgumentCount - 1; i >= min; --i) {
        ret.push(i);
    }
    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
        ret.push(i);
    }
    return ret;
};

var argumentSequence = function(argumentCount) {
    return util.filledRange(argumentCount, "_arg", "");
};

var parameterDeclaration = function(parameterCount) {
    return util.filledRange(
        Math.max(parameterCount, 3), "_arg", "");
};

var parameterCount = function(fn) {
    if (typeof fn.length === "number") {
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
    }
    return 0;
};

makeNodePromisifiedEval =
function(callback, receiver, originalName, fn) {
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

    function generateCallForArgumentCount(count) {
        var args = argumentSequence(count).join(", ");
        var comma = count > 0 ? ", " : "";
        var ret;
        if (shouldProxyThis) {
            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
        } else {
            ret = receiver === undefined
                ? "ret = callback({{args}}, nodeback); break;\n"
                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
        }
        return ret.replace("{{args}}", args).replace(", ", comma);
    }

    function generateArgumentSwitchCase() {
        var ret = "";
        for (var i = 0; i < argumentOrder.length; ++i) {
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
        }

        ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                ? "ret = callback.apply(this, args);\n"
                                : "ret = callback.apply(receiver, args);\n"));
        return ret;
    }

    var getFunctionCode = typeof callback === "string"
                                ? ("this != null ? this['"+callback+"'] : fn")
                                : "fn";

    return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "notEnumerableProp",
                        "INTERNAL","'use strict';                            \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise);                      \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
        "
        .replace("Parameters", parameterDeclaration(newParameterCount))
        .replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
        .replace("[GetFunctionCode]", getFunctionCode))(
            Promise,
            fn,
            receiver,
            withAppended,
            maybeWrapAsError,
            nodebackForPromise,
            util.tryCatch,
            util.errorObj,
            util.notEnumerableProp,
            INTERNAL
        );
};
}

function makeNodePromisifiedClosure(callback, receiver, _, fn) {
    var defaultThis = (function() {return this;})();
    var method = callback;
    if (typeof method === "string") {
        callback = fn;
    }
    function promisified() {
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        var promise = new Promise(INTERNAL);
        promise._captureStackTrace();
        var cb = typeof method === "string" && this !== defaultThis
            ? this[method] : callback;
        var fn = nodebackForPromise(promise);
        try {
            cb.apply(_receiver, withAppended(arguments, fn));
        } catch(e) {
            promise._rejectCallback(maybeWrapAsError(e), true, true);
        }
        return promise;
    }
    util.notEnumerableProp(promisified, "__isPromisified__", true);
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function promisifyAll(obj, suffix, filter, promisifier) {
    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
    var methods =
        promisifiableMethods(obj, suffix, suffixRegexp, filter);

    for (var i = 0, len = methods.length; i < len; i+= 2) {
        var key = methods[i];
        var fn = methods[i+1];
        var promisifiedKey = key + suffix;
        if (promisifier === makeNodePromisified) {
            obj[promisifiedKey] =
                makeNodePromisified(key, THIS, key, fn, suffix);
        } else {
            var promisified = promisifier(fn, function() {
                return makeNodePromisified(key, THIS, key, fn, suffix);
            });
            util.notEnumerableProp(promisified, "__isPromisified__", true);
            obj[promisifiedKey] = promisified;
        }
    }
    util.toFastProperties(obj);
    return obj;
}

function promisify(callback, receiver) {
    return makeNodePromisified(callback, receiver, undefined, callback);
}

Promise.promisify = function (fn, receiver) {
    if (typeof fn !== "function") {
        throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    }
    if (isPromisified(fn)) {
        return fn;
    }
    var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
    util.copyDescriptors(fn, ret, propsFilter);
    return ret;
};

Promise.promisifyAll = function (target, options) {
    if (typeof target !== "function" && typeof target !== "object") {
        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
    }
    options = Object(options);
    var suffix = options.suffix;
    if (typeof suffix !== "string") suffix = defaultSuffix;
    var filter = options.filter;
    if (typeof filter !== "function") filter = defaultFilter;
    var promisifier = options.promisifier;
    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

    if (!util.isIdentifier(suffix)) {
        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
    }

    var keys = util.inheritedDataKeys(target);
    for (var i = 0; i < keys.length; ++i) {
        var value = target[keys[i]];
        if (keys[i] !== "constructor" &&
            util.isClass(value)) {
            promisifyAll(value.prototype, suffix, filter, promisifier);
            promisifyAll(value, suffix, filter, promisifier);
        }
    }

    return promisifyAll(target, suffix, filter, promisifier);
};
};


},{"./errors":13,"./promise_resolver.js":25,"./util.js":38}],27:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util.js");
var isObject = util.isObject;
var es5 = _dereq_("./es5.js");

function PropertiesPromiseArray(obj) {
    var keys = es5.keys(obj);
    var len = keys.length;
    var values = new Array(len * 2);
    for (var i = 0; i < len; ++i) {
        var key = keys[i];
        values[i] = obj[key];
        values[i + len] = key;
    }
    this.constructor$(values);
}
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () {
    this._init$(undefined, -3) ;
};

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        var val = {};
        var keyOffset = this.length();
        for (var i = 0, len = this.length(); i < len; ++i) {
            val[this._values[i + keyOffset]] = this._values[i];
        }
        this._resolve(val);
    }
};

PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
    this._promise._progress({
        key: this._values[index + this.length()],
        value: value
    });
};

PropertiesPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

PropertiesPromiseArray.prototype.getActualLength = function (len) {
    return len >> 1;
};

function props(promises) {
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) {
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
    } else if (castValue instanceof Promise) {
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
    } else {
        ret = new PropertiesPromiseArray(castValue).promise();
    }

    if (castValue instanceof Promise) {
        ret._propagateFrom(castValue, 4);
    }
    return ret;
}

Promise.prototype.props = function () {
    return props(this);
};

Promise.props = function (promises) {
    return props(promises);
};
};

},{"./es5.js":14,"./util.js":38}],28:[function(_dereq_,module,exports){
"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function Queue(capacity) {
    this._capacity = capacity;
    this._length = 0;
    this._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) {
    return this._capacity < size;
};

Queue.prototype._pushOne = function (arg) {
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype._unshiftOne = function(value) {
    var capacity = this._capacity;
    this._checkCapacity(this.length() + 1);
    var front = this._front;
    var i = (((( front - 1 ) &
                    ( capacity - 1) ) ^ capacity ) - capacity );
    this[i] = value;
    this._front = i;
    this._length = this.length() + 1;
};

Queue.prototype.unshift = function(fn, receiver, arg) {
    this._unshiftOne(arg);
    this._unshiftOne(receiver);
    this._unshiftOne(fn);
};

Queue.prototype.push = function (fn, receiver, arg) {
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) {
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
    }
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function () {
    var front = this._front,
        ret = this[front];

    this[front] = undefined;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function () {
    return this._length;
};

Queue.prototype._checkCapacity = function (size) {
    if (this._capacity < size) {
        this._resizeTo(this._capacity << 1);
    }
};

Queue.prototype._resizeTo = function (capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
};

module.exports = Queue;

},{}],29:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var isArray = _dereq_("./util.js").isArray;

var raceLater = function (promise) {
    return promise.then(function(array) {
        return race(array, promise);
    });
};

function race(promises, parent) {
    var maybePromise = tryConvertToPromise(promises);

    if (maybePromise instanceof Promise) {
        return raceLater(maybePromise);
    } else if (!isArray(promises)) {
        return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
    }

    var ret = new Promise(INTERNAL);
    if (parent !== undefined) {
        ret._propagateFrom(parent, 4 | 1);
    }
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) {
        var val = promises[i];

        if (val === undefined && !(i in promises)) {
            continue;
        }

        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
    }
    return ret;
}

Promise.race = function (promises) {
    return race(promises, undefined);
};

Promise.prototype.race = function () {
    return race(this, undefined);
};

};

},{"./util.js":38}],30:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL) {
var getDomain = Promise._getDomain;
var async = _dereq_("./async.js");
var util = _dereq_("./util.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
function ReductionPromiseArray(promises, fn, accum, _each) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    this._preservedValues = _each === INTERNAL ? [] : null;
    this._zerothIsAccum = (accum === undefined);
    this._gotAccum = false;
    this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
    this._valuesPhase = undefined;
    var maybePromise = tryConvertToPromise(accum, this._promise);
    var rejected = false;
    var isPromise = maybePromise instanceof Promise;
    if (isPromise) {
        maybePromise = maybePromise._target();
        if (maybePromise._isPending()) {
            maybePromise._proxyPromiseArray(this, -1);
        } else if (maybePromise._isFulfilled()) {
            accum = maybePromise._value();
            this._gotAccum = true;
        } else {
            this._reject(maybePromise._reason());
            rejected = true;
        }
    }
    if (!(isPromise || this._zerothIsAccum)) this._gotAccum = true;
    var domain = getDomain();
    this._callback = domain === null ? fn : domain.bind(fn);
    this._accum = accum;
    if (!rejected) async.invoke(init, this, undefined);
}
function init() {
    this._init$(undefined, -5);
}
util.inherits(ReductionPromiseArray, PromiseArray);

ReductionPromiseArray.prototype._init = function () {};

ReductionPromiseArray.prototype._resolveEmptyArray = function () {
    if (this._gotAccum || this._zerothIsAccum) {
        this._resolve(this._preservedValues !== null
                        ? [] : this._accum);
    }
};

ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    values[index] = value;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var isEach = preservedValues !== null;
    var gotAccum = this._gotAccum;
    var valuesPhase = this._valuesPhase;
    var valuesPhaseIndex;
    if (!valuesPhase) {
        valuesPhase = this._valuesPhase = new Array(length);
        for (valuesPhaseIndex=0; valuesPhaseIndex<length; ++valuesPhaseIndex) {
            valuesPhase[valuesPhaseIndex] = 0;
        }
    }
    valuesPhaseIndex = valuesPhase[index];

    if (index === 0 && this._zerothIsAccum) {
        this._accum = value;
        this._gotAccum = gotAccum = true;
        valuesPhase[index] = ((valuesPhaseIndex === 0)
            ? 1 : 2);
    } else if (index === -1) {
        this._accum = value;
        this._gotAccum = gotAccum = true;
    } else {
        if (valuesPhaseIndex === 0) {
            valuesPhase[index] = 1;
        } else {
            valuesPhase[index] = 2;
            this._accum = value;
        }
    }
    if (!gotAccum) return;

    var callback = this._callback;
    var receiver = this._promise._boundValue();
    var ret;

    for (var i = this._reducingIndex; i < length; ++i) {
        valuesPhaseIndex = valuesPhase[i];
        if (valuesPhaseIndex === 2) {
            this._reducingIndex = i + 1;
            continue;
        }
        if (valuesPhaseIndex !== 1) return;
        value = values[i];
        this._promise._pushContext();
        if (isEach) {
            preservedValues.push(value);
            ret = tryCatch(callback).call(receiver, value, i, length);
        }
        else {
            ret = tryCatch(callback)
                .call(receiver, this._accum, value, i, length);
        }
        this._promise._popContext();

        if (ret === errorObj) return this._reject(ret.e);

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            if (maybePromise._isPending()) {
                valuesPhase[i] = 4;
                return maybePromise._proxyPromiseArray(this, i);
            } else if (maybePromise._isFulfilled()) {
                ret = maybePromise._value();
            } else {
                return this._reject(maybePromise._reason());
            }
        }

        this._reducingIndex = i + 1;
        this._accum = ret;
    }

    this._resolve(isEach ? preservedValues : this._accum);
};

function reduce(promises, fn, initialValue, _each) {
    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
    return array.promise();
}

Promise.prototype.reduce = function (fn, initialValue) {
    return reduce(this, fn, initialValue, null);
};

Promise.reduce = function (promises, fn, initialValue, _each) {
    return reduce(promises, fn, initialValue, _each);
};
};

},{"./async.js":2,"./util.js":38}],31:[function(_dereq_,module,exports){
"use strict";
var schedule;
var util = _dereq_("./util");
var noAsyncScheduler = function() {
    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
};
if (util.isNode && typeof MutationObserver === "undefined") {
    var GlobalSetImmediate = global.setImmediate;
    var ProcessNextTick = process.nextTick;
    schedule = util.isRecentNode
                ? function(fn) { GlobalSetImmediate.call(global, fn); }
                : function(fn) { ProcessNextTick.call(process, fn); };
} else if ((typeof MutationObserver !== "undefined") &&
          !(typeof window !== "undefined" &&
            window.navigator &&
            window.navigator.standalone)) {
    schedule = function(fn) {
        var div = document.createElement("div");
        var observer = new MutationObserver(fn);
        observer.observe(div, {attributes: true});
        return function() { div.classList.toggle("foo"); };
    };
    schedule.isStatic = true;
} else if (typeof setImmediate !== "undefined") {
    schedule = function (fn) {
        setImmediate(fn);
    };
} else if (typeof setTimeout !== "undefined") {
    schedule = function (fn) {
        setTimeout(fn, 0);
    };
} else {
    schedule = noAsyncScheduler;
}
module.exports = schedule;

},{"./util":38}],32:[function(_dereq_,module,exports){
"use strict";
module.exports =
    function(Promise, PromiseArray) {
var PromiseInspection = Promise.PromiseInspection;
var util = _dereq_("./util.js");

function SettledPromiseArray(values) {
    this.constructor$(values);
}
util.inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
    }
};

SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var ret = new PromiseInspection();
    ret._bitField = 268435456;
    ret._settledValue = value;
    this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
    var ret = new PromiseInspection();
    ret._bitField = 134217728;
    ret._settledValue = reason;
    this._promiseResolved(index, ret);
};

Promise.settle = function (promises) {
    return new SettledPromiseArray(promises).promise();
};

Promise.prototype.settle = function () {
    return new SettledPromiseArray(this).promise();
};
};

},{"./util.js":38}],33:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) {
var util = _dereq_("./util.js");
var RangeError = _dereq_("./errors.js").RangeError;
var AggregateError = _dereq_("./errors.js").AggregateError;
var isArray = util.isArray;


function SomePromiseArray(values) {
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () {
    if (!this._initialized) {
        return;
    }
    if (this._howMany === 0) {
        this._resolve([]);
        return;
    }
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) {
        this._reject(this._getRangeError(this.length()));
    }
};

SomePromiseArray.prototype.init = function () {
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function () {
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () {
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) {
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) {
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) {
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) {
            this._resolve(this._values[0]);
        } else {
            this._resolve(this._values);
        }
    }

};
SomePromiseArray.prototype._promiseRejected = function (reason) {
    this._addRejected(reason);
    if (this.howMany() > this._canPossiblyFulfill()) {
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) {
            e.push(this._values[i]);
        }
        this._reject(e);
    }
};

SomePromiseArray.prototype._fulfilled = function () {
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function () {
    return this._values.length - this.length();
};

SomePromiseArray.prototype._addRejected = function (reason) {
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) {
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () {
    return this.length() - this._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) {
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () {
    this._reject(this._getRangeError(0));
};

function some(promises, howMany) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
    }
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) {
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) {
    return some(this, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};

},{"./errors.js":13,"./util.js":38}],34:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
function PromiseInspection(promise) {
    if (promise !== undefined) {
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValue = promise._settledValue;
    }
    else {
        this._bitField = 0;
        this._settledValue = undefined;
    }
}

PromiseInspection.prototype.value = function () {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
    }
    return this._settledValue;
};

PromiseInspection.prototype.error =
PromiseInspection.prototype.reason = function () {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
    }
    return this._settledValue;
};

PromiseInspection.prototype.isFulfilled =
Promise.prototype._isFulfilled = function () {
    return (this._bitField & 268435456) > 0;
};

PromiseInspection.prototype.isRejected =
Promise.prototype._isRejected = function () {
    return (this._bitField & 134217728) > 0;
};

PromiseInspection.prototype.isPending =
Promise.prototype._isPending = function () {
    return (this._bitField & 402653184) === 0;
};

PromiseInspection.prototype.isResolved =
Promise.prototype._isResolved = function () {
    return (this._bitField & 402653184) > 0;
};

Promise.prototype.isPending = function() {
    return this._target()._isPending();
};

Promise.prototype.isRejected = function() {
    return this._target()._isRejected();
};

Promise.prototype.isFulfilled = function() {
    return this._target()._isFulfilled();
};

Promise.prototype.isResolved = function() {
    return this._target()._isResolved();
};

Promise.prototype._value = function() {
    return this._settledValue;
};

Promise.prototype._reason = function() {
    this._unsetRejectionIsUnhandled();
    return this._settledValue;
};

Promise.prototype.value = function() {
    var target = this._target();
    if (!target.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
    }
    return target._settledValue;
};

Promise.prototype.reason = function() {
    var target = this._target();
    if (!target.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
    }
    target._unsetRejectionIsUnhandled();
    return target._settledValue;
};


Promise.PromiseInspection = PromiseInspection;
};

},{}],35:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util.js");
var errorObj = util.errorObj;
var isObject = util.isObject;

function tryConvertToPromise(obj, context) {
    if (isObject(obj)) {
        if (obj instanceof Promise) {
            return obj;
        }
        else if (isAnyBluebirdPromise(obj)) {
            var ret = new Promise(INTERNAL);
            obj._then(
                ret._fulfillUnchecked,
                ret._rejectUncheckedCheckError,
                ret._progressUnchecked,
                ret,
                null
            );
            return ret;
        }
        var then = util.tryCatch(getThen)(obj);
        if (then === errorObj) {
            if (context) context._pushContext();
            var ret = Promise.reject(then.e);
            if (context) context._popContext();
            return ret;
        } else if (typeof then === "function") {
            return doThenable(obj, then, context);
        }
    }
    return obj;
}

function getThen(obj) {
    return obj.then;
}

var hasProp = {}.hasOwnProperty;
function isAnyBluebirdPromise(obj) {
    return hasProp.call(obj, "_promise0");
}

function doThenable(x, then, context) {
    var promise = new Promise(INTERNAL);
    var ret = promise;
    if (context) context._pushContext();
    promise._captureStackTrace();
    if (context) context._popContext();
    var synchronous = true;
    var result = util.tryCatch(then).call(x,
                                        resolveFromThenable,
                                        rejectFromThenable,
                                        progressFromThenable);
    synchronous = false;
    if (promise && result === errorObj) {
        promise._rejectCallback(result.e, true, true);
        promise = null;
    }

    function resolveFromThenable(value) {
        if (!promise) return;
        promise._resolveCallback(value);
        promise = null;
    }

    function rejectFromThenable(reason) {
        if (!promise) return;
        promise._rejectCallback(reason, synchronous, true);
        promise = null;
    }

    function progressFromThenable(value) {
        if (!promise) return;
        if (typeof promise._progress === "function") {
            promise._progress(value);
        }
    }
    return ret;
}

return tryConvertToPromise;
};

},{"./util.js":38}],36:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util.js");
var TimeoutError = Promise.TimeoutError;

var afterTimeout = function (promise, message) {
    if (!promise.isPending()) return;
    
    var err;
    if(!util.isPrimitive(message) && (message instanceof Error)) {
        err = message;
    } else {
        if (typeof message !== "string") {
            message = "operation timed out";
        }
        err = new TimeoutError(message);
    }
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._cancel(err);
};

var afterValue = function(value) { return delay(+this).thenReturn(value); };
var delay = Promise.delay = function (value, ms) {
    if (ms === undefined) {
        ms = value;
        value = undefined;
        var ret = new Promise(INTERNAL);
        setTimeout(function() { ret._fulfill(); }, ms);
        return ret;
    }
    ms = +ms;
    return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
};

Promise.prototype.delay = function (ms) {
    return delay(this, ms);
};

function successClear(value) {
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    return value;
}

function failureClear(reason) {
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    throw reason;
}

Promise.prototype.timeout = function (ms, message) {
    ms = +ms;
    var ret = this.then().cancellable();
    ret._cancellationParent = this;
    var handle = setTimeout(function timeoutTimeout() {
        afterTimeout(ret, message);
    }, ms);
    return ret._then(successClear, failureClear, undefined, handle, undefined);
};

};

},{"./util.js":38}],37:[function(_dereq_,module,exports){
"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext) {
    var TypeError = _dereq_("./errors.js").TypeError;
    var inherits = _dereq_("./util.js").inherits;
    var PromiseInspection = Promise.PromiseInspection;

    function inspectionMapper(inspections) {
        var len = inspections.length;
        for (var i = 0; i < len; ++i) {
            var inspection = inspections[i];
            if (inspection.isRejected()) {
                return Promise.reject(inspection.error());
            }
            inspections[i] = inspection._settledValue;
        }
        return inspections;
    }

    function thrower(e) {
        setTimeout(function(){throw e;}, 0);
    }

    function castPreservingDisposable(thenable) {
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) {
            maybePromise._setDisposable(thenable._getDisposer());
        }
        return maybePromise;
    }
    function dispose(resources, inspection) {
        var i = 0;
        var len = resources.length;
        var ret = Promise.defer();
        function iterator() {
            if (i >= len) return ret.resolve();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) {
                try {
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
                } catch (e) {
                    return thrower(e);
                }
                if (maybePromise instanceof Promise) {
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
                }
            }
            iterator();
        }
        iterator();
        return ret.promise;
    }

    function disposerSuccess(value) {
        var inspection = new PromiseInspection();
        inspection._settledValue = value;
        inspection._bitField = 268435456;
        return dispose(this, inspection).thenReturn(value);
    }

    function disposerFail(reason) {
        var inspection = new PromiseInspection();
        inspection._settledValue = reason;
        inspection._bitField = 134217728;
        return dispose(this, inspection).thenThrow(reason);
    }

    function Disposer(data, promise, context) {
        this._data = data;
        this._promise = promise;
        this._context = context;
    }

    Disposer.prototype.data = function () {
        return this._data;
    };

    Disposer.prototype.promise = function () {
        return this._promise;
    };

    Disposer.prototype.resource = function () {
        if (this.promise().isFulfilled()) {
            return this.promise().value();
        }
        return null;
    };

    Disposer.prototype.tryDispose = function(inspection) {
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== null
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
    };

    Disposer.isDisposer = function (d) {
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
    };

    function FunctionDisposer(fn, promise, context) {
        this.constructor$(fn, promise, context);
    }
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
        var fn = this.data();
        return fn.call(resource, resource, inspection);
    };

    function maybeUnwrapDisposer(value) {
        if (Disposer.isDisposer(value)) {
            this.resources[this.index]._setDisposable(value);
            return value.promise();
        }
        return value;
    }

    Promise.using = function () {
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

        var input;
        var spreadArgs = true;
        if (len === 2 && Array.isArray(arguments[0])) {
            input = arguments[0];
            len = input.length;
            spreadArgs = false;
        } else {
            input = arguments;
            len--;
        }
        var resources = new Array(len);
        for (var i = 0; i < len; ++i) {
            var resource = input[i];
            if (Disposer.isDisposer(resource)) {
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
            } else {
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) {
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, {
                            resources: resources,
                            index: i
                    }, undefined);
                }
            }
            resources[i] = resource;
        }

        var promise = Promise.settle(resources)
            .then(inspectionMapper)
            .then(function(vals) {
                promise._pushContext();
                var ret;
                try {
                    ret = spreadArgs
                        ? fn.apply(undefined, vals) : fn.call(undefined,  vals);
                } finally {
                    promise._popContext();
                }
                return ret;
            })
            ._then(
                disposerSuccess, disposerFail, undefined, resources, undefined);
        resources.promise = promise;
        return promise;
    };

    Promise.prototype._setDisposable = function (disposer) {
        this._bitField = this._bitField | 262144;
        this._disposer = disposer;
    };

    Promise.prototype._isDisposable = function () {
        return (this._bitField & 262144) > 0;
    };

    Promise.prototype._getDisposer = function () {
        return this._disposer;
    };

    Promise.prototype._unsetDisposable = function () {
        this._bitField = this._bitField & (~262144);
        this._disposer = undefined;
    };

    Promise.prototype.disposer = function (fn) {
        if (typeof fn === "function") {
            return new FunctionDisposer(fn, this, createContext());
        }
        throw new TypeError();
    };

};

},{"./errors.js":13,"./util.js":38}],38:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5.js");
var canEvaluate = typeof navigator == "undefined";
var haveGetters = (function(){
    try {
        var o = {};
        es5.defineProperty(o, "f", {
            get: function () {
                return 3;
            }
        });
        return o.f === 3;
    }
    catch (e) {
        return false;
    }

})();

var errorObj = {e: {}};
var tryCatchTarget;
function tryCatcher() {
    try {
        var target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

var inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};


function isPrimitive(val) {
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) {
    return !isPrimitive(value);
}

function maybeWrapAsError(maybeError) {
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(safeToString(maybeError));
}

function withAppended(target, appendee) {
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) {
        ret[i] = target[i];
    }
    ret[i] = appendee;
    return ret;
}

function getDataPropertyOrDefault(obj, key, defaultValue) {
    if (es5.isES5) {
        var desc = Object.getOwnPropertyDescriptor(obj, key);

        if (desc != null) {
            return desc.get == null && desc.set == null
                    ? desc.value
                    : defaultValue;
        }
    } else {
        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
    }
}

function notEnumerableProp(obj, name, value) {
    if (isPrimitive(obj)) return obj;
    var descriptor = {
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
    };
    es5.defineProperty(obj, name, descriptor);
    return obj;
}

function thrower(r) {
    throw r;
}

var inheritedDataKeys = (function() {
    var excludedPrototypes = [
        Array.prototype,
        Object.prototype,
        Function.prototype
    ];

    var isExcludedProto = function(val) {
        for (var i = 0; i < excludedPrototypes.length; ++i) {
            if (excludedPrototypes[i] === val) {
                return true;
            }
        }
        return false;
    };

    if (es5.isES5) {
        var getKeys = Object.getOwnPropertyNames;
        return function(obj) {
            var ret = [];
            var visitedKeys = Object.create(null);
            while (obj != null && !isExcludedProto(obj)) {
                var keys;
                try {
                    keys = getKeys(obj);
                } catch (e) {
                    return ret;
                }
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key);
                    }
                }
                obj = es5.getPrototypeOf(obj);
            }
            return ret;
        };
    } else {
        var hasProp = {}.hasOwnProperty;
        return function(obj) {
            if (isExcludedProto(obj)) return [];
            var ret = [];

            /*jshint forin:false */
            enumeration: for (var key in obj) {
                if (hasProp.call(obj, key)) {
                    ret.push(key);
                } else {
                    for (var i = 0; i < excludedPrototypes.length; ++i) {
                        if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration;
                        }
                    }
                    ret.push(key);
                }
            }
            return ret;
        };
    }

})();

var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
function isClass(fn) {
    try {
        if (typeof fn === "function") {
            var keys = es5.names(fn.prototype);

            var hasMethods = es5.isES5 && keys.length > 1;
            var hasMethodsOtherThanConstructor = keys.length > 0 &&
                !(keys.length === 1 && keys[0] === "constructor");
            var hasThisAssignmentAndStaticMethods =
                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

            if (hasMethods || hasMethodsOtherThanConstructor ||
                hasThisAssignmentAndStaticMethods) {
                return true;
            }
        }
        return false;
    } catch (e) {
        return false;
    }
}

function toFastProperties(obj) {
    /*jshint -W027,-W055,-W031*/
    function f() {}
    f.prototype = obj;
    var l = 8;
    while (l--) new f();
    return obj;
    eval(obj);
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function isIdentifier(str) {
    return rident.test(str);
}

function filledRange(count, prefix, suffix) {
    var ret = new Array(count);
    for(var i = 0; i < count; ++i) {
        ret[i] = prefix + i + suffix;
    }
    return ret;
}

function safeToString(obj) {
    try {
        return obj + "";
    } catch (e) {
        return "[no string representation]";
    }
}

function markAsOriginatingFromRejection(e) {
    try {
        notEnumerableProp(e, "isOperational", true);
    }
    catch(ignore) {}
}

function originatesFromRejection(e) {
    if (e == null) return false;
    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
        e["isOperational"] === true);
}

function canAttachTrace(obj) {
    return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
}

var ensureErrorObject = (function() {
    if (!("stack" in new Error())) {
        return function(value) {
            if (canAttachTrace(value)) return value;
            try {throw new Error(safeToString(value));}
            catch(err) {return err;}
        };
    } else {
        return function(value) {
            if (canAttachTrace(value)) return value;
            return new Error(safeToString(value));
        };
    }
})();

function classString(obj) {
    return {}.toString.call(obj);
}

function copyDescriptors(from, to, filter) {
    var keys = es5.names(from);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (filter(key)) {
            try {
                es5.defineProperty(to, key, es5.getDescriptor(from, key));
            } catch (ignore) {}
        }
    }
}

var ret = {
    isClass: isClass,
    isIdentifier: isIdentifier,
    inheritedDataKeys: inheritedDataKeys,
    getDataPropertyOrDefault: getDataPropertyOrDefault,
    thrower: thrower,
    isArray: es5.isArray,
    haveGetters: haveGetters,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    canEvaluate: canEvaluate,
    errorObj: errorObj,
    tryCatch: tryCatch,
    inherits: inherits,
    withAppended: withAppended,
    maybeWrapAsError: maybeWrapAsError,
    toFastProperties: toFastProperties,
    filledRange: filledRange,
    toString: safeToString,
    canAttachTrace: canAttachTrace,
    ensureErrorObject: ensureErrorObject,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    classString: classString,
    copyDescriptors: copyDescriptors,
    hasDevTools: typeof chrome !== "undefined" && chrome &&
                 typeof chrome.loadTimes === "function",
    isNode: typeof process !== "undefined" &&
        classString(process).toLowerCase() === "[object process]"
};
ret.isRecentNode = ret.isNode && (function() {
    var version = process.versions.node.split(".").map(Number);
    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
})();

if (ret.isNode) ret.toFastProperties(process);

try {throw new Error(); } catch (e) {ret.lastLineError = e;}
module.exports = ret;

},{"./es5.js":14}]},{},[4])(4)
});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
},{}],5:[function(requireb,module,exports){

},{}],6:[function(requireb,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"dup":5}],7:[function(requireb,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = requireb('base64-js')
var ieee754 = requireb('ieee754')
var isArray = requireb('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

},{"base64-js":3,"ieee754":90,"isarray":8}],8:[function(requireb,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],9:[function(requireb,module,exports){
module.exports = requireb('./lib/clean');

},{"./lib/clean":10}],10:[function(requireb,module,exports){
/**
 * Clean-css - https://github.com/jakubpawlowicz/clean-css
 * Released under the terms of MIT license
 *
 * Copyright (C) 2014 JakubPawlowicz.com
 */

var ImportInliner = requireb('./imports/inliner');
var UrlRebase = requireb('./images/url-rebase');
var SelectorsOptimizer = requireb('./selectors/optimizer');
var Stringifier = requireb('./selectors/stringifier');
var SourceMapStringifier = requireb('./selectors/source-map-stringifier');

var CommentsProcessor = requireb('./text/comments-processor');
var ExpressionsProcessor = requireb('./text/expressions-processor');
var FreeTextProcessor = requireb('./text/free-text-processor');
var UrlsProcessor = requireb('./text/urls-processor');

var Compatibility = requireb('./utils/compatibility');
var InputSourceMapTracker = requireb('./utils/input-source-map-tracker');
var SourceTracker = requireb('./utils/source-tracker');
var SourceReader = requireb('./utils/source-reader');

var DEFAULT_TIMEOUT = 5000;

var CleanCSS = module.exports = function CleanCSS(options) {
  options = options || {};

  this.options = {
    advanced: undefined === options.advanced ? true : !!options.advanced,
    aggressiveMerging: undefined === options.aggressiveMerging ? true : !!options.aggressiveMerging,
    benchmark: options.benchmark,
    compatibility: new Compatibility(options.compatibility).toOptions(),
    debug: options.debug,
    inliner: options.inliner || {},
    keepBreaks: options.keepBreaks || false,
    keepSpecialComments: 'keepSpecialComments' in options ? options.keepSpecialComments : '*',
    mediaMerging: undefined === options.mediaMerging ? true : !!options.mediaMerging,
    processImport: undefined === options.processImport ? true : !!options.processImport,
    rebase: undefined === options.rebase ? true : !!options.rebase,
    relativeTo: options.relativeTo,
    restructuring: undefined === options.restructuring ? true : !!options.restructuring,
    root: options.root,
    roundingPrecision: options.roundingPrecision,
    shorthandCompacting: !!options.sourceMap ? false : (undefined === options.shorthandCompacting ? true : !!options.shorthandCompacting),
    sourceMap: options.sourceMap,
    target: options.target
  };

  this.options.inliner.timeout = this.options.inliner.timeout || DEFAULT_TIMEOUT;
  this.options.inliner.request = this.options.inliner.request || {};
};

CleanCSS.prototype.minify = function(data, callback) {
  var context = {
    stats: {},
    errors: [],
    warnings: [],
    options: this.options,
    debug: this.options.debug,
    sourceTracker: new SourceTracker()
  };

  if (context.options.sourceMap)
    context.inputSourceMapTracker = new InputSourceMapTracker(context);

  data = new SourceReader(context, data).toString();

  if (context.options.processImport || data.indexOf('@shallow') > 0) {
    // inline all imports
    var runner = callback ?
      process.nextTick :
      function (callback) { return callback(); };

    return runner(function () {
      return new ImportInliner(context).process(data, {
        localOnly: !callback,
        whenDone: runMinifier(callback, context)
      });
    });
  } else {
    return runMinifier(callback, context)(data);
  }
};

function runMinifier(callback, context) {
  function whenSourceMapReady (data) {
    data = context.options.debug ?
      minifyWithDebug(context, data) :
      minify(context, data);
    data = withMetadata(context, data);

    return callback ?
      callback.call(null, context.errors.length > 0 ? context.errors : null, data) :
      data;
  }

  return function (data) {
    if (context.options.sourceMap) {
      return context.inputSourceMapTracker.track(data, function () { return whenSourceMapReady(data); });
    } else {
      return whenSourceMapReady(data);
    }
  };
}

function withMetadata(context, data) {
  data.stats = context.stats;
  data.errors = context.errors;
  data.warnings = context.warnings;
  return data;
}

function minifyWithDebug(context, data) {
  var startedAt = process.hrtime();
  context.stats.originalSize = context.sourceTracker.removeAll(data).length;

  data = minify(context, data);

  var elapsed = process.hrtime(startedAt);
  context.stats.timeSpent = ~~(elapsed[0] * 1e3 + elapsed[1] / 1e6);
  context.stats.efficiency = 1 - data.styles.length / context.stats.originalSize;
  context.stats.minifiedSize = data.styles.length;

  return data;
}

function benchmark(runner) {
  return function (processor, action) {
    var name =  processor.constructor.name + '#' + action;
    var start = process.hrtime();
    runner(processor, action);
    var itTook = process.hrtime(start);
    console.log('%d ms: ' + name, 1000 * itTook[0] + itTook[1] / 1000000);
  };
}

function minify(context, data) {
  var options = context.options;
  var sourceMapTracker = context.inputSourceMapTracker;

  var commentsProcessor = new CommentsProcessor(context, options.keepSpecialComments, options.keepBreaks, options.sourceMap);
  var expressionsProcessor = new ExpressionsProcessor(options.sourceMap);
  var freeTextProcessor = new FreeTextProcessor(options.sourceMap);
  var urlsProcessor = new UrlsProcessor(context, options.sourceMap, !options.compatibility.properties.spaceAfterClosingBrace);

  var urlRebase = new UrlRebase(context);
  var selectorsOptimizer = new SelectorsOptimizer(options, context);
  var stringifierClass = options.sourceMap ? SourceMapStringifier : Stringifier;

  var run = function (processor, action) {
    data = typeof processor == 'function' ?
      processor(data) :
      processor[action](data);
  };

  if (options.benchmark)
    run = benchmark(run);

  run(commentsProcessor, 'escape');
  run(expressionsProcessor, 'escape');
  run(urlsProcessor, 'escape');
  run(freeTextProcessor, 'escape');

  run(function() {
    var stringifier = new stringifierClass(options, function (data) {
      data = freeTextProcessor.restore(data);
      data = urlsProcessor.restore(data);
      data = options.rebase ? urlRebase.process(data) : data;
      data = expressionsProcessor.restore(data);
      return commentsProcessor.restore(data);
    }, sourceMapTracker);

    return selectorsOptimizer.process(data, stringifier);
  });

  return data;
}

},{"./images/url-rebase":14,"./imports/inliner":16,"./selectors/optimizer":25,"./selectors/source-map-stringifier":29,"./selectors/stringifier":30,"./text/comments-processor":32,"./text/expressions-processor":34,"./text/free-text-processor":35,"./text/urls-processor":36,"./utils/compatibility":38,"./utils/input-source-map-tracker":40,"./utils/source-reader":44,"./utils/source-tracker":45}],11:[function(requireb,module,exports){
var HexNameShortener = {};

var COLORS = {
  aliceblue: '#f0f8ff',
  antiquewhite: '#faebd7',
  aqua: '#0ff',
  aquamarine: '#7fffd4',
  azure: '#f0ffff',
  beige: '#f5f5dc',
  bisque: '#ffe4c4',
  black: '#000',
  blanchedalmond: '#ffebcd',
  blue: '#00f',
  blueviolet: '#8a2be2',
  brown: '#a52a2a',
  burlywood: '#deb887',
  cadetblue: '#5f9ea0',
  chartreuse: '#7fff00',
  chocolate: '#d2691e',
  coral: '#ff7f50',
  cornflowerblue: '#6495ed',
  cornsilk: '#fff8dc',
  crimson: '#dc143c',
  cyan: '#0ff',
  darkblue: '#00008b',
  darkcyan: '#008b8b',
  darkgoldenrod: '#b8860b',
  darkgray: '#a9a9a9',
  darkgreen: '#006400',
  darkgrey: '#a9a9a9',
  darkkhaki: '#bdb76b',
  darkmagenta: '#8b008b',
  darkolivegreen: '#556b2f',
  darkorange: '#ff8c00',
  darkorchid: '#9932cc',
  darkred: '#8b0000',
  darksalmon: '#e9967a',
  darkseagreen: '#8fbc8f',
  darkslateblue: '#483d8b',
  darkslategray: '#2f4f4f',
  darkslategrey: '#2f4f4f',
  darkturquoise: '#00ced1',
  darkviolet: '#9400d3',
  deeppink: '#ff1493',
  deepskyblue: '#00bfff',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1e90ff',
  firebrick: '#b22222',
  floralwhite: '#fffaf0',
  forestgreen: '#228b22',
  fuchsia: '#f0f',
  gainsboro: '#dcdcdc',
  ghostwhite: '#f8f8ff',
  gold: '#ffd700',
  goldenrod: '#daa520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#adff2f',
  grey: '#808080',
  honeydew: '#f0fff0',
  hotpink: '#ff69b4',
  indianred: '#cd5c5c',
  indigo: '#4b0082',
  ivory: '#fffff0',
  khaki: '#f0e68c',
  lavender: '#e6e6fa',
  lavenderblush: '#fff0f5',
  lawngreen: '#7cfc00',
  lemonchiffon: '#fffacd',
  lightblue: '#add8e6',
  lightcoral: '#f08080',
  lightcyan: '#e0ffff',
  lightgoldenrodyellow: '#fafad2',
  lightgray: '#d3d3d3',
  lightgreen: '#90ee90',
  lightgrey: '#d3d3d3',
  lightpink: '#ffb6c1',
  lightsalmon: '#ffa07a',
  lightseagreen: '#20b2aa',
  lightskyblue: '#87cefa',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#b0c4de',
  lightyellow: '#ffffe0',
  lime: '#0f0',
  limegreen: '#32cd32',
  linen: '#faf0e6',
  magenta: '#ff00ff',
  maroon: '#800000',
  mediumaquamarine: '#66cdaa',
  mediumblue: '#0000cd',
  mediumorchid: '#ba55d3',
  mediumpurple: '#9370db',
  mediumseagreen: '#3cb371',
  mediumslateblue: '#7b68ee',
  mediumspringgreen: '#00fa9a',
  mediumturquoise: '#48d1cc',
  mediumvioletred: '#c71585',
  midnightblue: '#191970',
  mintcream: '#f5fffa',
  mistyrose: '#ffe4e1',
  moccasin: '#ffe4b5',
  navajowhite: '#ffdead',
  navy: '#000080',
  oldlace: '#fdf5e6',
  olive: '#808000',
  olivedrab: '#6b8e23',
  orange: '#ffa500',
  orangered: '#ff4500',
  orchid: '#da70d6',
  palegoldenrod: '#eee8aa',
  palegreen: '#98fb98',
  paleturquoise: '#afeeee',
  palevioletred: '#db7093',
  papayawhip: '#ffefd5',
  peachpuff: '#ffdab9',
  peru: '#cd853f',
  pink: '#ffc0cb',
  plum: '#dda0dd',
  powderblue: '#b0e0e6',
  purple: '#800080',
  rebeccapurple: '#663399',
  red: '#f00',
  rosybrown: '#bc8f8f',
  royalblue: '#4169e1',
  saddlebrown: '#8b4513',
  salmon: '#fa8072',
  sandybrown: '#f4a460',
  seagreen: '#2e8b57',
  seashell: '#fff5ee',
  sienna: '#a0522d',
  silver: '#c0c0c0',
  skyblue: '#87ceeb',
  slateblue: '#6a5acd',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#fffafa',
  springgreen: '#00ff7f',
  steelblue: '#4682b4',
  tan: '#d2b48c',
  teal: '#008080',
  thistle: '#d8bfd8',
  tomato: '#ff6347',
  turquoise: '#40e0d0',
  violet: '#ee82ee',
  wheat: '#f5deb3',
  white: '#fff',
  whitesmoke: '#f5f5f5',
  yellow: '#ff0',
  yellowgreen: '#9acd32'
};

var toHex = {};
var toName = {};

for (var name in COLORS) {
  var hex = COLORS[name];
  if (name.length < hex.length)
    toName[hex] = name;
  else
    toHex[name] = hex;
}

var toHexPattern = new RegExp('(^| |,|\\))(' + Object.keys(toHex).join('|') + ')( |,|\\)|$)', 'ig');
var toNamePattern = new RegExp('(' + Object.keys(toName).join('|') + ')([^a-f0-9]|$)', 'ig');

function hexConverter(match, prefix, colorValue, suffix) {
  return prefix + toHex[colorValue.toLowerCase()] + suffix;
}

function nameConverter(match, colorValue, suffix) {
  return toName[colorValue.toLowerCase()] + suffix;
}

HexNameShortener.shorten = function (value) {
  var hasHex = value.indexOf('#') > -1;
  var shortened = value.replace(toHexPattern, hexConverter);

  if (shortened != value)
    shortened = shortened.replace(toHexPattern, hexConverter);

  return hasHex ? shortened.replace(toNamePattern, nameConverter) : shortened;
};

module.exports = HexNameShortener;

},{}],12:[function(requireb,module,exports){
// HSL to RGB converter. Both methods adapted from:
// http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript

function HSLColor(hue, saturation, lightness) {
  this.hue = hue;
  this.saturation = saturation;
  this.lightness = lightness;
}

function hslToRgb(h, s, l) {
  var r, g, b;

  // normalize hue orientation b/w 0 and 360 degrees
  h = h % 360;
  if (h < 0)
    h += 360;
  h = ~~h / 360;

  if (s < 0)
    s = 0;
  else if (s > 100)
    s = 100;
  s = ~~s / 100;

  if (l < 0)
    l = 0;
  else if (l > 100)
    l = 100;
  l = ~~l / 100;

  if (s === 0) {
    r = g = b = l; // achromatic
  } else {
    var q = l < 0.5 ?
      l * (1 + s) :
      l + s - l * s;
    var p = 2 * l - q;
    r = hueToRgb(p, q, h + 1/3);
    g = hueToRgb(p, q, h);
    b = hueToRgb(p, q, h - 1/3);
  }

  return [~~(r * 255), ~~(g * 255), ~~(b * 255)];
}

function hueToRgb(p, q, t) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1/6) return p + (q - p) * 6 * t;
  if (t < 1/2) return q;
  if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
  return p;
}

HSLColor.prototype.toHex = function () {
  var asRgb = hslToRgb(this.hue, this.saturation, this.lightness);
  var redAsHex = asRgb[0].toString(16);
  var greenAsHex = asRgb[1].toString(16);
  var blueAsHex = asRgb[2].toString(16);

  return '#' +
    ((redAsHex.length == 1 ? '0' : '') + redAsHex) +
    ((greenAsHex.length == 1 ? '0' : '') + greenAsHex) +
    ((blueAsHex.length == 1 ? '0' : '') + blueAsHex);
};

module.exports = HSLColor;

},{}],13:[function(requireb,module,exports){
function RGB(red, green, blue) {
  this.red = red;
  this.green = green;
  this.blue = blue;
}

RGB.prototype.toHex = function () {
  var red = Math.max(0, Math.min(~~this.red, 255));
  var green = Math.max(0, Math.min(~~this.green, 255));
  var blue = Math.max(0, Math.min(~~this.blue, 255));

  // Credit: Asen  http://jsbin.com/UPUmaGOc/2/edit?js,console
  return '#' + ('00000' + (red << 16 | green << 8 | blue).toString(16)).slice(-6);
};

module.exports = RGB;

},{}],14:[function(requireb,module,exports){
var fs = require('fs');
var path = requireb('path');

var UrlRewriter = requireb('./url-rewriter');

function UrlRebase(outerContext) {
  this.outerContext = outerContext;
}

UrlRebase.prototype.process = function (data) {
  var options = this.outerContext.options;

  var rebaseOpts = {
    absolute: !!options.root,
    relative: !options.root && !!options.target,
    fromBase: options.relativeTo
  };

  if (!rebaseOpts.absolute && !rebaseOpts.relative)
    return data;

  if (rebaseOpts.absolute && !!options.target)
    this.outerContext.warnings.push('Both \'root\' and output file given so rebasing URLs as absolute paths');

  if (rebaseOpts.absolute)
    rebaseOpts.toBase = path.resolve(options.root);

  if (rebaseOpts.relative) {
    var target = fs.existsSync(options.target) && fs.statSync(options.target).isDirectory() ?
      options.target :
      path.dirname(options.target);

    rebaseOpts.toBase = path.resolve(target);
  }

  if (!rebaseOpts.fromBase || !rebaseOpts.toBase)
    return data;

  return new UrlRewriter(rebaseOpts).process(data);
};

module.exports = UrlRebase;

},{"./url-rewriter":15,"fs":"fs","path":98}],15:[function(requireb,module,exports){
var path = requireb('path');
var url = require('url');

var UrlScanner = requireb('../utils/url-scanner');

function UrlRewriter(options, context) {
  this.options = options;
  this.context = context;
}

UrlRewriter.prototype.process = function (data) {
  var self = this;

  return new UrlScanner(data, this.context).reduce(function (url, tempData) {
    url = url.replace(/^url\(\s*['"]?|['"]?\s*\)$/g, '');
    tempData.push('url(' + rebase(url, self.options) + ')');
  });
};

function rebase(resource, options) {
  // TODO: this is getting insane now - pending refactor in #436
  var importUrl = resource.substring(resource.length - 4) == '.css';
  var dataUri = resource.indexOf('data:') === 0;
  var specialUrl = resource[0] == '/' ||
    resource[0] == '#' ||
    (!options.imports && importUrl) ||
    dataUri ||
    /^https?:\/\//.exec(resource) !== null ||
    /__\w+__/.exec(resource) !== null;
  var rebased;

  if (false === options.urls) {
    if (options.imports && importUrl)
      specialUrl = false;
    else
      specialUrl = true;
  }

  if (specialUrl)
    return dataUri ? '\'' + resource + '\'' : resource;

  if (/https?:\/\//.test(options.toBase))
    return url.resolve(options.toBase, resource);

  if (options.absolute) {
    rebased = path
      .resolve(path.join(options.fromBase, resource))
      .replace(options.toBase, '');
  } else {
    rebased = path.relative(options.toBase, path.join(options.fromBase, resource));
  }

  return process.platform == 'win32' ?
    rebased.replace(/\\/g, '/') :
    rebased;
}

module.exports = UrlRewriter;

},{"../utils/url-scanner":47,"path":98,"url":"url"}],16:[function(requireb,module,exports){
var fs = require('fs');
var path = requireb('path');
var http = require('http');
var https = requireb('https');
var url = require('url');

var UrlRewriter = requireb('../images/url-rewriter');
var Splitter = requireb('../utils/splitter.js');
var override = requireb('../utils/object.js').override;

var MAP_MARKER = /\/\*# sourceMappingURL=(\S+) \*\//;
var REMOTE_RESOURCE = /^(https?:)?\/\//;

function ImportInliner (context) {
  this.outerContext = context;
}

ImportInliner.prototype.process = function (data, context) {
  var root = this.outerContext.options.root || process.cwd();

  context = override(context, {
    baseRelativeTo: this.outerContext.options.relativeTo || root,
    debug: this.outerContext.options.debug,
    done: [],
    errors: this.outerContext.errors,
    left: [],
    inliner: this.outerContext.options.inliner,
    rebase: this.outerContext.options.rebase,
    relativeTo: this.outerContext.options.relativeTo || root,
    root: root,
    sourceTracker: this.outerContext.sourceTracker,
    warnings: this.outerContext.warnings,
    visited: []
  });

  return importFrom(data, context);
};

function importFrom(data, context) {
  if (context.shallow) {
    context.shallow = false;
    context.done.push(data);
    return processNext(context);
  }

  var nextStart = 0;
  var nextEnd = 0;
  var cursor = 0;
  var isComment = commentScanner(data);

  for (; nextEnd < data.length;) {
    nextStart = nextImportAt(data, cursor);
    if (nextStart == -1)
      break;

    if (isComment(nextStart)) {
      cursor = nextStart + 1;
      continue;
    }

    nextEnd = data.indexOf(';', nextStart);
    if (nextEnd == -1) {
      cursor = data.length;
      data = '';
      break;
    }

    var noImportPart = data.substring(0, nextStart);
    context.done.push(noImportPart);
    context.left.unshift([data.substring(nextEnd + 1), context]);
    context.afterContent = hasContent(noImportPart);
    return inline(data, nextStart, nextEnd, context);
  }

  // no @import matched in current data
  context.done.push(data);
  return processNext(context);
}

function rebaseMap(data, source) {
  return data.replace(MAP_MARKER, function (match, sourceMapUrl) {
    return REMOTE_RESOURCE.test(sourceMapUrl) ?
      match :
      match.replace(sourceMapUrl, url.resolve(source, sourceMapUrl));
  });
}

function nextImportAt(data, cursor) {
  var nextLowerCase = data.indexOf('@import', cursor);
  var nextUpperCase = data.indexOf('@IMPORT', cursor);

  if (nextLowerCase > -1 && nextUpperCase == -1)
    return nextLowerCase;
  else if (nextLowerCase == -1 && nextUpperCase > -1)
    return nextUpperCase;
  else
    return Math.min(nextLowerCase, nextUpperCase);
}

function processNext(context) {
  return context.left.length > 0 ?
    importFrom.apply(null, context.left.shift()) :
    context.whenDone(context.done.join(''));
}

function commentScanner(data) {
  var commentRegex = /(\/\*(?!\*\/)[\s\S]*?\*\/)/;
  var lastStartIndex = 0;
  var lastEndIndex = 0;
  var noComments = false;

  // test whether an index is located within a comment
  return function scanner(idx) {
    var comment;
    var localStartIndex = 0;
    var localEndIndex = 0;
    var globalStartIndex = 0;
    var globalEndIndex = 0;

    // return if we know there are no more comments
    if (noComments)
      return false;

    // idx can be still within last matched comment (many @import statements inside one comment)
    if (idx > lastStartIndex && idx < lastEndIndex)
      return true;

    comment = data.match(commentRegex);

    if (!comment) {
      noComments = true;
      return false;
    }

    // get the indexes relative to the current data chunk
    lastStartIndex = localStartIndex = comment.index;
    localEndIndex = localStartIndex + comment[0].length;

    // calculate the indexes relative to the full original data
    globalEndIndex = localEndIndex + lastEndIndex;
    globalStartIndex = globalEndIndex - comment[0].length;

    // chop off data up to and including current comment block
    data = data.substring(localEndIndex);
    lastEndIndex = globalEndIndex;

    // re-run scan if comment ended before the idx
    if (globalEndIndex < idx)
      return scanner(idx);

    return globalEndIndex > idx && idx > globalStartIndex;
  };
}

function hasContent(data) {
  var isComment = commentScanner(data);
  var firstContentIdx = -1;
  while (true) {
    firstContentIdx = data.indexOf('{', firstContentIdx + 1);
    if (firstContentIdx == -1 || !isComment(firstContentIdx))
      break;
  }

  return firstContentIdx > -1;
}

function inline(data, nextStart, nextEnd, context) {
  context.shallow = data.indexOf('@shallow') > 0;

  var importDeclaration = data
    .substring(nextImportAt(data, nextStart) + '@import'.length + 1, nextEnd)
    .replace(/@shallow\)$/, ')')
    .trim();

  var viaUrl = importDeclaration.indexOf('url(') === 0;
  var urlStartsAt = viaUrl ? 4 : 0;
  var isQuoted = /^['"]/.exec(importDeclaration.substring(urlStartsAt, urlStartsAt + 2));
  var urlEndsAt = isQuoted ?
    importDeclaration.indexOf(isQuoted[0], urlStartsAt + 1) :
    new Splitter(' ').split(importDeclaration)[0].length - (viaUrl ? 1 : 0);

  var importedFile = importDeclaration
    .substring(urlStartsAt, urlEndsAt)
    .replace(/['"]/g, '')
    .replace(/\)$/, '')
    .trim();

  var mediaQuery = importDeclaration
    .substring(urlEndsAt + 1)
    .replace(/^\)/, '')
    .trim();

  var isRemote = context.isRemote || REMOTE_RESOURCE.test(importedFile);

  if (context.localOnly && isRemote) {
    if (context.afterContent || hasContent(context.done.join('')))
      context.warnings.push('Ignoring remote @import of "' + importedFile + '" as no callback given.');
    else
      restoreImport(importedFile, mediaQuery, context);

    return processNext(context);
  }

  if (!isRemote && context.afterContent) {
    context.warnings.push('Ignoring local @import of "' + importedFile + '" as after other CSS content.');
    return processNext(context);
  }

  var method = isRemote ? inlineRemoteResource : inlineLocalResource;
  return method(importedFile, mediaQuery, context);
}

function inlineRemoteResource(importedFile, mediaQuery, context) {
  var importedUrl = REMOTE_RESOURCE.test(importedFile) ?
    importedFile :
    url.resolve(context.relativeTo, importedFile);

  if (importedUrl.indexOf('//') === 0)
    importedUrl = 'http:' + importedUrl;

  if (context.visited.indexOf(importedUrl) > -1)
    return processNext(context);


  if (context.debug)
    console.error('Inlining remote stylesheet: ' + importedUrl);

  context.visited.push(importedUrl);

  var get = importedUrl.indexOf('http://') === 0 ?
    http.get :
    https.get;

  var errorHandled = false;
  function handleError(message) {
    if (errorHandled)
      return;

    errorHandled = true;
    context.errors.push('Broken @import declaration of "' + importedUrl + '" - ' + message);
    restoreImport(importedUrl, mediaQuery, context);

    processNext(context);
  }

  var requestOptions = override(url.parse(importedUrl), context.inliner.request);
  get(requestOptions, function(res) {
    if (res.statusCode < 200 || res.statusCode > 399) {
      return handleError('error ' + res.statusCode);
    } else if (res.statusCode > 299) {
      var movedUrl = url.resolve(importedUrl, res.headers.location);
      return inlineRemoteResource(movedUrl, mediaQuery, context);
    }

    var chunks = [];
    var parsedUrl = url.parse(importedUrl);
    res.on('data', function(chunk) {
      chunks.push(chunk.toString());
    });
    res.on('end', function() {
      var importedData = chunks.join('');
      if (context.rebase)
        importedData = new UrlRewriter({ toBase: importedUrl }, context).process(importedData);
      importedData = context.sourceTracker.store(importedUrl, importedData);
      importedData = rebaseMap(importedData, importedUrl);

      if (mediaQuery.length > 0)
        importedData = '@media ' + mediaQuery + '{' + importedData + '}';

      var newContext = override(context, {
        isRemote: true,
        relativeTo: parsedUrl.protocol + '//' + parsedUrl.host + parsedUrl.pathname
      });

      importFrom(importedData, newContext);
    });
  })
  .on('error', function(res) {
    handleError(res.message);
  })
  .on('timeout', function() {
    handleError('timeout');
  })
  .setTimeout(context.inliner.timeout);
}

function inlineLocalResource(importedFile, mediaQuery, context) {
  var relativeTo = importedFile[0] == '/' ?
    context.root :
    context.relativeTo;

  var fullPath = path.resolve(path.join(relativeTo, importedFile));

  if (!fs.existsSync(fullPath) || !fs.statSync(fullPath).isFile()) {
    context.errors.push('Broken @import declaration of "' + importedFile + '"');
    return processNext(context);
  }

  if (context.visited.indexOf(fullPath) > -1)
    return processNext(context);


  if (context.debug)
    console.error('Inlining local stylesheet: ' + fullPath);

  context.visited.push(fullPath);

  var importRelativeTo = path.dirname(fullPath);
  var importedData = fs.readFileSync(fullPath, 'utf8');
  if (context.rebase) {
    var rewriter = new UrlRewriter({
      relative: true,
      fromBase: importRelativeTo,
      toBase: context.baseRelativeTo
    }, context);
    importedData = rewriter.process(importedData);
  }
  importedData = context.sourceTracker.store(path.resolve(context.relativeTo, fullPath), importedData);

  if (mediaQuery.length > 0)
    importedData = '@media ' + mediaQuery + '{' + importedData + '}';

  var newContext = override(context, {
    relativeTo: importRelativeTo,
  });

  return importFrom(importedData, newContext);
}

function restoreImport(importedUrl, mediaQuery, context) {
  var restoredImport = '@import url(' + importedUrl + ')' + (mediaQuery.length > 0 ? ' ' + mediaQuery : '') + ';';
  context.done.push(restoredImport);
}

module.exports = ImportInliner;

},{"../images/url-rewriter":15,"../utils/object.js":41,"../utils/splitter.js":46,"fs":"fs","http":"http","https":89,"path":98,"url":"url"}],17:[function(requireb,module,exports){
// This extractor is used in advanced optimizations
// IMPORTANT: Mind Token class and this code is not related!
// Properties will be tokenized in one step, see #429

function extract(token) {
  var properties = [];

  if (token.kind == 'selector') {
    var inSimpleSelector = !/[\.\+#>~\s]/.test(token.metadata.selector);
    for (var i = 0, l = token.metadata.bodiesList.length; i < l; i++) {
      var property = token.metadata.bodiesList[i];
      if (property.indexOf('__ESCAPED') === 0)
        continue;

      var splitAt = property.indexOf(':');
      var name = property.substring(0, splitAt);
      if (!name)
        continue;

      var nameRoot = findNameRoot(name);

      properties.push([
        name,
        property.substring(splitAt + 1),
        nameRoot,
        property,
        token.metadata.selectorsList,
        inSimpleSelector
      ]);
    }
  } else if (token.kind == 'block') {
    for (var j = 0, k = token.body.length; j < k; j++) {
      properties = properties.concat(extract(token.body[j]));
    }
  }

  return properties;
}

function findNameRoot(name) {
  if (name == 'list-style')
    return name;
  if (name.indexOf('-radius') > 0)
    return 'border-radius';
  if (name.indexOf('border-') === 0)
    return name.match(/border\-\w+/)[0];
  if (name.indexOf('text-') === 0)
    return name;

  return name.replace(/^\-\w+\-/, '').match(/([a-zA-Z]+)/)[0].toLowerCase();
}

module.exports = extract;

},{}],18:[function(requireb,module,exports){

var processableInfo = requireb('./processable');
var overrideCompactor = requireb('./override-compactor');
var shorthandCompactor = requireb('./shorthand-compactor');

function valueMapper(object) { return object.value; }

module.exports = function Optimizer(options, context) {
  var overridable = {
    'animation-delay': ['animation'],
    'animation-direction': ['animation'],
    'animation-duration': ['animation'],
    'animation-fill-mode': ['animation'],
    'animation-iteration-count': ['animation'],
    'animation-name': ['animation'],
    'animation-play-state': ['animation'],
    'animation-timing-function': ['animation'],
    '-moz-animation-delay': ['-moz-animation'],
    '-moz-animation-direction': ['-moz-animation'],
    '-moz-animation-duration': ['-moz-animation'],
    '-moz-animation-fill-mode': ['-moz-animation'],
    '-moz-animation-iteration-count': ['-moz-animation'],
    '-moz-animation-name': ['-moz-animation'],
    '-moz-animation-play-state': ['-moz-animation'],
    '-moz-animation-timing-function': ['-moz-animation'],
    '-o-animation-delay': ['-o-animation'],
    '-o-animation-direction': ['-o-animation'],
    '-o-animation-duration': ['-o-animation'],
    '-o-animation-fill-mode': ['-o-animation'],
    '-o-animation-iteration-count': ['-o-animation'],
    '-o-animation-name': ['-o-animation'],
    '-o-animation-play-state': ['-o-animation'],
    '-o-animation-timing-function': ['-o-animation'],
    '-webkit-animation-delay': ['-webkit-animation'],
    '-webkit-animation-direction': ['-webkit-animation'],
    '-webkit-animation-duration': ['-webkit-animation'],
    '-webkit-animation-fill-mode': ['-webkit-animation'],
    '-webkit-animation-iteration-count': ['-webkit-animation'],
    '-webkit-animation-name': ['-webkit-animation'],
    '-webkit-animation-play-state': ['-webkit-animation'],
    '-webkit-animation-timing-function': ['-webkit-animation'],
    'background-clip': ['background'],
    'background-origin': ['background'],
    'border-color': ['border'],
    'border-style': ['border'],
    'border-width': ['border'],
    'border-bottom': ['border'],
    'border-bottom-color': ['border-bottom', 'border-color', 'border'],
    'border-bottom-style': ['border-bottom', 'border-style', 'border'],
    'border-bottom-width': ['border-bottom', 'border-width', 'border'],
    'border-left': ['border'],
    'border-left-color': ['border-left', 'border-color', 'border'],
    'border-left-style': ['border-left', 'border-style', 'border'],
    'border-left-width': ['border-left', 'border-width', 'border'],
    'border-right': ['border'],
    'border-right-color': ['border-right', 'border-color', 'border'],
    'border-right-style': ['border-right', 'border-style', 'border'],
    'border-right-width': ['border-right', 'border-width', 'border'],
    'border-top': ['border'],
    'border-top-color': ['border-top', 'border-color', 'border'],
    'border-top-style': ['border-top', 'border-style', 'border'],
    'border-top-width': ['border-top', 'border-width', 'border'],
    'font-family': ['font'],
    'font-size': ['font'],
    'font-style': ['font'],
    'font-variant': ['font'],
    'font-weight': ['font'],
    'margin-bottom': ['margin'],
    'margin-left': ['margin'],
    'margin-right': ['margin'],
    'margin-top': ['margin'],
    'padding-bottom': ['padding'],
    'padding-left': ['padding'],
    'padding-right': ['padding'],
    'padding-top': ['padding'],
    'transition-delay': ['transition'],
    'transition-duration': ['transition'],
    'transition-property': ['transition'],
    'transition-timing-function': ['transition'],
    '-moz-transition-delay': ['-moz-transition'],
    '-moz-transition-duration': ['-moz-transition'],
    '-moz-transition-property': ['-moz-transition'],
    '-moz-transition-timing-function': ['-moz-transition'],
    '-o-transition-delay': ['-o-transition'],
    '-o-transition-duration': ['-o-transition'],
    '-o-transition-property': ['-o-transition'],
    '-o-transition-timing-function': ['-o-transition'],
    '-webkit-transition-delay': ['-webkit-transition'],
    '-webkit-transition-duration': ['-webkit-transition'],
    '-webkit-transition-property': ['-webkit-transition'],
    '-webkit-transition-timing-function': ['-webkit-transition']
  };

  var compatibility = options.compatibility;
  var aggressiveMerging = options.aggressiveMerging;
  var shorthandCompacting = options.shorthandCompacting;

  var IE_BACKSLASH_HACK = '\\9';
  var processable = processableInfo.processable(compatibility);

  var overrides = {};
  for (var granular in overridable) {
    for (var i = 0; i < overridable[granular].length; i++) {
      var coarse = overridable[granular][i];
      var list = overrides[coarse];

      if (list)
        list.push(granular);
      else
        overrides[coarse] = [granular];
    }
  }

  var tokenize = function(body, selector) {
    var keyValues = [];

    for (var i = 0, l = body.length; i < l; i++) {
      var token = body[i];
      var firstColon = token.value.indexOf(':');
      var property = token.value.substring(0, firstColon);
      var value = token.value.substring(firstColon + 1);
      if (value === '') {
        context.warnings.push('Empty property \'' + property + '\' inside \'' + selector.map(valueMapper).join(',') + '\' selector. Ignoring.');
        continue;
      }

      keyValues.push([
        property,
        value,
        token.value.indexOf('!important') > -1,
        token.value.indexOf(IE_BACKSLASH_HACK, firstColon + 1) === token.value.length - IE_BACKSLASH_HACK.length,
        token.metadata
      ]);
    }

    return keyValues;
  };

  var optimize = function(tokens, allowAdjacent) {
    var merged = [];
    var properties = [];
    var lastProperty = null;
    var rescanTrigger = {};

    var removeOverridenBy = function(property, isImportant) {
      var overrided = overrides[property];
      for (var i = 0, l = overrided.length; i < l; i++) {
        for (var j = 0; j < properties.length; j++) {
          if (properties[j] != overrided[i] || (merged[j][2] && !isImportant))
            continue;

          merged.splice(j, 1);
          properties.splice(j, 1);
          j -= 1;
        }
      }
    };

    var mergeablePosition = function(position) {
      if (allowAdjacent === false || allowAdjacent === true)
        return allowAdjacent;

      return allowAdjacent.indexOf(position) > -1;
    };

    tokensLoop:
    for (var i = 0, l = tokens.length; i < l; i++) {
      var token = tokens[i];
      var property = token[0];
      var value = token[1];
      var isImportant = token[2];
      var isIEHack = token[3];
      var _property = (property == '-ms-filter' || property == 'filter') ?
        (lastProperty == 'background' || lastProperty == 'background-image' ? lastProperty : property) :
        property;
      var toOverridePosition = 0;

      if (isIEHack && !compatibility.properties.ieSuffixHack)
        continue;

      // comment is necessary - we assume that if two properties are one after another
      // then it is intentional way of redefining property which may not be widely supported
      // e.g. a{display:inline-block;display:-moz-inline-box}
      // however if `mergeablePosition` yields true then the rule does not apply
      // (e.g merging two adjacent selectors: `a{display:block}a{display:block}`)
      if (aggressiveMerging && property !== '' && _property != lastProperty || mergeablePosition(i)) {
        while (true) {
          toOverridePosition = properties.indexOf(_property, toOverridePosition);
          if (toOverridePosition == -1)
            break;

          var lastToken = merged[toOverridePosition];
          var wasImportant = lastToken[2];
          var wasIEHack = lastToken[3];

          if (wasImportant && !isImportant)
            continue tokensLoop;

          if (compatibility.properties.ieSuffixHack && !wasIEHack && isIEHack)
            break;

          var _info = processable[_property];
          if (!isIEHack && !wasIEHack && _info && _info.canOverride && !_info.canOverride(tokens[toOverridePosition][1], value))
            break;

          merged.splice(toOverridePosition, 1);
          properties.splice(toOverridePosition, 1);
        }
      }

      merged.push(token);
      properties.push(_property);

      // certain properties (see values of `overridable`) should trigger removal of
      // more granular properties (see keys of `overridable`)
      if (rescanTrigger[_property])
        removeOverridenBy(_property, isImportant);

      // add rescan triggers - if certain property appears later in the list a rescan needs
      // to be triggered, e.g 'border-top' triggers a rescan after 'border-top-width' and
      // 'border-top-color' as they can be removed
      for (var j = 0, list = overridable[_property] || [], m = list.length; j < m; j++)
        rescanTrigger[list[j]] = true;

      lastProperty = _property;
    }

    return merged;
  };

  var rebuild = function(tokens) {
    var tokenized = [];
    var list = [];
    var eligibleForCompacting = false;

    for (var i = 0, l = tokens.length; i < l; i++) {
      if (!eligibleForCompacting && processableInfo.implementedFor.test(tokens[i][0]))
        eligibleForCompacting = true;

      // FIXME: the check should be gone with #396
      var property = !tokens[i][0] && tokens[i][1].indexOf('__ESCAPED_') === 0 ?
        tokens[i][1] :
        tokens[i][0] + ':' + tokens[i][1];
      tokenized.push({ value: property, metadata: tokens[i][4] });
      list.push(property);
    }

    return {
      compactFurther: eligibleForCompacting,
      list: list,
      tokenized: tokenized
    };
  };

  var compact = function (input) {
    var Token = processableInfo.Token;

    var tokens = Token.tokenize(input);

    tokens = overrideCompactor.compactOverrides(tokens, processable, Token, compatibility);
    tokens = shorthandCompactor.compactShorthands(tokens, false, processable, Token);
    tokens = shorthandCompactor.compactShorthands(tokens, true, processable, Token);

    return Token.detokenize(tokens);
  };

  return {
    process: function(selector, body, allowAdjacent, compactProperties) {
      var tokenized = tokenize(body, selector);
      var optimized = optimize(tokenized, allowAdjacent);
      var rebuilt = rebuild(optimized);

      return shorthandCompacting && compactProperties && rebuilt.compactFurther ?
        compact(rebuilt.tokenized) :
        rebuilt;
    }
  };
};

},{"./override-compactor":19,"./processable":20,"./shorthand-compactor":22}],19:[function(requireb,module,exports){

// Compacts the given tokens according to their ability to override each other.

var validator = requireb('./validator');

module.exports = (function () {
  // Default override function: only allow overrides when the two values are the same
  var sameValue = function (val1, val2) {
    return val1 === val2;
  };

  var compactOverrides = function (tokens, processable, Token, compatibility) {
    var result, can, token, t, i, ii, iiii, oldResult, matchingComponent;

    // Used when searching for a component that matches token
    var nameMatchFilter1 = function (x) {
      return x.prop === token.prop;
    };
    // Used when searching for a component that matches t
    var nameMatchFilter2 = function (x) {
      return x.prop === t.prop;
    };

    function willResultInShorterValue (shorthand, token) {
      var shorthandCopy = shorthand.clone();
      shorthandCopy.isDirty = true;
      shorthandCopy.isShorthand = true;
      shorthandCopy.components = [];

      shorthand.components.forEach(function (component) {
        var componentCopy = component.clone();
        if (component.prop == token.prop)
          componentCopy.value = token.value;

        shorthandCopy.components.push(componentCopy);
      });

      return Token.getDetokenizedLength([shorthand, token]) >= Token.getDetokenizedLength([shorthandCopy]);
    }

    // Go from the end and always take what the current token can't override as the new result set
    // NOTE: can't cache result.length here because it will change with every iteration
    for (result = tokens, i = 0; (ii = result.length - 1 - i) >= 0; i++) {
      token = result[ii];
      can = (processable[token.prop] && processable[token.prop].canOverride) || sameValue;
      oldResult = result;
      result = [];

      // Special flag which indicates that the current token should be removed
      var removeSelf = false;
      var oldResultLength = oldResult.length;

      for (var iii = 0; iii < oldResultLength; iii++) {
        t = oldResult[iii];

        // A token can't override itself (checked by reference, not by value)
        // NOTE: except when we explicitly tell it to remove itself
        if (t === token && !removeSelf) {
          result.push(t);
          continue;
        }

        // Only an important token can even try to override tokens that come after it
        if (iii > ii && !token.isImportant) {
          result.push(t);
          continue;
        }

        // If an important component tries to override an important shorthand and it is not yet merged
        // just make sure it is not lost
        if (iii > ii && t.isImportant && token.isImportant && t.prop != token.prop && t.isComponentOf(token)) {
          result.push(t);
          continue;
        }

        // A nonimportant token can never override an important one
        if (t.isImportant && !token.isImportant) {
          result.push(t);
          continue;
        }

        if (token.isShorthand && !t.isShorthand && t.isComponentOf(token)) {
          // token (a shorthand) is trying to override t (a component)

          // Find the matching component in the shorthand
          matchingComponent = token.components.filter(nameMatchFilter2)[0];
          can = (processable[t.prop] && processable[t.prop].canOverride) || sameValue;
          if (!can(t.value, matchingComponent.value)) {
            // The shorthand can't override the component
            result.push(t);
          }
        } else if (t.isShorthand && !token.isShorthand && token.isComponentOf(t)) {
          // token (a component) is trying to override a component of t (a shorthand)

          // Find the matching component in the shorthand
          matchingComponent = t.components.filter(nameMatchFilter1)[0];
          if (can(matchingComponent.value, token.value)) {
            // The component can override the matching component in the shorthand
            var disabledForToken = !compatibility.properties.backgroundSizeMerging && token.prop.indexOf('background-size') > -1 ||
              processable[token.prop].nonMergeableValue && processable[token.prop].nonMergeableValue == token.value;

            if (disabledForToken) {
              result.push(t);
              continue;
            }

            if (!compatibility.properties.merging) {
              // in compatibility mode check if shorthand in not less understandable than merged-in value
              var wouldBreakCompatibility = false;
              for (iiii = 0; iiii < t.components.length; iiii++) {
                var o = processable[t.components[iiii].prop];
                can = (o && o.canOverride) || sameValue;

                if (!can(o.defaultValue, t.components[iiii].value)) {
                  wouldBreakCompatibility = true;
                  break;
                }
              }

              if (wouldBreakCompatibility) {
                result.push(t);
                continue;
              }
            }

            if ((!token.isImportant || token.isImportant && matchingComponent.isImportant) && willResultInShorterValue(t, token)) {
              // The overriding component is non-important which means we can simply include it into the shorthand
              // NOTE: stuff that can't really be included, like inherit, is taken care of at the final step, not here
              matchingComponent.value = token.value;
              // We use the special flag to get rid of the component
              removeSelf = true;
            } else {
              // The overriding component is important; sadly we can't get rid of it,
              // but we can still mark the matching component in the shorthand as irrelevant
              matchingComponent.isIrrelevant = true;
            }
            t.isDirty = true;
          }
          result.push(t);
        } else if (token.isShorthand && t.isShorthand && token.prop === t.prop) {
          // token is a shorthand and is trying to override another instance of the same shorthand

          // Can only override other shorthand when each of its components can override each of the other's components
          for (iiii = 0; iiii < t.components.length; iiii++) {
            can = (processable[t.components[iiii].prop] && processable[t.components[iiii].prop].canOverride) || sameValue;
            if (!can(t.components[iiii].value, token.components[iiii].value)) {
              result.push(t);
              break;
            }
            if (t.components[iiii].isImportant && token.components[iiii].isImportant && (validator.isValidFunction(t.components[iiii].value) ^ validator.isValidFunction(token.components[iiii].value))) {
              result.push(t);
              break;
            }
          }
        } else if (t.prop !== token.prop || !can(t.value, token.value)) {
          // in every other case, use the override mechanism
          result.push(t);
        } else if (t.isImportant && token.isImportant && (validator.isValidFunction(t.value) ^ validator.isValidFunction(token.value))) {
          result.push(t);
        }
      }
      if (removeSelf) {
        i--;
      }
    }

    return result;
  };

  return {
    compactOverrides: compactOverrides
  };

})();

},{"./validator":24}],20:[function(requireb,module,exports){

// Contains the interpretation of CSS properties, as used by the property optimizer

module.exports = (function () {

  var tokenModule = requireb('./token');
  var validator = requireb('./validator');
  var Splitter = requireb('../utils/splitter');

  // Functions that decide what value can override what.
  // The main purpose is to disallow removing CSS fallbacks.
  // A separate implementation is needed for every different kind of CSS property.
  // -----
  // The generic idea is that properties that have wider browser support are 'more understandable'
  // than others and that 'less understandable' values can't override more understandable ones.
  var canOverride = {
    // Use when two tokens of the same property can always be merged
    always: function () {
      // NOTE: We could have (val1, val2) parameters here but jshint complains because we don't use them
      return true;
    },
    // Use when two tokens of the same property can only be merged if they have the same value
    sameValue: function(val1, val2) {
      return val1 === val2;
    },
    sameFunctionOrValue: function(val1, val2) {
      // Functions with the same name can override each other
      if (validator.areSameFunction(val1, val2)) {
        return true;
      }

      return val1 === val2;
    },
    // Use for properties containing CSS units (margin-top, padding-left, etc.)
    unit: function(val1, val2) {
      // The idea here is that 'more understandable' values override 'less understandable' values, but not vice versa
      // Understandability: (unit without functions) > (same functions | standard functions) > anything else
      // NOTE: there is no point in having different vendor-specific functions override each other or standard functions,
      //       or having standard functions override vendor-specific functions, but standard functions can override each other
      // NOTE: vendor-specific property values are not taken into consideration here at the moment
      if (validator.isValidAndCompatibleUnitWithoutFunction(val1) && !validator.isValidAndCompatibleUnitWithoutFunction(val2))
        return false;

      if (validator.isValidUnitWithoutFunction(val2))
        return true;
      if (validator.isValidUnitWithoutFunction(val1))
        return false;

      // Standard non-vendor-prefixed functions can override each other
      if (validator.isValidFunctionWithoutVendorPrefix(val2) && validator.isValidFunctionWithoutVendorPrefix(val1)) {
        return true;
      }

      // Functions with the same name can override each other; same values can override each other
      return canOverride.sameFunctionOrValue(val1, val2);
    },
    // Use for color properties (color, background-color, border-color, etc.)
    color: function(val1, val2) {
      // The idea here is that 'more understandable' values override 'less understandable' values, but not vice versa
      // Understandability: (hex | named) > (rgba | hsla) > (same function name) > anything else
      // NOTE: at this point rgb and hsl are replaced by hex values by clean-css

      // (hex | named)
      if (validator.isValidNamedColor(val2) || validator.isValidHexColor(val2))
        return true;
      if (validator.isValidNamedColor(val1) || validator.isValidHexColor(val1))
        return false;

      // (rgba|hsla)
      if (validator.isValidRgbaColor(val2) || validator.isValidHslaColor(val2))
        return true;
      if (validator.isValidRgbaColor(val1) || validator.isValidHslaColor(val1))
        return false;

      // Functions with the same name can override each other; same values can override each other
      return canOverride.sameFunctionOrValue(val1, val2);
    },
    // Use for background-image
    backgroundImage: function(val1, val2) {
      // The idea here is that 'more understandable' values override 'less understandable' values, but not vice versa
      // Understandability: (none | url | inherit) > (same function) > (same value)

      // (none | url)
      if (val2 === 'none' || val2 === 'inherit' || validator.isValidUrl(val2))
        return true;
      if (val1 === 'none' || val1 === 'inherit' || validator.isValidUrl(val1))
        return false;

      // Functions with the same name can override each other; same values can override each other
      return canOverride.sameFunctionOrValue(val1, val2);
    },
    border: function(val1, val2) {
      var brokenUp1 = breakUp.border(Token.tokenizeOne({ value: val1 }));
      var brokenUp2 = breakUp.border(Token.tokenizeOne({ value: val2 }));

      return canOverride.color(brokenUp1[2].value, brokenUp2[2].value);
    }
  };
  canOverride = Object.freeze(canOverride);

  // Functions for breaking up shorthands to components
  var breakUp = {};
  breakUp.takeCareOfFourValues = function (splitfunc) {
    return function (token) {
      var descriptor = processable[token.prop];
      var result = [];
      var splitval = splitfunc(token.value);

      if (splitval.length === 0 || (splitval.length < descriptor.components.length && descriptor.components.length > 4)) {
        // This token is malformed and we have no idea how to fix it. So let's just keep it intact
        return [token];
      }

      // Fix those that we do know how to fix
      if (splitval.length < descriptor.components.length && splitval.length < 2) {
        // foo{margin:1px} -> foo{margin:1px 1px}
        splitval[1] = splitval[0];
      }
      if (splitval.length < descriptor.components.length && splitval.length < 3) {
        // foo{margin:1px 2px} -> foo{margin:1px 2px 1px}
        splitval[2] = splitval[0];
      }
      if (splitval.length < descriptor.components.length && splitval.length < 4) {
        // foo{margin:1px 2px 3px} -> foo{margin:1px 2px 3px 2px}
        splitval[3] = splitval[1];
      }

      // Now break it up to its components
      for (var i = 0; i < descriptor.components.length; i++) {
        var t = new Token(descriptor.components[i], splitval[i], token.isImportant);
        result.push(t);
      }

      return result;
    };
  };
  // Use this when you simply want to break up four values along spaces
  breakUp.fourBySpaces = breakUp.takeCareOfFourValues(function (val) {
    return new Splitter(' ').split(val).filter(function (v) { return v; });
  });
  // Breaks up a background property value
  breakUp.commaSeparatedMulitpleValues = function (splitfunc) {
    return function (token) {
      if (token.value.indexOf(',') === -1)
        return splitfunc(token);

      var values = new Splitter(',').split(token.value);
      var components = [];

      // TODO: we should be rather clonging elements than reusing them!
      for (var i = 0, l = values.length; i < l; i++) {
        token.value = values[i];
        components.push(splitfunc(token));
      }

      token.value = values.join(',');

      for (var j = 0, m = components[0].length; j < m; j++) {
        for (var k = 0, n = components.length, newValues = []; k < n; k++) {
          newValues.push(components[k][j].value);
        }

        components[0][j].value = newValues.join(',');
      }

      return components[0];
    };
  };
  breakUp.background = function (token) {
    // Default values
    var result = Token.makeDefaults(['background-image', 'background-position', 'background-size', 'background-repeat', 'background-attachment', 'background-origin', 'background-clip', 'background-color'], token.isImportant);
    var image = result[0];
    var position = result[1];
    var size = result[2];
    var repeat = result[3];
    var attachment = result[4];
    var origin = result[5];
    var clip = result[6];
    var color = result[7];
    var positionSet = false;
    var clipSet = false;
    var originSet = false;
    var repeatSet = false;

    // Take care of inherit
    if (token.value === 'inherit') {
      // NOTE: 'inherit' is not a valid value for background-attachment so there we'll leave the default value
      color.value = image.value =  repeat.value = position.value = size.value = attachment.value = origin.value = clip.value = 'inherit';
      return result;
    }

    // Break the background up into parts
    var parts = new Splitter(' ').split(token.value);
    if (parts.length === 0)
      return result;

    // Iterate over all parts and try to fit them into positions
    for (var i = parts.length - 1; i >= 0; i--) {
      var currentPart = parts[i];

      if (validator.isValidBackgroundAttachment(currentPart)) {
        attachment.value = currentPart;
      } else if (validator.isValidBackgroundBox(currentPart)) {
        if (clipSet) {
          origin.value = currentPart;
          originSet = true;
        } else {
          clip.value = currentPart;
          clipSet = true;
        }
      } else if (validator.isValidBackgroundRepeat(currentPart)) {
        if (repeatSet) {
          repeat.value = currentPart + ' ' + repeat.value;
        } else {
          repeat.value = currentPart;
          repeatSet = true;
        }
      } else if (validator.isValidBackgroundPositionPart(currentPart) || validator.isValidBackgroundSizePart(currentPart)) {
        if (i > 0) {
          var previousPart = parts[i - 1];

          if (previousPart.indexOf('/') > 0) {
            var twoParts = new Splitter('/').split(previousPart);
            size.value = twoParts.pop() + ' ' + currentPart;
            parts[i - 1] = twoParts.pop();
          } else if (i > 1 && parts[i - 2] == '/') {
            size.value = previousPart + ' ' + currentPart;
            i -= 2;
          } else if (parts[i - 1] == '/') {
            size.value = currentPart;
          } else {
            position.value = currentPart + (positionSet ? ' ' + position.value : '');
            positionSet = true;
          }
        } else {
          position.value = currentPart + (positionSet ? ' ' + position.value : '');
          positionSet = true;
        }
      } else if (validator.isValidBackgroundPositionAndSize(currentPart)) {
        var sizeValue = new Splitter('/').split(currentPart);
        size.value = sizeValue.pop();
        position.value = sizeValue.pop();
      } else if ((color.value == processable[color.prop].defaultValue || color.value == 'none') && validator.isValidColor(currentPart)) {
        color.value = currentPart;
      } else if (validator.isValidUrl(currentPart) || validator.isValidFunction(currentPart)) {
        image.value = currentPart;
      }
    }

    if (clipSet && !originSet)
      origin.value = clip.value;

    return result;
  };
  // Breaks up a list-style property value
  breakUp.listStyle = function (token) {
    // Default values
    var result = Token.makeDefaults(['list-style-type', 'list-style-position', 'list-style-image'], token.isImportant);
    var type = result[0], position = result[1], image = result[2];

    if (token.value === 'inherit') {
      type.value = position.value = image.value = 'inherit';
      return result;
    }

    var parts = new Splitter(' ').split(token.value);
    var ci = 0;

    // Type
    if (ci < parts.length && validator.isValidListStyleType(parts[ci])) {
      type.value = parts[ci];
      ci++;
    }
    // Position
    if (ci < parts.length && validator.isValidListStylePosition(parts[ci])) {
      position.value = parts[ci];
      ci++;
    }
    // Image
    if (ci < parts.length) {
      image.value = parts.splice(ci, parts.length - ci + 1).join(' ');
    }

    return result;
  };

  breakUp._widthStyleColor = function(token, prefix, order) {
    // Default values
    var components = order.map(function(prop) {
      return prefix + '-' + prop;
    });
    var result = Token.makeDefaults(components, token.isImportant);
    var color = result[order.indexOf('color')];
    var style = result[order.indexOf('style')];
    var width = result[order.indexOf('width')];

    // Take care of inherit
    if (token.value === 'inherit' || token.value === 'inherit inherit inherit') {
      color.value = style.value = width.value = 'inherit';
      return result;
    }

    // NOTE: usually users don't follow the requirebd order of parts in this shorthand,
    // so we'll try to parse it caring as little about order as possible

    var parts = new Splitter(' ').split(token.value), w;

    if (parts.length === 0) {
      return result;
    }

    if (parts.length >= 1) {
      // Try to find -width, excluding inherit because that can be anything
      w = parts.filter(function(p) { return p !== 'inherit' && validator.isValidOutlineWidth(p); });
      if (w.length) {
        width.value = w[0];
        parts.splice(parts.indexOf(w[0]), 1);
      }
    }
    if (parts.length >= 1) {
      // Try to find -style, excluding inherit because that can be anything
      w = parts.filter(function(p) { return p !== 'inherit' && validator.isValidOutlineStyle(p); });
      if (w.length) {
        style.value = w[0];
        parts.splice(parts.indexOf(w[0]), 1);
      }
    }
    if (parts.length >= 1) {
      // Find -color but this time can catch inherit
      w = parts.filter(function(p) { return validator.isValidOutlineColor(p); });
      if (w.length) {
        color.value = w[0];
        parts.splice(parts.indexOf(w[0]), 1);
      }
    }

    return result;
  };

  breakUp.outline = function(token) {
    return breakUp._widthStyleColor(token, 'outline', ['color', 'style', 'width']);
  };

  breakUp.border = function(token) {
    return breakUp._widthStyleColor(token, 'border', ['width', 'style', 'color']);
  };

  breakUp.borderRadius = function(token) {
    var parts = token.value.split('/');
    if (parts.length == 1)
      return breakUp.fourBySpaces(token);

    var horizontalPart = token.clone();
    var verticalPart = token.clone();

    horizontalPart.value = parts[0];
    verticalPart.value = parts[1];

    var horizontalBreakUp = breakUp.fourBySpaces(horizontalPart);
    var verticalBreakUp = breakUp.fourBySpaces(verticalPart);

    for (var i = 0; i < 4; i++) {
      horizontalBreakUp[i].value = [horizontalBreakUp[i].value, verticalBreakUp[i].value];
    }

    return horizontalBreakUp;
  };

  // Contains functions that can put together shorthands from their components
  // NOTE: correct order of tokens is assumed inside these functions!
  var putTogether = {
    // Use this for properties which have four unit values (margin, padding, etc.)
    // NOTE: optimizes to shorter forms too (that only specify 1, 2, or 3 values)
    fourUnits: function (prop, tokens, isImportant) {
      // See about irrelevant tokens
      // NOTE: This will enable some crazy optimalizations for us.
      if (tokens[0].isIrrelevant)
        tokens[0].value = tokens[2].value;
      if (tokens[2].isIrrelevant)
        tokens[2].value = tokens[0].value;
      if (tokens[1].isIrrelevant)
        tokens[1].value = tokens[3].value;
      if (tokens[3].isIrrelevant)
        tokens[3].value = tokens[1].value;

      if (tokens[0].isIrrelevant && tokens[2].isIrrelevant) {
        if (tokens[1].value === tokens[3].value)
          tokens[0].value = tokens[2].value = tokens[1].value;
        else
          tokens[0].value = tokens[2].value = '0';
      }
      if (tokens[1].isIrrelevant && tokens[3].isIrrelevant) {
        if (tokens[0].value === tokens[2].value)
          tokens[1].value = tokens[3].value = tokens[0].value;
        else
          tokens[1].value = tokens[3].value = '0';
      }

      var result = new Token(prop, tokens[0].value, isImportant);
      result.granularValues = [];
      result.granularValues[tokens[0].prop] = tokens[0].value;
      result.granularValues[tokens[1].prop] = tokens[1].value;
      result.granularValues[tokens[2].prop] = tokens[2].value;
      result.granularValues[tokens[3].prop] = tokens[3].value;

      // If all of them are irrelevant
      if (tokens[0].isIrrelevant && tokens[1].isIrrelevant && tokens[2].isIrrelevant && tokens[3].isIrrelevant) {
        result.value = processable[prop].shortestValue || processable[prop].defaultValue;
        return result;
      }

      // 1-value short form: all four components are equal
      if (tokens[0].value === tokens[1].value && tokens[0].value === tokens[2].value && tokens[0].value === tokens[3].value) {
        return result;
      }
      result.value += ' ' + tokens[1].value;
      // 2-value short form: first and third; second and fourth values are equal
      if (tokens[0].value === tokens[2].value && tokens[1].value === tokens[3].value) {
        return result;
      }
      result.value += ' ' + tokens[2].value;
      // 3-value short form: second and fourth values are equal
      if (tokens[1].value === tokens[3].value) {
        return result;
      }
      // 4-value form (none of the above optimalizations could be accomplished)
      result.value += ' ' + tokens[3].value;
      return result;
    },
    // Puts together the components by spaces and omits default values (this is the case for most shorthands)
    bySpacesOmitDefaults: function (prop, tokens, isImportant, meta) {
      var result = new Token(prop, '', isImportant);

      // Get irrelevant tokens
      var irrelevantTokens = tokens.filter(function (t) { return t.isIrrelevant; });

      // If every token is irrelevant, return shortest possible value, fallback to default value
      if (irrelevantTokens.length === tokens.length) {
        result.isIrrelevant = true;
        result.value = processable[prop].shortestValue || processable[prop].defaultValue;
        return result;
      }

      // This will be the value of the shorthand if all the components are default
      var valueIfAllDefault = processable[prop].defaultValue;

      // Go through all tokens and concatenate their values as necessary
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        var definition = processable[token.prop] && processable[token.prop];

        // Set granular value so that other parts of the code can use this for optimalization opportunities
        result.granularValues = result.granularValues || { };
        result.granularValues[token.prop] = token.value;

        // Use irrelevant tokens for optimalization opportunity
        if (token.isIrrelevant) {
          // Get shortest possible value, fallback to default value
          var tokenShortest = processable[token.prop].shortestValue || processable[token.prop].defaultValue;
          // If the shortest possible value of this token is shorter than the default value of the shorthand, use it instead
          if (tokenShortest.length < valueIfAllDefault.length) {
            valueIfAllDefault = tokenShortest;
          }
        }

        // merge with previous if possible
        if (definition.mergeWithPrevious && token.value === tokens[i - 1].value)
          continue;

        // omit irrelevant value
        if (token.isIrrelevant)
          continue;

        // omit default value unless mergable with previous and it wasn't default
        if (definition.defaultValue === token.value)
          if (!definition.mergeWithPrevious || tokens[i - 1].value === processable[tokens[i - 1].prop].defaultValue)
            continue;

        if (meta && meta.partsCount && meta.position < meta.partsCount - 1 && definition.multiValueLastOnly)
          continue;

        var requirebsPreceeding = definition.shorthandFollows;
        if (requirebsPreceeding && (tokens[i - 1].value == processable[requirebsPreceeding].defaultValue)) {
          result.value += ' ' + tokens[i - 1].value;
        }

        result.value += (definition.prefixShorthandValueWith || ' ') + token.value;
      }

      result.value = result.value.trim();
      if (!result.value) {
        result.value = valueIfAllDefault;
      }

      return result;
    },
    commaSeparatedMulitpleValues: function (assembleFunction) {
      return function(prop, tokens, isImportant) {
        var tokenSplitLengths = tokens.map(function (token) {
          return new Splitter(',').split(token.value).length;
        });
        var partsCount = Math.max.apply(Math, tokenSplitLengths);

        if (partsCount == 1)
          return assembleFunction(prop, tokens, isImportant);

        var merged = [];

        for (var i = 0; i < partsCount; i++) {
          merged.push([]);

          for (var j = 0; j < tokens.length; j++) {
            var split = new Splitter(',').split(tokens[j].value);
            merged[i].push(split[i] || split[0]);
          }
        }

        var mergedValues = [];
        var firstProcessed;
        for (i = 0; i < partsCount; i++) {
          var newTokens = [];
          for (var k = 0, n = merged[i].length; k < n; k++) {
            var newToken = tokens[k].clone();
            newToken.value = merged[i][k];
            newTokens.push(newToken);
          }

          var meta = {
            partsCount: partsCount,
            position: i
          };
          var processed = assembleFunction(prop, newTokens, isImportant, meta);
          mergedValues.push(processed.value);

          if (!firstProcessed)
            firstProcessed = processed;
        }

        firstProcessed.value = mergedValues.join(',');
        return firstProcessed;
      };
    },
    // Handles the cases when some or all the fine-grained properties are set to inherit
    takeCareOfInherit: function (innerFunc) {
      return function (prop, tokens, isImportant, meta) {
        // Filter out the inheriting and non-inheriting tokens in one iteration
        var inheritingTokens = [];
        var nonInheritingTokens = [];
        var result2Shorthandable = [];
        var i;
        for (i = 0; i < tokens.length; i++) {
          if (tokens[i].value === 'inherit') {
            inheritingTokens.push(tokens[i]);

            // Indicate that this property is irrelevant and its value can safely be set to anything else
            var r2s = new Token(tokens[i].prop, tokens[i].isImportant);
            r2s.isIrrelevant = true;
            result2Shorthandable.push(r2s);
          } else {
            nonInheritingTokens.push(tokens[i]);
            result2Shorthandable.push(tokens[i]);
          }
        }

        if (nonInheritingTokens.length === 0) {
          // When all the tokens are 'inherit'
          return new Token(prop, 'inherit', isImportant);
        } else if (inheritingTokens.length > 0) {
          // When some (but not all) of the tokens are 'inherit'

          // Result 1. Shorthand just the inherit values and have it overridden with the non-inheriting ones
          var result1 = [new Token(prop, 'inherit', isImportant)].concat(nonInheritingTokens);

          // Result 2. Shorthand every non-inherit value and then have it overridden with the inheriting ones
          var result2 = [innerFunc(prop, result2Shorthandable, isImportant, meta)].concat(inheritingTokens);

          // Return whichever is shorter
          var dl1 = Token.getDetokenizedLength(result1);
          var dl2 = Token.getDetokenizedLength(result2);

          return dl1 < dl2 ? result1 : result2;
        } else {
          // When none of tokens are 'inherit'
          return innerFunc(prop, tokens, isImportant, meta);
        }
      };
    },
    borderRadius: function (prop, tokens, isImportant) {
      var verticalTokens = [];
      var newTokens = [];

      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];
        var newToken = token.clone();
        newTokens.push(newToken);
        if (!Array.isArray(token.value))
          continue;

        if (token.value.length > 1) {
          verticalTokens.push({
            prop: token.prop,
            value: token.value[1],
            isImportant: token.isImportant
          });
        }

        newToken.value = token.value[0];
      }

      var result = putTogether.takeCareOfInherit(putTogether.fourUnits)(prop, newTokens, isImportant);
      if (verticalTokens.length > 0) {
        var verticalResult = putTogether.takeCareOfInherit(putTogether.fourUnits)(prop, verticalTokens, isImportant);
        if (result.value != verticalResult.value)
          result.value += '/' + verticalResult.value;
      }

      return result;
    }
  };

  // Properties to process
  // Extend this object in order to add support for more properties in the optimizer.
  //
  // Each key in this object represents a CSS property and should be an object.
  // Such an object contains properties that describe how the represented CSS property should be handled.
  // Possible options:
  //
  // * components: array (Only specify for shorthand properties.)
  //   Contains the names of the granular properties this shorthand compacts.
  //
  // * canOverride: function (Default is canOverride.sameValue - meaning that they'll only be merged if they have the same value.)
  //   Returns whether two tokens of this property can be merged with each other.
  //   This property has no meaning for shorthands.
  //
  // * defaultValue: string
  //   Specifies the default value of the property according to the CSS standard.
  //   For shorthand, this is used when every component is set to its default value, therefore it should be the shortest possible default value of all the components.
  //
  // * shortestValue: string
  //   Specifies the shortest possible value the property can possibly have.
  //   (Falls back to defaultValue if unspecified.)
  //
  // * breakUp: function (Only specify for shorthand properties.)
  //   Breaks the shorthand up to its components.
  //
  // * putTogether: function (Only specify for shorthand properties.)
  //   Puts the shorthand together from its components.
  //
  var processable = {
    'color': {
      canOverride: canOverride.color,
      defaultValue: 'transparent',
      shortestValue: 'red'
    },
    // background ------------------------------------------------------------------------------
    'background': {
      components: [
        'background-image',
        'background-position',
        'background-size',
        'background-repeat',
        'background-attachment',
        'background-origin',
        'background-clip',
        'background-color'
      ],
      breakUp: breakUp.commaSeparatedMulitpleValues(breakUp.background),
      putTogether: putTogether.commaSeparatedMulitpleValues(
        putTogether.takeCareOfInherit(putTogether.bySpacesOmitDefaults)
      ),
      defaultValue: '0 0',
      shortestValue: '0'
    },
    'background-clip': {
      canOverride: canOverride.always,
      defaultValue: 'border-box',
      shortestValue: 'border-box',
      shorthandFollows: 'background-origin',
      mergeWithPrevious: true
    },
    'background-color': {
      canOverride: canOverride.color,
      defaultValue: 'transparent',
      multiValueLastOnly: true,
      nonMergeableValue: 'none',
      shortestValue: 'red'
    },
    'background-image': {
      canOverride: canOverride.backgroundImage,
      defaultValue: 'none'
    },
    'background-origin': {
      canOverride: canOverride.always,
      defaultValue: 'padding-box',
      shortestValue: 'border-box'
    },
    'background-repeat': {
      canOverride: canOverride.always,
      defaultValue: 'repeat'
    },
    'background-position': {
      canOverride: canOverride.always,
      defaultValue: '0 0',
      shortestValue: '0'
    },
    'background-size': {
      canOverride: canOverride.always,
      defaultValue: 'auto',
      shortestValue: '0 0',
      prefixShorthandValueWith: '/',
      shorthandFollows: 'background-position'
    },
    'background-attachment': {
      canOverride: canOverride.always,
      defaultValue: 'scroll'
    },
    'border': {
      breakUp: breakUp.border,
      canOverride: canOverride.border,
      components: [
        'border-width',
        'border-style',
        'border-color'
      ],
      defaultValue: 'none',
      putTogether: putTogether.takeCareOfInherit(putTogether.bySpacesOmitDefaults)
    },
    'border-color': {
      canOverride: canOverride.color,
      defaultValue: 'none'
    },
    'border-style': {
      canOverride: canOverride.always,
      defaultValue: 'none'
    },
    'border-width': {
      canOverride: canOverride.unit,
      defaultValue: 'medium',
      shortestValue: '0'
    },
    // list-style ------------------------------------------------------------------------------
    'list-style': {
      components: [
        'list-style-type',
        'list-style-position',
        'list-style-image'
      ],
      canOverride: canOverride.always,
      breakUp: breakUp.listStyle,
      putTogether: putTogether.takeCareOfInherit(putTogether.bySpacesOmitDefaults),
      defaultValue: 'outside', // can't use 'disc' because that'd override default 'decimal' for <ol>
      shortestValue: 'none'
    },
    'list-style-type' : {
      canOverride: canOverride.always,
      shortestValue: 'none',
      defaultValue: '__hack'
      // NOTE: we can't tell the real default value here, it's 'disc' for <ul> and 'decimal' for <ol>
      //       -- this is a hack, but it doesn't matter because this value will be either overridden or it will disappear at the final step anyway
    },
    'list-style-position' : {
      canOverride: canOverride.always,
      defaultValue: 'outside',
      shortestValue: 'inside'
    },
    'list-style-image' : {
      canOverride: canOverride.always,
      defaultValue: 'none'
    },
    // outline ------------------------------------------------------------------------------
    'outline': {
      components: [
        'outline-color',
        'outline-style',
        'outline-width'
      ],
      breakUp: breakUp.outline,
      putTogether: putTogether.takeCareOfInherit(putTogether.bySpacesOmitDefaults),
      defaultValue: '0'
    },
    'outline-color': {
      canOverride: canOverride.color,
      defaultValue: 'invert',
      shortestValue: 'red'
    },
    'outline-style': {
      canOverride: canOverride.always,
      defaultValue: 'none'
    },
    'outline-width': {
      canOverride: canOverride.unit,
      defaultValue: 'medium',
      shortestValue: '0'
    },
    // transform
    '-moz-transform': {
      canOverride: canOverride.sameFunctionOrValue
    },
    '-ms-transform': {
      canOverride: canOverride.sameFunctionOrValue
    },
    '-webkit-transform': {
      canOverride: canOverride.sameFunctionOrValue
    },
    'transform': {
      canOverride: canOverride.sameFunctionOrValue
    }
  };

  var addFourValueShorthand = function (prop, components, options) {
    options = options || {};
    processable[prop] = {
      components: components,
      breakUp: options.breakUp || breakUp.fourBySpaces,
      putTogether: options.putTogether || putTogether.takeCareOfInherit(putTogether.fourUnits),
      defaultValue: options.defaultValue || '0',
      shortestValue: options.shortestValue
    };
    for (var i = 0; i < components.length; i++) {
      processable[components[i]] = {
        breakUp: options.breakUp || breakUp.fourBySpaces,
        canOverride: options.canOverride || canOverride.unit,
        defaultValue: options.defaultValue || '0',
        shortestValue: options.shortestValue
      };
    }
  };

  ['', '-moz-', '-o-', '-webkit-'].forEach(function (prefix) {
    addFourValueShorthand(prefix + 'border-radius', [
      prefix + 'border-top-left-radius',
      prefix + 'border-top-right-radius',
      prefix + 'border-bottom-right-radius',
      prefix + 'border-bottom-left-radius'
    ], {
      breakUp: breakUp.borderRadius,
      putTogether: putTogether.borderRadius
    });
  });

  addFourValueShorthand('border-color', [
    'border-top-color',
    'border-right-color',
    'border-bottom-color',
    'border-left-color'
  ], {
    breakUp: breakUp.fourBySpaces,
    canOverride: canOverride.color,
    defaultValue: 'currentColor',
    shortestValue: 'red'
  });

  addFourValueShorthand('border-style', [
    'border-top-style',
    'border-right-style',
    'border-bottom-style',
    'border-left-style'
  ], {
    breakUp: breakUp.fourBySpaces,
    canOverride: canOverride.always,
    defaultValue: 'none'
  });

  addFourValueShorthand('border-width', [
    'border-top-width',
    'border-right-width',
    'border-bottom-width',
    'border-left-width'
  ], {
    defaultValue: 'medium',
    shortestValue: '0'
  });

  addFourValueShorthand('padding', [
    'padding-top',
    'padding-right',
    'padding-bottom',
    'padding-left'
  ]);

  addFourValueShorthand('margin', [
    'margin-top',
    'margin-right',
    'margin-bottom',
    'margin-left'
  ]);

  // Set some stuff iteratively
  for (var proc in processable) {
    if (!processable.hasOwnProperty(proc))
      continue;

    var currDesc = processable[proc];

    if (!(currDesc.components instanceof Array) || currDesc.components.length === 0)
      continue;

    currDesc.isShorthand = true;

    for (var cI = 0; cI < currDesc.components.length; cI++) {
      if (!processable[currDesc.components[cI]]) {
        throw new Error('"' + currDesc.components[cI] + '" is defined as a component of "' + proc + '" but isn\'t defined in processable.');
      }
      processable[currDesc.components[cI]].componentOf = proc;
    }
  }

  var Token = tokenModule.createTokenPrototype(processable);

  return {
    implementedFor: /background|border|color|list|margin|outline|padding|transform/,
    processable: function (compatibility) {
      // FIXME: we need a proper OO way
      validator.setCompatibility(compatibility);

      return processable;
    },
    Token: Token
  };
})();

},{"../utils/splitter":46,"./token":23,"./validator":24}],21:[function(requireb,module,exports){
var FLEX_PROPERTIES = /align\-items|box\-align|box\-pack|flex|justify/;

function canReorder(left, right) {
  for (var i = right.length - 1; i >= 0; i--) {
    for (var j = left.length - 1; j >= 0; j--) {
      if (!canReorderSingle(left[j], right[i]))
        return false;
    }
  }

  return true;
}

function canReorderSingle(left, right) {
  var leftName = left[0];
  var leftValue = left[1];
  var leftNameRoot = left[2];
  var leftSelector = left[4];
  var leftInSimpleSelector = left[5];
  var rightName = right[0];
  var rightValue = right[1];
  var rightNameRoot = right[2];
  var rightSelector = right[4];
  var rightInSimpleSelector = right[5];

  if (leftName == 'font' && rightName == 'line-height' || rightName == 'font' && leftName == 'line-height')
    return false;
  if (FLEX_PROPERTIES.test(leftName) && FLEX_PROPERTIES.test(rightName))
    return false;
  if (leftNameRoot != rightNameRoot)
    return true;
  if (leftName == rightName && leftNameRoot == rightNameRoot && leftValue == rightValue)
    return true;
  if (leftName != rightName && leftNameRoot == rightNameRoot && leftName != leftNameRoot && rightName != rightNameRoot)
    return true;
  if (leftName != rightName && leftNameRoot == rightNameRoot && leftValue == rightValue)
    return true;
  if (rightInSimpleSelector && leftInSimpleSelector && selectorsDoNotOverlap(rightSelector, leftSelector))
    return true;

  return false;
}

function selectorsDoNotOverlap(s1, s2) {
  for (var i = 0, l = s1.length; i < l; i++) {
    if (s2.indexOf(s1[i]) > -1)
      return false;
  }

  return true;
}

module.exports = {
  canReorder: canReorder,
  canReorderSingle: canReorderSingle
};

},{}],22:[function(requireb,module,exports){

// Compacts the tokens by transforming properties into their shorthand notations when possible

module.exports = (function () {
  var isHackValue = function (t) { return t.value === '__hack'; };

  var compactShorthands = function(tokens, isImportant, processable, Token) {
    // Contains the components found so far, grouped by shorthand name
    var componentsSoFar = { };

    // Initializes a prop in componentsSoFar
    var initSoFar = function (shprop, last, clearAll) {
      var found = {};
      var shorthandPosition;

      if (!clearAll && componentsSoFar[shprop]) {
        for (var i = 0; i < processable[shprop].components.length; i++) {
          var prop = processable[shprop].components[i];
          found[prop] = [];

          if (!(componentsSoFar[shprop].found[prop]))
            continue;

          for (var ii = 0; ii < componentsSoFar[shprop].found[prop].length; ii++) {
            var comp = componentsSoFar[shprop].found[prop][ii];

            if (comp.isMarkedForDeletion)
              continue;

            found[prop].push(comp);

            if (comp.position && (!shorthandPosition || comp.position < shorthandPosition))
              shorthandPosition = comp.position;
          }
        }
      }
      componentsSoFar[shprop] = {
        lastShorthand: last,
        found: found,
        shorthandPosition: shorthandPosition
      };
    };

    // Adds a component to componentsSoFar
    var addComponentSoFar = function (token, index) {
      var shprop = processable[token.prop].componentOf;
      if (!componentsSoFar[shprop])
        initSoFar(shprop);
      if (!componentsSoFar[shprop].found[token.prop])
        componentsSoFar[shprop].found[token.prop] = [];

      // Add the newfound component to componentsSoFar
      componentsSoFar[shprop].found[token.prop].push(token);

      if (!componentsSoFar[shprop].shorthandPosition && index) {
        // If the haven't decided on where the shorthand should go, put it in the place of this component
        componentsSoFar[shprop].shorthandPosition = index;
      }
    };

    // Tries to compact a prop in componentsSoFar
    var compactSoFar = function (prop) {
      var i;
      var componentsCount = processable[prop].components.length;

      // Check basics
      if (!componentsSoFar[prop] || !componentsSoFar[prop].found)
        return false;

      // Find components for the shorthand
      var components = [];
      var realComponents = [];
      for (i = 0 ; i < componentsCount; i++) {
        // Get property name
        var pp = processable[prop].components[i];

        if (componentsSoFar[prop].found[pp] && componentsSoFar[prop].found[pp].length) {
          // We really found it
          var foundRealComp = componentsSoFar[prop].found[pp][0];
          components.push(foundRealComp);
          if (foundRealComp.isReal !== false) {
            realComponents.push(foundRealComp);
          }
        } else if (componentsSoFar[prop].lastShorthand) {
          // It's defined in the previous shorthand
          var c = componentsSoFar[prop].lastShorthand.components[i].clone(isImportant);
          components.push(c);
        } else {
          // Couldn't find this component at all
          return false;
        }
      }

      if (realComponents.length === 0) {
        // Couldn't find enough components, sorry
        return false;
      }

      if (realComponents.length === componentsCount) {
        // When all the components are from real values, only allow shorthanding if their understandability allows it
        // This is the case when every component can override their default values, or when all of them use the same function

        var canOverrideDefault = true;
        var functionNameMatches = true;
        var functionName;

        for (var ci = 0; ci < realComponents.length; ci++) {
          var rc = realComponents[ci];

          if (!processable[rc.prop].canOverride(processable[rc.prop].defaultValue, rc.value)) {
            canOverrideDefault = false;
          }
          var iop = rc.value.indexOf('(');
          if (iop >= 0) {
            var otherFunctionName = rc.value.substring(0, iop);
            if (functionName)
              functionNameMatches = functionNameMatches && otherFunctionName === functionName;
            else
              functionName = otherFunctionName;
          }
        }

        if (!canOverrideDefault || !functionNameMatches)
          return false;
      }

      // Compact the components into a shorthand
      var compacted = processable[prop].putTogether(prop, components, isImportant);
      if (!(compacted instanceof Array)) {
        compacted = [compacted];
      }

      var compactedLength = Token.getDetokenizedLength(compacted);
      var authenticLength = Token.getDetokenizedLength(realComponents);

      if (realComponents.length === componentsCount || compactedLength < authenticLength || components.some(isHackValue)) {
        compacted[0].isShorthand = true;
        compacted[0].components = processable[prop].breakUp(compacted[0]);

        // Mark the granular components for deletion
        for (i = 0; i < realComponents.length; i++) {
          realComponents[i].isMarkedForDeletion = true;
        }

        // Mark the position of the new shorthand
        tokens[componentsSoFar[prop].shorthandPosition].replaceWith = compacted;

        // Reinitialize the thing for further compacting
        initSoFar(prop, compacted[0]);
        for (i = 1; i < compacted.length; i++) {
          addComponentSoFar(compacted[i]);
        }

        // Yes, we can keep the new shorthand!
        return true;
      }

      return false;
    };

    // Tries to compact all properties currently in componentsSoFar
    var compactAllSoFar = function () {
      for (var i in componentsSoFar) {
        if (componentsSoFar.hasOwnProperty(i)) {
          while (compactSoFar(i)) { }
        }
      }
    };

    var i, token;

    // Go through each token and collect components for each shorthand as we go on
    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      if (token.isMarkedForDeletion) {
        continue;
      }
      if (!processable[token.prop]) {
        // We don't know what it is, move on
        continue;
      }
      if (processable[token.prop].isShorthand) {
        // Found an instance of a full shorthand
        // NOTE: we should NOT mix together tokens that come before and after the shorthands

        if (token.isImportant === isImportant || (token.isImportant && !isImportant)) {
          // Try to compact what we've found so far
          while (compactSoFar(token.prop)) { }
          // Reset
          initSoFar(token.prop, token, true);
        }

        // TODO: when the old optimizer is removed, take care of this corner case:
        //   div{background-color:#111;background-image:url(aaa);background:linear-gradient(aaa);background-repeat:no-repeat;background-position:1px 2px;background-attachment:scroll}
        //   -> should not be shorthanded / minified at all because the result wouldn't be equivalent to the original in any browser
      } else if (processable[token.prop].componentOf) {
        // Found a component of a shorthand
        if (token.isImportant === isImportant) {
          // Same importantness
          token.position = i;
          addComponentSoFar(token, i);
        } else if (!isImportant && token.isImportant) {
          // Use importants for optimalization opportunities
          // https://github.com/jakubpawlowicz/clean-css/issues/184
          var importantTrickComp = new Token(token.prop, token.value, isImportant);
          importantTrickComp.isIrrelevant = true;
          importantTrickComp.isReal = false;
          addComponentSoFar(importantTrickComp);
        }
      } else {
        // This is not a shorthand and not a component, don't care about it
        continue;
      }
    }

    // Perform all possible compactions
    compactAllSoFar();

    // Process the results - throw away stuff marked for deletion, insert compacted things, etc.
    var result = [];
    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];

      if (token.replaceWith) {
        for (var ii = 0; ii < token.replaceWith.length; ii++) {
          result.push(token.replaceWith[ii]);
        }
      }
      if (!token.isMarkedForDeletion) {
        result.push(token);
      }

      token.isMarkedForDeletion = false;
      token.replaceWith = null;
    }

    return result;
  };

  return {
    compactShorthands: compactShorthands
  };

})();

},{}],23:[function(requireb,module,exports){

// Helper for tokenizing the contents of a CSS selector block

module.exports = (function() {
  var createTokenPrototype = function (processable) {
    var important = '!important';

    // Constructor for tokens
    function Token (prop, p2, p3) {
      this.prop = prop;
      if (typeof(p2) === 'string') {
        this.value = p2;
        this.isImportant = p3;
      }
      else {
        this.value = processable[prop].defaultValue;
        this.isImportant = p2;
      }
    }

    Token.prototype.prop = null;
    Token.prototype.value = null;
    Token.prototype.granularValues = null;
    Token.prototype.components = null;
    Token.prototype.position = null;
    Token.prototype.isImportant = false;
    Token.prototype.isDirty = false;
    Token.prototype.isShorthand = false;
    Token.prototype.isIrrelevant = false;
    Token.prototype.isReal = true;
    Token.prototype.isMarkedForDeletion = false;
    Token.prototype.metadata = null;

    // Tells if this token is a component of the other one
    Token.prototype.isComponentOf = function (other) {
      if (!processable[this.prop] || !processable[other.prop])
        return false;
      if (!(processable[other.prop].components instanceof Array) || !processable[other.prop].components.length)
        return false;

      return processable[other.prop].components.indexOf(this.prop) >= 0;
    };

    // Clones a token
    Token.prototype.clone = function (isImportant) {
      var token = new Token(this.prop, this.value, (typeof(isImportant) !== 'undefined' ? isImportant : this.isImportant));
      return token;
    };

    // Creates an irrelevant token with the same prop
    Token.prototype.cloneIrrelevant = function (isImportant) {
      var token = Token.makeDefault(this.prop, (typeof(isImportant) !== 'undefined' ? isImportant : this.isImportant));
      token.isIrrelevant = true;
      return token;
    };

    // Creates an array of property tokens with their default values
    Token.makeDefaults = function (props, important) {
      return props.map(function(prop) {
        return new Token(prop, important);
      });
    };

    // Parses one CSS property declaration into a token
    Token.tokenizeOne = function (fullProp) {
      // Find first colon
      var colonPos = fullProp.value.indexOf(':');

      if (colonPos < 0) {
        // This property doesn't have a colon, it's invalid. Let's keep it intact anyway.
        return new Token('', fullProp.value);
      }

      // Parse parts of the property
      var prop = fullProp.value.substr(0, colonPos).trim();
      var value = fullProp.value.substr(colonPos + 1).trim();
      var isImportant = false;
      var importantPos = value.indexOf(important);

      // Check if the property is important
      if (importantPos >= 1 && importantPos === value.length - important.length) {
        value = value.substr(0, importantPos).trim();
        isImportant = true;
      }

      // Return result
      var result = new Token(prop, value, isImportant);

      // If this is a shorthand, break up its values
      // NOTE: we need to do this for all shorthands because otherwise we couldn't remove default values from them
      if (processable[prop] && processable[prop].isShorthand) {
        result.isShorthand = true;
        result.components = processable[prop].breakUp(result);
        result.isDirty = true;
      }

      result.metadata = fullProp.metadata;

      return result;
    };

    // Breaks up a string of CSS property declarations into tokens so that they can be handled more easily
    Token.tokenize = function (input) {
      // Split the input by semicolons and parse the parts
      var tokens = input.map(Token.tokenizeOne);
      return tokens;
    };

    // Transforms tokens back into CSS properties
    Token.detokenize = function (tokens) {
      // If by mistake the input is not an array, make it an array
      if (!(tokens instanceof Array)) {
        tokens = [tokens];
      }

      var tokenized = [];
      var list = [];

      // This step takes care of putting together the components of shorthands
      // NOTE: this is necessary to do for every shorthand, otherwise we couldn't remove their default values
      for (var i = 0; i < tokens.length; i++) {
        var t = tokens[i];
        if (t.isShorthand && t.isDirty) {
          var news = processable[t.prop].putTogether(t.prop, t.components, t.isImportant);
          Array.prototype.splice.apply(tokens, [i, 1].concat(news));
          t.isDirty = false;
          i--;
          continue;
        }
        // FIXME: the check should be gone with #396
        var property = t.prop === '' && t.value.indexOf('__ESCAPED_') === 0 ?
          t.value :
          t.prop + ':' + t.value + (t.isImportant ? important : '');

        // FIXME: to be fixed with #429
        property = property.replace(/\) ([^\+\-\/\*])/g, ')$1');

        tokenized.push({ value: property, metadata: t.metadata || {} });
        list.push(property);
      }

      return {
        list: list,
        tokenized: tokenized
      };
    };

    // Gets the final (detokenized) length of the given tokens
    Token.getDetokenizedLength = function (tokens) {
      // If by mistake the input is not an array, make it an array
      if (!(tokens instanceof Array)) {
        tokens = [tokens];
      }

      var result = 0;

      // This step takes care of putting together the components of shorthands
      // NOTE: this is necessary to do for every shorthand, otherwise we couldn't remove their default values
      for (var i = 0; i < tokens.length; i++) {
        var t = tokens[i];
        if (t.isShorthand && t.isDirty) {
          var news = processable[t.prop].putTogether(t.prop, t.components, t.isImportant);
          Array.prototype.splice.apply(tokens, [i, 1].concat(news));
          t.isDirty = false;
          i--;
          continue;
        }

        if (t.prop) {
          result += t.prop.length + 1;
        }
        if (t.value) {
          result += t.value.length;
        }
        if (t.isImportant) {
          result += important.length;
        }
      }

      return result;
    };

    return Token;
  };

  return {
    createTokenPrototype: createTokenPrototype
  };

})();

},{}],24:[function(requireb,module,exports){

// Validates various CSS property values

var Splitter = requireb('../utils/splitter');

module.exports = (function () {
  // Regexes used for stuff
  var widthKeywords = ['thin', 'thick', 'medium', 'inherit', 'initial'];
  var allUnits = ['px', '%', 'em', 'rem', 'in', 'cm', 'mm', 'ex', 'pt', 'pc', 'vw', 'vh', 'vmin', 'vmax'];
  var cssUnitRegexStr = '(\\-?\\.?\\d+\\.?\\d*(' + allUnits.join('|') + '|)|auto|inherit)';
  var cssCalcRegexStr = '(\\-moz\\-|\\-webkit\\-)?calc\\([^\\)]+\\)';
  var cssFunctionNoVendorRegexStr = '[A-Z]+(\\-|[A-Z]|[0-9])+\\(([A-Z]|[0-9]|\\ |\\,|\\#|\\+|\\-|\\%|\\.|\\(|\\))*\\)';
  var cssFunctionVendorRegexStr = '\\-(\\-|[A-Z]|[0-9])+\\(([A-Z]|[0-9]|\\ |\\,|\\#|\\+|\\-|\\%|\\.|\\(|\\))*\\)';
  var cssVariableRegexStr = 'var\\(\\-\\-[^\\)]+\\)';
  var cssFunctionAnyRegexStr = '(' + cssVariableRegexStr + '|' + cssFunctionNoVendorRegexStr + '|' + cssFunctionVendorRegexStr + ')';
  var cssUnitOrCalcRegexStr = '(' + cssUnitRegexStr + '|' + cssCalcRegexStr + ')';
  var cssUnitAnyRegexStr = '(none|' + widthKeywords.join('|') + '|' + cssUnitRegexStr + '|' + cssVariableRegexStr + '|' + cssFunctionNoVendorRegexStr + '|' + cssFunctionVendorRegexStr + ')';

  var cssFunctionNoVendorRegex = new RegExp('^' + cssFunctionNoVendorRegexStr + '$', 'i');
  var cssFunctionVendorRegex = new RegExp('^' + cssFunctionVendorRegexStr + '$', 'i');
  var cssVariableRegex = new RegExp('^' + cssVariableRegexStr + '$', 'i');
  var cssFunctionAnyRegex = new RegExp('^' + cssFunctionAnyRegexStr + '$', 'i');
  var cssUnitRegex = new RegExp('^' + cssUnitRegexStr + '$', 'i');
  var cssUnitOrCalcRegex = new RegExp('^' + cssUnitOrCalcRegexStr + '$', 'i');
  var cssUnitAnyRegex = new RegExp('^' + cssUnitAnyRegexStr + '$', 'i');

  var backgroundRepeatKeywords = ['repeat', 'no-repeat', 'repeat-x', 'repeat-y', 'inherit'];
  var backgroundAttachmentKeywords = ['inherit', 'scroll', 'fixed', 'local'];
  var backgroundPositionKeywords = ['center', 'top', 'bottom', 'left', 'right'];
  var backgroundSizeKeywords = ['contain', 'cover'];
  var backgroundBoxKeywords = ['border-box', 'content-box', 'padding-box'];
  var listStyleTypeKeywords = ['armenian', 'circle', 'cjk-ideographic', 'decimal', 'decimal-leading-zero', 'disc', 'georgian', 'hebrew', 'hiragana', 'hiragana-iroha', 'inherit', 'katakana', 'katakana-iroha', 'lower-alpha', 'lower-greek', 'lower-latin', 'lower-roman', 'none', 'square', 'upper-alpha', 'upper-latin', 'upper-roman'];
  var listStylePositionKeywords = ['inside', 'outside', 'inherit'];
  var outlineStyleKeywords = ['auto', 'inherit', 'hidden', 'none', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];

  var compatibleCssUnitRegex;
  var compatibleCssUnitAnyRegex;

  var validator = {
    // FIXME: we need a proper OO here
    setCompatibility: function (compatibility) {
      if (compatibility.units.rem) {
        compatibleCssUnitRegex = cssUnitRegex;
        compatibleCssUnitAnyRegex = cssUnitAnyRegex;
        return;
      }

      var validUnits = allUnits.slice(0).filter(function (value) {
        return value != 'rem';
      });

      var compatibleCssUnitRegexStr = '(\\-?\\.?\\d+\\.?\\d*(' + validUnits.join('|') + ')|auto|inherit)';
      compatibleCssUnitRegex = new RegExp('^' + compatibleCssUnitRegexStr + '$', 'i');
      compatibleCssUnitAnyRegex = new RegExp('^(none|' + widthKeywords.join('|') + '|' + compatibleCssUnitRegexStr + '|' + cssVariableRegexStr + '|' + cssFunctionNoVendorRegexStr + '|' + cssFunctionVendorRegexStr + ')$', 'i');
    },

    isValidHexColor: function (s) {
      return (s.length === 4 || s.length === 7) && s[0] === '#';
    },
    isValidRgbaColor: function (s) {
      s = s.split(' ').join('');
      return s.length > 0 && s.indexOf('rgba(') === 0 && s.indexOf(')') === s.length - 1;
    },
    isValidHslaColor: function (s) {
      s = s.split(' ').join('');
      return s.length > 0 && s.indexOf('hsla(') === 0 && s.indexOf(')') === s.length - 1;
    },
    isValidNamedColor: function (s) {
      // We don't really check if it's a valid color value, but allow any letters in it
      return s !== 'auto' && (s === 'transparent' || s === 'inherit' || /^[a-zA-Z]+$/.test(s));
    },
    isValidVariable: function(s) {
      return cssVariableRegex.test(s);
    },
    isValidColor: function (s) {
      return validator.isValidNamedColor(s) || validator.isValidHexColor(s) || validator.isValidRgbaColor(s) || validator.isValidHslaColor(s) || validator.isValidVariable(s);
    },
    isValidUrl: function (s) {
      // NOTE: at this point all URLs are replaced with placeholders by clean-css, so we check for those placeholders
      return s.indexOf('__ESCAPED_URL_CLEAN_CSS') === 0;
    },
    isValidUnit: function (s) {
      return cssUnitAnyRegex.test(s);
    },
    isValidUnitWithoutFunction: function (s) {
      return cssUnitRegex.test(s);
    },
    isValidAndCompatibleUnit: function (s) {
      return compatibleCssUnitAnyRegex.test(s);
    },
    isValidAndCompatibleUnitWithoutFunction: function (s) {
      return compatibleCssUnitRegex.test(s);
    },
    isValidFunctionWithoutVendorPrefix: function (s) {
      return cssFunctionNoVendorRegex.test(s);
    },
    isValidFunctionWithVendorPrefix: function (s) {
      return cssFunctionVendorRegex.test(s);
    },
    isValidFunction: function (s) {
      return cssFunctionAnyRegex.test(s);
    },
    isValidBackgroundRepeat: function (s) {
      return backgroundRepeatKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidBackgroundAttachment: function (s) {
      return backgroundAttachmentKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidBackgroundBox: function (s) {
      return backgroundBoxKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidBackgroundPositionPart: function (s) {
      return backgroundPositionKeywords.indexOf(s) >= 0 || cssUnitOrCalcRegex.test(s) || validator.isValidVariable(s);
    },
    isValidBackgroundPosition: function (s) {
      if (s === 'inherit')
        return true;

      var parts = s.split(' ');
      for (var i = 0, l = parts.length; i < l; i++) {
        if (parts[i] === '')
          continue;
        if (validator.isValidBackgroundPositionPart(parts[i]) || validator.isValidVariable(parts[i]))
          continue;

        return false;
      }

      return true;
    },
    isValidBackgroundSizePart: function(s) {
      return backgroundSizeKeywords.indexOf(s) >= 0 || cssUnitRegex.test(s) || validator.isValidVariable(s);
    },
    isValidBackgroundPositionAndSize: function(s) {
      if (s.indexOf('/') < 0)
        return false;

      var twoParts = new Splitter('/').split(s);
      return validator.isValidBackgroundSizePart(twoParts.pop()) && validator.isValidBackgroundPositionPart(twoParts.pop());
    },
    isValidListStyleType: function (s) {
      return listStyleTypeKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidListStylePosition: function (s) {
      return listStylePositionKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidOutlineColor: function (s) {
      return s === 'invert' || validator.isValidColor(s) || validator.isValidVendorPrefixedValue(s);
    },
    isValidOutlineStyle: function (s) {
      return outlineStyleKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidOutlineWidth: function (s) {
      return validator.isValidUnit(s) || widthKeywords.indexOf(s) >= 0 || validator.isValidVariable(s);
    },
    isValidVendorPrefixedValue: function (s) {
      return /^-([A-Za-z0-9]|-)*$/gi.test(s);
    },
    areSameFunction: function (a, b) {
      if (!validator.isValidFunction(a) || !validator.isValidFunction(b))
        return false;

      var f1name = a.substring(0, a.indexOf('('));
      var f2name = b.substring(0, b.indexOf('('));

      return f1name === f2name;
    }
  };

  return validator;
})();

},{"../utils/splitter":46}],25:[function(requireb,module,exports){
var Tokenizer = requireb('./tokenizer');
var SimpleOptimizer = requireb('./optimizers/simple');
var AdvancedOptimizer = requireb('./optimizers/advanced');

function SelectorsOptimizer(options, context) {
  this.options = options || {};
  this.context = context || {};
}

SelectorsOptimizer.prototype.process = function (data, stringifier) {
  var tokens = new Tokenizer(this.context, this.options.advanced, this.options.sourceMap).toTokens(data);

  new SimpleOptimizer(this.options).optimize(tokens);
  if (this.options.advanced)
    new AdvancedOptimizer(this.options, this.context).optimize(tokens);

  return stringifier.toString(tokens);
};

module.exports = SelectorsOptimizer;

},{"./optimizers/advanced":26,"./optimizers/simple":28,"./tokenizer":31}],26:[function(requireb,module,exports){
var PropertyOptimizer = requireb('../../properties/optimizer');
var CleanUp = requireb('./clean-up');

var extractProperties = requireb('../../properties/extractor');
var canReorder = requireb('../../properties/reorderable').canReorder;
var canReorderSingle = requireb('../../properties/reorderable').canReorderSingle;

function AdvancedOptimizer(options, context) {
  this.options = options;
  this.minificationsMade = [];
  this.propertyOptimizer = new PropertyOptimizer(this.options, context);
}

function changeBodyOf(token, newBody) {
  token.body = newBody.tokenized;
  token.metadata.body = newBody.list.join(';');
  token.metadata.bodiesList = newBody.list;
}

function changeSelectorOf(token, newSelectors) {
  token.value = newSelectors.tokenized;
  token.metadata.selector = newSelectors.list.join(',');
  token.metadata.selectorsList = newSelectors.list;
}

function unsafeSelector(value) {
  return /\.|\*| :/.test(value);
}

function naturalSorter(a, b) {
  return a > b;
}

AdvancedOptimizer.prototype.isSpecial = function (selector) {
  return this.options.compatibility.selectors.special.test(selector);
};

AdvancedOptimizer.prototype.removeDuplicates = function (tokens) {
  var matched = {};
  var forRemoval = [];

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];
    if (token.kind != 'selector')
      continue;

    var id = token.metadata.body + '@' + token.metadata.selector;
    var alreadyMatched = matched[id];

    if (alreadyMatched) {
      forRemoval.push(alreadyMatched[0]);
      alreadyMatched.unshift(i);
    } else {
      matched[id] = [i];
    }
  }

  forRemoval = forRemoval.sort(function(a, b) {
    return a > b ? 1 : -1;
  });

  for (var j = 0, n = forRemoval.length; j < n; j++) {
    tokens.splice(forRemoval[j] - j, 1);
  }

  this.minificationsMade.unshift(forRemoval.length > 0);
};

AdvancedOptimizer.prototype.mergeAdjacent = function (tokens) {
  var forRemoval = [];
  var lastToken = { selector: null, body: null };
  var adjacentSpace = this.options.compatibility.selectors.adjacentSpace;

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token.kind != 'selector') {
      lastToken = { selector: null, body: null };
      continue;
    }

    if (lastToken.kind == 'selector' && token.metadata.selector == lastToken.metadata.selector) {
      var joinAt = [lastToken.body.length];
      changeBodyOf(
        lastToken,
        this.propertyOptimizer.process(token.value, lastToken.body.concat(token.body), joinAt, true)
      );
      forRemoval.push(i);
    } else if (lastToken.body && token.metadata.body == lastToken.metadata.body &&
        !this.isSpecial(token.metadata.selector) && !this.isSpecial(lastToken.metadata.selector)) {
      changeSelectorOf(
        lastToken,
        CleanUp.selectors(lastToken.value.concat(token.value), false, adjacentSpace)
      );
      forRemoval.push(i);
    } else {
      lastToken = token;
    }
  }

  for (var j = 0, m = forRemoval.length; j < m; j++) {
    tokens.splice(forRemoval[j] - j, 1);
  }

  this.minificationsMade.unshift(forRemoval.length > 0);
};

AdvancedOptimizer.prototype.reduceNonAdjacent = function (tokens) {
  var candidates = {};
  var repeated = [];

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];

    if (token.kind != 'selector')
      continue;

    var isComplexAndNotSpecial = token.value.length > 1 && !this.isSpecial(token.metadata.selector);
    var selectors = isComplexAndNotSpecial ?
      [token.metadata.selector].concat(token.metadata.selectorsList) :
      [token.metadata.selector];

    for (var j = 0, m = selectors.length; j < m; j++) {
      var selector = selectors[j];

      if (!candidates[selector])
        candidates[selector] = [];
      else
        repeated.push(selector);

      candidates[selector].push({
        where: i,
        list: token.metadata.selectorsList,
        isPartial: isComplexAndNotSpecial && j > 0,
        isComplex: isComplexAndNotSpecial && j === 0
      });
    }
  }

  var reducedInSimple = this.reduceSimpleNonAdjacentCases(tokens, repeated, candidates);
  var reducedInComplex = this.reduceComplexNonAdjacentCases(tokens, candidates);

  this.minificationsMade.unshift(reducedInSimple || reducedInComplex);
};

AdvancedOptimizer.prototype.reduceSimpleNonAdjacentCases = function (tokens, repeated, candidates) {
  var reduced = false;

  function filterOut(idx, bodies) {
    return data[idx].isPartial && bodies.length === 0;
  }

  function reduceBody(token, newBody, processedCount, tokenIdx) {
    if (!data[processedCount - tokenIdx - 1].isPartial) {
      changeBodyOf(token, newBody);
      reduced = true;
    }
  }

  for (var i = 0, l = repeated.length; i < l; i++) {
    var selector = repeated[i];
    var data = candidates[selector];

    this.reduceSelector(tokens, selector, data, {
      filterOut: filterOut,
      callback: reduceBody
    });
  }

  return reduced;
};

AdvancedOptimizer.prototype.reduceComplexNonAdjacentCases = function (tokens, candidates) {
  var reduced = false;
  var localContext = {};

  function filterOut(idx) {
    return localContext.data[idx].where < localContext.intoPosition;
  }

  function collectReducedBodies(token, newBody, processedCount, tokenIdx) {
    if (tokenIdx === 0)
      localContext.reducedBodies.push(newBody);
  }

  allSelectors:
  for (var complexSelector in candidates) {
    var into = candidates[complexSelector];
    if (!into[0].isComplex)
      continue;

    var intoPosition = into[into.length - 1].where;
    var intoToken = tokens[intoPosition];
    var reducedBodies = [];

    var selectors = this.isSpecial(complexSelector) ?
      [complexSelector] :
      into[0].list;

    localContext.intoPosition = intoPosition;
    localContext.reducedBodies = reducedBodies;

    for (var j = 0, m = selectors.length; j < m; j++) {
      var selector = selectors[j];
      var data = candidates[selector];

      if (data.length < 2)
        continue allSelectors;

      localContext.data = data;

      this.reduceSelector(tokens, selector, data, {
        filterOut: filterOut,
        callback: collectReducedBodies
      });

      if (reducedBodies[reducedBodies.length - 1].list.join(';') != reducedBodies[0].list.join(';'))
        continue allSelectors;
    }

    intoToken.body = reducedBodies[0].tokenized;
    reduced = true;
  }

  return reduced;
};

AdvancedOptimizer.prototype.reduceSelector = function (tokens, selector, data, options) {
  var bodies = [];
  var bodiesAsList = [];
  var joinsAt = [];
  var processedTokens = [];

  for (var j = data.length - 1, m = 0; j >= 0; j--) {
    if (options.filterOut(j, bodies))
      continue;

    var where = data[j].where;
    var token = tokens[where];

    bodies = bodies.concat(token.body);
    bodiesAsList.push(token.metadata.bodiesList);
    processedTokens.push(where);
  }

  for (j = 0, m = bodiesAsList.length; j < m; j++) {
    if (bodiesAsList[j].length > 0)
      joinsAt.push((joinsAt[j - 1] || 0) + bodiesAsList[j].length);
  }

  var optimizedBody = this.propertyOptimizer.process(selector, bodies, joinsAt, false);

  var processedCount = processedTokens.length;
  var propertyIdx = optimizedBody.tokenized.length - 1;
  var tokenIdx = processedCount - 1;

  while (tokenIdx >= 0) {
     if ((tokenIdx === 0 || (optimizedBody.tokenized[propertyIdx] && bodiesAsList[tokenIdx].indexOf(optimizedBody.tokenized[propertyIdx].value) > -1)) && propertyIdx > -1) {
      propertyIdx--;
      continue;
    }

    var newBody = {
      list: optimizedBody.list.splice(propertyIdx + 1),
      tokenized: optimizedBody.tokenized.splice(propertyIdx + 1)
    };
    options.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);

    tokenIdx--;
  }
};

AdvancedOptimizer.prototype.mergeNonAdjacentBySelector = function (tokens) {
  var allSelectors = {};
  var repeatedSelectors = [];
  var i;

  for (i = tokens.length - 1; i >= 0; i--) {
    if (tokens[i].kind != 'selector')
      continue;
    if (tokens[i].body.length === 0)
      continue;

    var selector = tokens[i].metadata.selector;
    allSelectors[selector] = [i].concat(allSelectors[selector] || []);

    if (allSelectors[selector].length == 2)
      repeatedSelectors.push(selector);
  }

  for (i = repeatedSelectors.length - 1; i >= 0; i--) {
    var positions = allSelectors[repeatedSelectors[i]];

    selectorIterator:
    for (var j = positions.length - 1; j > 0; j--) {
      var positionOne = positions[j - 1];
      var tokenOne = tokens[positionOne];
      var positionTwo = positions[j];
      var tokenTwo = tokens[positionTwo];

      directionIterator:
      for (var direction = 1; direction >= -1; direction -= 2) {
        var topToBottom = direction == 1;
        var from = topToBottom ? positionOne + 1 : positionTwo - 1;
        var to = topToBottom ? positionTwo : positionOne;
        var delta = topToBottom ? 1 : -1;
        var moved = topToBottom ? tokenOne : tokenTwo;
        var target = topToBottom ? tokenTwo : tokenOne;
        var movedProperties = extractProperties(moved);

        while (from != to) {
          var traversedProperties = extractProperties(tokens[from]);
          from += delta;

          // traversed then moved as we move selectors towards the start
          var reorderable = topToBottom ?
            canReorder(movedProperties, traversedProperties) :
            canReorder(traversedProperties, movedProperties);

          if (!reorderable && !topToBottom)
            continue selectorIterator;
          if (!reorderable && topToBottom)
            continue directionIterator;
        }

        var joinAt = topToBottom ? [target.body.length] : [moved.body.length];
        var joinedBodies = topToBottom ? moved.body.concat(target.body) : target.body.concat(moved.body);
        var newBody = this.propertyOptimizer.process(target.value, joinedBodies, joinAt, true);
        changeBodyOf(target, newBody);
        changeBodyOf(moved, { tokenized: [], list: [] });
      }
    }
  }
};

AdvancedOptimizer.prototype.mergeNonAdjacentByBody = function (tokens) {
  var candidates = {};
  var adjacentSpace = this.options.compatibility.selectors.adjacentSpace;

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];
    if (token.kind != 'selector')
      continue;

    if (token.body.length > 0 && unsafeSelector(token.metadata.selector))
      candidates = {};

    var oldToken = candidates[token.metadata.body];
    if (oldToken && !this.isSpecial(token.metadata.selector) && !this.isSpecial(oldToken.metadata.selector)) {
      changeSelectorOf(
        token,
        CleanUp.selectors(oldToken.value.concat(token.value), false, adjacentSpace)
      );

      changeBodyOf(oldToken, { tokenized: [], list: [] });
      candidates[token.metadata.body] = null;
    }

    candidates[token.metadata.body] = token;
  }
};

AdvancedOptimizer.prototype.restructure = function (tokens) {
  var movableTokens = {};
  var movedProperties = [];
  var multiPropertyMoveCache = {};
  var movedToBeDropped = [];
  var self = this;
  var maxCombinationsLevel = 2;
  var ID_JOIN_CHARACTER = '%';

  function sendToMultiPropertyMoveCache(position, movedProperty, allFits) {
    for (var i = allFits.length - 1; i >= 0; i--) {
      var fit = allFits[i][0];
      var id = addToCache(movedProperty, fit);

      if (multiPropertyMoveCache[id].length > 1 && processMultiPropertyMove(position, multiPropertyMoveCache[id])) {
        removeAllMatchingFromCache(id);
        break;
      }
    }
  }

  function addToCache(movedProperty, fit) {
    var id = cacheId(fit);
    multiPropertyMoveCache[id] = multiPropertyMoveCache[id] || [];
    multiPropertyMoveCache[id].push([movedProperty, fit]);
    return id;
  }

  function removeAllMatchingFromCache(matchId) {
    var matchSelectors = matchId.split(ID_JOIN_CHARACTER);
    var forRemoval = [];
    var i;

    for (var id in multiPropertyMoveCache) {
      var selectors = id.split(ID_JOIN_CHARACTER);
      for (i = selectors.length - 1; i >= 0; i--) {
        if (matchSelectors.indexOf(selectors[i]) > -1) {
          forRemoval.push(id);
          break;
        }
      }
    }

    for (i = forRemoval.length - 1; i >= 0; i--) {
      delete multiPropertyMoveCache[forRemoval[i]];
    }
  }

  function cacheId(cachedTokens) {
    var id = [];
    for (var i = 0, l = cachedTokens.length; i < l; i++) {
      id.push(cachedTokens[i].metadata.selector);
    }
    return id.join(ID_JOIN_CHARACTER);
  }

  function tokensToMerge(sourceTokens) {
    var uniqueTokensWithBody = [];
    var mergeableTokens = [];

    for (var i = sourceTokens.length - 1; i >= 0; i--) {
      if (self.isSpecial(sourceTokens[i].metadata.selector))
        continue;

      mergeableTokens.unshift(sourceTokens[i]);
      if (sourceTokens[i].body.length > 0 && uniqueTokensWithBody.indexOf(sourceTokens[i]) == -1)
        uniqueTokensWithBody.push(sourceTokens[i]);
    }

    return uniqueTokensWithBody.length > 1 ?
      mergeableTokens :
      [];
  }

  function shortenIfPossible(position, movedProperty) {
    var name = movedProperty[0];
    var value = movedProperty[1];
    var key = movedProperty[3];
    var valueSize = name.length + value.length + 1;
    var allSelectors = [];
    var qualifiedTokens = [];

    var mergeableTokens = tokensToMerge(movableTokens[key]);
    if (mergeableTokens.length < 2)
      return;

    var allFits = findAllFits(mergeableTokens, valueSize, 1);
    var bestFit = allFits[0];
    if (bestFit[1] > 0)
      return sendToMultiPropertyMoveCache(position, movedProperty, allFits);

    for (var i = bestFit[0].length - 1; i >=0; i--) {
      allSelectors = bestFit[0][i].value.concat(allSelectors);
      qualifiedTokens.unshift(bestFit[0][i]);
    }

    allSelectors = CleanUp.selectorDuplicates(allSelectors);
    dropAsNewTokenAt(position, [movedProperty], allSelectors, qualifiedTokens);
  }

  function fitSorter(fit1, fit2) {
    return fit1[1] > fit2[1];
  }

  function findAllFits(mergeableTokens, propertySize, propertiesCount) {
    var combinations = allCombinations(mergeableTokens, propertySize, propertiesCount, maxCombinationsLevel - 1);
    return combinations.sort(fitSorter);
  }

  function allCombinations(tokensVariant, propertySize, propertiesCount, level) {
    var differenceVariants = [[tokensVariant, sizeDifference(tokensVariant, propertySize, propertiesCount)]];
    if (tokensVariant.length > 2 && level > 0) {
      for (var i = tokensVariant.length - 1; i >= 0; i--) {
        var subVariant = Array.prototype.slice.call(tokensVariant, 0);
        subVariant.splice(i, 1);
        differenceVariants = differenceVariants.concat(allCombinations(subVariant, propertySize, propertiesCount, level - 1));
      }
    }

    return differenceVariants;
  }

  function sizeDifference(tokensVariant, propertySize, propertiesCount) {
    var allSelectorsSize = 0;
    for (var i = tokensVariant.length - 1; i >= 0; i--) {
      allSelectorsSize += tokensVariant[i].body.length > propertiesCount ? tokensVariant[i].metadata.selector.length : -1;
    }
    return allSelectorsSize - (tokensVariant.length - 1) * propertySize + 1;
  }

  function dropAsNewTokenAt(position, properties, allSelectors, mergeableTokens) {
    var bodyMetadata = {};
    var i, j, k, m;

    for (i = mergeableTokens.length - 1; i >= 0; i--) {
      var mergeableToken = mergeableTokens[i];

      for (j = mergeableToken.body.length - 1; j >= 0; j--) {

        for (k = 0, m = properties.length; k < m; k++) {
          var property = properties[k];

          if (mergeableToken.body[j].value === property[3]) {
            bodyMetadata[property[3]] = mergeableToken.body[j].metadata;

            mergeableToken.body.splice(j, 1);
            mergeableToken.metadata.bodiesList.splice(j, 1);
            mergeableToken.metadata.body = mergeableToken.metadata.bodiesList.join(';');
            break;
          }
        }
      }
    }

    var newToken = { kind: 'selector', metadata: {} };
    var allBodies = { tokenized: [], list: [] };

    for (i = properties.length - 1; i >= 0; i--) {
      allBodies.tokenized.push({ value: properties[i][3] });
      allBodies.list.push(properties[i][3]);
    }

    changeSelectorOf(newToken, allSelectors);
    changeBodyOf(newToken, allBodies);

    for (i = properties.length - 1; i >= 0; i--) {
      newToken.body[i].metadata = bodyMetadata[properties[i][3]];
    }

    tokens.splice(position, 0, newToken);
  }

  function dropPropertiesAt(position, movedProperty) {
    var key = movedProperty[3];

    if (movableTokens[key] && movableTokens[key].length > 1)
      shortenIfPossible(position, movedProperty);
  }

  function processMultiPropertyMove(position, propertiesAndMergableTokens) {
    var valueSize = 0;
    var properties = [];
    var property;

    for (var i = propertiesAndMergableTokens.length - 1; i >= 0; i--) {
      property = propertiesAndMergableTokens[i][0];
      var fullValue = property[3];
      valueSize += fullValue.length + (i > 0 ? 1 : 0);

      properties.push(property);
    }

    var mergeableTokens = propertiesAndMergableTokens[0][1];
    var bestFit = findAllFits(mergeableTokens, valueSize, properties.length)[0];
    if (bestFit[1] > 0)
      return false;

    var allSelectors = [];
    var qualifiedTokens = [];
    for (i = bestFit[0].length - 1; i >= 0; i--) {
      allSelectors = bestFit[0][i].value.concat(allSelectors);
      qualifiedTokens.unshift(bestFit[0][i]);
    }

    allSelectors = CleanUp.selectorDuplicates(allSelectors);
    dropAsNewTokenAt(position, properties, allSelectors, qualifiedTokens);

    for (i = properties.length - 1; i >= 0; i--) {
      property = properties[i];
      var index = movedProperties.indexOf(property);

      delete movableTokens[property[3]];

      if (index > -1 && movedToBeDropped.indexOf(index) == -1)
        movedToBeDropped.push(index);
    }

    return true;
  }

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];
    var isSelector;
    var j, k, m;

    if (token.kind == 'selector') {
      isSelector = true;
    } else if (token.kind == 'block' && !token.isFlatBlock) {
      isSelector = false;
    } else {
      continue;
    }

    // We cache movedProperties.length as it may change in the loop
    var movedCount = movedProperties.length;

    var properties = extractProperties(token);
    movedToBeDropped = [];

    var unmovableInCurrentToken = [];
    for (j = properties.length - 1; j >= 0; j--) {
      for (k = j - 1; k >= 0; k--) {
        if (!canReorderSingle(properties[j], properties[k])) {
          unmovableInCurrentToken.push(j);
          break;
        }
      }
    }

    for (j = 0, m = properties.length; j < m; j++) {
      var property = properties[j];
      var movedSameProperty = false;

      for (k = 0; k < movedCount; k++) {
        var movedProperty = movedProperties[k];

        if (movedToBeDropped.indexOf(k) == -1 && !canReorderSingle(property, movedProperty)) {
          dropPropertiesAt(i + 1, movedProperty);
          movedToBeDropped.push(k);
          delete movableTokens[movedProperty[3]];
        }

        if (!movedSameProperty)
          movedSameProperty = property[0] == movedProperty[0] && property[1] == movedProperty[1];
      }

      if (!isSelector || unmovableInCurrentToken.indexOf(j) > -1)
        continue;

      var key = property[3];
      movableTokens[key] = movableTokens[key] || [];
      movableTokens[key].push(token);

      if (!movedSameProperty)
        movedProperties.push(property);
    }

    movedToBeDropped = movedToBeDropped.sort(naturalSorter);
    for (j = 0, m = movedToBeDropped.length; j < m; j++) {
      movedProperties.splice(movedToBeDropped[j] - j, 1);
    }
  }

  var position = tokens[0] && tokens[0].kind == 'at-rule' && tokens[0].value.indexOf('@charset') === 0 ? 1 : 0;
  for (; position < tokens.length - 1; position++) {
    var isImportRule = tokens[position].kind === 'at-rule' && tokens[position].value.indexOf('@import') === 0;
    var isEscapedCommentSpecial = tokens[position].kind === 'text' && tokens[position].value.indexOf('__ESCAPED_COMMENT_SPECIAL') === 0;
    if (!(isImportRule || isEscapedCommentSpecial))
      break;
  }

  for (i = 0; i < movedProperties.length; i++) {
    dropPropertiesAt(position, movedProperties[i]);
  }
};

AdvancedOptimizer.prototype.mergeMediaQueries = function (tokens) {
  var candidates = {};
  var reduced = [];

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];
    if (token.kind != 'block' || token.isFlatBlock === true)
      continue;

    var candidate = candidates[token.value];
    if (!candidate) {
      candidate = [];
      candidates[token.value] = candidate;
    }

    candidate.push(i);
  }

  for (var name in candidates) {
    var positions = candidates[name];

    positionLoop:
    for (var j = positions.length - 1; j > 0; j--) {
      var source = tokens[positions[j]];
      var target = tokens[positions[j - 1]];
      var movedProperties = extractProperties(source);

      for (var k = positions[j] + 1; k < positions[j - 1]; k++) {
        var traversedProperties = extractProperties(tokens[k]);

        // moved then traversed as we move @media towards the end
        if (!canReorder(movedProperties, traversedProperties))
          continue positionLoop;
      }

      target.body = source.body.concat(target.body);
      source.body = [];

      reduced.push(target);
    }
  }

  return reduced;
};

function optimizeProperties(tokens, propertyOptimizer) {
  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token.kind == 'selector') {
      changeBodyOf(
        token,
        propertyOptimizer.process(token.value, token.body, false, true)
      );
    } else if (token.kind == 'block') {
      optimizeProperties(token.body, propertyOptimizer);
    }
  }
}

AdvancedOptimizer.prototype.optimize = function (tokens) {
  var self = this;

  function _optimize(tokens, withRestructuring) {
    tokens.forEach(function (token) {
      if (token.kind == 'block') {
        var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token.value);
        _optimize(token.body, !isKeyframes);
      }
    });

    optimizeProperties(tokens, self.propertyOptimizer);

    self.removeDuplicates(tokens);
    self.mergeAdjacent(tokens);
    self.reduceNonAdjacent(tokens);

    self.mergeNonAdjacentBySelector(tokens);
    self.mergeNonAdjacentByBody(tokens);

    if (self.options.restructuring && withRestructuring) {
      self.restructure(tokens);
      self.mergeAdjacent(tokens);
    }

    if (self.options.mediaMerging) {
      var reduced = self.mergeMediaQueries(tokens);
      for (var i = reduced.length - 1; i >= 0; i--) {
        _optimize(reduced[i].body);
      }
    }
  }

  _optimize(tokens, true);
};

module.exports = AdvancedOptimizer;

},{"../../properties/extractor":17,"../../properties/optimizer":18,"../../properties/reorderable":21,"./clean-up":27}],27:[function(requireb,module,exports){
function removeWhitespace(match, value) {
  return '[' + value.replace(/ /g, '') + ']';
}

function selectorSorter(s1, s2) {
  return s1.value > s2.value ? 1 : -1;
}

var CleanUp = {
  selectors: function (selectors, removeUnsupported, adjacentSpace) {
    var plain = [];
    var tokenized = [];

    for (var i = 0, l = selectors.length; i < l; i++) {
      var selector = selectors[i];
      var reduced = selector.value
        .replace(/\s+/g, ' ')
        .replace(/ ?, ?/g, ',')
        .replace(/\s*([>\+\~])\s*/g, '$1')
        .trim();

      if (adjacentSpace && reduced.indexOf('nav') > 0)
        reduced = reduced.replace(/\+nav(\S|$)/, '+ nav$1');

      if (removeUnsupported && (reduced.indexOf('*+html ') != -1 || reduced.indexOf('*:first-child+html ') != -1))
        continue;

      if (reduced.indexOf('*') > -1) {
        reduced = reduced
          .replace(/\*([:#\.\[])/g, '$1')
          .replace(/^(\:first\-child)?\+html/, '*$1+html');
      }

      if (reduced.indexOf('[') > -1)
        reduced = reduced.replace(/\[([^\]]+)\]/g, removeWhitespace);

      if (plain.indexOf(reduced) == -1) {
        plain.push(reduced);
        selector.value = reduced;
        tokenized.push(selector);
      }
    }

    return {
      list: plain.sort(),
      tokenized: tokenized.sort(selectorSorter)
    };
  },

  selectorDuplicates: function (selectors) {
    var plain = [];
    var tokenized = [];

    for (var i = 0, l = selectors.length; i < l; i++) {
      var selector = selectors[i];

      if (plain.indexOf(selector.value) == -1) {
        plain.push(selector.value);
        tokenized.push(selector);
      }
    }

    return {
      list: plain.sort(),
      tokenized: tokenized.sort(selectorSorter)
    };
  },

  block: function (block) {
    return block
      .replace(/\s+/g, ' ')
      .replace(/(,|:|\() /g, '$1')
      .replace(/ ?\) ?/g, ')');
  },

  atRule: function (block) {
    return block
      .replace(/\s+/g, ' ')
      .trim();
  }
};

module.exports = CleanUp;

},{}],28:[function(requireb,module,exports){
var CleanUp = requireb('./clean-up');
var Splitter = requireb('../../utils/splitter');

var RGB = requireb('../../colors/rgb');
var HSL = requireb('../../colors/hsl');
var HexNameShortener = requireb('../../colors/hex-name-shortener');

var processable = requireb('../../properties/processable');

var DEFAULT_ROUNDING_PRECISION = 2;
var CHARSET_TOKEN = '@charset';
var CHARSET_REGEXP = new RegExp('^' + CHARSET_TOKEN, 'i');

function SimpleOptimizer(options) {
  this.options = options;

  var units = ['px', 'em', 'ex', 'cm', 'mm', 'in', 'pt', 'pc', '%'];
  if (options.compatibility.units.rem)
    units.push('rem');
  options.unitsRegexp = new RegExp('(^|\\s|\\(|,)0(?:' + units.join('|') + ')', 'g');

  options.precision = {};
  options.precision.value = options.roundingPrecision === undefined ?
    DEFAULT_ROUNDING_PRECISION :
    options.roundingPrecision;
  options.precision.multiplier = Math.pow(10, options.precision.value);
  options.precision.regexp = new RegExp('(\\d*\\.\\d{' + (options.precision.value + 1) + ',})px', 'g');

  options.updateMetadata = this.options.advanced;
}

var valueMinifiers = {
  'background': function (value) {
    return value == 'none' || value == 'transparent' ? '0 0' : value;
  },
  'border-*-radius': function (value) {
    if (value.indexOf('/') == -1)
      return value;

    var parts = value.split(/\s*\/\s*/);
    if (parts[0] == parts[1])
      return parts[0];
    else
      return parts[0] + '/' + parts[1];
  },
  'filter': function (value) {
    if (value.indexOf('DXImageTransform') === value.lastIndexOf('DXImageTransform')) {
      value = value.replace(/progid:DXImageTransform\.Microsoft\.(Alpha|Chroma)(\W)/, function (match, filter, suffix) {
        return filter.toLowerCase() + suffix;
      });
    }

    return value
      .replace(/,(\S)/g, ', $1')
      .replace(/ ?= ?/g, '=');
  },
  'font': function (value) {
    var parts = value.split(' ');

    if (parts[1] != 'normal' && parts[1] != 'bold' && !/^[1-9]00/.test(parts[1]))
      parts[0] = this['font-weight'](parts[0]);

    return parts.join(' ');
  },
  'font-weight': function (value) {
    if (value == 'normal')
      return '400';
    else if (value == 'bold')
      return '700';
    else
      return value;
  },
  'outline': function (value) {
    return value == 'none' ? '0' : value;
  }
};

function isNegative(value) {
  var parts = new Splitter(',').split(value);
  for (var i = 0, l = parts.length; i < l; i++) {
    if (parts[i][0] == '-' && parseFloat(parts[i]) < 0)
      return true;
  }

  return false;
}

function zeroMinifier(_, value) {
  if (value.indexOf('0') == -1)
    return value;

  if (value.indexOf('-') > -1) {
    value = value
      .replace(/([^\w\d\-]|^)\-0([^\.]|$)/g, '$10$2')
      .replace(/([^\w\d\-]|^)\-0([^\.]|$)/g, '$10$2');
  }

  return value
    .replace(/(^|\s)0+([1-9])/g, '$1$2')
    .replace(/(^|\D)\.0+(\D|$)/g, '$10$2')
    .replace(/(^|\D)\.0+(\D|$)/g, '$10$2')
    .replace(/\.([1-9]*)0+(\D|$)/g, function(match, nonZeroPart, suffix) {
      return (nonZeroPart.length > 0 ? '.' : '') + nonZeroPart + suffix;
    })
    .replace(/(^|\D)0\.(\d)/g, '$1.$2');
}

function zeroDegMinifier(_, value) {
  if (value.indexOf('0deg') == -1)
    return value;

  return value.replace(/\(0deg\)/g, '(0)');
}

function precisionMinifier(_, value, precisionOptions) {
  if (precisionOptions.value === -1 || value.indexOf('.') === -1)
    return value;

  return value
    .replace(precisionOptions.regexp, function(match, number) {
      return Math.round(parseFloat(number) * precisionOptions.multiplier) / precisionOptions.multiplier + 'px';
    })
    .replace(/(\d)\.($|\D)/g, '$1$2');
}

function unitMinifier(_, value, unitsRegexp) {
  return value.replace(unitsRegexp, '$1' + '0');
}

function multipleZerosMinifier(property, value) {
  if (value.indexOf('0 0 0 0') == -1)
    return value;

  if (property.indexOf('box-shadow') > -1)
    return value == '0 0 0 0' ? '0 0' : value;

  return value.replace(/^0 0 0 0$/, '0');
}

function colorMininifier(property, value, compatibility) {
  if (value.indexOf('#') === -1 && value.indexOf('rgb') == -1 && value.indexOf('hsl') == -1)
    return HexNameShortener.shorten(value);

  value = value
    .replace(/rgb\((\-?\d+),(\-?\d+),(\-?\d+)\)/g, function (match, red, green, blue) {
      return new RGB(red, green, blue).toHex();
    })
    .replace(/hsl\((-?\d+),(-?\d+)%?,(-?\d+)%?\)/g, function (match, hue, saturation, lightness) {
      return new HSL(hue, saturation, lightness).toHex();
    })
    .replace(/(^|[^='"])#([0-9a-f]{6})/gi, function (match, prefix, color) {
      if (color[0] == color[1] && color[2] == color[3] && color[4] == color[5])
        return prefix + '#' + color[0] + color[2] + color[4];
      else
        return prefix + '#' + color;
    })
    .replace(/(rgb|rgba|hsl|hsla)\(([^\)]+)\)/g, function(match, colorFunction, colorDef) {
      var tokens = colorDef.split(',');
      var applies = colorFunction == 'hsl' || colorFunction == 'hsla' || tokens[0].indexOf('%') > -1;
      if (!applies)
        return match;

      if (tokens[1].indexOf('%') == -1)
        tokens[1] += '%';
      if (tokens[2].indexOf('%') == -1)
        tokens[2] += '%';
      return colorFunction + '(' + tokens.join(',') + ')';
    });

  if (compatibility.colors.opacity) {
    value = value.replace(/(?:rgba|hsla)\(0,0%?,0%?,0\)/g, function (match) {
      if (new Splitter(',').split(value).pop().indexOf('gradient(') > -1)
        return match;

      return 'transparent';
    });
  }

  return HexNameShortener.shorten(value);
}

function spaceMinifier(property, value) {
  if (property == 'filter' || value.indexOf(') ') == -1 || processable.implementedFor.test(property))
    return value;

  return value.replace(/\) ((?![\+\-] )|$)/g, ')$1');
}

function reduce(body, options) {
  var reduced = [];
  var properties = [];
  var newProperty;

  for (var i = 0, l = body.length; i < l; i++) {
    var token = body[i];

    // FIXME: the check should be gone with #396
    if (token.value.indexOf('__ESCAPED_') === 0) {
      reduced.push(token);
      properties.push(token.value);
      continue;
    }

    var firstColon = token.value.indexOf(':');
    var property = token.value.substring(0, firstColon);
    var value = token.value.substring(firstColon + 1);
    var important = false;

    if (!options.compatibility.properties.iePrefixHack && (property[0] == '_' || property[0] == '*'))
      continue;

    if (value.indexOf('!important') > 0 || value.indexOf('! important') > 0) {
      value = value.substring(0, value.indexOf('!')).trim();
      important = true;
    }

    if (property.indexOf('padding') === 0 && isNegative(value))
      continue;

    if (property.indexOf('border') === 0 && property.indexOf('radius') > 0)
      value = valueMinifiers['border-*-radius'](value);

    if (valueMinifiers[property])
      value = valueMinifiers[property](value);

    value = precisionMinifier(property, value, options.precision);
    value = zeroMinifier(property, value);
    value = zeroDegMinifier(property, value);
    value = unitMinifier(property, value, options.unitsRegexp);
    value = multipleZerosMinifier(property, value);
    value = colorMininifier(property, value, options.compatibility);

    if (!options.compatibility.properties.spaceAfterClosingBrace)
      value = spaceMinifier(property, value);

    newProperty = property + ':' + value + (important ? '!important' : '');
    reduced.push({ value: newProperty, metadata: token.metadata });
    properties.push(newProperty);
  }

  return {
    tokenized: reduced,
    list: properties
  };
}

SimpleOptimizer.prototype.optimize = function(tokens) {
  var self = this;
  var hasCharset = false;
  var options = this.options;

  function _optimize(tokens) {
    for (var i = 0, l = tokens.length; i < l; i++) {
      var token = tokens[i];
      // FIXME: why it's so?
      if (!token)
        break;

      if (token.kind == 'selector') {
        var newSelectors = CleanUp.selectors(token.value, !options.compatibility.selectors.ie7Hack, options.compatibility.selectors.adjacentSpace);
        token.value = newSelectors.tokenized;

        if (token.value.length === 0) {
          tokens.splice(i, 1);
          i--;
          continue;
        }
        var newBody = reduce(token.body, self.options);
        token.body = newBody.tokenized;

        if (options.updateMetadata) {
          token.metadata.body = newBody.list.join(';');
          token.metadata.bodiesList = newBody.list;
          token.metadata.selector = newSelectors.list.join(',');
          token.metadata.selectorsList = newSelectors.list;
        }
      } else if (token.kind == 'block') {
        token.value = CleanUp.block(token.value);
        if (token.isFlatBlock)
          token.body = reduce(token.body, self.options).tokenized;
        else
          _optimize(token.body);
      } else if (token.kind == 'at-rule') {
        token.value = CleanUp.atRule(token.value);

        if (CHARSET_REGEXP.test(token.value)) {
          if (hasCharset || token.value.indexOf(CHARSET_TOKEN) == -1) {
            tokens.splice(i, 1);
            i--;
          } else {
            hasCharset = true;
            tokens.splice(i, 1);
            tokens.unshift({ kind: 'at-rule', value: token.value.replace(CHARSET_REGEXP, CHARSET_TOKEN) });
          }
        }
      }
    }
  }

  _optimize(tokens);
};

module.exports = SimpleOptimizer;

},{"../../colors/hex-name-shortener":11,"../../colors/hsl":12,"../../colors/rgb":13,"../../properties/processable":20,"../../utils/splitter":46,"./clean-up":27}],29:[function(requireb,module,exports){
var path = requireb('path');
var fs = require('fs');
var url = require('url');

var SourceMapGenerator = requireb('source-map').SourceMapGenerator;

var lineBreak = requireb('os').EOL;

function Rebuilder(options, restoreCallback, inputMapTracker) {
  this.column = 0;
  this.line = 1;
  this.output = [];
  this.keepBreaks = options.keepBreaks;
  this.restore = restoreCallback;
  this.inputMapTracker = inputMapTracker;
  this.outputMap = new SourceMapGenerator();

  if (options.root) {
    this.rebaseTo = path.resolve(options.root);
    this.resolvePath = this.rootPathResolver;
  } else if (options.target) {
    this.rebaseTo = path.resolve(process.cwd(), options.target);
    if (!fs.existsSync(this.rebaseTo) || fs.statSync(this.rebaseTo).isFile())
      this.rebaseTo = path.dirname(this.rebaseTo);
    this.resolvePath = this.relativePathResolver;
  }
}

Rebuilder.prototype.rootPathResolver = function (sourcePath) {
  return sourcePath.replace(this.rebaseTo, '');
};

Rebuilder.prototype.relativePathResolver = function (sourcePath, sourceRelativeTo) {
  if (sourceRelativeTo)
    sourcePath = path.resolve(path.dirname(sourceRelativeTo), sourcePath);

  return path.relative(this.rebaseTo, sourcePath);
};

Rebuilder.prototype.rebuildValue = function (list, separator, isSelector) {
  var escaped = 0;

  for (var i = 0, l = list.length; i < l; i++) {
    var el = list[i];

    if (el.value.indexOf('__ESCAPED_') === 0) {
      this.store(el);
      escaped++;

      if (i === l - 1 && escaped > 0)
        this.output.splice(this.output.length - escaped - 1, 1);
    } else {
      this.store(el, isSelector ? l : 0);
      this.store(i < l - 1 ? separator : '');
      escaped = 0;
    }
  }
};

Rebuilder.prototype.store = function (token, allowNFallbacks) {
  var value = typeof token == 'string' ?
    token :
    token.value.indexOf('_') > -1 ? this.restore(token.value) : token.value;

  this.track(value, token.metadata, allowNFallbacks);
  this.output.push(value);
};

Rebuilder.prototype.rebuildList = function (tokens, isFlatBlock) {
  var joinCharacter = isFlatBlock ? ';' : (this.keepBreaks ? lineBreak : '');

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token.kind === 'text' || token.kind == 'at-rule') {
      this.store(token);
      continue;
    }

    // FIXME: broken due to joining/splitting
    if (token.body && (token.body.length === 0 || (token.body.length == 1 && token.body[0].value === '')))
      continue;

    if (token.kind == 'block') {
      if (token.body.length > 0) {
        this.rebuildValue([{ value: token.value, metadata: token.metadata }], '');
        this.store('{');
        if (token.isFlatBlock)
          this.rebuildValue(token.body, ';');
        else
          this.rebuildList(token.body, false);
        this.store('}');
      }
    } else {
      this.rebuildValue(token.value, ',', true);
      this.store('{');
      this.rebuildValue(token.body, ';');
      this.store('}');
    }

    this.store(joinCharacter);
  }
};

Rebuilder.prototype.track = function (value, metadata, allowNFallbacks) {
  if (metadata)
    this.trackMetadata(metadata, value, allowNFallbacks);

  var parts = value.split('\n');
  this.line += parts.length - 1;
  this.column = parts.length > 1 ? 0 : (this.column + parts.pop().length);
};

Rebuilder.prototype.trackMetadata = function (metadata, value, allowNFallbacks) {
  var original = this.inputMapTracker.isTracking(metadata) ?
    this.inputMapTracker.originalPositionFor(metadata, value, allowNFallbacks) :
    {};

  this.outputMap.addMapping({
    generated: {
      line: this.line,
      column: this.column,
    },
    source: this.stylingSourceFor(original, metadata) || '__stdin__.css',
    original: {
      line: original.line || metadata.line,
      column: original.column || metadata.column
    }
  });
};

Rebuilder.prototype.stylingSourceFor = function (original, metadata) {
  var source = original.source || metadata.source;

  if (source && metadata.source && (/^https?:\/\//.test(metadata.source) || /^\/\//.test(metadata.source)) && source != metadata.source)
    return url.resolve(metadata.source, source);
  else if (source && this.resolvePath)
    return this.resolvePath(source, metadata.source);
  else
    return source;
};


function SourceMapStringifier(options, restoreCallback, inputMapTracker) {
  this.rebuilder = new Rebuilder(options, restoreCallback, inputMapTracker);
}

SourceMapStringifier.prototype.toString = function (tokens) {
  this.rebuilder.rebuildList(tokens);

  return {
    sourceMap: this.rebuilder.outputMap,
    styles: this.rebuilder.output.join('').trim()
  };
};

module.exports = SourceMapStringifier;

},{"fs":"fs","os":97,"path":98,"source-map":141,"url":"url"}],30:[function(requireb,module,exports){
var lineBreak = requireb('os').EOL;

function Stringifier(options, restoreCallback) {
  this.keepBreaks = options.keepBreaks;
  this.restoreCallback = restoreCallback;
}

function valueRebuilder(list, separator) {
  var merged = '';

  for (var i = 0, l = list.length; i < l; i++) {
    var el = list[i];

    if (el.value.indexOf('__ESCAPED_') === 0) {
      merged += el.value;

      if (i === l - 1) {
        var lastSemicolonAt = merged.lastIndexOf(';');
        merged = merged.substring(0, lastSemicolonAt) + merged.substring(lastSemicolonAt + 1);
      }
    } else {
      merged += list[i].value + (i < l - 1 ? separator : '');
    }
  }

  return merged;
}

function rebuild(tokens, keepBreaks, isFlatBlock) {
  var joinCharacter = isFlatBlock ? ';' : (keepBreaks ? lineBreak : '');
  var parts = [];
  var body;
  var selector;

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token.kind === 'text' || token.kind == 'at-rule') {
      parts.push(token.value);
      continue;
    }

    // FIXME: broken due to joining/splitting
    if (token.body && (token.body.length === 0 || (token.body.length == 1 && token.body[0].value === '')))
      continue;

    if (token.kind == 'block') {
      body = token.isFlatBlock ?
        valueRebuilder(token.body, ';') :
        rebuild(token.body, keepBreaks, token.isFlatBlock);
      if (body.length > 0)
        parts.push(token.value + '{' + body + '}');
    } else {
      selector = valueRebuilder(token.value, ',');
      body = valueRebuilder(token.body, ';');
      parts.push(selector + '{' + body + '}');
    }
  }

  return parts.join(joinCharacter);
}

Stringifier.prototype.toString = function (tokens) {
  var rebuilt = rebuild(tokens, this.keepBreaks, false);

  return {
    styles: this.restoreCallback(rebuilt).trim()
  };
};

module.exports = Stringifier;

},{"os":97}],31:[function(requireb,module,exports){
var Chunker = requireb('../utils/chunker');
var Extract = requireb('../utils/extractors');
var SourceMaps = requireb('../utils/source-maps');

var flatBlock = /(^@(font\-face|page|\-ms\-viewport|\-o\-viewport|viewport|counter\-style)|\\@.+?)/;

function Tokenizer(minifyContext, addMetadata, addSourceMap) {
  this.minifyContext = minifyContext;
  this.addMetadata = addMetadata;
  this.addSourceMap = addSourceMap;
}

Tokenizer.prototype.toTokens = function (data) {
  data = data.replace(/\r\n/g, '\n');

  var chunker = new Chunker(data, '}', 128);
  if (chunker.isEmpty())
    return [];

  var context = {
    cursor: 0,
    mode: 'top',
    chunker: chunker,
    chunk: chunker.next(),
    outer: this.minifyContext,
    addMetadata: this.addMetadata,
    addSourceMap: this.addSourceMap,
    state: [],
    line: 1,
    column: 0,
    source: undefined
  };

  return tokenize(context);
};

function whatsNext(context) {
  var mode = context.mode;
  var chunk = context.chunk;
  var closest;

  if (chunk.length == context.cursor) {
    if (context.chunker.isEmpty())
      return null;

    context.chunk = chunk = context.chunker.next();
    context.cursor = 0;
  }

  if (mode == 'body') {
    closest = chunk.indexOf('}', context.cursor);
    return closest > -1 ?
      [closest, 'bodyEnd'] :
      null;
  }

  var nextSpecial = chunk.indexOf('@', context.cursor);
  var nextEscape = chunk.indexOf('__ESCAPED_', context.cursor);
  var nextBodyStart = chunk.indexOf('{', context.cursor);
  var nextBodyEnd = chunk.indexOf('}', context.cursor);

  if (nextEscape > -1 && /\S/.test(chunk.substring(context.cursor, nextEscape)))
    nextEscape = -1;

  closest = nextSpecial;
  if (closest == -1 || (nextEscape > -1 && nextEscape < closest))
    closest = nextEscape;
  if (closest == -1 || (nextBodyStart > -1 && nextBodyStart < closest))
    closest = nextBodyStart;
  if (closest == -1 || (nextBodyEnd > -1 && nextBodyEnd < closest))
    closest = nextBodyEnd;

  if (closest == -1)
    return;
  if (nextEscape === closest)
    return [closest, 'escape'];
  if (nextBodyStart === closest)
    return [closest, 'bodyStart'];
  if (nextBodyEnd === closest)
    return [closest, 'bodyEnd'];
  if (nextSpecial === closest)
    return [closest, 'special'];
}

function tokenize(context) {
  var chunk = context.chunk;
  var tokenized = [];
  var newToken;
  var value;
  var addSourceMap = context.addSourceMap;

  while (true) {
    var next = whatsNext(context);
    if (!next) {
      var whatsLeft = context.chunk.substring(context.cursor);
      if (whatsLeft.trim().length > 0) {
        if (context.mode == 'body') {
          context.outer.warnings.push('Missing \'}\' after \'' + whatsLeft + '\'. Ignoring.');
        } else {
          tokenized.push({ kind: 'text', value: whatsLeft });
        }
        context.cursor += whatsLeft.length;
      }
      break;
    }

    var nextSpecial = next[0];
    var what = next[1];
    var nextEnd;
    var oldMode;

    chunk = context.chunk;

    if (context.cursor != nextSpecial && what != 'bodyEnd') {
      var spacing = chunk.substring(context.cursor, nextSpecial);
      var leadingWhitespace = /^\s+/.exec(spacing);

      if (leadingWhitespace) {
        context.cursor += leadingWhitespace[0].length;

        if (addSourceMap)
          SourceMaps.track(leadingWhitespace[0], context);
      }
    }

    if (what == 'special') {
      var firstOpenBraceAt = chunk.indexOf('{', nextSpecial);
      var firstSemicolonAt = chunk.indexOf(';', nextSpecial);
      var isSingle = firstSemicolonAt > -1 && (firstOpenBraceAt == -1 || firstSemicolonAt < firstOpenBraceAt);
      var isBroken = firstOpenBraceAt == -1 && firstSemicolonAt == -1;
      if (isBroken) {
        context.outer.warnings.push('Broken declaration: \'' + chunk.substring(context.cursor) +  '\'.');
        context.cursor = chunk.length;
      } else if (isSingle) {
        nextEnd = chunk.indexOf(';', nextSpecial + 1);

        value = chunk.substring(context.cursor, nextEnd + 1);
        newToken = { kind: 'at-rule', value: value };
        tokenized.push(newToken);

        if (addSourceMap)
          newToken.metadata = SourceMaps.saveAndTrack(value, context, true);

        context.cursor = nextEnd + 1;
      } else {
        nextEnd = chunk.indexOf('{', nextSpecial + 1);
        value = chunk.substring(context.cursor, nextEnd);

        var trimmedValue = value.trim();
        var isFlat = flatBlock.test(trimmedValue);
        oldMode = context.mode;
        context.cursor = nextEnd + 1;
        context.mode = isFlat ? 'body' : 'block';

        newToken = { kind: 'block', value: trimmedValue, isFlatBlock: isFlat };

        if (addSourceMap)
          newToken.metadata = SourceMaps.saveAndTrack(value, context, true);

        newToken.body = tokenize(context);
        if (typeof newToken.body == 'string')
          newToken.body = Extract.properties(newToken.body, context).tokenized;

        context.mode = oldMode;

        if (addSourceMap)
          SourceMaps.suffix(context);

        tokenized.push(newToken);
      }
    } else if (what == 'escape') {
      nextEnd = chunk.indexOf('__', nextSpecial + 1);
      var escaped = chunk.substring(context.cursor, nextEnd + 2);
      var isStartSourceMarker = !!context.outer.sourceTracker.nextStart(escaped);
      var isEndSourceMarker = !!context.outer.sourceTracker.nextEnd(escaped);

      if (isStartSourceMarker) {
        if (addSourceMap)
          SourceMaps.track(escaped, context);

        context.state.push({
          source: context.source,
          line: context.line,
          column: context.column
        });
        context.source = context.outer.sourceTracker.nextStart(escaped).filename;
        context.line = 1;
        context.column = 0;
      } else if (isEndSourceMarker) {
        var oldState = context.state.pop();
        context.source = oldState.source;
        context.line = oldState.line;
        context.column = oldState.column;

        if (addSourceMap)
          SourceMaps.track(escaped, context);
      } else {
        if (escaped.indexOf('__ESCAPED_COMMENT_SPECIAL') === 0)
          tokenized.push({ kind: 'text', value: escaped });

        if (addSourceMap)
          SourceMaps.track(escaped, context);
      }

      context.cursor = nextEnd + 2;
    } else if (what == 'bodyStart') {
      var selectorData = Extract.selectors(chunk.substring(context.cursor, nextSpecial), context);

      oldMode = context.mode;
      context.cursor = nextSpecial + 1;
      context.mode = 'body';

      var bodyData = Extract.properties(tokenize(context), context);

      if (addSourceMap)
        SourceMaps.suffix(context);

      context.mode = oldMode;

      newToken = {
        kind: 'selector',
        value: selectorData.tokenized,
        body: bodyData.tokenized
      };
      if (context.addMetadata) {
        newToken.metadata = {
          body: bodyData.list.join(','),
          bodiesList: bodyData.list,
          selector: selectorData.list.join(','),
          selectorsList: selectorData.list
        };
      }
      tokenized.push(newToken);
    } else if (what == 'bodyEnd') {
      // extra closing brace at the top level can be safely ignored
      if (context.mode == 'top') {
        var at = context.cursor;
        var warning = chunk[context.cursor] == '}' ?
          'Unexpected \'}\' in \'' + chunk.substring(at - 20, at + 20) + '\'. Ignoring.' :
          'Unexpected content: \'' + chunk.substring(at, nextSpecial + 1) + '\'. Ignoring.';

        context.outer.warnings.push(warning);
        context.cursor = nextSpecial + 1;
        continue;
      }

      if (context.mode == 'block' && context.addSourceMap)
        SourceMaps.track(chunk.substring(context.cursor, nextSpecial), context);
      if (context.mode != 'block')
        tokenized = chunk.substring(context.cursor, nextSpecial);

      context.cursor = nextSpecial + 1;

      break;
    }
  }

  return tokenized;
}

module.exports = Tokenizer;

},{"../utils/chunker":37,"../utils/extractors":39,"../utils/source-maps":43}],32:[function(requireb,module,exports){
var EscapeStore = requireb('./escape-store');
var QuoteScanner = requireb('../utils/quote-scanner');

var SPECIAL_COMMENT_PREFIX = '/*!';
var COMMENT_PREFIX = '/*';
var COMMENT_SUFFIX = '*/';

var lineBreak = requireb('os').EOL;

function CommentsProcessor(context, keepSpecialComments, keepBreaks, saveWaypoints) {
  this.comments = new EscapeStore('COMMENT');
  this.specialComments = new EscapeStore('COMMENT_SPECIAL');

  this.context = context;
  this.keepAll = keepSpecialComments == '*';
  this.keepOne = keepSpecialComments == '1' || keepSpecialComments === 1;
  this.keepBreaks = keepBreaks;
  this.saveWaypoints = saveWaypoints;
}

function quoteScannerFor(data) {
  var quoteMap = [];
  new QuoteScanner(data).each(function (quotedString, _, startsAt) {
    quoteMap.push([startsAt, startsAt + quotedString.length]);
  });

  return function (position) {
    for (var i = 0, l = quoteMap.length; i < l; i++) {
      if (quoteMap[i][0] < position && quoteMap[i][1] > position)
        return true;
    }

    return false;
  };
}

CommentsProcessor.prototype.escape = function (data) {
  var tempData = [];
  var nextStart = 0;
  var nextEnd = 0;
  var cursor = 0;
  var indent = 0;
  var breaksCount;
  var lastBreakAt;
  var newIndent;
  var isQuotedAt = quoteScannerFor(data);
  var saveWaypoints = this.saveWaypoints;

  for (; nextEnd < data.length;) {
    nextStart = data.indexOf(COMMENT_PREFIX, cursor);
    if (nextStart == -1)
      break;

    if (isQuotedAt(nextStart)) {
      tempData.push(data.substring(cursor, nextStart + COMMENT_PREFIX.length));
      cursor = nextStart + COMMENT_PREFIX.length;
      continue;
    }

    nextEnd = data.indexOf(COMMENT_SUFFIX, nextStart + COMMENT_PREFIX.length);
    if (nextEnd == -1) {
      this.context.warnings.push('Broken comment: \'' + data.substring(nextStart) + '\'.');
      nextEnd = data.length - 2;
    }

    tempData.push(data.substring(cursor, nextStart));

    var comment = data.substring(nextStart, nextEnd + COMMENT_SUFFIX.length);
    var isSpecialComment = comment.indexOf(SPECIAL_COMMENT_PREFIX) === 0;

    if (saveWaypoints) {
      breaksCount = comment.split(lineBreak).length - 1;
      lastBreakAt = comment.lastIndexOf(lineBreak);
      newIndent = lastBreakAt > 0 ?
        comment.substring(lastBreakAt + lineBreak.length).length :
        indent + comment.length;
    }

    if (saveWaypoints || isSpecialComment) {
      var metadata = saveWaypoints ? [breaksCount, newIndent] : null;
      var placeholder = isSpecialComment ?
        this.specialComments.store(comment, metadata) :
        this.comments.store(comment, metadata);
      tempData.push(placeholder);
    }

    if (saveWaypoints)
      indent = newIndent + 1;
    cursor = nextEnd + COMMENT_SUFFIX.length;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

function restore(context, data, from, isSpecial) {
  var tempData = [];
  var restored = 0;
  var cursor = 0;
  var addBreak;

  for (; cursor < data.length;) {
    var nextMatch = from.nextMatch(data, cursor);
    if (nextMatch.start < 0)
      break;

    tempData.push(data.substring(cursor, nextMatch.start));
    var comment = from.restore(nextMatch.match);

    if (isSpecial && (context.keepAll || (context.keepOne && restored === 0))) {
      restored++;
      addBreak = context.keepBreaks && data[nextMatch.end] != '\n' && data.lastIndexOf('\r\n', nextMatch.end + 1) != nextMatch.end;
      tempData.push(comment, addBreak ? lineBreak : '');
    } else {
      nextMatch.end += context.keepBreaks ? lineBreak.length : 0;
    }

    cursor = nextMatch.end;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
}

CommentsProcessor.prototype.restore = function (data) {
  data = restore(this, data, this.comments, false);
  data = restore(this, data, this.specialComments, true);
  return data;
};

module.exports = CommentsProcessor;

},{"../utils/quote-scanner":42,"./escape-store":33,"os":97}],33:[function(requireb,module,exports){
var placeholderBrace = '__';

function EscapeStore(placeholderRoot) {
  this.placeholderRoot = 'ESCAPED_' + placeholderRoot + '_CLEAN_CSS';
  this.placeholderToData = {};
  this.dataToPlaceholder = {};
  this.count = 0;
  this.restoreMatcher = new RegExp(this.placeholderRoot + '(\\d+)');
}

EscapeStore.prototype._nextPlaceholder = function (metadata) {
  return {
    index: this.count,
    value: placeholderBrace + this.placeholderRoot + this.count++ + metadata + placeholderBrace
  };
};

EscapeStore.prototype.store = function (data, metadata) {
  var encodedMetadata = metadata ?
    '(' + metadata.join(',') + ')' :
    '';
  var placeholder = this.dataToPlaceholder[data];

  if (!placeholder) {
    var nextPlaceholder = this._nextPlaceholder(encodedMetadata);
    placeholder = nextPlaceholder.value;
    this.placeholderToData[nextPlaceholder.index] = data;
    this.dataToPlaceholder[data] = nextPlaceholder.value;
  }

  if (metadata)
    placeholder = placeholder.replace(/\([^\)]+\)/, encodedMetadata);

  return placeholder;
};

EscapeStore.prototype.nextMatch = function (data, cursor) {
  var next = {};

  next.start = data.indexOf(this.placeholderRoot, cursor) - placeholderBrace.length;
  next.end = data.indexOf(placeholderBrace, next.start + placeholderBrace.length) + placeholderBrace.length;
  if (next.start > -1 && next.end > -1)
    next.match = data.substring(next.start, next.end);

  return next;
};

EscapeStore.prototype.restore = function (placeholder) {
  var index = this.restoreMatcher.exec(placeholder)[1];
  return this.placeholderToData[index];
};

module.exports = EscapeStore;

},{}],34:[function(requireb,module,exports){
var EscapeStore = requireb('./escape-store');

var EXPRESSION_NAME = 'expression';
var EXPRESSION_START = '(';
var EXPRESSION_END = ')';
var EXPRESSION_PREFIX = EXPRESSION_NAME + EXPRESSION_START;
var BODY_START = '{';
var BODY_END = '}';

var lineBreak = requireb('os').EOL;

function findEnd(data, start) {
  var end = start + EXPRESSION_NAME.length;
  var level = 0;
  var quoted = false;
  var braced = false;

  while (true) {
    var current = data[end++];

    if (quoted) {
      quoted = current != '\'' && current != '"';
    } else {
      quoted = current == '\'' || current == '"';

      if (current == EXPRESSION_START)
        level++;
      if (current == EXPRESSION_END)
        level--;
      if (current == BODY_START)
        braced = true;
      if (current == BODY_END && !braced && level == 1) {
        end--;
        level--;
      }
    }

    if (level === 0 && current == EXPRESSION_END)
      break;
    if (!current) {
      end = data.substring(0, end).lastIndexOf(BODY_END);
      break;
    }
  }

  return end;
}

function ExpressionsProcessor(saveWaypoints) {
  this.expressions = new EscapeStore('EXPRESSION');
  this.saveWaypoints = saveWaypoints;
}

ExpressionsProcessor.prototype.escape = function (data) {
  var nextStart = 0;
  var nextEnd = 0;
  var cursor = 0;
  var tempData = [];
  var indent = 0;
  var breaksCount;
  var lastBreakAt;
  var newIndent;
  var saveWaypoints = this.saveWaypoints;

  for (; nextEnd < data.length;) {
    nextStart = data.indexOf(EXPRESSION_PREFIX, nextEnd);
    if (nextStart == -1)
      break;

    nextEnd = findEnd(data, nextStart);

    var expression = data.substring(nextStart, nextEnd);
    if (saveWaypoints) {
      breaksCount = expression.split(lineBreak).length - 1;
      lastBreakAt = expression.lastIndexOf(lineBreak);
      newIndent = lastBreakAt > 0 ?
        expression.substring(lastBreakAt + lineBreak.length).length :
        indent + expression.length;
    }

    var metadata = saveWaypoints ? [breaksCount, newIndent] : null;
    var placeholder = this.expressions.store(expression, metadata);
    tempData.push(data.substring(cursor, nextStart));
    tempData.push(placeholder);

    if (saveWaypoints)
      indent = newIndent + 1;
    cursor = nextEnd;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

ExpressionsProcessor.prototype.restore = function (data) {
  var tempData = [];
  var cursor = 0;

  for (; cursor < data.length;) {
    var nextMatch = this.expressions.nextMatch(data, cursor);
    if (nextMatch.start < 0)
      break;

    tempData.push(data.substring(cursor, nextMatch.start));
    var comment = this.expressions.restore(nextMatch.match);
    tempData.push(comment);

    cursor = nextMatch.end;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

module.exports = ExpressionsProcessor;

},{"./escape-store":33,"os":97}],35:[function(requireb,module,exports){
var EscapeStore = requireb('./escape-store');
var QuoteScanner = requireb('../utils/quote-scanner');

var lineBreak = requireb('os').EOL;

function FreeTextProcessor(saveWaypoints) {
  this.matches = new EscapeStore('FREE_TEXT');
  this.saveWaypoints = saveWaypoints;
}

// Strip content tags by replacing them by the a special
// marker for further restoring. It's done via string scanning
// instead of regexps to speed up the process.
FreeTextProcessor.prototype.escape = function(data) {
  var self = this;
  var breaksCount;
  var lastBreakAt;
  var indent;
  var metadata;
  var saveWaypoints = this.saveWaypoints;

  return new QuoteScanner(data).each(function(match, store) {
    if (saveWaypoints) {
      breaksCount = match.split(lineBreak).length - 1;
      lastBreakAt = match.lastIndexOf(lineBreak);
      indent = lastBreakAt > 0 ?
        match.substring(lastBreakAt + lineBreak.length).length :
        match.length;
      metadata = [breaksCount, indent];
    }

    var placeholder = self.matches.store(match, metadata);
    store.push(placeholder);
  });
};

function normalize(text, data, cursor) {
  // FIXME: this is a hack
  var lastSemicolon = data.lastIndexOf(';', cursor);
  var lastOpenBrace = data.lastIndexOf('{', cursor);
  var lastOne = 0;

  if (lastSemicolon > -1 && lastOpenBrace > -1)
    lastOne = Math.max(lastSemicolon, lastOpenBrace);
  else if (lastSemicolon == -1)
    lastOne = lastOpenBrace;
  else
    lastOne = lastSemicolon;

  var context = data.substring(lastOne + 1, cursor);

  if (/\[[\w\d\-]+[\*\|\~\^\$]?=$/.test(context))
    text = text.replace(/\\\n|\\\r\n/g, '');

  if (/^['"][a-zA-Z][a-zA-Z\d\-_]+['"]$/.test(text) && !/format\($/.test(context)) {
    var isFont = /^(font|font\-family):/.test(context);
    var isAttribute = /\[[\w\d\-]+[\*\|\~\^\$]?=$/.test(context);
    var isKeyframe = /@(-moz-|-o-|-webkit-)?keyframes /.test(context);
    var isAnimation = /^(-moz-|-o-|-webkit-)?animation(-name)?:/.test(context);

    if (isFont || isAttribute || isKeyframe || isAnimation)
      text = text.substring(1, text.length - 1);
  }

  return text;
}

FreeTextProcessor.prototype.restore = function(data) {
  var tempData = [];
  var cursor = 0;

  for (; cursor < data.length;) {
    var nextMatch = this.matches.nextMatch(data, cursor);
    if (nextMatch.start < 0)
      break;

    tempData.push(data.substring(cursor, nextMatch.start));
    var text = normalize(this.matches.restore(nextMatch.match), data, nextMatch.start);
    tempData.push(text);

    cursor = nextMatch.end;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

module.exports = FreeTextProcessor;

},{"../utils/quote-scanner":42,"./escape-store":33,"os":97}],36:[function(requireb,module,exports){
var EscapeStore = requireb('./escape-store');
var UrlScanner = requireb('../utils/url-scanner');

var lineBreak = requireb('os').EOL;

function UrlsProcessor(context, saveWaypoints, removeTrailingSpace) {
  this.urls = new EscapeStore('URL');
  this.context = context;
  this.saveWaypoints = saveWaypoints;
  this.removeTrailingSpace = removeTrailingSpace;
}

// Strip urls by replacing them by a special
// marker for further restoring. It's done via string scanning
// instead of regexps to speed up the process.
UrlsProcessor.prototype.escape = function (data) {
  var breaksCount;
  var lastBreakAt;
  var indent;
  var saveWaypoints = this.saveWaypoints;
  var self = this;

  return new UrlScanner(data, this.context).reduce(function (url, tempData) {
    if (saveWaypoints) {
      breaksCount = url.split(lineBreak).length - 1;
      lastBreakAt = url.lastIndexOf(lineBreak);
      indent = lastBreakAt > 0 ?
        url.substring(lastBreakAt + lineBreak.length).length :
        url.length;
    }

    var placeholder = self.urls.store(url, saveWaypoints ? [breaksCount, indent] : null);
    tempData.push(placeholder);
  });
};

function normalize(url) {
  url = url
    .replace(/^url/gi, 'url')
    .replace(/\\?\n|\\?\r\n/g, '')
    .replace(/(\s{2,}|\s)/g, ' ')
    .replace(/^url\((['"])? /, 'url($1')
    .replace(/ (['"])?\)$/, '$1)');

  if (!/url\(.*[\s\(\)].*\)/.test(url) && !/url\(['"]data:[^;]+;charset/.test(url))
    url = url.replace(/["']/g, '');

  return url;
}

UrlsProcessor.prototype.restore = function (data) {
  var tempData = [];
  var cursor = 0;

  for (; cursor < data.length;) {
    var nextMatch = this.urls.nextMatch(data, cursor);
    if (nextMatch.start < 0)
      break;

    tempData.push(data.substring(cursor, nextMatch.start));
    var url = normalize(this.urls.restore(nextMatch.match));
    tempData.push(url);

    cursor = nextMatch.end + (this.removeTrailingSpace && data[nextMatch.end] == ' ' ? 1 : 0);
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

module.exports = UrlsProcessor;

},{"../utils/url-scanner":47,"./escape-store":33,"os":97}],37:[function(requireb,module,exports){
// Divides `data` into chunks of `chunkSize` for faster processing
function Chunker(data, breakString, chunkSize) {
  this.chunks = [];

  for (var cursor = 0, dataSize = data.length; cursor < dataSize;) {
    var nextCursor = cursor + chunkSize > dataSize ?
      dataSize - 1 :
      cursor + chunkSize;

    if (data[nextCursor] != breakString)
      nextCursor = data.indexOf(breakString, nextCursor);
    if (nextCursor == -1)
      nextCursor = data.length - 1;

    this.chunks.push(data.substring(cursor, nextCursor + breakString.length));
    cursor = nextCursor + breakString.length;
  }
}

Chunker.prototype.isEmpty = function () {
  return this.chunks.length === 0;
};

Chunker.prototype.next = function () {
  return this.chunks.shift();
};

module.exports = Chunker;

},{}],38:[function(requireb,module,exports){
var util = requireb('util');

var DEFAULTS = {
  '*': {
    colors: {
      opacity: true // rgba / hsla
    },
    properties: {
      backgroundSizeMerging: false, // background-size to shorthand
      iePrefixHack: false, // underscore / asterisk prefix hacks on IE
      ieSuffixHack: false, // \9 suffix hacks on IE
      merging: true, // merging properties into one
      spaceAfterClosingBrace: false // 'url() no-repeat' to 'url()no-repeat'
    },
    selectors: {
      adjacentSpace: false, // div+ nav Android stock browser hack
      ie7Hack: false, // *+html hack
      special: /(\-moz\-|\-ms\-|\-o\-|\-webkit\-|:dir\([a-z-]*\)|:first(?![a-z-])|:fullscreen|:left|:read-only|:read-write|:right)/ // special selectors which prevent merging
    },
    units: {
      rem: true
    }
  },
  'ie8': {
    colors: {
      opacity: false
    },
    properties: {
      backgroundSizeMerging: false,
      iePrefixHack: true,
      ieSuffixHack: true,
      merging: false,
      spaceAfterClosingBrace: true
    },
    selectors: {
      adjacentSpace: false,
      ie7Hack: false,
      special: /(\-moz\-|\-ms\-|\-o\-|\-webkit\-|:root|:nth|:first\-of|:last|:only|:empty|:target|:checked|::selection|:enabled|:disabled|:not)/
    },
    units: {
      rem: false
    }
  },
  'ie7': {
    colors: {
      opacity: false
    },
    properties: {
      backgroundSizeMerging: false,
      iePrefixHack: true,
      ieSuffixHack: true,
      merging: false,
      spaceAfterClosingBrace: true
    },
    selectors: {
      adjacentSpace: false,
      ie7Hack: true,
      special: /(\-moz\-|\-ms\-|\-o\-|\-webkit\-|:focus|:before|:after|:root|:nth|:first\-of|:last|:only|:empty|:target|:checked|::selection|:enabled|:disabled|:not)/
    },
    units: {
      rem: false
    }
  }
};

function Compatibility(source) {
  this.source = source || {};
}

function merge(source, target) {
  for (var key in source) {
    var value = source[key];

    if (typeof value === 'object' && !util.isRegExp(value))
      target[key] = merge(value, target[key] || {});
    else
      target[key] = key in target ? target[key] : value;
  }

  return target;
}

function calculateSource(source) {
  if (typeof source == 'object')
    return source;

  if (!/[,\+\-]/.test(source))
    return DEFAULTS[source] || DEFAULTS['*'];

  var parts = source.split(',');
  var template = parts[0] in DEFAULTS ?
    DEFAULTS[parts.shift()] :
    DEFAULTS['*'];

  source = {};

  parts.forEach(function (part) {
    var isAdd = part[0] == '+';
    var key = part.substring(1).split('.');
    var group = key[0];
    var option = key[1];

    source[group] = source[group] || {};
    source[group][option] = isAdd;
  });

  return merge(template, source);
}

Compatibility.prototype.toOptions = function () {
  return merge(DEFAULTS['*'], calculateSource(this.source));
};

module.exports = Compatibility;

},{"util":167}],39:[function(requireb,module,exports){
var Splitter = requireb('./splitter');
var SourceMaps = requireb('../utils/source-maps');

var Extractors = {
  properties: function (string, context) {
    var tokenized = [];
    var list = [];
    var buffer = [];
    var all = [];
    var property;
    var isPropertyEnd;
    var isWhitespace;
    var wasWhitespace;
    var isSpecial;
    var wasSpecial;
    var current;
    var last;
    var secondToLast;
    var wasCloseParenthesis;
    var isEscape;
    var token;
    var addSourceMap = context.addSourceMap;

    if (string.replace && string.indexOf(')') > 0)
      string = string.replace(/\)([^\s_;:,\)])/g, context.addSourceMap ? ') __ESCAPED_COMMENT_CLEAN_CSS(0,-1)__$1' : ') $1');

    for (var i = 0, l = string.length; i < l; i++) {
      current = string[i];
      isPropertyEnd = current === ';';

      isEscape = !isPropertyEnd && current == '_' && string.indexOf('__ESCAPED_COMMENT', i) === i;
      if (isEscape) {
        if (buffer.length > 0) {
          i--;
          isPropertyEnd = true;
        } else {
          var endOfEscape = string.indexOf('__', i + 1) + 2;
          var comment = string.substring(i, endOfEscape);
          i = endOfEscape - 1;

          if (comment.indexOf('__ESCAPED_COMMENT_SPECIAL') === -1) {
            if (addSourceMap)
              SourceMaps.track(comment, context, true);
            continue;
          }
          else {
            buffer = all = [comment];
          }
        }
      }

      if (isPropertyEnd || isEscape) {
        if (wasWhitespace && buffer[buffer.length - 1] === ' ')
          buffer.pop();
        if (buffer.length > 0) {
          property = buffer.join('');
          if (property.indexOf('{') === -1) {
            token = { value: property };
            tokenized.push(token);
            list.push(property);

            if (addSourceMap)
              token.metadata = SourceMaps.saveAndTrack(all.join(''), context, !isEscape);
          }
        }
        buffer = [];
        all = [];
      } else {
        isWhitespace = current === ' ' || current === '\t' || current === '\n';
        isSpecial = current === ':' || current === '[' || current === ']' || current === ',' || current === '(' || current === ')';

        if (wasWhitespace && isSpecial) {
          last = buffer[buffer.length - 1];
          secondToLast = buffer[buffer.length - 2];
          if (secondToLast != '+' && secondToLast != '-' && secondToLast != '/' && secondToLast != '*' && last != '(')
            buffer.pop();
          buffer.push(current);
        } else if (isWhitespace && wasSpecial && !wasCloseParenthesis) {
        } else if (isWhitespace && !wasWhitespace && buffer.length > 0) {
          buffer.push(' ');
        } else if (isWhitespace && buffer.length === 0) {
        } else if (isWhitespace && wasWhitespace) {
        } else {
          buffer.push(isWhitespace ? ' ' : current);
        }

        all.push(current);
      }

      wasSpecial = isSpecial;
      wasWhitespace = isWhitespace;
      wasCloseParenthesis = current === ')';
    }

    if (wasWhitespace && buffer[buffer.length - 1] === ' ')
      buffer.pop();
    if (buffer.length > 0) {
      property = buffer.join('');
      if (property.indexOf('{') === -1) {
        token = { value: property };
        tokenized.push(token);
        list.push(property);

        if (addSourceMap)
          token.metadata = SourceMaps.saveAndTrack(all.join(''), context, false);
      }
    } else if (all.indexOf('\n') > -1) {
      SourceMaps.track(all.join(''), context);
    }

    return {
      list: list,
      tokenized: tokenized
    };
  },

  selectors: function (string, context) {
    var tokenized = [];
    var list = [];
    var selectors = new Splitter(',').split(string);
    var addSourceMap = context.addSourceMap;

    for (var i = 0, l = selectors.length; i < l; i++) {
      var selector = selectors[i];

      list.push(selector);

      var token = { value: selector };
      tokenized.push(token);

      if (addSourceMap)
        token.metadata = SourceMaps.saveAndTrack(selector, context, true);
    }

    return {
      list: list,
      tokenized: tokenized
    };
  }
};

module.exports = Extractors;

},{"../utils/source-maps":43,"./splitter":46}],40:[function(requireb,module,exports){
var SourceMapConsumer = requireb('source-map').SourceMapConsumer;

var fs = require('fs');
var path = requireb('path');
var http = require('http');
var https = requireb('https');
var url = require('url');

var override = requireb('../utils/object.js').override;

var MAP_MARKER = /\/\*# sourceMappingURL=(\S+) \*\//;

function InputSourceMapStore(outerContext) {
  this.options = outerContext.options;
  this.errors = outerContext.errors;
  this.sourceTracker = outerContext.sourceTracker;
  this.timeout = this.options.inliner.timeout;
  this.requestOptions = this.options.inliner.request;

  this.maps = {};
}

function fromString(self, data, whenDone) {
  self.maps[undefined] = new SourceMapConsumer(self.options.sourceMap);
  return whenDone();
}

function fromSource(self, data, whenDone, context) {
  var nextAt = 0;

  function proceedToNext() {
    context.cursor += nextAt + 1;
    fromSource(self, data, whenDone, context);
  }

  while (context.cursor < data.length) {
    var fragment = data.substring(context.cursor);

    var markerStartMatch = self.sourceTracker.nextStart(fragment) || { index: -1 };
    var markerEndMatch = self.sourceTracker.nextEnd(fragment) || { index: -1 };
    var mapMatch = MAP_MARKER.exec(fragment) || { index: -1 };
    var sourceMapFile = mapMatch[1];

    nextAt = data.length;
    if (markerStartMatch.index > -1)
      nextAt = markerStartMatch.index;
    if (markerEndMatch.index > -1 && markerEndMatch.index < nextAt)
      nextAt = markerEndMatch.index;
    if (mapMatch.index > -1 && mapMatch.index < nextAt)
      nextAt = mapMatch.index;

    if (nextAt == data.length)
      break;

    if (nextAt == markerStartMatch.index) {
      context.files.push(markerStartMatch.filename);
    } else if (nextAt == markerEndMatch.index) {
      context.files.pop();
    } else if (nextAt == mapMatch.index) {
      var isRemote = /^https?:\/\//.test(sourceMapFile) || /^\/\//.test(sourceMapFile);
      if (isRemote) {
        return fetchMapFile(self, sourceMapFile, context, proceedToNext);
      } else {
        var sourceFile = context.files[context.files.length - 1];
        var sourceDir = sourceFile ? path.dirname(sourceFile) : self.options.relativeTo;

        var inputMapData = fs.readFileSync(path.join(sourceDir || '', sourceMapFile), 'utf-8');
        self.maps[sourceFile || undefined] = new SourceMapConsumer(inputMapData);
      }
    }

    context.cursor += nextAt + 1;
  }

  return whenDone();
}

function fetchMapFile(self, mapSource, context, done) {
  function handleError(status) {
    context.errors.push('Broken source map at "' + mapSource + '" - ' + status);
    return done();
  }

  var method = mapSource.indexOf('https') === 0 ? https : http;
  var requestOptions = override(url.parse(mapSource), self.requestOptions);

  method
    .get(requestOptions, function (res) {
      if (res.statusCode < 200 || res.statusCode > 299)
        return handleError(res.statusCode);

      var chunks = [];
      res.on('data', function (chunk) {
        chunks.push(chunk.toString());
      });
      res.on('end', function () {
        self.maps[context.files[context.files.length - 1] || undefined] = new SourceMapConsumer(chunks.join(''));
        done();
      });
    })
    .on('error', function(res) {
      handleError(res.message);
    })
    .on('timeout', function() {
      handleError('timeout');
    })
    .setTimeout(self.timeout);
}

function originalPositionIn(trackedSource, sourceInfo, token, allowNFallbacks) {
  // FIXME: we should rather track original positions in tokenizer
  // here it is a bit too late do do it reliably hance the hack
  var originalPosition;
  var maxRange = token.replace(/[>\+~]/g, ' $1 ').length;
  var position = {
    line: sourceInfo.line,
    column: sourceInfo.column + maxRange
  };

  while (maxRange-- > 0) {
    position.column--;
    originalPosition = trackedSource.originalPositionFor(position);

    if (originalPosition)
      break;
  }

  if (originalPosition.line === null && sourceInfo.line > 1 && allowNFallbacks > 0)
    return originalPositionIn(trackedSource, { line: sourceInfo.line - 1, column: sourceInfo.column }, token, allowNFallbacks - 1);

  return originalPosition;
}

InputSourceMapStore.prototype.track = function (data, whenDone) {
  return typeof this.options.sourceMap == 'string' ?
    fromString(this, data, whenDone) :
    fromSource(this, data, whenDone, { files: [], cursor: 0, errors: this.errors });
};

InputSourceMapStore.prototype.trackLoaded = function (sourceFile, sourceMap) {
  this.maps[sourceFile] = new SourceMapConsumer(sourceMap);
};

InputSourceMapStore.prototype.isTracking = function (sourceInfo) {
  return !!this.maps[sourceInfo.source];
};

InputSourceMapStore.prototype.originalPositionFor = function (sourceInfo, token, allowNFallbacks) {
  return originalPositionIn(this.maps[sourceInfo.source], sourceInfo, token, allowNFallbacks);
};

module.exports = InputSourceMapStore;

},{"../utils/object.js":41,"fs":"fs","http":"http","https":89,"path":98,"source-map":141,"url":"url"}],41:[function(requireb,module,exports){
module.exports = {
  override: function (source1, source2) {
    var target = {};
    for (var key1 in source1)
      target[key1] = source1[key1];
    for (var key2 in source2)
      target[key2] = source2[key2];

    return target;
  }
};

},{}],42:[function(requireb,module,exports){
function QuoteScanner(data) {
  this.data = data;
}

var findQuoteEnd = function (data, matched, cursor, oldCursor) {
  var commentStartMark = '/*';
  var commentEndMark = '*/';
  var escapeMark = '\\';
  var blockEndMark = '}';
  var dataPrefix = data.substring(oldCursor, cursor);
  var commentEndedAt = dataPrefix.lastIndexOf(commentEndMark, cursor);
  var commentStartedAt = dataPrefix.lastIndexOf(commentStartMark, cursor);
  var commentStarted = false;

  if (commentEndedAt >= cursor && commentStartedAt > -1)
    commentStarted = true;
  if (commentStartedAt < cursor && commentStartedAt > commentEndedAt)
    commentStarted = true;

  if (commentStarted) {
    var commentEndsAt = data.indexOf(commentEndMark, cursor);
    if (commentEndsAt > -1)
      return commentEndsAt;

    commentEndsAt = data.indexOf(blockEndMark, cursor);
    return commentEndsAt > -1 ? commentEndsAt - 1 : data.length;
  }

  while (true) {
    if (data[cursor] === undefined)
      break;
    if (data[cursor] == matched && (data[cursor - 1] != escapeMark || data[cursor - 2] == escapeMark))
      break;

    cursor++;
  }

  return cursor;
};

function findNext(data, mark, startAt) {
  var escapeMark = '\\';
  var candidate = startAt;

  while (true) {
    candidate = data.indexOf(mark, candidate + 1);
    if (candidate == -1)
      return -1;
    if (data[candidate - 1] != escapeMark)
      return candidate;
  }
}

QuoteScanner.prototype.each = function (callback) {
  var data = this.data;
  var tempData = [];
  var nextStart = 0;
  var nextEnd = 0;
  var cursor = 0;
  var matchedMark = null;
  var singleMark = '\'';
  var doubleMark = '"';
  var dataLength = data.length;

  for (; nextEnd < data.length;) {
    var nextStartSingle = findNext(data, singleMark, nextEnd);
    var nextStartDouble = findNext(data, doubleMark, nextEnd);

    if (nextStartSingle == -1)
      nextStartSingle = dataLength;
    if (nextStartDouble == -1)
      nextStartDouble = dataLength;

    if (nextStartSingle < nextStartDouble) {
      nextStart = nextStartSingle;
      matchedMark = singleMark;
    } else {
      nextStart = nextStartDouble;
      matchedMark = doubleMark;
    }

    if (nextStart == -1)
      break;

    nextEnd = findQuoteEnd(data, matchedMark, nextStart + 1, cursor);
    if (nextEnd == -1)
      break;

    var text = data.substring(nextStart, nextEnd + 1);
    tempData.push(data.substring(cursor, nextStart));
    if (text.length > 0)
      callback(text, tempData, nextStart);

    cursor = nextEnd + 1;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

module.exports = QuoteScanner;

},{}],43:[function(requireb,module,exports){
function trimLeft(value, context) {
  var withoutContent;
  var total;
  var split = value.split('\n');
  var shift = 0;
  for (withoutContent = 0, total = split.length; withoutContent < total; withoutContent++) {
    var part = split[withoutContent];
    if (/\S/.test(part))
      break;

    shift += part.length + 1;
  }

  context.line += withoutContent;
  context.column = withoutContent > 0 ? 0 : context.column;
  context.column += /^(\s)*/.exec(split[withoutContent])[0].length;

  return value.substring(shift).trimLeft();
}

var SourceMaps = {
  saveAndTrack: function (data, context, hasSuffix) {
    var trimmedValue = trimLeft(data, context);

    var metadata = {
      line: context.line,
      column: context.column,
      source: context.source
    };

    this.track(trimmedValue, context);

    if (hasSuffix)
      context.column++;

    return metadata;
  },

  suffix: function (context) {
    context.column++;
  },

  track: function (data, context) {
    var parts = data.split('\n');

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];
      var cursor = 0;

      if (i > 0) {
        context.line++;
        context.column = 0;
      }

      while (true) {
        var next = part.indexOf('__ESCAPED_', cursor);

        if (next == -1) {
          context.column += part.substring(cursor).length;
          break;
        }

        context.column += next - cursor;
        cursor += next - cursor;

        var escaped = part.substring(next, part.indexOf('__', next + 1) + 2);
        var encodedValues = escaped.substring(escaped.indexOf('(') + 1, escaped.indexOf(')')).split(',');
        context.line += ~~encodedValues[0];
        context.column = (~~encodedValues[0] === 0 ? context.column : 0) + ~~encodedValues[1];
        cursor += escaped.length;
      }
    }
  }
};

module.exports = SourceMaps;

},{}],44:[function(requireb,module,exports){
var path = requireb('path');
var UrlRewriter = requireb('../images/url-rewriter');

function SourceReader(context, data) {
  this.outerContext = context;
  this.data = data;
}

SourceReader.prototype.toString = function () {
  if (typeof this.data == 'string')
    return this.data;
  if (Buffer.isBuffer(this.data))
    return this.data.toString();
  if (Array.isArray(this.data))
    return fromArray(this.outerContext, this.data);

  return fromHash(this.outerContext, this.data);
};

function fromArray(outerContext, sources) {
  return sources
    .map(function (source) {
      return outerContext.options.processImport === false ?
        source + '@shallow' :
        source;
    })
    .map(function (source) {
      return !outerContext.options.relativeTo || /^https?:\/\//.test(source) ?
        source :
        path.relative(outerContext.options.relativeTo, source);
    })
    .map(function (source) { return '@import url(' + source + ');'; })
    .join('');
}

function fromHash(outerContext, sources) {
  var data = [];
  var toBase = path.resolve(outerContext.options.target || process.cwd());

  for (var source in sources) {
    var styles = sources[source].styles;
    var inputSourceMap = sources[source].sourceMap;

    var rewriter = new UrlRewriter({
      absolute: !!outerContext.options.root,
      relative: !outerContext.options.root,
      imports: true,
      urls: outerContext.options.rebase,
      fromBase: path.dirname(path.resolve(source)),
      toBase: toBase
    }, this.outerContext);
    styles = rewriter.process(styles);

    if (outerContext.options.sourceMap && inputSourceMap) {
      var absoluteSource = path.resolve(source);
      styles = outerContext.sourceTracker.store(absoluteSource, styles);
      outerContext.inputSourceMapTracker.trackLoaded(absoluteSource, inputSourceMap);
    }

    data.push(styles);
  }

  return data.join('');
}

module.exports = SourceReader;

},{"../images/url-rewriter":15,"path":98}],45:[function(requireb,module,exports){
function SourceTracker() {
  this.sources = [];
}

SourceTracker.prototype.store = function (filename, data) {
  this.sources.push(filename);

  return '__ESCAPED_SOURCE_CLEAN_CSS' + (this.sources.length - 1) + '__' +
    data +
    '__ESCAPED_SOURCE_END_CLEAN_CSS__';
};

SourceTracker.prototype.nextStart = function (data) {
  var next = /__ESCAPED_SOURCE_CLEAN_CSS(\d+)__/.exec(data);

  return next ?
    { index: next.index, filename: this.sources[~~next[1]] } :
    null;
};

SourceTracker.prototype.nextEnd = function (data) {
  return /__ESCAPED_SOURCE_END_CLEAN_CSS__/g.exec(data);
};

SourceTracker.prototype.removeAll = function (data) {
  return data
    .replace(/__ESCAPED_SOURCE_CLEAN_CSS\d+__/g, '')
    .replace(/__ESCAPED_SOURCE_END_CLEAN_CSS__/g, '');
};

module.exports = SourceTracker;

},{}],46:[function(requireb,module,exports){
function Splitter(separator) {
  this.separator = separator;
}

Splitter.prototype.split = function (value) {
  if (value.indexOf(this.separator) === -1)
    return [value];

  if (value.indexOf('(') === -1)
    return value.split(this.separator);

  var level = 0;
  var cursor = 0;
  var lastStart = 0;
  var len = value.length;
  var tokens = [];

  while (cursor++ < len) {
    if (value[cursor] == '(') {
      level++;
    } else if (value[cursor] == ')') {
      level--;
    } else if (value[cursor] == this.separator && level === 0) {
      tokens.push(value.substring(lastStart, cursor));
      lastStart = cursor + 1;
    }
  }

  if (lastStart < cursor + 1)
    tokens.push(value.substring(lastStart));

  return tokens;
};

module.exports = Splitter;

},{}],47:[function(requireb,module,exports){
var URL_PREFIX = 'url(';
var UPPERCASE_URL_PREFIX = 'URL(';
var URL_SUFFIX = ')';

function UrlScanner(data, context) {
  this.data = data;
  this.context = context;
}

UrlScanner.prototype.reduce = function (callback) {
  var nextStart = 0;
  var nextStartUpperCase = 0;
  var nextEnd = 0;
  var cursor = 0;
  var tempData = [];
  var data = this.data;
  var hasUppercaseUrl = data.indexOf(UPPERCASE_URL_PREFIX) > -1;

  for (; nextEnd < data.length;) {
    nextStart = data.indexOf(URL_PREFIX, nextEnd);
    nextStartUpperCase = hasUppercaseUrl ? data.indexOf(UPPERCASE_URL_PREFIX, nextEnd) : -1;
    if (nextStart == -1 && nextStartUpperCase == -1)
      break;

    if (nextStart == -1 && nextStartUpperCase > -1)
      nextStart = nextStartUpperCase;

    if (data[nextStart + URL_PREFIX.length] == '"')
      nextEnd = data.indexOf('"', nextStart + URL_PREFIX.length + 1);
    else if (data[nextStart + URL_PREFIX.length] == '\'')
      nextEnd = data.indexOf('\'', nextStart + URL_PREFIX.length + 1);
    else
      nextEnd = data.indexOf(URL_SUFFIX, nextStart);

    // Following lines are a safety mechanism to ensure
    // incorrectly terminated urls are processed correctly.
    if (nextEnd == -1) {
      nextEnd = data.indexOf('}', nextStart);

      if (nextEnd == -1)
        nextEnd = data.length;
      else
        nextEnd--;

      this.context.warnings.push('Broken URL declaration: \'' + data.substring(nextStart, nextEnd + 1) + '\'.');
    } else {
      if (data[nextEnd] != URL_SUFFIX)
        nextEnd = data.indexOf(URL_SUFFIX, nextEnd);
    }

    tempData.push(data.substring(cursor, nextStart));

    var url = data.substring(nextStart, nextEnd + 1);
    callback(url, tempData);

    cursor = nextEnd + 1;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

module.exports = UrlScanner;

},{}],48:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{}],49:[function(requireb,module,exports){
/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

(function(global) {
  'use strict';

  var dateFormat = (function() {
      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|'[^']*'|'[^']*'/g;
      var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
      var timezoneClip = /[^-+\dA-Z]/g;
  
      // Regexes and supporting functions are cached through closure
      return function (date, mask, utc, gmt) {
  
        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
        if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
          mask = date;
          date = undefined;
        }
  
        date = date || new Date;
  
        if(!(date instanceof Date)) {
          date = new Date(date);
        }
  
        if (isNaN(date)) {
          throw TypeError('Invalid date');
        }
  
        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);
  
        // Allow setting the utc/gmt argument via the mask
        var maskSlice = mask.slice(0, 4);
        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
          mask = mask.slice(4);
          utc = true;
          if (maskSlice === 'GMT:') {
            gmt = true;
          }
        }
  
        var _ = utc ? 'getUTC' : 'get';
        var d = date[_ + 'Date']();
        var D = date[_ + 'Day']();
        var m = date[_ + 'Month']();
        var y = date[_ + 'FullYear']();
        var H = date[_ + 'Hours']();
        var M = date[_ + 'Minutes']();
        var s = date[_ + 'Seconds']();
        var L = date[_ + 'Milliseconds']();
        var o = utc ? 0 : date.getTimezoneOffset();
        var W = getWeek(date);
        var N = getDayOfWeek(date);
        var flags = {
          d:    d,
          dd:   pad(d),
          ddd:  dateFormat.i18n.dayNames[D],
          dddd: dateFormat.i18n.dayNames[D + 7],
          m:    m + 1,
          mm:   pad(m + 1),
          mmm:  dateFormat.i18n.monthNames[m],
          mmmm: dateFormat.i18n.monthNames[m + 12],
          yy:   String(y).slice(2),
          yyyy: y,
          h:    H % 12 || 12,
          hh:   pad(H % 12 || 12),
          H:    H,
          HH:   pad(H),
          M:    M,
          MM:   pad(M),
          s:    s,
          ss:   pad(s),
          l:    pad(L, 3),
          L:    pad(Math.round(L / 10)),
          t:    H < 12 ? 'a'  : 'p',
          tt:   H < 12 ? 'am' : 'pm',
          T:    H < 12 ? 'A'  : 'P',
          TT:   H < 12 ? 'AM' : 'PM',
          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
          W:    W,
          N:    N
        };
  
        return mask.replace(token, function (match) {
          if (match in flags) {
            return flags[match];
          }
          return match.slice(1, match.length - 1);
        });
      };
    })();

  dateFormat.masks = {
    'default':               'ddd mmm dd yyyy HH:MM:ss',
    'shortDate':             'm/d/yy',
    'mediumDate':            'mmm d, yyyy',
    'longDate':              'mmmm d, yyyy',
    'fullDate':              'dddd, mmmm d, yyyy',
    'shortTime':             'h:MM TT',
    'mediumTime':            'h:MM:ss TT',
    'longTime':              'h:MM:ss TT Z',
    'isoDate':               'yyyy-mm-dd',
    'isoTime':               'HH:MM:ss',
    'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
    'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
  };

  // Internationalization strings
  dateFormat.i18n = {
    dayNames: [
      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
    ],
    monthNames: [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
    ]
  };

function pad(val, len) {
  val = String(val);
  len = len || 2;
  while (val.length < len) {
    val = '0' + val;
  }
  return val;
}

/**
 * Get the ISO 8601 week number
 * Based on comments from
 * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
 *
 * @param  {Object} `date`
 * @return {Number}
 */
function getWeek(date) {
  // Remove time components of date
  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  // Change date to Thursday same week
  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

  // Take January 4th as it is always in week 1 (see ISO 8601)
  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);

  // Change date to Thursday same week
  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

  // Check if daylight-saving-time-switch occured and correct for it
  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  targetThursday.setHours(targetThursday.getHours() - ds);

  // Number of weeks between target Thursday and first Thursday
  var weekDiff = (targetThursday - firstThursday) / (86400000*7);
  return 1 + Math.floor(weekDiff);
}

/**
 * Get ISO-8601 numeric representation of the day of the week
 * 1 (for Monday) through 7 (for Sunday)
 * 
 * @param  {Object} `date`
 * @return {Number}
 */
function getDayOfWeek(date) {
  var dow = date.getDay();
  if(dow === 0) {
    dow = 7;
  }
  return dow;
}

/**
 * kind-of shortcut
 * @param  {*} val
 * @return {String}
 */
function kindOf(val) {
  if (val === null) {
    return 'null';
  }

  if (val === undefined) {
    return 'undefined';
  }

  if (typeof val !== 'object') {
    return typeof val;
  }

  if (Array.isArray(val)) {
    return 'array';
  }

  return {}.toString.call(val)
    .slice(8, -1).toLowerCase();
};



  if (typeof define === 'function' && define.amd) {
    define(function () {
      return dateFormat;
    });
  } else if (typeof exports === 'object') {
    module.exports = dateFormat;
  } else {
    global.dateFormat = dateFormat;
  }
})(this);

},{}],50:[function(requireb,module,exports){
/*
  Module dependencies
*/
var ElementType = requireb('domelementtype');
var entities = requireb('entities');

/*
  Boolean Attributes
*/
var booleanAttributes = {
  __proto__: null,
  allowfullscreen: true,
  async: true,
  autofocus: true,
  autoplay: true,
  checked: true,
  controls: true,
  default: true,
  defer: true,
  disabled: true,
  hidden: true,
  ismap: true,
  loop: true,
  multiple: true,
  muted: true,
  open: true,
  readonly: true,
  requirebd: true,
  reversed: true,
  scoped: true,
  seamless: true,
  selected: true,
  typemustmatch: true
};

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

/*
  Format attributes
*/
function formatAttrs(attributes, opts) {
  if (!attributes) return;

  var output = '',
      value;

  // Loop through the attributes
  for (var key in attributes) {
    value = attributes[key];
    if (output) {
      output += ' ';
    }

    if (!value && booleanAttributes[key]) {
      output += key;
    } else {
      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}

/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
};


var render = module.exports = function(dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};

  var output = '';

  for(var i = 0; i < dom.length; i++){
    var elem = dom[i];

    if (elem.type === 'root')
      output += render(elem.children, opts);
    else if (ElementType.isTag(elem))
      output += renderTag(elem, opts);
    else if (elem.type === ElementType.Directive)
      output += renderDirective(elem);
    else if (elem.type === ElementType.Comment)
      output += renderComment(elem);
    else if (elem.type === ElementType.CDATA)
      output += renderCdata(elem);
    else
      output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (
    opts.xmlMode
    && (!elem.children || elem.children.length === 0)
  ) {
    tag += '/>';
  } else {
    tag += '>';
    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || '';

  // if entities weren't decoded, no need to encode them back
  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}

},{"domelementtype":51,"entities":79}],51:[function(requireb,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};
},{}],52:[function(requireb,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

},{}],53:[function(requireb,module,exports){
var ElementType = requireb("domelementtype");

var re_whitespace = /\s+/g;
var NodePrototype = requireb("./lib/node");
var ElementPrototype = requireb("./lib/element");

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
	this._parser = this._parser || null;
}

//default options
var defaultOpts = {
	normalizeWhitespace: false, //Replace all whitespace with single spaces
	withStartIndices: false, //Add startIndex properties to nodes
};

DomHandler.prototype.onparserinit = function(parser){
	this._parser = parser;
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._parser = null;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	var elem = this._tagStack.pop();
	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._addDomElement = function(element){
	var parent = this._tagStack[this._tagStack.length - 1];
	var siblings = parent ? parent.children : this.dom;
	var previousSibling = siblings[siblings.length - 1];

	element.next = null;

	if(this._options.withStartIndices){
		element.startIndex = this._parser.startIndex;
	}

	if (this._options.withDomLvl1) {
		element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
	}

	if(previousSibling){
		element.prev = previousSibling;
		previousSibling.next = element;
	} else {
		element.prev = null;
	}

	siblings.push(element);
	element.parent = parent || null;
};

DomHandler.prototype.onopentag = function(name, attribs){
	var element = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: []
	};

	this._addDomElement(element);

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			this._addDomElement({
				data: data,
				type: ElementType.Text
			});
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var element = {
		data: data,
		type: ElementType.Comment
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var element = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	this._addDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});
};

module.exports = DomHandler;

},{"./lib/element":54,"./lib/node":55,"domelementtype":52}],54:[function(requireb,module,exports){
// DOM-Level-1-compliant structure
var NodePrototype = requireb('./node');
var ElementPrototype = module.exports = Object.create(NodePrototype);

var domLvl1 = {
	tagName: "name"
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(ElementPrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{"./node":55}],55:[function(requireb,module,exports){
// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
	get firstChild() {
		var children = this.children;
		return children && children[0] || null;
	},
	get lastChild() {
		var children = this.children;
		return children && children[children.length - 1] || null;
	},
	get nodeType() {
		return nodeTypes[this.type] || nodeTypes.element;
	}
};

var domLvl1 = {
	tagName: "name",
	childNodes: "children",
	parentNode: "parent",
	previousSibling: "prev",
	nextSibling: "next",
	nodeValue: "data"
};

var nodeTypes = {
	element: 1,
	text: 3,
	cdata: 4,
	comment: 8
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(NodePrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{}],56:[function(requireb,module,exports){
var DomUtils = module.exports;

[
	requireb("./lib/stringify"),
	requireb("./lib/traversal"),
	requireb("./lib/manipulation"),
	requireb("./lib/querying"),
	requireb("./lib/legacy"),
	requireb("./lib/helpers")
].forEach(function(ext){
	Object.keys(ext).forEach(function(key){
		DomUtils[key] = ext[key].bind(DomUtils);
	});
});

},{"./lib/helpers":57,"./lib/legacy":58,"./lib/manipulation":59,"./lib/querying":60,"./lib/stringify":61,"./lib/traversal":62}],57:[function(requireb,module,exports){
// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION = {
	DISCONNECTED: 1,
	PRECEDING: 2,
	FOLLOWING: 4,
	CONTAINS: 8,
	CONTAINED_BY: 16
};

// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
	var aParents = [];
	var bParents = [];
	var current, sharedParent, siblings, aSibling, bSibling, idx;

	if (nodeA === nodeB) {
		return 0;
	}

	current = nodeA;
	while (current) {
		aParents.unshift(current);
		current = current.parent;
	}
	current = nodeB;
	while (current) {
		bParents.unshift(current);
		current = current.parent;
	}

	idx = 0;
	while (aParents[idx] === bParents[idx]) {
		idx++;
	}

	if (idx === 0) {
		return POSITION.DISCONNECTED;
	}

	sharedParent = aParents[idx - 1];
	siblings = sharedParent.children;
	aSibling = aParents[idx];
	bSibling = bParents[idx];

	if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
		if (sharedParent === nodeB) {
			return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
		}
		return POSITION.FOLLOWING;
	} else {
		if (sharedParent === nodeA) {
			return POSITION.PRECEDING | POSITION.CONTAINS;
		}
		return POSITION.PRECEDING;
	}
};

// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort = function(nodes) {
	var idx = nodes.length, node, position;

	nodes = nodes.slice();

	while (--idx > -1) {
		node = nodes[idx];
		position = nodes.indexOf(node);
		if (position > -1 && position < idx) {
			nodes.splice(idx, 1);
		}
	}
	nodes.sort(function(a, b) {
		var relative = comparePos(a, b);
		if (relative & POSITION.PRECEDING) {
			return -1;
		} else if (relative & POSITION.FOLLOWING) {
			return 1;
		}
		return 0;
	});

	return nodes;
};

},{}],58:[function(requireb,module,exports){
var ElementType = requireb("domelementtype");
var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof data === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

function combineFuncs(a, b){
	return function(elem){
		return a(elem) || b(elem);
	};
}

exports.getElements = function(options, element, recurse, limit){
	var funcs = Object.keys(options).map(function(key){
		var value = options[key];
		return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
	});

	return funcs.length === 0 ? [] : this.filter(
		funcs.reduce(combineFuncs),
		element, recurse, limit
	);
};

exports.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function(name, element, recurse, limit){
	return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function(type, element, recurse, limit){
	return this.filter(Checks.tag_type(type), element, recurse, limit);
};

},{"domelementtype":52}],59:[function(requireb,module,exports){
exports.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

exports.replaceElement = function(elem, replacement){
	var prev = replacement.prev = elem.prev;
	if(prev){
		prev.next = replacement;
	}

	var next = replacement.next = elem.next;
	if(next){
		next.prev = replacement;
	}

	var parent = replacement.parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs[childs.lastIndexOf(elem)] = replacement;
	}
};

exports.appendChild = function(elem, child){
	child.parent = elem;

	if(elem.children.push(child) !== 1){
		var sibling = elem.children[elem.children.length - 2];
		sibling.next = child;
		child.prev = sibling;
		child.next = null;
	}
};

exports.append = function(elem, next){
	var parent = elem.parent,
		currNext = elem.next;

	next.next = currNext;
	next.prev = elem;
	elem.next = next;
	next.parent = parent;

	if(currNext){
		currNext.prev = next;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(currNext), 0, next);
		}
	} else if(parent){
		parent.children.push(next);
	}
};

exports.prepend = function(elem, prev){
	var parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs.splice(childs.lastIndexOf(elem), 0, prev);
	}

	if(elem.prev){
		elem.prev.next = prev;
	}
	
	prev.parent = parent;
	prev.prev = elem.prev;
	prev.next = elem;
	elem.prev = prev;
};



},{}],60:[function(requireb,module,exports){
var isTag = requireb("domelementtype").isTag;

module.exports = {
	filter: filter,
	find: find,
	findOneChild: findOneChild,
	findOne: findOne,
	existsOne: existsOne,
	findAll: findAll
};

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		limit = Infinity;
	}
	return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])){
			result.push(elems[i]);
			if(--limit <= 0) break;
		}

		childs = elems[i].children;
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(test(elems[i])) return elems[i];
	}

	return null;
}

function findOne(test, elems){
	var elem = null;

	for(var i = 0, l = elems.length; i < l && !elem; i++){
		if(!isTag(elems[i])){
			continue;
		} else if(test(elems[i])){
			elem = elems[i];
		} else if(elems[i].children.length > 0){
			elem = findOne(test, elems[i].children);
		}
	}

	return elem;
}

function existsOne(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(
			isTag(elems[i]) && (
				test(elems[i]) || (
					elems[i].children.length > 0 &&
					existsOne(test, elems[i].children)
				)
			)
		){
			return true;
		}
	}

	return false;
}

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(!isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);

		if(elems[i].children.length > 0){
			result = result.concat(findAll(test, elems[i].children));
		}
	}
	return result;
}

},{"domelementtype":52}],61:[function(requireb,module,exports){
var ElementType = requireb("domelementtype"),
    getOuterHTML = requireb("dom-serializer"),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem, opts){
	return elem.children ? elem.children.map(function(elem){
		return getOuterHTML(elem, opts);
	}).join("") : "";
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}

},{"dom-serializer":50,"domelementtype":52}],62:[function(requireb,module,exports){
var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};

},{}],63:[function(requireb,module,exports){
'use strict';

const Promise = requireb('pinkie-promise');
const queryString = requireb('querystring');
const fetch = require('node-fetch');
const objectAssign = requireb('object-assign');
const nodeUrl = require('url');
const electron = require('electron');
const BrowserWindow = electron.BrowserWindow || electron.remote.BrowserWindow;

module.exports = function (config, windowParams) {
  function getAuthorizationCode(opts) {
    opts = opts || {};

    if (!config.redirectUri) {
      config.redirectUri = 'urn:ietf:wg:oauth:2.0:oob';
    }

    var urlParams = {
      response_type: 'code',
      redirect_uri: config.redirectUri,
      client_id: config.clientId
    };

    if (opts.scope) {
      urlParams.scope = opts.scope;
    }

    if (opts.accessType) {
      urlParams.access_type = opts.accessType;
    }

    var url = config.authorizationUrl + '?' + queryString.stringify(urlParams);

    return new Promise(function (resolve, reject) {
      const authWindow = new BrowserWindow(windowParams || {'use-content-size': true});

      authWindow.webContents.session.clearCache(function () {
        authWindow.webContents.session.clearStorageData(function () {
          authWindow.loadURL(url);
          authWindow.show();
        });
      });

      authWindow.on('closed', () => {
        reject(new Error('window was closed by user'));
      });

      function onCallback(url) {
        var url_parts = nodeUrl.parse(url, true);
        var query = url_parts.query;
        var code = query.code;
        var error = query.error;

        if (error !== undefined) {
          reject(error);
          authWindow.removeAllListeners('closed');
          setImmediate(function () {
            authWindow.close();
          });
        } else if (code) {
          resolve(code);
          authWindow.removeAllListeners('closed');
          setImmediate(function () {
            authWindow.close();
          });
        }
      }

      authWindow.webContents.on('will-navigate', (event, url) => {
        onCallback(url);
      });

      authWindow.webContents.on('did-get-redirect-request', (event, oldUrl, newUrl) => {
        onCallback(newUrl);
      });
    });
  }

  function tokenRequest(data) {
    const header = {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    if (config.useBasicAuthorizationHeader) {
      header.Authorization = 'Basic ' + new Buffer(config.clientId + ':' + config.clientSecret).toString('base64');
    } else {
      objectAssign(data, {
        client_id: config.clientId,
        client_secret: config.clientSecret
      });
    }

    return fetch(config.tokenUrl, {
      method: 'POST',
      headers: header,
      body: queryString.stringify(data)
    }).then(res => {
      return res.json();
    });
  }

  function getAccessToken(opts) {
    return getAuthorizationCode(opts)
      .then(authorizationCode => {
        var tokenRequestData = {
          code: authorizationCode,
          grant_type: 'authorization_code',
          redirect_uri: config.redirectUri
        };
        tokenRequestData = Object.assign(tokenRequestData, opts.additionalTokenRequestData);
        return tokenRequest(tokenRequestData);
      });
  }

  function refreshToken(refreshToken) {
    return tokenRequest({
      refresh_token: refreshToken,
      grant_type: 'refresh_token',
      redirect_uri: config.redirectUri
    });
  }

  return {
    getAuthorizationCode: getAuthorizationCode,
    getAccessToken: getAccessToken,
    refreshToken: refreshToken
  };
};

},{"electron":"electron","node-fetch":"node-fetch","object-assign":96,"pinkie-promise":99,"querystring":103,"url":"url"}],64:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    "use strict";

    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root['emailjs-addressparser'] = factory();
    }
}(this, function() {
    "use strict";

    /**
     * Defines an object as a namespace for the parsing function
     */
    var addressparser = {};

    /**
     * Parses structured e-mail addresses from an address field
     *
     * Example:
     *
     *    "Name <address@domain>"
     *
     * will be converted to
     *
     *     [{name: "Name", address: "address@domain"}]
     *
     * @param {String} str Address field
     * @return {Array} An array of address objects
     */
    addressparser.parse = function(str) {
        var tokenizer = new addressparser.Tokenizer(str),
            tokens = tokenizer.tokenize();

        var addresses = [],
            address = [],
            parsedAddresses = [];

        tokens.forEach(function(token) {
            if (token.type === "operator" && (token.value === "," || token.value === ";")) {
                if (address.length) {
                    addresses.push(address);
                }
                address = [];
            } else {
                address.push(token);
            }
        });

        if (address.length) {
            addresses.push(address);
        }

        addresses.forEach(function(address) {
            address = addressparser._handleAddress(address);
            if (address.length) {
                parsedAddresses = parsedAddresses.concat(address);
            }
        });

        return parsedAddresses;
    };

    /**
     * Converts tokens for a single address into an address object
     *
     * @param {Array} tokens Tokens object
     * @return {Object} Address object
     */
    addressparser._handleAddress = function(tokens) {
        var token,
            isGroup = false,
            state = "text",
            address,
            addresses = [],
            data = {
                address: [],
                comment: [],
                group: [],
                text: []
            },
            i, len;

        // Filter out <addresses>, (comments) and regular text
        for (i = 0, len = tokens.length; i < len; i++) {
            token = tokens[i];

            if (token.type === "operator") {
                switch (token.value) {
                    case "<":
                        state = "address";
                        break;
                    case "(":
                        state = "comment";
                        break;
                    case ":":
                        state = "group";
                        isGroup = true;
                        break;
                    default:
                        state = "text";
                }
            } else {
                if (token.value) {
                    data[state].push(token.value);
                }
            }
        }

        // If there is no text but a comment, replace the two
        if (!data.text.length && data.comment.length) {
            data.text = data.comment;
            data.comment = [];
        }

        if (isGroup) {
            // http://tools.ietf.org/html/rfc2822#appendix-A.1.3
            data.text = data.text.join(" ");
            addresses.push({
                name: data.text || (address && address.name),
                group: data.group.length ? addressparser.parse(data.group.join(",")) : []
            });
        } else {
            // If no address was found, try to detect one from regular text
            if (!data.address.length && data.text.length) {
                for (i = data.text.length - 1; i >= 0; i--) {
                    if (data.text[i].match(/^[^@\s]+@[^@\s]+$/)) {
                        data.address = data.text.splice(i, 1);
                        break;
                    }
                }

                var _regexHandler = function(address) {
                    if (!data.address.length) {
                        data.address = [address.trim()];
                        return " ";
                    } else {
                        return address;
                    }
                };

                // still no address
                if (!data.address.length) {
                    for (i = data.text.length - 1; i >= 0; i--) {
                        data.text[i] = data.text[i].replace(/\s*\b[^@\s]+@[^@\s]+\b\s*/, _regexHandler).trim();
                        if (data.address.length) {
                            break;
                        }
                    }
                }
            }

            // If there's still is no text but a comment exixts, replace the two
            if (!data.text.length && data.comment.length) {
                data.text = data.comment;
                data.comment = [];
            }

            // Keep only the first address occurence, push others to regular text
            if (data.address.length > 1) {
                data.text = data.text.concat(data.address.splice(1));
            }

            // Join values with spaces
            data.text = data.text.join(" ");
            data.address = data.address.join(" ");

            if (!data.address && isGroup) {
                return [];
            } else {
                address = {
                    address: data.address || data.text || "",
                    name: data.text || data.address || ""
                };

                if (address.address === address.name) {
                    if ((address.address || "").match(/@/)) {
                        address.name = "";
                    } else {
                        address.address = "";
                    }

                }

                addresses.push(address);
            }
        }

        return addresses;
    };

    /**
     * Creates a Tokenizer object for tokenizing address field strings
     *
     * @constructor
     * @param {String} str Address field string
     */
    addressparser.Tokenizer = function(str) {

        this.str = (str || "").toString();
        this.operatorCurrent = "";
        this.operatorExpecting = "";
        this.node = null;
        this.escaped = false;

        this.list = [];

    };

    /**
     * Operator tokens and which tokens are expected to end the sequence
     */
    addressparser.Tokenizer.prototype.operators = {
        "\"": "\"",
        "(": ")",
        "<": ">",
        ",": "",
        // Groups are ended by semicolons
        ":": ";",
        // Semicolons are not a legal delimiter per the RFC2822 grammar other
        // than for terminating a group, but they are also not valid for any
        // other use in this context.  Given that some mail clients have
        // historically allowed the semicolon as a delimiter equivalent to the
        // comma in their UI, it makes sense to treat them the same as a comma
        // when used outside of a group.
        ";": ""
    };

    /**
     * Tokenizes the original input string
     *
     * @return {Array} An array of operator|text tokens
     */
    addressparser.Tokenizer.prototype.tokenize = function() {
        var chr, list = [];
        for (var i = 0, len = this.str.length; i < len; i++) {
            chr = this.str.charAt(i);
            this.checkChar(chr);
        }

        this.list.forEach(function(node) {
            node.value = (node.value || "").toString().trim();
            if (node.value) {
                list.push(node);
            }
        });

        return list;
    };

    /**
     * Checks if a character is an operator or text and acts accordingly
     *
     * @param {String} chr Character from the address field
     */
    addressparser.Tokenizer.prototype.checkChar = function(chr) {
        if ((chr in this.operators || chr === "\\") && this.escaped) {
            this.escaped = false;
        } else if (this.operatorExpecting && chr === this.operatorExpecting) {
            this.node = {
                type: "operator",
                value: chr
            };
            this.list.push(this.node);
            this.node = null;
            this.operatorExpecting = "";
            this.escaped = false;
            return;
        } else if (!this.operatorExpecting && chr in this.operators) {
            this.node = {
                type: "operator",
                value: chr
            };
            this.list.push(this.node);
            this.node = null;
            this.operatorExpecting = this.operators[chr];
            this.escaped = false;
            return;
        }

        if (!this.escaped && chr === "\\") {
            this.escaped = true;
            return;
        }

        if (!this.node) {
            this.node = {
                type: "text",
                value: ""
            };
            this.list.push(this.node);
        }

        if (this.escaped && chr !== "\\") {
            this.node.value += "\\";
        }

        this.node.value += chr;
        this.escaped = false;
    };

    return addressparser;
}));

},{}],65:[function(requireb,module,exports){
// Copyright (c) 2014 Andris Reinman

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['./emailjs-imap-client-pako'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('./emailjs-imap-client-pako'));
    }
}(this, function(pako) {
    'use strict';

    /**
     * @constructor
     *
     * Handles de-/compression via #inflate() and #deflate(), calls you back via #deflatedReady() and #inflatedReady().
     * The chunk we get from deflater is actually a view of a 16kB arraybuffer, so we need to copy the relevant parts
     * memory to a new arraybuffer.
     */
    var Compressor = function() {
        this.deflatedReady = false;
        this.inflatedReady = false;

        /**
         * emit inflated data
         */
        this._inflate = pako.inflater(function(chunk) {
            if (!this.inflatedReady) {
                return;
            }

            this.inflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length));
        }.bind(this));

        /**
         * emit deflated data
         */
        this._deflate = pako.deflater(function(chunk) {
            if (!this.deflatedReady) {
                return;
            }

            this.deflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length));
        }.bind(this));
    };

    Compressor.prototype.inflate = function(buffer) {
        this._inflate(new Uint8Array(buffer));
    };

    Compressor.prototype.deflate = function(buffer) {
        this._deflate(new Uint8Array(buffer));
    };

    return Compressor;
}));

},{"./emailjs-imap-client-pako":67}],66:[function(requireb,module,exports){
(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['emailjs-tcp-socket', 'emailjs-imap-handler', 'emailjs-mime-codec', './emailjs-imap-client-compression'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('emailjs-tcp-socket'), requireb('emailjs-imap-handler'), requireb('emailjs-mime-codec'), requireb('./emailjs-imap-client-compression'), null);
    }
}(this, function(TCPSocket, imapHandler, mimecodec, Compression) {
    'use strict';

    //
    // constants used for communication with the worker
    //
    var MESSAGE_START = 'start';
    var MESSAGE_INFLATE = 'inflate';
    var MESSAGE_INFLATED_DATA_READY = 'inflated_ready';
    var MESSAGE_DEFLATE = 'deflate';
    var MESSAGE_DEFLATED_DATA_READY = 'deflated_ready';

    var COMMAND_REGEX = /(\{(\d+)(\+)?\})?\r?\n/;
    var EOL = '\r\n';

    /**
     * Creates a connection object to an IMAP server. Call `connect` method to inititate
     * the actual connection, the constructor only defines the properties but does not actually connect.
     *
     * @constructor
     *
     * @param {String} [host='localhost'] Hostname to conenct to
     * @param {Number} [port=143] Port number to connect to
     * @param {Object} [options] Optional options object
     * @param {Boolean} [options.useSecureTransport] Set to true, to use encrypted connection
     * @param {String} [options.compressionWorkerPath] offloads de-/compression computation to a web worker, this is the path to the browserified emailjs-compressor-worker.js
     */
    function Imap(host, port, options) {
        this.options = options || {};

        this.port = port || (this.options.useSecureTransport ? 993 : 143);
        this.host = host || 'localhost';

        // Use a TLS connection. Port 993 also forces TLS.
        this.options.useSecureTransport = 'useSecureTransport' in this.options ? !!this.options.useSecureTransport : this.port === 993;

        this.secureMode = !!this.options.useSecureTransport; // Does the connection use SSL/TLS

        this._connectionReady = false; // Is the conection established and greeting is received from the server

        this._globalAcceptUntagged = {}; // Global handlers for unrelated responses (EXPUNGE, EXISTS etc.)

        this._clientQueue = []; // Queue of outgoing commands
        this._canSend = false; // Is it OK to send something to the server
        this._tagCounter = 0; // Counter to allow uniqueue imap tags
        this._currentCommand = false; // Current command that is waiting for response from the server

        this._idleTimer = false; // Timer waiting to enter idle
        this._socketTimeoutTimer = false; // Timer waiting to declare the socket dead starting from the last write

        this.compressed = false; // Is the connection compressed and needs inflating/deflating
        this._workerPath = this.options.compressionWorkerPath; // The path for the compressor's worker script
        this._compression = new Compression();

        //
        // HELPERS
        //

        // As the server sends data in chunks, it needs to be split into separate lines. Helps parsing the input.
        this._incomingBuffer = '';
        this._command = '';
        this._literalRemaining = 0;

        //
        // Event placeholders, may be overriden with callback functions
        //
        this.oncert = null;
        this.onerror = null; // Irrecoverable error occurred. Connection to the server will be closed automatically.
        this.onready = null; // The connection to the server has been established and greeting is received
        this.onidle = null;  // There are no more commands to process
    }

    // Constants

    /**
     * How much time to wait since the last response until the connection is considered idling
     */
    Imap.prototype.TIMEOUT_ENTER_IDLE = 1000;

    /**
     * Lower Bound for socket timeout to wait since the last data was written to a socket
     */
    Imap.prototype.TIMEOUT_SOCKET_LOWER_BOUND = 10000;

    /**
     * Multiplier for socket timeout:
     *
     * We assume at least a GPRS connection with 115 kb/s = 14,375 kB/s tops, so 10 KB/s to be on
     * the safe side. We can timeout after a lower bound of 10s + (n KB / 10 KB/s). A 1 MB message
     * upload would be 110 seconds to wait for the timeout. 10 KB/s === 0.1 s/B
     */
    Imap.prototype.TIMEOUT_SOCKET_MULTIPLIER = 0.1;

    // PUBLIC METHODS

    /**
     * Initiate a connection to the server. Wait for onready event
     *
     * @param {Object} Socket
     *     TESTING ONLY! The TCPSocket has a pretty nonsensical convenience constructor,
     *     which makes it hard to mock. For dependency-injection purposes, we use the
     *     Socket parameter to pass in a mock Socket implementation. Should be left blank
     *     in production use!
     * @returns {Promise} Resolves when socket is opened
     */
    Imap.prototype.connect = function(Socket) {
        return new Promise((resolve, reject) => {
            this.socket = (Socket || TCPSocket).open(this.host, this.port, {
                binaryType: 'arraybuffer',
                useSecureTransport: this.secureMode,
                ca: this.options.ca,
                tlsWorkerPath: this.options.tlsWorkerPath
            });

            // allows certificate handling for platform w/o native tls support
            // oncert is non standard so setting it might throw if the socket object is immutable
            try {
                this.socket.oncert = (cert) => { this.oncert && this.oncert(cert); };
            } catch (E) {}

            // Connection closing unexpected is an error
            this.socket.onclose = () => this._onError(new Error('Socket closed unexceptedly!'));
            this.socket.ondata = (evt) => {
              try {
                this._onData(evt);
              } catch (err) {
                this._onError(err);
              }
            };

            // if an error happens during create time, reject the promise
            this.socket.onerror = (e) => {
                reject(new Error('Could not open socket: ' + e.data.message));
            };

            this.socket.onopen = () => {
                // use proper "irrecoverable error, tear down everything"-handler only after socket is open
                this.socket.onerror = (e) => this._onError(e);
                resolve();
            };
        });
    };

    /**
     * Closes the connection to the server
     *
     * @returns {Promise} Resolves when the socket is closed
     */
    Imap.prototype.close = function(error) {
        return new Promise((resolve) => {
            var tearDown = () => {

                // fulfill pending promises
                this._clientQueue.forEach(cmd => cmd.callback(error));
                if (this._currentCommand) {
                    this._currentCommand.callback(error);
                }

                this._clientQueue = [];
                this._currentCommand = false;

                clearTimeout(this._idleTimer);
                this._idleTimer = null;

                clearTimeout(this._socketTimeoutTimer);
                this._socketTimeoutTimer = null;

                if (this.socket) {
                    // remove all listeners
                    this.socket.onopen = null;
                    this.socket.onclose = null;
                    this.socket.ondata = null;
                    this.socket.onerror = null;
                    try {
                        this.socket.oncert = null;
                    } catch (E) {}

                    this.socket = null;
                }

                resolve();
            };

            this._disableCompression();

            if (!this.socket || this.socket.readyState !== 'open') {
                return tearDown();
            }

            this.socket.onclose = this.socket.onerror = tearDown; // we don't really care about the error here
            this.socket.close();
        });
    };

    /**
     * Send LOGOUT to the server.
     *
     * Use is discouraged!
     *
     * @returns {Promise} Resolves when connection is closed by server.
     */
    Imap.prototype.logout = function() {
        return new Promise((resolve, reject) => {
            this.socket.onclose = this.socket.onerror = () => {
                this.close("Client logging out").then(resolve).catch(reject);
            };

            this.enqueueCommand('LOGOUT');
        });
    };

    /**
     * Initiates TLS handshake
     */
    Imap.prototype.upgrade = function() {
        this.secureMode = true;
        this.socket.upgradeToSecure();
    };

    /**
     * Schedules a command to be sent to the server.
     * See https://github.com/Kreata/imapHandler for request structure.
     * Do not provide a tag property, it will be set by the queue manager.
     *
     * To catch untagged responses use acceptUntagged property. For example, if
     * the value for it is 'FETCH' then the reponse includes 'payload.FETCH' property
     * that is an array including all listed * FETCH responses.
     *
     * @param {Object} request Structured request object
     * @param {Array} acceptUntagged a list of untagged responses that will be included in 'payload' property
     * @param {Object} [options] Optional data for the command payload
     * @returns {Promise} Promise that resolves when the corresponding response was received
     */
    Imap.prototype.enqueueCommand = function(request, acceptUntagged, options) {
        if (typeof request === 'string') {
            request = {
                command: request
            };
        }

        acceptUntagged = [].concat(acceptUntagged || []).map((untagged) => (untagged || '').toString().toUpperCase().trim());

        var tag = 'W' + (++this._tagCounter);
        request.tag = tag;

        return new Promise((resolve, reject) => {
            var data = {
                tag: tag,
                request: request,
                payload: acceptUntagged.length ? {} : undefined,
                callback: (response) => {
                    var responseCommand = (response && response.command || '').toString().toUpperCase().trim();
                    if (this.isError(response)) {
                        return reject(response);
                    } else if (responseCommand === 'BAD' || (responseCommand === 'NO' && response.code !== 'UNAVAILABLE')) {
                        var error = new Error(response.humanReadable || 'Error');
                        if (response.code) {
                            error.code = response.code;
                        }
                        return reject(error);
                    }
                    resolve(response);
                }
            };

            // apply any additional options to the command
            Object.keys(options || {}).forEach((key) => data[key] = options[key]);

            acceptUntagged.forEach((command) => data.payload[command] = []);

            // if we're in priority mode (i.e. we ran commands in a precheck),
            // queue any commands BEFORE the command that contianed the precheck,
            // otherwise just queue command as usual
            var index = data.ctx ? this._clientQueue.indexOf(data.ctx) : -1;
            if (index >= 0) {
                data.tag += '.p';
                data.request.tag += '.p';
                this._clientQueue.splice(index, 0, data);
            } else {
                this._clientQueue.push(data);
            }

            if (this._canSend) {
                this._sendRequest();
            }
        });
    };

    /**
     *
     * @param commands
     * @param ctx
     * @returns {*}
     */
    Imap.prototype.getPreviouslyQueued = function(commands, ctx) {
        const startIndex = this._clientQueue.indexOf(ctx) - 1;

        // search backwards for the commands and return the first found
        for (let i = startIndex; i >= 0; i--) {
            if (isMatch(this._clientQueue[i])) {
                return this._clientQueue[i];
            }
        }

        // also check current command if no SELECT is queued
        if (isMatch(this._currentCommand)) {
            return this._currentCommand;
        }

        return false;

        function isMatch(data) {
            return data && data.request && commands.indexOf(data.request.command) >= 0;
        }
    };

    /**
     * Send data to the TCP socket
     * Arms a timeout waiting for a response from the server.
     *
     * @param {String} str Payload
     */
    Imap.prototype.send = function(str) {
        var buffer = mimecodec.toTypedArray(str).buffer,
            timeout = this.TIMEOUT_SOCKET_LOWER_BOUND + Math.floor(buffer.byteLength * this.TIMEOUT_SOCKET_MULTIPLIER);

        clearTimeout(this._socketTimeoutTimer); // clear pending timeouts
        this._socketTimeoutTimer = setTimeout(() => this._onError(new Error(this.options.sessionId + ' Socket timed out!')), timeout); // arm the next timeout

        if (this.compressed) {
            this._sendCompressed(buffer);
        } else {
            this.socket.send(buffer);
        }
    };

    /**
     * Set a global handler for an untagged response. If currently processed command
     * has not listed untagged command it is forwarded to the global handler. Useful
     * with EXPUNGE, EXISTS etc.
     *
     * @param {String} command Untagged command name
     * @param {Function} callback Callback function with response object and continue callback function
     */
    Imap.prototype.setHandler = function(command, callback) {
        this._globalAcceptUntagged[command.toUpperCase().trim()] = callback;
    };

    // INTERNAL EVENTS

    /**
     * Error handler for the socket
     *
     * @event
     * @param {Event} evt Event object. See evt.data for the error
     */
    Imap.prototype._onError = function(evt) {
        var error;
        if (this.isError(evt)) {
            error = evt;
        } else if (evt && this.isError(evt.data)) {
            error = evt.data;
        } else {
            error = new Error(evt && evt.data && evt.data.message || evt.data || evt || 'Error');
        }

        this.logger.error(error);

        // always call onerror callback, no matter if close() succeeds or fails
        this.close(error).then(() => {
            this.onerror && this.onerror(error);
        }, () => {
            this.onerror && this.onerror(error);
        });
    };

    /**
     * Handler for incoming data from the server. The data is sent in arbitrary
     * chunks and can't be used directly so this function makes sure the data
     * is split into complete lines before the data is passed to the command
     * handler
     *
     * @param {Event} evt
     */
    Imap.prototype._onData = function(evt) {
        clearTimeout(this._socketTimeoutTimer); // clear the timeout, the socket is still up
        this._socketTimeoutTimer = null;

        this._incomingBuffer += mimecodec.fromTypedArray(evt.data); // append to the incoming buffer
        this._parseIncomingCommands(this._iterateIncomingBuffer()); // Consume the incoming buffer
    };

    Imap.prototype._iterateIncomingBuffer = function* () {
        var match;
        // The input is interesting as long as there are complete lines
        while ((match = this._incomingBuffer.match(COMMAND_REGEX))) {
            if (this._literalRemaining && this._literalRemaining > this._incomingBuffer.length) {
                // we're expecting more incoming literal data than available, wait for the next chunk
                return;
            }

            if (this._literalRemaining) {
                // we're expecting incoming literal data:
                // take portion of pending literal data from the chunk, parse the remaining buffer in the next iteration
                this._command += this._incomingBuffer.substr(0, this._literalRemaining);
                this._incomingBuffer = this._incomingBuffer.substr(this._literalRemaining);
                this._literalRemaining = 0;
                continue;
            }

            if (match[2]) {
                // we have a literal data command:
                // take command portion (match.index) including the literal data octet count (match[0].length)
                // from the chunk, parse the literal data in the next iteration
                this._literalRemaining = Number(match[2]);
                this._command += this._incomingBuffer.substr(0, match.index + match[0].length);
                this._incomingBuffer = this._incomingBuffer.substr(match.index + match[0].length);
                continue;
            }

            // we have a complete command, pass on to processing
            this._command += this._incomingBuffer.substr(0, match.index);
            this._incomingBuffer = this._incomingBuffer.substr(match.index + match[0].length);
            yield this._command;

            this._command = ''; // clear for next iteration
        }
    };



    // PRIVATE METHODS

    /**
     * Processes a command from the queue. The command is parsed and feeded to a handler
     */
    Imap.prototype._parseIncomingCommands = function(commands) {
        for (var command of commands) {
            this._clearIdle();

            /*
             * The "+"-tagged response is a special case:
             * Either the server can asks for the next chunk of data, e.g. for the AUTHENTICATE command.
             *
             * Or there was an error in the XOAUTH2 authentication, for which SASL initial client response extension
             * dictates the client sends an empty EOL response to the challenge containing the error message.
             *
             * Details on "+"-tagged response:
             *   https://tools.ietf.org/html/rfc3501#section-2.2.1
             */
            //
            if (/^\+/.test(command)) {
                if (this._currentCommand.data.length) {
                    // feed the next chunk of data
                    var chunk = this._currentCommand.data.shift();
                    chunk += (!this._currentCommand.data.length ? EOL : ''); // EOL if there's nothing more to send
                    this.send(chunk);
                } else if (this._currentCommand.errorResponseExpectsEmptyLine) {
                    this.send(EOL); // XOAUTH2 empty response, error will be reported when server continues with NO response
                }
                continue;
            }

            var response;
            try {
                response = imapHandler.parser(command.trim());
                this.logger.debug('S:', () => imapHandler.compiler(response, false, true));
            } catch (e) {
                this.logger.error('Error parsing imap command!', response);
                return this._onError(e);
            }

            this._processResponse(response);
            this._handleResponse(response);

            // first response from the server, connection is now usable
            if (!this._connectionReady) {
                this._connectionReady = true;
                this.onready && this.onready();
            }
        }
    };

    /**
     * Feeds a parsed response object to an appropriate handler
     *
     * @param {Object} response Parsed command object
     */
    Imap.prototype._handleResponse = function(response) {
        var command = (response && response.command || '').toUpperCase().trim();

        if (!this._currentCommand) {
            // unsolicited untagged response
            if (response.tag === '*' && command in this._globalAcceptUntagged) {
                this._globalAcceptUntagged[command](response);
                this._canSend = true;
                this._sendRequest();
            }
        } else if (this._currentCommand.payload && response.tag === '*' && command in this._currentCommand.payload) {
            // expected untagged response
            this._currentCommand.payload[command].push(response);
        } else if (response.tag === '*' && command in this._globalAcceptUntagged) {
            // unexpected untagged response
            this._globalAcceptUntagged[command](response);
        } else if (response.tag === this._currentCommand.tag) {
            // tagged response
            if (this._currentCommand.payload && Object.keys(this._currentCommand.payload).length) {
                response.payload = this._currentCommand.payload;
            }
            this._currentCommand.callback(response);
            this._canSend = true;
            this._sendRequest();
        }
    };

    /**
     * Sends a command from client queue to the server.
     */
    Imap.prototype._sendRequest = function() {
        if (!this._clientQueue.length) {
            return this._enterIdle();
        }
        this._clearIdle();

        // an operation was made in the precheck, no need to restart the queue manually
        this._restartQueue = false;

        var command = this._clientQueue[0];
        if (typeof command.precheck === 'function') {
            // remember the context
            var context = command;
            var precheck = context.precheck;
            delete context.precheck;

            // we need to restart the queue handling if no operation was made in the precheck
            this._restartQueue = true;

            // invoke the precheck command and resume normal operation after the promise resolves
            precheck(context).then(() => {
                // we're done with the precheck
                if (this._restartQueue) {
                    // we need to restart the queue handling
                    this._sendRequest();
                }
            }).catch((err) => {
                // precheck failed, so we remove the initial command
                // from the queue, invoke its callback and resume normal operation
                var cmd, index = this._clientQueue.indexOf(context);
                if (index >= 0) {
                    cmd = this._clientQueue.splice(index, 1)[0];
                }
                if (cmd && cmd.callback) {
                    cmd.callback(err);
                    this._canSend = true;
                    this._parseIncomingCommands(this._iterateIncomingBuffer()); // Consume the rest of the incoming buffer
                    this._sendRequest(); // continue sending
                }
            });
            return;
        }

        this._canSend = false;
        this._currentCommand = this._clientQueue.shift();

        try {
            this._currentCommand.data = imapHandler.compiler(this._currentCommand.request, true);
            this.logger.debug('C:', () => imapHandler.compiler(this._currentCommand.request, false, true)); // excludes passwords etc.
        } catch (e) {
            this.logger.error('Error compiling imap command!', this._currentCommand.request);
            return this._onError(new Error('Error compiling imap command!'));
        }

        var data = this._currentCommand.data.shift();

        this.send(data + (!this._currentCommand.data.length ? EOL : ''));
        return this.waitDrain;
    };

    /**
     * Emits onidle, noting to do currently
     */
    Imap.prototype._enterIdle = function() {
        clearTimeout(this._idleTimer);
        this._idleTimer = setTimeout(() => (this.onidle && this.onidle()), this.TIMEOUT_ENTER_IDLE);
    };

    /**
     * Cancel idle timer
     */
    Imap.prototype._clearIdle = function() {
        clearTimeout(this._idleTimer);
        this._idleTimer = null;
    };

    /**
     * Method processes a response into an easier to handle format.
     * Add untagged numbered responses (e.g. FETCH) into a nicely feasible form
     * Checks if a response includes optional response codes
     * and copies these into separate properties. For example the
     * following response includes a capability listing and a human
     * readable message:
     *
     *     * OK [CAPABILITY ID NAMESPACE] All ready
     *
     * This method adds a 'capability' property with an array value ['ID', 'NAMESPACE']
     * to the response object. Additionally 'All ready' is added as 'humanReadable' property.
     *
     * See possiblem IMAP Response Codes at https://tools.ietf.org/html/rfc5530
     *
     * @param {Object} response Parsed response object
     */
    Imap.prototype._processResponse = function(response) {
        var command = (response && response.command || '').toString().toUpperCase().trim(),
            option,
            key;

        // no attributes
        if (!response || !response.attributes || !response.attributes.length) {
            return;
        }

        // untagged responses w/ sequence numbers
        if (response.tag === '*' && /^\d+$/.test(response.command) && response.attributes[0].type === 'ATOM') {
            response.nr = Number(response.command);
            response.command = (response.attributes.shift().value || '').toString().toUpperCase().trim();
        }

        // no optional response code
        if (['OK', 'NO', 'BAD', 'BYE', 'PREAUTH'].indexOf(command) < 0) {
            return;
        }

        // If last element of the response is TEXT then this is for humans
        if (response.attributes[response.attributes.length - 1].type === 'TEXT') {
            response.humanReadable = response.attributes[response.attributes.length - 1].value;
        }

        // Parse and format ATOM values
        if (response.attributes[0].type === 'ATOM' && response.attributes[0].section) {
            option = response.attributes[0].section.map((key) => {
                if (!key) {
                    return;
                }
                if (Array.isArray(key)) {
                    return key.map((key) => (key.value || '').toString().trim());
                } else {
                    return (key.value || '').toString().toUpperCase().trim();
                }
            });

            key = option.shift();
            response.code = key;

            if (option.length === 1) {
                response[key.toLowerCase()] = option[0];
            } else if (option.length > 1) {
                response[key.toLowerCase()] = option;
            }
        }
    };

    /**
     * Checks if a value is an Error object
     *
     * @param {Mixed} value Value to be checked
     * @return {Boolean} returns true if the value is an Error
     */
    Imap.prototype.isError = function(value) {
        return !!Object.prototype.toString.call(value).match(/Error\]$/);
    };

    // COMPRESSION RELATED METHODS

    /**
     * Sets up deflate/inflate for the IO
     */
    Imap.prototype.enableCompression = function() {
        this._socketOnData = this.socket.ondata;
        this.compressed = true;

        if (typeof window !== 'undefined' && window.Worker && typeof this._workerPath === 'string') {

            //
            // web worker support
            //

            this._compressionWorker = new Worker(this._workerPath);
            this._compressionWorker.onmessage = (e) => {
                var message = e.data.message,
                    buffer = e.data.buffer;

                switch (message) {
                    case MESSAGE_INFLATED_DATA_READY:
                        this._socketOnData({
                            data: buffer
                        });
                        break;

                    case MESSAGE_DEFLATED_DATA_READY:
                        this.waitDrain = this.socket.send(buffer);
                        break;

                }
            };

            this._compressionWorker.onerror = (e) => {
                this._onError(new Error('Error handling compression web worker: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message));
            };

            // first message starts the worker
            this._compressionWorker.postMessage(this._createMessage(MESSAGE_START));

        } else {

            //
            // without web worker support
            //

            this._compression.inflatedReady = (buffer) => {
                // emit inflated data
                this._socketOnData({
                    data: buffer
                });
            };

            this._compression.deflatedReady = (buffer) => {
                // write deflated data to socket
                if (!this.compressed) {
                    return;
                }

                this.waitDrain = this.socket.send(buffer);
            };
        }

        // override data handler, decompress incoming data
        this.socket.ondata = (evt) => {
            if (!this.compressed) {
                return;
            }

            // inflate
            if (this._compressionWorker) {
                this._compressionWorker.postMessage(this._createMessage(MESSAGE_INFLATE, evt.data), [evt.data]);
            } else {
                this._compression.inflate(evt.data);
            }
        };
    };



    /**
     * Undoes any changes related to compression. This only be called when closing the connection
     */
    Imap.prototype._disableCompression = function() {
        if (!this.compressed) {
            return;
        }

        this.compressed = false;
        this.socket.ondata = this._socketOnData;
        this._socketOnData = null;

        if (this._compressionWorker) {
            // terminate the worker
            this._compressionWorker.terminate();
            this._compressionWorker = null;
        }
    };

    /**
     * Outgoing payload needs to be compressed and sent to socket
     *
     * @param {ArrayBuffer} buffer Outgoing uncompressed arraybuffer
     */
    Imap.prototype._sendCompressed = function(buffer) {
        // deflate
        if (this._compressionWorker) {
            this._compressionWorker.postMessage(this._createMessage(MESSAGE_DEFLATE, buffer), [buffer]);
        } else {
            this._compression.deflate(buffer);
        }
    };

    Imap.prototype._createMessage = function(message, buffer) {
        return {
            message: message,
            buffer: buffer
        };
    };


    return Imap;
}));

},{"./emailjs-imap-client-compression":65,"emailjs-imap-handler":71,"emailjs-mime-codec":73,"emailjs-tcp-socket":77}],67:[function(requireb,module,exports){
/* Modified pako (MIT licensed) */
/* http://nodeca.github.io/pako/ */
/* Updates from: https://github.com/creationix/tedit-node-backend/blob/master/zlib-codec.js */

/* jshint eqeqeq: false, globalstrict: false, strict: false, asi: true, laxcomma: true, curly: false, newcap: false, immed: false, unused: false, indent: false */
/* global define: false */

/* pako 0.2.5 nodeca/pako */!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.pako=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof requireb=="function"&&requireb;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof requireb=="function"&&requireb;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = _dereq_('./lib/utils/common').assign;

var deflate   = _dereq_('./lib/deflate');
var inflate   = _dereq_('./lib/inflate');
var constants = _dereq_('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;
},{"./lib/deflate":2,"./lib/inflate":3,"./lib/utils/common":4,"./lib/zlib/constants":7}],2:[function(_dereq_,module,exports){
'use strict';


var zlib_deflate = _dereq_('./zlib/deflate.js');
var utils = _dereq_('./utils/common');
var strings = _dereq_('./utils/strings');
var msg = _dereq_('./zlib/messages');
var zstream = _dereq_('./zlib/zstream');


/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_SYNC_FLUSH    = 2;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = requireb('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
var Deflate = function(options) {

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }
};

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|String): input data. Strings will be converted to
 *   utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That flush internal pending buffers and call
 * [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function(data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && _mode === Z_FINISH)) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that input stream complete
 * or error happenned. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function(status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate alrorythm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = requireb('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}

// ADDED CODE
// original deflater from:
// https://github.com/creationix/tedit-node-backend/blob/master/zlib-codec.js
function deflater(emit) {
  var stream = new zstream();
  var start;
  stream.avail_out = 0;
  var status = zlib_deflate.deflateInit2(stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);
  if (status !== Z_OK) {
    throw new Error("Problem initializing deflate stream: " + msg[status]);
  }

  return function (data) {
    if (data === undefined) return emit();

    // Attach the input data
    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;

    var status, output;
    var ret = true;

    do {
      // When the stream gets full, we need to create new space.
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(16384);
        start = stream.next_out = 0;
        stream.avail_out = 16384;
      }

      // Perform the deflate
      status = zlib_deflate.deflate(stream, Z_SYNC_FLUSH);
      if (status !== Z_STREAM_END && status !== Z_OK) {
        throw new Error("Deflate problem: " + msg[status]);
      }

      // If the output buffer got full, flush the data.
      if (stream.avail_out === 0 && stream.next_out > start) {
        output = stream.output.subarray(start, start = stream.next_out);
        ret = emit(output);
      }
    } while ((stream.avail_in > 0 || stream.avail_out === 0) && status !== Z_STREAM_END);

    // Emit whatever is left in output.
    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }
    return ret;
  };
}



exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;
// ADDED METHOD
exports.deflater = deflater;
},{"./utils/common":4,"./utils/strings":5,"./zlib/deflate.js":9,"./zlib/messages":14,"./zlib/zstream":16}],3:[function(_dereq_,module,exports){
'use strict';


var zlib_inflate = _dereq_('./zlib/inflate.js');
var utils = _dereq_('./utils/common');
var strings = _dereq_('./utils/strings');
var c = _dereq_('./zlib/constants');
var msg = _dereq_('./zlib/messages');
var zstream = _dereq_('./zlib/zstream');
var gzheader = _dereq_('./zlib/gzheader');


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = requireb('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
var Inflate = function(options) {

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new gzheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
};

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That flush internal pending buffers and call
 * [[Inflate#onEnd]].
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function(data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && _mode === c.Z_FINISH)) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }
  } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }
  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell inflate that input stream complete
 * or error happenned. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function(status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = requireb('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}

// ADDED CODE
// original inflater from:
// https://github.com/creationix/tedit-node-backend/blob/master/zlib-codec.js
function inflater(emit) {
  var stream = new zstream();
  var start;
  stream.avail_out = 0;

  var status = zlib_inflate.inflateInit2(stream, -15);
  if (status !== c.Z_OK) {
    throw new Error("Problem initializing inflate stream: " + msg[status]);
  }

  return function (data) {
    if (data === undefined) return emit();

    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;

    var status, output;
    var ret = true;

    do {
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(16384);
        start = stream.next_out = 0;
        stream.avail_out = 16384;
      }

      status = zlib_inflate.inflate(stream, c.Z_NO_FLUSH);
      if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
        throw new Error("inflate problem: " + msg[status]);
      }

      if (stream.next_out) {
        if (stream.avail_out === 0 || status === c.Z_STREAM_END) {
          output = stream.output.subarray(start, start = stream.next_out);
          ret = emit(output);
        }
      }
    } while ((stream.avail_in > 0) && status !== c.Z_STREAM_END);

    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }

    return ret;
  };
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;
// ADDED CODE
exports.inflater = inflater;
},{"./utils/common":4,"./utils/strings":5,"./zlib/constants":7,"./zlib/gzheader":10,"./zlib/inflate.js":12,"./zlib/messages":14,"./zlib/zstream":16}],4:[function(_dereq_,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof(source) !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for(var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for(var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);
},{}],5:[function(_dereq_,module,exports){
// String encode/decode helpers
'use strict';


var utils = _dereq_('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var i=0; i<256; i++) {
  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
      c2 = str.charCodeAt(m_pos+1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i=0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
      c2 = str.charCodeAt(m_pos+1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for(var i=0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function(buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function(str) {
  var buf = new utils.Buf8(str.length);
  for(var i=0, len=buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len*2);

  for (out=0, i=0; i<len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max-1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":4}],6:[function(_dereq_,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0
    , s2 = ((adler >>> 16) & 0xffff) |0
    , n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;
},{}],7:[function(_dereq_,module,exports){
module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
},{}],8:[function(_dereq_,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for(var n =0; n < 256; n++){
    c = n;
    for(var k =0; k < 8; k++){
      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable
    , end = pos + len;

  crc = crc ^ (-1);

  for (var i = pos; i < end; i++ ) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;
},{}],9:[function(_dereq_,module,exports){
'use strict';

var utils   = _dereq_('../utils/common');
var trees   = _dereq_('./trees');
var adler32 = _dereq_('./adler32');
var crc32   = _dereq_('./crc32');
var msg   = _dereq_('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only (s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (requirebd for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH-1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH-1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length-1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH-1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
};

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  s.d_buf = s.lit_bufsize >> 1;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg){
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}

/* =========================================================================
 * Copy the source state to the destination state
 */
//function deflateCopy(dest, source) {
//
//}

exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/
},{"../utils/common":4,"./adler32":6,"./crc32":8,"./messages":14,"./trees":15}],10:[function(_dereq_,module,exports){
'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;
},{}],11:[function(_dereq_,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requirebs strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  var window;                 /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],12:[function(_dereq_,module,exports){
'use strict';


var utils = _dereq_('../utils/common');
var adler32 = _dereq_('./adler32');
var crc32   = _dereq_('./crc32');
var inflate_fast = _dereq_('./inffast');
var inflate_table = _dereq_('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function ZSWAP32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window,src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = ZSWAP32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = {bits: state.lenbits};
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = {bits: state.lenbits};
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = {bits: state.distbits};
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}


exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/
},{"../utils/common":4,"./adler32":6,"./crc32":8,"./inffast":11,"./inftrees":13}],13:[function(_dereq_,module,exports){
'use strict';


var utils = _dereq_('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
      base = extra = work;    /* dummy value--not used */
      end = 19;
  } else if (type === LENS) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;
  } else {                    /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i=0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":4}],14:[function(_dereq_,module,exports){
'use strict';

module.exports = {
  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
  '1':    'stream end',          /* Z_STREAM_END      1  */
  '0':    '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};
},{}],15:[function(_dereq_,module,exports){
'use strict';


var utils = _dereq_('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES+2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
};


var static_l_desc;
var static_d_desc;
var static_bl_desc;


var TreeDesc = function(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
};



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short (s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n*2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n-base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length-1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m*2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
        tree[m*2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n*2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES-1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1<<extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length-1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0 ; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1<<extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for ( ; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n*2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n*2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES+1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n*2 + 1]/*.Len*/ = 5;
    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n*2;
  var _m2 = m*2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code+LITERALS+1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n*2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requirebs that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node*2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6*2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count-3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count-3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count-11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requirebs that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3*(max_blindex+1) + 5+5+4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes-1,   5);
  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES<<1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len+3+7) >>> 3;
    static_lenb = (s.static_len+3+7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc*2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize-1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;
},{"../utils/common":4}],16:[function(_dereq_,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;
},{}]},{},[1])(1)
});

},{}],68:[function(requireb,module,exports){
(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['./emailjs-imap-client-imap', 'emailjs-utf7', 'emailjs-imap-handler', 'emailjs-mime-codec', 'emailjs-addressparser'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('./emailjs-imap-client-imap'), requireb('emailjs-utf7'), requireb('emailjs-imap-handler'), requireb('emailjs-mime-codec'), requireb('emailjs-addressparser'));
    }
}(this, function(ImapClient, utf7, imapHandler, mimefuncs, addressparser) {
    'use strict';

    var SPECIAL_USE_FLAGS = ['\\All', '\\Archive', '\\Drafts', '\\Flagged', '\\Junk', '\\Sent', '\\Trash'];
    var SPECIAL_USE_BOXES = {
        '\\Sent': ['aika', 'bidaliak', 'bidalita', 'dihantar', 'e rometsweng', 'e tindami', 'elküldött', 'elküldöttek', 'enviadas', 'enviadas', 'enviados', 'enviats', 'envoyés', 'ethunyelweyo', 'expediate', 'ezipuru', 'gesendete', 'gestuur', 'gönderilmiş öğeler', 'göndərilənlər', 'iberilen', 'inviati', 'išsiųstieji', 'kuthunyelwe', 'lasa', 'lähetetyt', 'messages envoyés', 'naipadala', 'nalefa', 'napadala', 'nosūtītās ziņas', 'odeslané', 'padala', 'poslane', 'poslano', 'poslano', 'poslané', 'poslato', 'saadetud', 'saadetud kirjad', 'sendt', 'sendt', 'sent', 'sent items', 'sent messages', 'sända poster', 'sänt', 'terkirim', 'ti fi ranṣẹ', 'të dërguara', 'verzonden', 'vilivyotumwa', 'wysłane', 'đã gửi', 'σταλθέντα', 'жиберилген', 'жіберілгендер', 'изпратени', 'илгээсэн', 'ирсол шуд', 'испратено', 'надіслані', 'отправленные', 'пасланыя', 'юборилган', 'ուղարկված', 'נשלחו', 'פריטים שנשלחו', 'المرسلة', 'بھیجے گئے', 'سوزمژہ', 'لېګل شوی', 'موارد ارسال شده', 'पाठविले', 'पाठविलेले', 'प्रेषित', 'भेजा गया', 'প্রেরিত', 'প্রেরিত', 'প্ৰেৰিত', 'ਭੇਜੇ', 'મોકલેલા', 'ପଠାଗଲା', 'அனுப்பியவை', 'పంపించబడింది', 'ಕಳುಹಿಸಲಾದ', 'അയച്ചു', 'යැවු පණිවුඩ', 'ส่งแล้ว', 'გაგზავნილი', 'የተላኩ', 'បាន​ផ្ញើ', '寄件備份', '寄件備份', '已发信息', '送信済みﾒｰﾙ', '발신 메시지', '보낸 편지함'],
        '\\Trash': ['articole șterse', 'bin', 'borttagna objekt', 'deleted', 'deleted items', 'deleted messages', 'elementi eliminati', 'elementos borrados', 'elementos eliminados', 'gelöschte objekte', 'item dipadam', 'itens apagados', 'itens excluídos', 'mục đã xóa', 'odstraněné položky', 'pesan terhapus', 'poistetut', 'praht', 'prügikast', 'silinmiş öğeler', 'slettede beskeder', 'slettede elementer', 'trash', 'törölt elemek', 'usunięte wiadomości', 'verwijderde items', 'vymazané správy', 'éléments supprimés', 'видалені', 'жойылғандар', 'удаленные', 'פריטים שנמחקו', 'العناصر المحذوفة', 'موارد حذف شده', 'รายการที่ลบ', '已删除邮件', '已刪除項目', '已刪除項目'],
        '\\Junk': ['bulk mail', 'correo no deseado', 'courrier indésirable', 'istenmeyen', 'istenmeyen e-posta', 'junk', 'levélszemét', 'nevyžiadaná pošta', 'nevyžádaná pošta', 'no deseado', 'posta indesiderata', 'pourriel', 'roskaposti', 'skräppost', 'spam', 'spam', 'spamowanie', 'søppelpost', 'thư rác', 'спам', 'דואר זבל', 'الرسائل العشوائية', 'هرزنامه', 'สแปม', '‎垃圾郵件', '垃圾邮件', '垃圾電郵'],
        '\\Drafts': ['ba brouillon', 'borrador', 'borrador', 'borradores', 'bozze', 'brouillons', 'bản thảo', 'ciorne', 'concepten', 'draf', 'drafts', 'drög', 'entwürfe', 'esborranys', 'garalamalar', 'ihe edeturu', 'iidrafti', 'izinhlaka', 'juodraščiai', 'kladd', 'kladder', 'koncepty', 'koncepty', 'konsep', 'konsepte', 'kopie robocze', 'layihələr', 'luonnokset', 'melnraksti', 'meralo', 'mesazhe të padërguara', 'mga draft', 'mustandid', 'nacrti', 'nacrti', 'osnutki', 'piszkozatok', 'rascunhos', 'rasimu', 'skice', 'taslaklar', 'tsararrun saƙonni', 'utkast', 'vakiraoka', 'vázlatok', 'zirriborroak', 'àwọn àkọpamọ́', 'πρόχειρα', 'жобалар', 'нацрти', 'нооргууд', 'сиёҳнавис', 'хомаки хатлар', 'чарнавікі', 'чернетки', 'чернови', 'черновики', 'черновиктер', 'սևագրեր', 'טיוטות', 'مسودات', 'مسودات', 'موسودې', 'پیش نویسها', 'ڈرافٹ/', 'ड्राफ़्ट', 'प्रारूप', 'খসড়া', 'খসড়া', 'ড্ৰাফ্ট', 'ਡ੍ਰਾਫਟ', 'ડ્રાફ્ટસ', 'ଡ୍ରାଫ୍ଟ', 'வரைவுகள்', 'చిత్తు ప్రతులు', 'ಕರಡುಗಳು', 'കരടുകള്‍', 'කෙටුම් පත්', 'ฉบับร่าง', 'მონახაზები', 'ረቂቆች', 'សារព្រាង', '下書き', '草稿', '草稿', '草稿', '임시 보관함']
    };
    var SPECIAL_USE_BOX_FLAGS = Object.keys(SPECIAL_USE_BOXES);
    var SESSIONCOUNTER = 0;

    /**
     * emailjs IMAP client
     *
     * @constructor
     *
     * @param {String} [host='localhost'] Hostname to conenct to
     * @param {Number} [port=143] Port number to connect to
     * @param {Object} [options] Optional options object
     */
    function Client(host, port, options) {
        this.serverId = false; // RFC 2971 Server ID as key value pairs

        // Event placeholders
        this.oncert = null;
        this.onupdate = null;
        this.onselectmailbox = null;
        this.onclosemailbox = null;

        //
        // Internals
        //

        this.options = options || {};
        this.options.sessionId = this.options.sessionId || ++SESSIONCOUNTER; // Session identifier (logging)
        this._state = false; // Current state
        this._authenticated = false; // Is the connection authenticated
        this._capability = []; // List of extensions the server supports
        this._selectedMailbox = false; // Selected mailbox
        this._enteredIdle = false;
        this._idleTimeout = false;

        this.client = new ImapClient(host, port, this.options); // IMAP client object

        // Event Handlers
        this.client.onerror = this._onError.bind(this);
        this.client.oncert = (cert) => (this.oncert && this.oncert(cert)); // allows certificate handling for platforms w/o native tls support
        this.client.onidle = () => this._onIdle(); // start idling

        // Default handlers for untagged responses
        this.client.setHandler('capability', (response) => this._untaggedCapabilityHandler(response)); // capability updates
        this.client.setHandler('ok', (response) => this._untaggedOkHandler(response)); // notifications
        this.client.setHandler('exists', (response) => this._untaggedExistsHandler(response)); // message count has changed
        this.client.setHandler('expunge', (response) => this._untaggedExpungeHandler(response)); // message has been deleted
        this.client.setHandler('fetch', (response) => this._untaggedFetchHandler(response)); // message has been updated (eg. flag change)

        // Activate logging
        this.createLogger();
        this.logLevel = this.LOG_LEVEL_ALL;
    }

    /**
     * Called if the lower-level ImapClient has encountered an unrecoverable
     * error during operation. Cleans up and propagates the error upwards.
     */
    Client.prototype._onError = function(err) {
        // make sure no idle timeout is pending anymore
        clearTimeout(this._idleTimeout);

        // propagate the error upwards
        this.onerror && this.onerror(err);
    };

    //
    //
    // PUBLIC API
    //
    //


    /**
     * Initiate connection to the IMAP server
     *
     * @returns {Promise} Promise when login procedure is complete
     */
    Client.prototype.connect = function() {
        return new Promise((resolve, reject) => {
            var connectionTimeout = setTimeout(() => reject(new Error('Timeout connecting to server')), this.TIMEOUT_CONNECTION);
            this.logger.debug('Connecting to', this.client.host, ':',  this.client.port);
            this._changeState(this.STATE_CONNECTING);
            this.client.connect().then(() => {
                this.logger.debug('Socket opened, waiting for greeting from the server...');

                this.client.onready = () => {
                    clearTimeout(connectionTimeout);
                    resolve();
                };

                this.client.onerror = (err) => {
                    clearTimeout(connectionTimeout);
                    reject(err);
                };
            }).catch(reject);
        }).then(() => {
            this._changeState(this.STATE_NOT_AUTHENTICATED);
            return this.updateCapability();
        }).then(() => {
            return this.upgradeConnection();
        }).then(() => {
            return this.updateId(this.options.id)
            .catch(err => this.logger.warn('Failed to update id', err));
        }).then(() => {
            return this.login(this.options.auth);
        }).then(() => {
            return this.compressConnection();
        }).then(() => {
            this.logger.debug('Connection established, ready to roll!');
            this.client.onerror = this._onError.bind(this);
        }).catch((err) => {
            this.logger.error('Could not connect to server', err);
            this.close(err); // we don't really care whether this works or not
            throw err;
        });
    };

    /**
     * Logout
     *
     * Send LOGOUT, to which the server responds by closing the connection.
     * Use is discouraged if network status is unclear! If networks status is
     * unclear, please use #close instead!
     *
     * LOGOUT details:
     *   https://tools.ietf.org/html/rfc3501#section-6.1.3
     *
     * @returns {Promise} Resolves when server has closed the connection
     */
    Client.prototype.logout = function() {
        this._changeState(this.STATE_LOGOUT);
        this.logger.debug('Logging out...');
        return this.client.logout().then(() => {
            clearTimeout(this._idleTimeout);
        });
    };

    /**
     * Force-closes the current connection by closing the TCP socket.
     *
     * @returns {Promise} Resolves when socket is closed
     */
    Client.prototype.close = function(err) {
        this._changeState(this.STATE_LOGOUT);
        clearTimeout(this._idleTimeout);
        this.logger.debug('Closing connection...');
        return this.client.close(err);
    };

    /**
     * Runs ID command, parses ID response, sets this.serverId
     *
     * ID details:
     *   http://tools.ietf.org/html/rfc2971
     *
     * @param {Object} id ID as key value pairs. See http://tools.ietf.org/html/rfc2971#section-3.3 for possible values
     * @returns {Promise} Resolves when response has been parsed
     */
    Client.prototype.updateId = function(id) {
        if (this._capability.indexOf('ID') < 0) {
            return Promise.resolve();
        }

        var attributes = [
            []
        ];
        if (id) {
            if (typeof id === 'string') {
                id = {
                    name: id
                };
            }
            Object.keys(id).forEach((key) => {
                attributes[0].push(key);
                attributes[0].push(id[key]);
            });
        } else {
            attributes[0] = null;
        }

        this.logger.debug('Updating id...');
        return this.exec({
            command: 'ID',
            attributes: attributes
        }, 'ID').then((response) => {
            if (!response.payload || !response.payload.ID || !response.payload.ID.length) {
                return;
            }

            this.serverId = {};

            var key;
            [].concat([].concat(response.payload.ID.shift().attributes || []).shift() || []).forEach((val, i) => {
                if (i % 2 === 0) {
                    key = (val && val.value || '').toString().toLowerCase().trim();
                } else {
                    this.serverId[key] = (val && val.value || '').toString();
                }
            });

            this.logger.debug('Server id updated!', this.serverId);
        });
    };

    Client.prototype._shouldSelectMailbox = function(path, ctx) {
        if (!ctx) {
          return true;
        }

        const previousSelect = this.client.getPreviouslyQueued(['SELECT', 'EXAMINE'], ctx);
        if (previousSelect && previousSelect.request.attributes) {
            const pathAttribute = previousSelect.request.attributes.find((attribute) => attribute.type === 'STRING');
            if (pathAttribute) {
                return pathAttribute.value !== path;
            }
        }

        return this._selectedMailbox !== path;
    };

    /**
     * Runs SELECT or EXAMINE to open a mailbox
     *
     * SELECT details:
     *   http://tools.ietf.org/html/rfc3501#section-6.3.1
     * EXAMINE details:
     *   http://tools.ietf.org/html/rfc3501#section-6.3.2
     *
     * @param {String} path Full path to mailbox
     * @param {Object} [options] Options object
     * @returns {Promise} Promise with information about the selected mailbox
     */
    Client.prototype.selectMailbox = function(path, options) {
        options = options || {};

        var query = {
            command: options.readOnly ? 'EXAMINE' : 'SELECT',
            attributes: [{
                type: 'STRING',
                value: path
            }]
        };

        if (options.condstore && this._capability.indexOf('CONDSTORE') >= 0) {
            query.attributes.push([{
                type: 'ATOM',
                value: 'CONDSTORE'
            }]);
        }

        this.logger.debug('Opening', path, '...');
        return this.exec(query, ['EXISTS', 'FLAGS', 'OK'], {
            ctx: options.ctx
        }).then((response) => {
            this._changeState(this.STATE_SELECTED);

            if (this._selectedMailbox && this._selectedMailbox !== path) {
                this.onclosemailbox && this.onclosemailbox(this._selectedMailbox);
            }

            this._selectedMailbox = path;

            var mailboxInfo = this._parseSELECT(response);

            var maybePromise = this.onselectmailbox && this.onselectmailbox(path, mailboxInfo);
            if (maybePromise && typeof maybePromise.then === 'function') {
                return maybePromise.then(() => mailboxInfo);
            } else {
                return mailboxInfo;
            }
        });
    };

    /**
     * Runs NAMESPACE command
     *
     * NAMESPACE details:
     *   https://tools.ietf.org/html/rfc2342
     *
     * @returns {Promise} Promise with namespace object
     */
    Client.prototype.listNamespaces = function() {
        if (this._capability.indexOf('NAMESPACE') < 0) {
            return Promise.resolve(false);
        }

        this.logger.debug('Listing namespaces...');
        return this.exec('NAMESPACE', 'NAMESPACE').then((response) => {
            return this._parseNAMESPACE(response);
        });
    };

    /**
     * Runs LIST and LSUB commands. Retrieves a tree of available mailboxes
     *
     * LIST details:
     *   http://tools.ietf.org/html/rfc3501#section-6.3.8
     * LSUB details:
     *   http://tools.ietf.org/html/rfc3501#section-6.3.9
     *
     * @returns {Promise} Promise with list of mailboxes
     */
    Client.prototype.listMailboxes = function() {
        var tree;

        this.logger.debug('Listing mailboxes...');
        return this.exec({
            command: 'LIST',
            attributes: ['', '*']
        }, 'LIST').then((response) => {
            tree = {
                root: true,
                children: []
            };

            if (!response.payload || !response.payload.LIST || !response.payload.LIST.length) {
                return;
            }

            response.payload.LIST.forEach((item) => {
                if (!item || !item.attributes || item.attributes.length < 3) {
                    return;
                }
                var branch = this._ensurePath(tree, (item.attributes[2].value || '').toString(), (item.attributes[1] ? item.attributes[1].value : '/').toString());
                branch.flags = [].concat(item.attributes[0] || []).map((flag) => (flag.value || '').toString());
                branch.listed = true;
                this._checkSpecialUse(branch);
            });

        }).then(() => {
            return this.exec({
                command: 'LSUB',
                attributes: ['', '*']
            }, 'LSUB');

        }).then((response) => {
            if (!response.payload || !response.payload.LSUB || !response.payload.LSUB.length) {
                return tree;
            }

            response.payload.LSUB.forEach((item) => {
                if (!item || !item.attributes || item.attributes.length < 3) {
                    return;
                }
                var branch = this._ensurePath(tree, (item.attributes[2].value || '').toString(), (item.attributes[1] ? item.attributes[1].value : '/').toString());
                [].concat(item.attributes[0] || []).map((flag) => {
                    flag = (flag.value || '').toString();
                    if (!branch.flags || branch.flags.indexOf(flag) < 0) {
                        branch.flags = [].concat(branch.flags || []).concat(flag);
                    }
                });
                branch.subscribed = true;
            });
            return tree;

        }).catch((err) => {
            if (tree) {
                return tree; // ignore error for subscribed mailboxes if there's a valid response already
            }

            throw err;
        });
    };

    /**
     * Create a mailbox with the given path.
     *
     * CREATE details:
     *   http://tools.ietf.org/html/rfc3501#section-6.3.3
     *
     * @param {String} path
     *     The path of the mailbox you would like to create.  This method will
     *     handle utf7 encoding for you.
     * @returns {Promise}
     *     Promise resolves if mailbox was created.
     *     In the event the server says NO [ALREADYEXISTS], we treat that as success.
     */
    Client.prototype.createMailbox = function(path) {
        this.logger.debug('Creating mailbox', path, '...');
        return this.exec({
            command: 'CREATE',
            attributes: [utf7.imap.encode(path)]
        }).catch((err) => {
            if (err && err.code === 'ALREADYEXISTS') {
                return;
            }

            throw err;
        });
    };

    /**
     * Runs FETCH command
     *
     * FETCH details:
     *   http://tools.ietf.org/html/rfc3501#section-6.4.5
     * CHANGEDSINCE details:
     *   https://tools.ietf.org/html/rfc4551#section-3.3
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {String} sequence Sequence set, eg 1:* for all messages
     * @param {Object} [items] Message data item names or macro
     * @param {Object} [options] Query modifiers
     * @returns {Promise} Promise with the fetched message info
     */
    Client.prototype.listMessages = function(path, sequence, items, options) {
        items = items || [{
            fast: true
        }];
        options = options || {};

        this.logger.debug('Fetching messages', sequence, 'from', path, '...');
        var command = this._buildFETCHCommand(sequence, items, options);
        return this.exec(command, 'FETCH', {
            precheck: (ctx) => this._shouldSelectMailbox(path, ctx) ? this.selectMailbox(path, { ctx }) : Promise.resolve()
        }).then((response) => this._parseFETCH(response));
    };

    /**
     * Runs SEARCH command
     *
     * SEARCH details:
     *   http://tools.ietf.org/html/rfc3501#section-6.4.4
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {Object} query Search terms
     * @param {Object} [options] Query modifiers
     * @returns {Promise} Promise with the array of matching seq. or uid numbers
     */
    Client.prototype.search = function(path, query, options) {
        options = options || {};

        this.logger.debug('Searching in', path, '...');
        var command = this._buildSEARCHCommand(query, options);
        return this.exec(command, 'SEARCH', {
            precheck: (ctx) => this._shouldSelectMailbox(path, ctx) ? this.selectMailbox(path, { ctx }) : Promise.resolve()
        }).then((response) => this._parseSEARCH(response));
    };

    /**
     * Runs STORE command
     *
     * STORE details:
     *   http://tools.ietf.org/html/rfc3501#section-6.4.6
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {String} sequence Message selector which the flag change is applied to
     * @param {Array} flags
     * @param {Object} [options] Query modifiers
     * @returns {Promise} Promise with the array of matching seq. or uid numbers
     */
    Client.prototype.setFlags = function(path, sequence, flags, options) {
        var key = '';
        var list = [];

        if (Array.isArray(flags) || typeof flags !== 'object') {
            list = [].concat(flags || []);
            key = '';
        } else if (flags.add) {
            list = [].concat(flags.add || []);
            key = '+';
        } else if (flags.set) {
            key = '';
            list = [].concat(flags.set || []);
        } else if (flags.remove) {
            key = '-';
            list = [].concat(flags.remove || []);
        }

        this.logger.debug('Setting flags on', sequence, 'in', path, '...');
        return this.store(path, sequence, key + 'FLAGS', list, options);
    };

    /**
     * Runs STORE command
     *
     * STORE details:
     *   http://tools.ietf.org/html/rfc3501#section-6.4.6
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {String} sequence Message selector which the flag change is applied to
     * @param {String} action STORE method to call, eg "+FLAGS"
     * @param {Array} flags
     * @param {Object} [options] Query modifiers
     * @returns {Promise} Promise with the array of matching seq. or uid numbers
     */
    Client.prototype.store = function(path, sequence, action, flags, options) {
        options = options || {};

        var command = this._buildSTORECommand(sequence, action, flags, options);
        return this.exec(command, 'FETCH', {
            precheck: (ctx) => this._shouldSelectMailbox(path, ctx) ? this.selectMailbox(path, { ctx }) : Promise.resolve()
        }).then((response) => this._parseFETCH(response));
    };

    /**
     * Runs APPEND command
     *
     * APPEND details:
     *   http://tools.ietf.org/html/rfc3501#section-6.3.11
     *
     * @param {String} destination The mailbox where to append the message
     * @param {String} message The message to append
     * @param {Array} options.flags Any flags you want to set on the uploaded message. Defaults to [\Seen]. (optional)
     * @returns {Promise} Promise with the array of matching seq. or uid numbers
     */
    Client.prototype.upload = function(destination, message, options) {
        options = options || {};
        options.flags = options.flags || ['\\Seen'];
        var flags = options.flags.map((flag) => {
            return {
                type: 'atom',
                value: flag
            };
        });

        var command = {
            command: 'APPEND',
            attributes: [{
                    type: 'atom',
                    value: destination
                },
                flags, {
                    type: 'literal',
                    value: message
                }
            ]
        };

        this.logger.debug('Uploading message to', destination, '...');
        return this.exec(command);
    };

    /**
     * Deletes messages from a selected mailbox
     *
     * EXPUNGE details:
     *   http://tools.ietf.org/html/rfc3501#section-6.4.3
     * UID EXPUNGE details:
     *   https://tools.ietf.org/html/rfc4315#section-2.1
     *
     * If possible (byUid:true and UIDPLUS extension supported), uses UID EXPUNGE
     * command to delete a range of messages, otherwise falls back to EXPUNGE.
     *
     * NB! This method might be destructive - if EXPUNGE is used, then any messages
     * with \Deleted flag set are deleted
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {String} sequence Message range to be deleted
     * @param {Object} [options] Query modifiers
     * @returns {Promise} Promise
     */
    Client.prototype.deleteMessages = function(path, sequence, options) {
        options = options || {};

        // add \Deleted flag to the messages and run EXPUNGE or UID EXPUNGE
        this.logger.debug('Deleting messages', sequence, 'in', path, '...');
        return this.setFlags(path, sequence, {
            add: '\\Deleted'
        }, options).then(() => {
            var cmd;
            if (options.byUid && this._capability.indexOf('UIDPLUS') >= 0) {
                cmd = {
                    command: 'UID EXPUNGE',
                    attributes: [{
                        type: 'sequence',
                        value: sequence
                    }]
                };
            } else {
                cmd = 'EXPUNGE';
            }
            return this.exec(cmd, null, {
                precheck: (ctx) => this._shouldSelectMailbox(path, ctx) ? this.selectMailbox(path, { ctx }) : Promise.resolve()
            });
        });
    };

    /**
     * Copies a range of messages from the active mailbox to the destination mailbox.
     * Silent method (unless an error occurs), by default returns no information.
     *
     * COPY details:
     *   http://tools.ietf.org/html/rfc3501#section-6.4.7
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {String} sequence Message range to be copied
     * @param {String} destination Destination mailbox path
     * @param {Object} [options] Query modifiers
     * @param {Boolean} [options.byUid] If true, uses UID COPY instead of COPY
     * @returns {Promise} Promise
     */
    Client.prototype.copyMessages = function(path, sequence, destination, options) {
        options = options || {};

        this.logger.debug('Copying messages', sequence, 'from', path, 'to', destination, '...');
        return this.exec({
            command: options.byUid ? 'UID COPY' : 'COPY',
            attributes: [{
                type: 'sequence',
                value: sequence
            }, {
                type: 'atom',
                value: destination
            }]
        }, null, {
            precheck: (ctx) => this._shouldSelectMailbox(path, ctx) ? this.selectMailbox(path, { ctx }) : Promise.resolve()
        }).then((response) => (response.humanReadable || 'COPY completed'));
    };

    /**
     * Moves a range of messages from the active mailbox to the destination mailbox.
     * Prefers the MOVE extension but if not available, falls back to
     * COPY + EXPUNGE
     *
     * MOVE details:
     *   http://tools.ietf.org/html/rfc6851
     *
     * @param {String} path The path for the mailbox which should be selected for the command. Selects mailbox if necessary
     * @param {String} sequence Message range to be moved
     * @param {String} destination Destination mailbox path
     * @param {Object} [options] Query modifiers
     * @returns {Promise} Promise
     */
    Client.prototype.moveMessages = function(path, sequence, destination, options) {
        options = options || {};

        this.logger.debug('Moving messages', sequence, 'from', path, 'to', destination, '...');

        if (this._capability.indexOf('MOVE') === -1) {
            // Fallback to COPY + EXPUNGE
            return this.copyMessages(path, sequence, destination, options).then(() => {
                return this.deleteMessages(path, sequence, options);
            });
        }

        // If possible, use MOVE
        return this.exec({
            command: options.byUid ? 'UID MOVE' : 'MOVE',
            attributes: [{
                type: 'sequence',
                value: sequence
            }, {
                type: 'atom',
                value: destination
            }]
        }, ['OK'], {
            precheck: (ctx) => this._shouldSelectMailbox(path, ctx) ? this.selectMailbox(path, { ctx }) : Promise.resolve()
        });
    };


    //
    //
    // INTERNALS
    //
    //


    // State constants
    Client.prototype.STATE_CONNECTING = 1;
    Client.prototype.STATE_NOT_AUTHENTICATED = 2;
    Client.prototype.STATE_AUTHENTICATED = 3;
    Client.prototype.STATE_SELECTED = 4;
    Client.prototype.STATE_LOGOUT = 5;

    // Timeout constants
    Client.prototype.TIMEOUT_CONNECTION = 90 * 1000; // Milliseconds to wait for the IMAP greeting from the server
    Client.prototype.TIMEOUT_NOOP = 60 * 1000; // Milliseconds between NOOP commands while idling
    Client.prototype.TIMEOUT_IDLE = 60 * 1000; // Milliseconds until IDLE command is cancelled


    /**
     * Runs COMPRESS command
     *
     * COMPRESS details:
     *   https://tools.ietf.org/html/rfc4978
     */
    Client.prototype.compressConnection = function() {
        if (!this.options.enableCompression || this._capability.indexOf('COMPRESS=DEFLATE') < 0 || this.client.compressed) {
            return Promise.resolve(false);
        }

        this.logger.debug('Enabling compression...');
        return this.exec({
            command: 'COMPRESS',
            attributes: [{
                type: 'ATOM',
                value: 'DEFLATE'
            }]
        }).then(() => {
            this.client.enableCompression();
            this.logger.debug('Compression enabled, all data sent and received is deflated!');
        });
    };

    /**
     * Runs LOGIN or AUTHENTICATE XOAUTH2 command
     *
     * LOGIN details:
     *   http://tools.ietf.org/html/rfc3501#section-6.2.3
     * XOAUTH2 details:
     *   https://developers.google.com/gmail/xoauth2_protocol#imap_protocol_exchange
     *
     * @param {String} auth.user
     * @param {String} auth.pass
     * @param {String} auth.xoauth2
     */
    Client.prototype.login = function(auth) {
        var command, options = {};

        if (!auth) {
            return Promise.reject(new Error('Authentication information not provided'));
        }

        if (this._capability.indexOf('AUTH=XOAUTH2') >= 0 && auth && auth.xoauth2) {
            command = {
                command: 'AUTHENTICATE',
                attributes: [{
                    type: 'ATOM',
                    value: 'XOAUTH2'
                }, {
                    type: 'ATOM',
                    value: this._buildXOAuth2Token(auth.user, auth.xoauth2),
                    sensitive: true
                }]
            };

            options.errorResponseExpectsEmptyLine = true; // + tagged error response expects an empty line in return
        } else {
            command = {
                command: 'login',
                attributes: [{
                    type: 'STRING',
                    value: auth.user || ''
                }, {
                    type: 'STRING',
                    value: auth.pass || '',
                    sensitive: true
                }]
            };
        }

        this.logger.debug('Logging in...');
        return this.exec(command, 'capability', options).then((response) => {
            /*
             * update post-auth capabilites
             * capability list shouldn't contain auth related stuff anymore
             * but some new extensions might have popped up that do not
             * make much sense in the non-auth state
             */
            if (response.capability && response.capability.length) {
                // capabilites were listed with the OK [CAPABILITY ...] response
                this._capability = [].concat(response.capability || []);
            } else if (response.payload && response.payload.CAPABILITY && response.payload.CAPABILITY.length) {
                // capabilites were listed with * CAPABILITY ... response
                this._capability = [].concat(response.payload.CAPABILITY.pop().attributes || []).map((capa) => (capa.value || '').toString().toUpperCase().trim());
            } else {
                // capabilities were not automatically listed, reload
                return this.updateCapability(true);
            }
        }).then(() => {
            this._changeState(this.STATE_AUTHENTICATED);
            this._authenticated = true;
            this.logger.debug('Login successful, post-auth capabilites updated!', this._capability);
        });
    };

    /**
     * Run an IMAP command.
     *
     * @param {Object} request Structured request object
     * @param {Array} acceptUntagged a list of untagged responses that will be included in 'payload' property
     */
    Client.prototype.exec = function(request, acceptUntagged, options) {
        this.breakIdle();
        return this.client.enqueueCommand(request, acceptUntagged, options).then((response) => {
            if (response && response.capability) {
                this._capability = response.capability;
            }
            return response;
        });
    };

    /**
     * Indicates that the connection started idling. Initiates a cycle
     * of NOOPs or IDLEs to receive notifications about updates in the server
     */
    Client.prototype._onIdle = function() {
        if (!this._authenticated || this._enteredIdle) {
            // No need to IDLE when not logged in or already idling
            return;
        }

        this.logger.debug('Client started idling');
        this.enterIdle();
    };

    /**
     * The connection is idling. Sends a NOOP or IDLE command
     *
     * IDLE details:
     *   https://tools.ietf.org/html/rfc2177
     */
    Client.prototype.enterIdle = function() {
        if (this._enteredIdle) {
            return;
        }
        this._enteredIdle = this._capability.indexOf('IDLE') >= 0 ? 'IDLE' : 'NOOP';
        this.logger.debug('Entering idle with ' + this._enteredIdle);

        if (this._enteredIdle === 'NOOP') {
            this._idleTimeout = setTimeout(() => {
                this.logger.debug('Sending NOOP');
                this.exec('NOOP');
            }, this.TIMEOUT_NOOP);
        } else if (this._enteredIdle === 'IDLE') {
            this.client.enqueueCommand({
                command: 'IDLE'
            });
            this._idleTimeout = setTimeout(() => {
                this.client.send('DONE\r\n');
                this._enteredIdle = false;
                this.logger.debug('Idle terminated');
            }, this.TIMEOUT_IDLE);
        }
    };

    /**
     * Stops actions related idling, if IDLE is supported, sends DONE to stop it
     */
    Client.prototype.breakIdle = function() {
        if (!this._enteredIdle) {
            return;
        }

        clearTimeout(this._idleTimeout);
        if (this._enteredIdle === 'IDLE') {
            this.client.send('DONE\r\n');
            this.logger.debug('Idle terminated');
        }
        this._enteredIdle = false;
    };

    /**
     * Runs STARTTLS command if needed
     *
     * STARTTLS details:
     *   http://tools.ietf.org/html/rfc3501#section-6.2.1
     *
     * @param {Boolean} [forced] By default the command is not run if capability is already listed. Set to true to skip this validation
     */
    Client.prototype.upgradeConnection = function() {
        // skip request, if already secured
        if (this.client.secureMode) {
            return Promise.resolve(false);
        }

        // skip if STARTTLS not available or starttls support disabled
        if ((this._capability.indexOf('STARTTLS') < 0 || this.options.ignoreTLS) && !this.options.requirebTLS) {
            return Promise.resolve(false);
        }

        this.logger.debug('Encrypting connection...');
        return this.exec('STARTTLS').then(() => {
            this._capability = [];
            this.client.upgrade();
            return this.updateCapability();
        });
    };

    /**
     * Runs CAPABILITY command
     *
     * CAPABILITY details:
     *   http://tools.ietf.org/html/rfc3501#section-6.1.1
     *
     * Doesn't register untagged CAPABILITY handler as this is already
     * handled by global handler
     *
     * @param {Boolean} [forced] By default the command is not run if capability is already listed. Set to true to skip this validation
     */
    Client.prototype.updateCapability = function(forced) {
        // skip request, if not forced update and capabilities are already loaded
        if (!forced && this._capability.length) {
            return Promise.resolve();
        }

        // If STARTTLS is requirebd then skip capability listing as we are going to try
        // STARTTLS anyway and we re-check capabilities after connection is secured
        if (!this.client.secureMode && this.options.requirebTLS) {
            return Promise.resolve();
        }

        this.logger.debug('Updating capability...');
        return this.exec('CAPABILITY');
    };

    Client.prototype.hasCapability = function(capa) {
        return this._capability.indexOf((capa || '').toString().toUpperCase().trim()) >= 0;
    };

    // Default handlers for untagged responses

    /**
     * Checks if an untagged OK includes [CAPABILITY] tag and updates capability object
     *
     * @param {Object} response Parsed server response
     * @param {Function} next Until called, server responses are not processed
     */
    Client.prototype._untaggedOkHandler = function(response) {
        if (response && response.capability) {
            this._capability = response.capability;
        }
    };

    /**
     * Updates capability object
     *
     * @param {Object} response Parsed server response
     * @param {Function} next Until called, server responses are not processed
     */
    Client.prototype._untaggedCapabilityHandler = function(response) {
        this._capability = [].concat(response && response.attributes || []).map((capa) => (capa.value || '').toString().toUpperCase().trim());
    };

    /**
     * Updates existing message count
     *
     * @param {Object} response Parsed server response
     * @param {Function} next Until called, server responses are not processed
     */
    Client.prototype._untaggedExistsHandler = function(response) {
        if (response && response.hasOwnProperty('nr')) {
            this.onupdate && this.onupdate(this._selectedMailbox, 'exists', response.nr);
        }
    };

    /**
     * Indicates a message has been deleted
     *
     * @param {Object} response Parsed server response
     * @param {Function} next Until called, server responses are not processed
     */
    Client.prototype._untaggedExpungeHandler = function(response) {
        if (response && response.hasOwnProperty('nr')) {
            this.onupdate && this.onupdate(this._selectedMailbox, 'expunge', response.nr);
        }
    };

    /**
     * Indicates that flags have been updated for a message
     *
     * @param {Object} response Parsed server response
     * @param {Function} next Until called, server responses are not processed
     */
    Client.prototype._untaggedFetchHandler = function(response) {
        this.onupdate && this.onupdate(this._selectedMailbox, 'fetch', [].concat(this._parseFETCH({
            payload: {
                FETCH: [response]
            }
        }) || []).shift());
    };

    // Private helpers

    /**
     * Parses SELECT response
     *
     * @param {Object} response
     * @return {Object} Mailbox information object
     */
    Client.prototype._parseSELECT = function(response) {
        if (!response || !response.payload) {
            return;
        }

        var mailbox = {
                readOnly: response.code === 'READ-ONLY'
            },

            existsResponse = response.payload.EXISTS && response.payload.EXISTS.pop(),
            flagsResponse = response.payload.FLAGS && response.payload.FLAGS.pop(),
            okResponse = response.payload.OK;

        if (existsResponse) {
            mailbox.exists = existsResponse.nr || 0;
        }

        if (flagsResponse && flagsResponse.attributes && flagsResponse.attributes.length) {
            mailbox.flags = flagsResponse.attributes[0].map((flag) => (flag.value || '').toString().trim());
        }

        [].concat(okResponse || []).forEach((ok) => {
            switch (ok && ok.code) {
                case 'PERMANENTFLAGS':
                    mailbox.permanentFlags = [].concat(ok.permanentflags || []);
                    break;
                case 'UIDVALIDITY':
                    mailbox.uidValidity = Number(ok.uidvalidity) || 0;
                    break;
                case 'UIDNEXT':
                    mailbox.uidNext = Number(ok.uidnext) || 0;
                    break;
                case 'HIGHESTMODSEQ':
                    mailbox.highestModseq = ok.highestmodseq || '0'; // keep 64bit uint as a string
                    break;
                case 'NOMODSEQ':
                    mailbox.noModseq = true;
                    break;
            }
        });

        return mailbox;
    };

    /**
     * Parses NAMESPACE response
     *
     * @param {Object} response
     * @return {Object} Namespaces object
     */
    Client.prototype._parseNAMESPACE = function(response) {
        if (!response.payload || !response.payload.NAMESPACE || !response.payload.NAMESPACE.length) {
            return false;
        }

        var attributes = [].concat(response.payload.NAMESPACE.pop().attributes || []);
        if (!attributes.length) {
            return false;
        }

        return {
            personal: this._parseNAMESPACEElement(attributes[0]),
            users: this._parseNAMESPACEElement(attributes[1]),
            shared: this._parseNAMESPACEElement(attributes[2])
        };
    };

    /**
     * Parses a NAMESPACE element
     *
     * @param {Object} element
     * @return {Object} Namespaces element object
     */
    Client.prototype._parseNAMESPACEElement = function(element) {
        if (!element) {
            return false;
        }

        element = [].concat(element || []);
        return element.map((ns) => {
            if (!ns || !ns.length) {
                return false;
            }

            return {
                prefix: ns[0].value,
                delimiter: ns[1] && ns[1].value // The delimiter can legally be NIL which maps to null
            };
        });
    };

    /**
     * Builds a FETCH command
     *
     * @param {String} sequence Message range selector
     * @param {Array} items List of elements to fetch (eg. `['uid', 'envelope']`).
     * @param {Object} [options] Optional options object. Use `{byUid:true}` for `UID FETCH`
     * @returns {Object} Structured IMAP command
     */
    Client.prototype._buildFETCHCommand = function(sequence, items, options) {
        var command = {
            command: options.byUid ? 'UID FETCH' : 'FETCH',
            attributes: [{
                type: 'SEQUENCE',
                value: sequence
            }]
        };
        var query = [];

        items.forEach((item) => {
            var cmd;
            item = item.toUpperCase().trim();

            if (/^\w+$/.test(item)) {
                // alphanum strings can be used directly
                query.push({
                    type: 'ATOM',
                    value: item
                });
            } else if (item) {
                try {
                    // parse the value as a fake command, use only the attributes block
                    cmd = imapHandler.parser('* Z ' + item);
                    query = query.concat(cmd.attributes || []);
                } catch (E) {
                    // if parse failed, use the original string as one entity
                    query.push({
                        type: 'ATOM',
                        value: item
                    });
                }
            }
        });

        if (query.length === 1) {
            query = query.pop();
        }

        command.attributes.push(query);

        if (options.changedSince) {
            command.attributes.push([{
                type: 'ATOM',
                value: 'CHANGEDSINCE'
            }, {
                type: 'ATOM',
                value: options.changedSince
            }]);
        }

        return command;
    };

    /**
     * Parses FETCH response
     *
     * @param {Object} response
     * @return {Object} Message object
     */
    Client.prototype._parseFETCH = function(response) {
        if (!response || !response.payload || !response.payload.FETCH || !response.payload.FETCH.length) {
            return [];
        }

        var list = [];
        var messages = {};

        [].concat(response.payload.FETCH || []).forEach((item) => {
            var params = [].concat([].concat(item.attributes || [])[0] || []); // ensure the first value is an array
            var message;
            var i, len, key;

            if (messages[item.nr]) {
                // same sequence number is already used, so merge values instead of creating a new message object
                message = messages[item.nr];
            } else {
                messages[item.nr] = message = {
                    '#': item.nr
                };
                list.push(message);
            }

            for (i = 0, len = params.length; i < len; i++) {
                if (i % 2 === 0) {
                    key = imapHandler.compiler({
                        attributes: [params[i]]
                    }).toLowerCase().replace(/<\d+>$/, '');
                    continue;
                }
                message[key] = this._parseFetchValue(key, params[i]);
            }
        });

        return list;
    };

    /**
     * Parses a single value from the FETCH response object
     *
     * @param {String} key Key name (uppercase)
     * @param {Mized} value Value for the key
     * @return {Mixed} Processed value
     */
    Client.prototype._parseFetchValue = function(key, value) {
        if (!value) {
            return null;
        }

        if (!Array.isArray(value)) {
            switch (key) {
                case 'uid':
                case 'rfc822.size':
                    return Number(value.value) || 0;
                case 'modseq': // do not cast 64 bit uint to a number
                    return value.value || '0';
            }
            return value.value;
        }

        switch (key) {
            case 'flags':
            case 'x-gm-labels':
                value = [].concat(value).map((flag) => (flag.value || ''));
                break;
            case 'envelope':
                value = this._parseENVELOPE([].concat(value || []));
                break;
            case 'bodystructure':
                value = this._parseBODYSTRUCTURE([].concat(value || []));
                break;
            case 'modseq':
                value = (value.shift() || {}).value || '0';
                break;
        }

        return value;
    };

    /**
     * Parses message envelope from FETCH response. All keys in the resulting
     * object are lowercase. Address fields are all arrays with {name:, address:}
     * structured values. Unicode strings are automatically decoded.
     *
     * @param {Array} value Envelope array
     * @param {Object} Envelope object
     */
    Client.prototype._parseENVELOPE = function(value) {
        var envelope = {};

        /*
         * ENVELOPE lists addresses as [name-part, source-route, username, hostname]
         * where source-route is not used anymore and can be ignored.
         * To get comparable results with other parts of the email.js stack
         * browserbox feeds the parsed address values from ENVELOPE
         * to addressparser and uses resulting values instead of the
         * pre-parsed addresses
         */
        var processAddresses = (list) => {
            return [].concat(list || []).map((addr) => {

                var name = (addr[0] && addr[0].value || '').trim();
                var address = (addr[2] && addr[2].value || '') + '@' + (addr[3] && addr[3].value || '');
                var formatted;

                if (!name) {
                    formatted = address;
                } else {
                    formatted = this._encodeAddressName(name) + ' <' + address + '>';
                }

                var parsed = addressparser.parse(formatted).shift(); // there should bu just a single address
                parsed.name = mimefuncs.mimeWordsDecode(parsed.name);
                return parsed;
            });
        };

        if (value[0] && value[0].value) {
            envelope.date = value[0].value;
        }

        if (value[1] && value[1].value) {
            envelope.subject = mimefuncs.mimeWordsDecode(value[1] && value[1].value);
        }

        if (value[2] && value[2].length) {
            envelope.from = processAddresses(value[2]);
        }

        if (value[3] && value[3].length) {
            envelope.sender = processAddresses(value[3]);
        }

        if (value[4] && value[4].length) {
            envelope['reply-to'] = processAddresses(value[4]);
        }

        if (value[5] && value[5].length) {
            envelope.to = processAddresses(value[5]);
        }

        if (value[6] && value[6].length) {
            envelope.cc = processAddresses(value[6]);
        }

        if (value[7] && value[7].length) {
            envelope.bcc = processAddresses(value[7]);
        }

        if (value[8] && value[8].value) {
            envelope['in-reply-to'] = value[8].value;
        }

        if (value[9] && value[9].value) {
            envelope['message-id'] = value[9].value;
        }

        return envelope;
    };

    /**
     * Parses message body structure from FETCH response.
     *
     * TODO: implement actual handler
     *
     * @param {Array} value BODYSTRUCTURE array
     * @param {Object} Envelope object
     */
    Client.prototype._parseBODYSTRUCTURE = function(value) {
        var processNode = (node, path) => {
            path = path || [];

            var curNode = {},
                i = 0,
                key, part = 0;

            if (path.length) {
                curNode.part = path.join('.');
            }

            // multipart
            if (Array.isArray(node[0])) {
                curNode.childNodes = [];
                while (Array.isArray(node[i])) {
                    curNode.childNodes.push(processNode(node[i], path.concat(++part)));
                    i++;
                }

                // multipart type
                curNode.type = 'multipart/' + ((node[i++] || {}).value || '').toString().toLowerCase();

                // extension data (not available for BODY requests)

                // body parameter parenthesized list
                if (i < node.length - 1) {
                    if (node[i]) {
                        curNode.parameters = {};
                        [].concat(node[i] || []).forEach((val, j) => {
                            if (j % 2) {
                                curNode.parameters[key] = mimefuncs.mimeWordsDecode((val && val.value || '').toString());
                            } else {
                                key = (val && val.value || '').toString().toLowerCase();
                            }
                        });
                    }
                    i++;
                }
            } else {
                // content type
                curNode.type = [
                    ((node[i++] || {}).value || '').toString().toLowerCase(), ((node[i++] || {}).value || '').toString().toLowerCase()
                ].join('/');

                // body parameter parenthesized list
                if (node[i]) {
                    curNode.parameters = {};
                    [].concat(node[i] || []).forEach((val, j) => {
                        if (j % 2) {
                            curNode.parameters[key] = mimefuncs.mimeWordsDecode((val && val.value || '').toString());
                        } else {
                            key = (val && val.value || '').toString().toLowerCase();
                        }
                    });
                }
                i++;

                // id
                if (node[i]) {
                    curNode.id = ((node[i] || {}).value || '').toString();
                }
                i++;

                // description
                if (node[i]) {
                    curNode.description = ((node[i] || {}).value || '').toString();
                }
                i++;

                // encoding
                if (node[i]) {
                    curNode.encoding = ((node[i] || {}).value || '').toString().toLowerCase();
                }
                i++;

                // size
                if (node[i]) {
                    curNode.size = Number((node[i] || {}).value || 0) || 0;
                }
                i++;

                if (curNode.type === 'message/rfc822') {
                    // message/rfc adds additional envelope, bodystructure and line count values

                    // envelope
                    if (node[i]) {
                        curNode.envelope = this._parseENVELOPE([].concat(node[i] || []));
                    }
                    i++;

                    if (node[i]) {
                        curNode.childNodes = [
                            // rfc822 bodyparts share the same path, difference is between MIME and HEADER
                            // path.MIME returns message/rfc822 header
                            // path.HEADER returns inlined message header
                            processNode(node[i], path)
                        ];
                    }
                    i++;

                    // line count
                    if (node[i]) {
                        curNode.lineCount = Number((node[i] || {}).value || 0) || 0;
                    }
                    i++;

                } else if (/^text\//.test(curNode.type)) {
                    // text/* adds additional line count values

                    // line count
                    if (node[i]) {
                        curNode.lineCount = Number((node[i] || {}).value || 0) || 0;
                    }
                    i++;

                }

                // extension data (not available for BODY requests)

                // md5
                if (i < node.length - 1) {
                    if (node[i]) {
                        curNode.md5 = ((node[i] || {}).value || '').toString().toLowerCase();
                    }
                    i++;
                }
            }

            // the following are shared extension values (for both multipart and non-multipart parts)
            // not available for BODY requests

            // body disposition
            if (i < node.length - 1) {
                if (Array.isArray(node[i]) && node[i].length) {
                    curNode.disposition = ((node[i][0] || {}).value || '').toString().toLowerCase();
                    if (Array.isArray(node[i][1])) {
                        curNode.dispositionParameters = {};
                        [].concat(node[i][1] || []).forEach((val, j) => {
                            if (j % 2) {
                                curNode.dispositionParameters[key] = mimefuncs.mimeWordsDecode((val && val.value || '').toString());
                            } else {
                                key = (val && val.value || '').toString().toLowerCase();
                            }
                        });
                    }
                }
                i++;
            }

            // body language
            if (i < node.length - 1) {
                if (node[i]) {
                    curNode.language = [].concat(node[i] || []).map((val) => (val && val.value || '').toString().toLowerCase());
                }
                i++;
            }

            // body location
            // NB! defined as a "string list" in RFC3501 but replaced in errata document with "string"
            // Errata: http://www.rfc-editor.org/errata_search.php?rfc=3501
            if (i < node.length - 1) {
                if (node[i]) {
                    curNode.location = ((node[i] || {}).value || '').toString();
                }
                i++;
            }

            return curNode;
        };

        return processNode(value);
    };

    /**
     * Compiles a search query into an IMAP command. Queries are composed as objects
     * where keys are search terms and values are term arguments. Only strings,
     * numbers and Dates are used. If the value is an array, the members of it
     * are processed separately (use this for terms that requireb multiple params).
     * If the value is a Date, it is converted to the form of "01-Jan-1970".
     * Subqueries (OR, NOT) are made up of objects
     *
     *    {unseen: true, header: ["subject", "hello world"]};
     *    SEARCH UNSEEN HEADER "subject" "hello world"
     *
     * @param {Object} query Search query
     * @param {Object} [options] Option object
     * @param {Boolean} [options.byUid] If ture, use UID SEARCH instead of SEARCH
     * @return {Object} IMAP command object
     */
    Client.prototype._buildSEARCHCommand = function(query, options) {
        var command = {
            command: options.byUid ? 'UID SEARCH' : 'SEARCH'
        };

        var isAscii = true;

        var buildTerm = (query) => {
            var list = [];

            Object.keys(query).forEach((key) => {
                var params = [];
                var formatDate = (date) => date.toUTCString().replace(/^\w+, 0?(\d+) (\w+) (\d+).*/, "$1-$2-$3");
                var escapeParam = (param) => {
                    if (typeof param === "number") {
                        return {
                            type: "number",
                            value: param
                        };
                    } else if (typeof param === "string") {
                        if (/[\u0080-\uFFFF]/.test(param)) {
                            isAscii = false;
                            return {
                                type: "literal",
                                // cast unicode string to pseudo-binary as imap-handler compiles strings as octets
                                value: mimefuncs.fromTypedArray(mimefuncs.charset.encode(param))
                            };
                        }
                        return {
                            type: "string",
                            value: param
                        };
                    } else if (Object.prototype.toString.call(param) === "[object Date]") {
                        // RFC 3501 allows for dates to be placed in
                        // double-quotes or left without quotes.  Some
                        // servers (Yandex), do not like the double quotes,
                        // so we treat the date as an atom.
                        return {
                            type: "atom",
                            value: formatDate(param)
                        };
                    } else if (Array.isArray(param)) {
                        return param.map(escapeParam);
                    } else if (typeof param === "object") {
                        return buildTerm(param);
                    }
                };

                params.push({
                    type: "atom",
                    value: key.toUpperCase()
                });

                [].concat(query[key] || []).forEach((param) => {
                    switch (key.toLowerCase()) {
                        case 'uid':
                            param = {
                                type: "sequence",
                                value: param
                            };
                            break;
                            // The Gmail extension values of X-GM-THRID and
                            // X-GM-MSGID are defined to be unsigned 64-bit integers
                            // and they must not be quoted strings or the server
                            // will report a parse error.
                        case 'x-gm-thrid':
                        case 'x-gm-raw':
                            param = {
                                type: "string",
                                value: param
                            };
                            break;
                        case 'x-gm-msgid':
                            param = {
                                type: "number",
                                value: param
                            };
                            break;
                        default:
                            param = escapeParam(param);
                    }
                    if (param) {
                        params = params.concat(param || []);
                    }
                });
                list = list.concat(params || []);
            });

            return list;
        };

        command.attributes = [].concat(buildTerm(query || {}) || []);

        // If any string input is using 8bit bytes, prepend the optional CHARSET argument
        if (!isAscii) {
            command.attributes.unshift({
                type: "atom",
                value: "UTF-8"
            });
            command.attributes.unshift({
                type: "atom",
                value: "CHARSET"
            });
        }

        return command;
    };

    /**
     * Binary Search
     *
     * @param {Array} haystack Ordered array
     * @param {any} needle Item to search for in haystack
     * @param {Function} comparator Function that defines the sort order
     * @return {Number} Index of needle in haystack or if not found,
     *     -Index-1 is the position where needle could be inserted while still
     *     keeping haystack ordered.
     */
    Client.prototype._binSearch = function(haystack, needle, comparator) {
        var mid, cmp;
        var low = 0;
        var high = haystack.length - 1;

        while (low <= high) {
            // Note that "(low + high) >>> 1" may overflow, and results in
            // a typecast to double (which gives the wrong results).
            mid = low + (high - low >> 1);
            cmp = +comparator(haystack[mid], needle);

            if (cmp < 0.0) {
                // too low
                low = mid + 1;
            } else if (cmp > 0.0) {
                // too high
                high = mid - 1;
            } else {
                // key found
                return mid;
            }
        }

        // key not found
        return ~low;
    };

    /**
     * Parses SEARCH response. Gathers all untagged SEARCH responses, fetched seq./uid numbers
     * and compiles these into a sorted array.
     *
     * @param {Object} response
     * @return {Object} Message object
     * @param {Array} Sorted Seq./UID number list
     */
    Client.prototype._parseSEARCH = function(response) {
        var cmp = (a, b) => (a - b);
        var list = [];

        if (!response || !response.payload || !response.payload.SEARCH || !response.payload.SEARCH.length) {
            return [];
        }

        [].concat(response.payload.SEARCH || []).forEach((result) => {
            [].concat(result.attributes || []).forEach((nr) => {
                nr = Number(nr && nr.value || nr || 0) || 0;
                var idx = this._binSearch(list, nr, cmp);
                if (idx < 0) {
                    list.splice(-idx-1, 0, nr);
                }
            });
        });

        return list;
    };

    /**
     * Creates an IMAP STORE command from the selected arguments
     */
    Client.prototype._buildSTORECommand = function(sequence, action, flags, options) {
        var command = {
            command: options.byUid ? 'UID STORE' : 'STORE',
            attributes: [{
                type: 'sequence',
                value: sequence
            }]
        };

        command.attributes.push({
            type: 'atom',
            value: (action || '').toString().toUpperCase() + (options.silent ? '.SILENT' : '')
        });

        command.attributes.push(flags.map((flag) => {
            return {
                type: 'atom',
                value: flag
            };
        }));

        return command;
    };

    /**
     * Updates the IMAP state value for the current connection
     *
     * @param {Number} newState The state you want to change to
     */
    Client.prototype._changeState = function(newState) {
        if (newState === this._state) {
            return;
        }

        this.logger.debug('Entering state: ' + newState);

        // if a mailbox was opened, emit onclosemailbox and clear selectedMailbox value
        if (this._state === this.STATE_SELECTED && this._selectedMailbox) {
            this.onclosemailbox && this.onclosemailbox(this._selectedMailbox);
            this._selectedMailbox = false;
        }

        this._state = newState;
    };

    /**
     * Ensures a path exists in the Mailbox tree
     *
     * @param {Object} tree Mailbox tree
     * @param {String} path
     * @param {String} delimiter
     * @return {Object} branch for used path
     */
    Client.prototype._ensurePath = function(tree, path, delimiter) {
        var names = path.split(delimiter);
        var branch = tree;
        var i, j, found;

        for (i = 0; i < names.length; i++) {
            found = false;
            for (j = 0; j < branch.children.length; j++) {
                if (this._compareMailboxNames(branch.children[j].name, utf7.imap.decode(names[i]))) {
                    branch = branch.children[j];
                    found = true;
                    break;
                }
            }
            if (!found) {
                branch.children.push({
                    name: utf7.imap.decode(names[i]),
                    delimiter: delimiter,
                    path: names.slice(0, i + 1).join(delimiter),
                    children: []
                });
                branch = branch.children[branch.children.length - 1];
            }
        }
        return branch;
    };

    /**
     * Compares two mailbox names. Case insensitive in case of INBOX, otherwise case sensitive
     *
     * @param {String} a Mailbox name
     * @param {String} b Mailbox name
     * @returns {Boolean} True if the folder names match
     */
    Client.prototype._compareMailboxNames = function(a, b) {
        return (a.toUpperCase() === 'INBOX' ? 'INBOX' : a) === (b.toUpperCase() === 'INBOX' ? 'INBOX' : b);
    };

    /**
     * Checks if a mailbox is for special use
     *
     * @param {Object} mailbox
     * @return {String} Special use flag (if detected)
     */
    Client.prototype._checkSpecialUse = function(mailbox) {
        var i, type;

        if (mailbox.flags) {
            for (i = 0; i < SPECIAL_USE_FLAGS.length; i++) {
                type = SPECIAL_USE_FLAGS[i];
                if ((mailbox.flags || []).indexOf(type) >= 0) {
                    mailbox.specialUse = type;
                    mailbox.specialUseFlag = type;
                    return type;
                }
            }
        }

        return this._checkSpecialUseByName(mailbox);
    };

    Client.prototype._checkSpecialUseByName = function(mailbox) {
        var name = (mailbox.name || '').toLowerCase().trim(),
            i, type;

        for (i = 0; i < SPECIAL_USE_BOX_FLAGS.length; i++) {
            type = SPECIAL_USE_BOX_FLAGS[i];
            if (SPECIAL_USE_BOXES[type].indexOf(name) >= 0) {
                mailbox.specialUse = type;
                return type;
            }
        }

        return false;
    };

    /**
     * Builds a login token for XOAUTH2 authentication command
     *
     * @param {String} user E-mail address of the user
     * @param {String} token Valid access token for the user
     * @return {String} Base64 formatted login token
     */
    Client.prototype._buildXOAuth2Token = function(user, token) {
        var authData = [
            'user=' + (user || ''),
            'auth=Bearer ' + token,
            '',
            ''
        ];
        return mimefuncs.base64.encode(authData.join('\x01'));
    };

    /**
     * If needed, encloses with quotes or mime encodes the name part of an e-mail address
     *
     * @param {String} name Name part of an address
     * @returns {String} Mime word encoded or quoted string
     */
    Client.prototype._encodeAddressName = function(name) {
        if (!/^[\w ']*$/.test(name)) {
            if (/^[\x20-\x7e]*$/.test(name)) {
                return JSON.stringify(name);
            } else {
                return mimefuncs.mimeWordEncode(name, 'Q', 52);
            }
        }
        return name;
    };

    Client.prototype.LOG_LEVEL_NONE = 1000;
    Client.prototype.LOG_LEVEL_ERROR = 40;
    Client.prototype.LOG_LEVEL_WARN = 30;
    Client.prototype.LOG_LEVEL_INFO = 20;
    Client.prototype.LOG_LEVEL_DEBUG = 10;
    Client.prototype.LOG_LEVEL_ALL = 0;

    Client.prototype.createLogger = function() {
        var createLogger = (tag) => {
            var log = (level, messages) => {
                messages = messages.map(msg => typeof msg === 'function' ? msg() : msg);
                var logMessage = '[' + new Date().toISOString() + '][' + tag + '][' +
                    this.options.auth.user + '][' + this.client.host  + '] ' + messages.join(' ');
                if (level === this.LOG_LEVEL_DEBUG) {
                   console.log('[DEBUG]' + logMessage);
                } else if (level === this.LOG_LEVEL_INFO) {
                   console.info('[INFO]' + logMessage);
                } else if (level === this.LOG_LEVEL_WARN) {
                   console.warn('[WARN]' + logMessage);
                } else if (level === this.LOG_LEVEL_ERROR) {
                   console.error('[ERROR]' + logMessage);
                }
            };

            return {
                // this could become way nicer when node supports the rest operator...
                debug: function(msgs){ log(this.LOG_LEVEL_DEBUG, msgs); }.bind(this),
                info: function(msgs){ log(this.LOG_LEVEL_INFO, msgs); }.bind(this),
                warn: function(msgs){ log(this.LOG_LEVEL_WARN, msgs); }.bind(this),
                error: function(msgs){ log(this.LOG_LEVEL_ERROR, msgs); }.bind(this)
            };
        };

        var logger = this.options.logger || createLogger(this.options.sessionId || 1);
        this.logger = this.client.logger = {
            // this could become way nicer when node supports the rest operator...
            debug: function() {
                if (this.LOG_LEVEL_DEBUG >= this.logLevel) {
                    logger.debug(Array.prototype.slice.call(arguments));
                }
            }.bind(this),
            info: function() {
                if (this.LOG_LEVEL_INFO >= this.logLevel) {
                    logger.info(Array.prototype.slice.call(arguments));
                }
            }.bind(this),
            warn: function() {
                if (this.LOG_LEVEL_WARN >= this.logLevel) {
                    logger.warn(Array.prototype.slice.call(arguments));
                }
            }.bind(this),
            error: function() {
                if (this.LOG_LEVEL_ERROR >= this.logLevel) {
                    logger.error(Array.prototype.slice.call(arguments));
                }
            }.bind(this)
        };
    };

    return Client;
}));

},{"./emailjs-imap-client-imap":66,"emailjs-addressparser":64,"emailjs-imap-handler":71,"emailjs-mime-codec":73,"emailjs-utf7":78}],69:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['emailjs-imap-formal-syntax'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('./emailjs-imap-formal-syntax'));
    } else {
        root['emailjs-imap-compiler'] = factory(root['emailjs-imap-formal-syntax']);
    }
}(this, function(imapFormalSyntax) {

    'use strict';

    /**
     * Compiles an input object into
     */
    return function(response, asArray, isLogging) {
        var respParts = [],
            resp = (response.tag || '') + (response.command ? ' ' + response.command : ''),
            val, needsSpace = true,
            walk = function(node) {

                if (resp.length > 0 && needsSpace) {
                    resp += ' ';
                }

                if (Array.isArray(node)) {
                    needsSpace = false;
                    resp += '(';
                    node.forEach(walk);
                    resp += ')';
                    return;
                } else {
                    needsSpace = true;
                }

                if (!node && typeof node !== 'string' && typeof node !== 'number') {
                    resp += 'NIL';
                    return;
                }

                if (typeof node === 'string') {
                    if (isLogging && node.length > 20) {
                        resp += '"(* ' + node.length + 'B string *)"';
                    } else {
                        resp += JSON.stringify(node);
                    }
                    return;
                }

                if (typeof node === 'number') {
                    resp += Math.round(node) || 0; // Only integers allowed
                    return;
                }

                if (isLogging && node.sensitive) {
                    resp += '"(* value hidden *)"';
                    return;
                }

                switch (node.type.toUpperCase()) {
                    case 'LITERAL':
                        if (isLogging) {
                            resp += '"(* ' + node.value.length + 'B literal *)"';
                        } else {
                            if (!node.value) {
                                resp += '{0}\r\n';
                            } else {
                                resp += '{' + node.value.length + '}\r\n';
                            }
                            respParts.push(resp);
                            resp = node.value || '';
                        }
                        break;

                    case 'STRING':
                        if (isLogging && node.value.length > 20) {
                            resp += '"(* ' + node.value.length + 'B string *)"';
                        } else {
                            resp += JSON.stringify(node.value || '');
                        }
                        break;
                    case 'TEXT':
                    case 'SEQUENCE':
                        resp += node.value || '';
                        break;

                    case 'NUMBER':
                        resp += (node.value || 0);
                        break;

                    case 'ATOM':
                    case 'SECTION':
                        val = node.value || '';

                        if (imapFormalSyntax.verify(val.charAt(0) === '\\' ? val.substr(1) : val, imapFormalSyntax['ATOM-CHAR']()) >= 0) {
                            val = JSON.stringify(val);
                        }

                        resp += val;

                        if (node.section) {
                            needsSpace = false;
                            resp += '[';
                            node.section.forEach(walk);
                            resp += ']';
                        }
                        if (node.partial) {
                            resp += '<' + node.partial.join('.') + '>';
                        }
                        break;
                }

            };

        [].concat(response.attributes || []).forEach(walk);

        if (resp.length) {
            respParts.push(resp);
        }

        return asArray ? respParts : respParts.join('');
    };
}));

},{"./emailjs-imap-formal-syntax":70}],70:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root['emailjs-imap-formal-syntax'] = factory();
    }
}(this, function() {

    'use strict';

    // IMAP Formal Syntax
    // http://tools.ietf.org/html/rfc3501#section-9

    function expandRange(start, end) {
        var chars = [];
        for (var i = start; i <= end; i++) {
            chars.push(i);
        }
        return String.fromCharCode.apply(String, chars);
    }

    function excludeChars(source, exclude) {
        var sourceArr = Array.prototype.slice.call(source);
        for (var i = sourceArr.length - 1; i >= 0; i--) {
            if (exclude.indexOf(sourceArr[i]) >= 0) {
                sourceArr.splice(i, 1);
            }
        }
        return sourceArr.join('');
    }

    return {

        CHAR: function() {
            var value = expandRange(0x01, 0x7F);
            this.CHAR = function() {
                return value;
            };
            return value;
        },

        CHAR8: function() {
            var value = expandRange(0x01, 0xFF);
            this.CHAR8 = function() {
                return value;
            };
            return value;
        },

        SP: function() {
            return ' ';
        },

        CTL: function() {
            var value = expandRange(0x00, 0x1F) + '\x7F';
            this.CTL = function() {
                return value;
            };
            return value;
        },

        DQUOTE: function() {
            return '"';
        },

        ALPHA: function() {
            var value = expandRange(0x41, 0x5A) + expandRange(0x61, 0x7A);
            this.ALPHA = function() {
                return value;
            };
            return value;
        },

        DIGIT: function() {
            var value = expandRange(0x30, 0x39) + expandRange(0x61, 0x7A);
            this.DIGIT = function() {
                return value;
            };
            return value;
        },

        'ATOM-CHAR': function() {
            var value = excludeChars(this.CHAR(), this['atom-specials']());
            this['ATOM-CHAR'] = function() {
                return value;
            };
            return value;
        },

        'ASTRING-CHAR': function() {
            var value = this['ATOM-CHAR']() + this['resp-specials']();
            this['ASTRING-CHAR'] = function() {
                return value;
            };
            return value;
        },

        'TEXT-CHAR': function() {
            var value = excludeChars(this.CHAR(), '\r\n');
            this['TEXT-CHAR'] = function() {
                return value;
            };
            return value;
        },

        'atom-specials': function() {
            var value = '(' + ')' + '{' + this.SP() + this.CTL() + this['list-wildcards']() +
                this['quoted-specials']() + this['resp-specials']();
            this['atom-specials'] = function() {
                return value;
            };
            return value;
        },

        'list-wildcards': function() {
            return '%' + '*';
        },

        'quoted-specials': function() {
            var value = this.DQUOTE() + '\\';
            this['quoted-specials'] = function() {
                return value;
            };
            return value;
        },

        'resp-specials': function() {
            return ']';
        },

        tag: function() {
            var value = excludeChars(this['ASTRING-CHAR'](), '+');
            this.tag = function() {
                return value;
            };
            return value;
        },

        command: function() {
            var value = this.ALPHA() + this.DIGIT();
            this.command = function() {
                return value;
            };
            return value;
        },

        verify: function(str, allowedChars) {
            for (var i = 0, len = str.length; i < len; i++) {
                if (allowedChars.indexOf(str.charAt(i)) < 0) {
                    return i;
                }
            }
            return -1;
        }
    };
}));

},{}],71:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// UMD shim, see: https://github.com/umdjs/umd/blob/master/returnExports.js
(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['./emailjs-imap-parser', './emailjs-imap-compiler'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('./emailjs-imap-parser'), requireb('./emailjs-imap-compiler'));
    } else {
        root['emailjs-imap-handler'] = factory(root['emailjs-imap-parser'], root['emailjs-imap-compiler']);
    }
}(this, function(imapParser, imapCompiler) {

    'use strict';

    return {
        parser: imapParser,
        compiler: imapCompiler
    };
}));

},{"./emailjs-imap-compiler":69,"./emailjs-imap-parser":72}],72:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['emailjs-imap-formal-syntax'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('./emailjs-imap-formal-syntax'));
    } else {
        root['emailjs-imap-parser'] = factory(root['emailjs-imap-formal-syntax']);
    }
}(this, function(imapFormalSyntax) {

    'use strict';

    function ParserInstance(input, options) {
        this.input = (input || '').toString();
        this.options = options || {};
        this.remainder = this.input;
        this.pos = 0;
    }

    ParserInstance.prototype.getTag = function() {
        if (!this.tag) {
            this.tag = this.getElement(imapFormalSyntax.tag() + '*+', true);
        }
        return this.tag;
    };

    ParserInstance.prototype.getCommand = function() {
        var responseCode;

        if (!this.command) {
            this.command = this.getElement(imapFormalSyntax.command());
        }

        switch ((this.command || '').toString().toUpperCase()) {
            case 'OK':
            case 'NO':
            case 'BAD':
            case 'PREAUTH':
            case 'BYE':
                responseCode = this.remainder.match(/^ \[(?:[^\]]*\])+/);
                if (responseCode) {
                    this.humanReadable = this.remainder.substr(responseCode[0].length).trim();
                    this.remainder = responseCode[0];
                } else {
                    this.humanReadable = this.remainder.trim();
                    this.remainder = '';
                }
                break;
        }

        return this.command;
    };

    ParserInstance.prototype.getElement = function(syntax) {
        var match, element, errPos;
        if (this.remainder.match(/^\s/)) {
            throw new Error('Unexpected whitespace at position ' + this.pos);
        }

        if ((match = this.remainder.match(/^[^\s]+(?=\s|$)/))) {
            element = match[0];

            if ((errPos = imapFormalSyntax.verify(element, syntax)) >= 0) {
                throw new Error('Unexpected char at position ' + (this.pos + errPos));
            }
        } else {
            throw new Error('Unexpected end of input at position ' + this.pos);
        }

        this.pos += match[0].length;
        this.remainder = this.remainder.substr(match[0].length);

        return element;
    };

    ParserInstance.prototype.getSpace = function() {
        if (!this.remainder.length) {
            throw new Error('Unexpected end of input at position ' + this.pos);
        }

        if (imapFormalSyntax.verify(this.remainder.charAt(0), imapFormalSyntax.SP()) >= 0) {
            throw new Error('Unexpected char at position ' + this.pos);
        }

        this.pos++;
        this.remainder = this.remainder.substr(1);
    };

    ParserInstance.prototype.getAttributes = function() {
        if (!this.remainder.length) {
            throw new Error('Unexpected end of input at position ' + this.pos);
        }

        if (this.remainder.match(/^\s/)) {
            throw new Error('Unexpected whitespace at position ' + this.pos);
        }

        return new TokenParser(this, this.pos, this.remainder, this.options).getAttributes();
    };

    function TokenParser(parent, startPos, str, options) {
        this.str = (str || '').toString();
        this.options = options || {};
        this.parent = parent;

        this.tree = this.currentNode = this.createNode();
        this.pos = startPos || 0;

        this.currentNode.type = 'TREE';

        this.state = 'NORMAL';

        this.processString();
    }

    TokenParser.prototype.getAttributes = function() {
        var attributes = [],
            branch = attributes;

        var walk = function(node) {
            var elm, curBranch = branch,
                partial;

            if (!node.closed && node.type === 'SEQUENCE' && node.value === '*') {
                node.closed = true;
                node.type = 'ATOM';
            }

            // If the node was never closed, throw it
            if (!node.closed) {
                throw new Error('Unexpected end of input at position ' + (this.pos + this.str.length - 1));
            }

            switch (node.type.toUpperCase()) {
                case 'LITERAL':
                case 'STRING':
                case 'SEQUENCE':
                    elm = {
                        type: node.type.toUpperCase(),
                        value: node.value
                    };
                    branch.push(elm);
                    break;
                case 'ATOM':
                    if (node.value.toUpperCase() === 'NIL') {
                        branch.push(null);
                        break;
                    }
                    elm = {
                        type: node.type.toUpperCase(),
                        value: node.value
                    };
                    branch.push(elm);
                    break;
                case 'SECTION':
                    branch = branch[branch.length - 1].section = [];
                    break;
                case 'LIST':
                    elm = [];
                    branch.push(elm);
                    branch = elm;
                    break;
                case 'PARTIAL':
                    partial = node.value.split('.').map(Number);
                    branch[branch.length - 1].partial = partial;
                    break;
            }

            node.childNodes.forEach(function(childNode) {
                walk(childNode);
            });
            branch = curBranch;
        }.bind(this);

        walk(this.tree);

        return attributes;
    };

    TokenParser.prototype.createNode = function(parentNode, startPos) {
        var node = {
            childNodes: [],
            type: false,
            value: '',
            closed: true
        };

        if (parentNode) {
            node.parentNode = parentNode;
        }

        if (typeof startPos === 'number') {
            node.startPos = startPos;
        }

        if (parentNode) {
            parentNode.childNodes.push(node);
        }

        return node;
    };

    TokenParser.prototype.processString = function() {
        var chr, i, len,
            checkSP = function() {
                // jump to the next non whitespace pos
                while (this.str.charAt(i + 1) === ' ') {
                    i++;
                }
            }.bind(this);

        for (i = 0, len = this.str.length; i < len; i++) {

            chr = this.str.charAt(i);

            switch (this.state) {

                case 'NORMAL':

                    switch (chr) {

                        // DQUOTE starts a new string
                        case '"':
                            this.currentNode = this.createNode(this.currentNode, this.pos + i);
                            this.currentNode.type = 'string';
                            this.state = 'STRING';
                            this.currentNode.closed = false;
                            break;

                            // ( starts a new list
                        case '(':
                            this.currentNode = this.createNode(this.currentNode, this.pos + i);
                            this.currentNode.type = 'LIST';
                            this.currentNode.closed = false;
                            break;

                            // ) closes a list
                        case ')':
                            if (this.currentNode.type !== 'LIST') {
                                throw new Error('Unexpected list terminator ) at position ' + (this.pos + i));
                            }

                            this.currentNode.closed = true;
                            this.currentNode.endPos = this.pos + i;
                            this.currentNode = this.currentNode.parentNode;

                            checkSP();
                            break;

                            // ] closes section group
                        case ']':
                            if (this.currentNode.type !== 'SECTION') {
                                throw new Error('Unexpected section terminator ] at position ' + (this.pos + i));
                            }
                            this.currentNode.closed = true;
                            this.currentNode.endPos = this.pos + i;
                            this.currentNode = this.currentNode.parentNode;
                            checkSP();
                            break;

                            // < starts a new partial
                        case '<':
                            if (this.str.charAt(i - 1) !== ']') {
                                this.currentNode = this.createNode(this.currentNode, this.pos + i);
                                this.currentNode.type = 'ATOM';
                                this.currentNode.value = chr;
                                this.state = 'ATOM';
                            } else {
                                this.currentNode = this.createNode(this.currentNode, this.pos + i);
                                this.currentNode.type = 'PARTIAL';
                                this.state = 'PARTIAL';
                                this.currentNode.closed = false;
                            }
                            break;

                            // { starts a new literal
                        case '{':
                            this.currentNode = this.createNode(this.currentNode, this.pos + i);
                            this.currentNode.type = 'LITERAL';
                            this.state = 'LITERAL';
                            this.currentNode.closed = false;
                            break;

                            // ( starts a new sequence
                        case '*':
                            this.currentNode = this.createNode(this.currentNode, this.pos + i);
                            this.currentNode.type = 'SEQUENCE';
                            this.currentNode.value = chr;
                            this.currentNode.closed = false;
                            this.state = 'SEQUENCE';
                            break;

                            // normally a space should never occur
                        case ' ':
                            // just ignore
                            break;

                            // [ starts section
                        case '[':
                            // If it is the *first* element after response command, then process as a response argument list
                            if (['OK', 'NO', 'BAD', 'BYE', 'PREAUTH'].indexOf(this.parent.command.toUpperCase()) >= 0 && this.currentNode === this.tree) {
                                this.currentNode.endPos = this.pos + i;

                                this.currentNode = this.createNode(this.currentNode, this.pos + i);
                                this.currentNode.type = 'ATOM';

                                this.currentNode = this.createNode(this.currentNode, this.pos + i);
                                this.currentNode.type = 'SECTION';
                                this.currentNode.closed = false;
                                this.state = 'NORMAL';

                                // RFC2221 defines a response code REFERRAL whose payload is an
                                // RFC2192/RFC5092 imapurl that we will try to parse as an ATOM but
                                // fail quite badly at parsing.  Since the imapurl is such a unique
                                // (and crazy) term, we just specialize that case here.
                                if (this.str.substr(i + 1, 9).toUpperCase() === 'REFERRAL ') {
                                    // create the REFERRAL atom
                                    this.currentNode = this.createNode(this.currentNode, this.pos + i + 1);
                                    this.currentNode.type = 'ATOM';
                                    this.currentNode.endPos = this.pos + i + 8;
                                    this.currentNode.value = 'REFERRAL';
                                    this.currentNode = this.currentNode.parentNode;

                                    // eat all the way through the ] to be the  IMAPURL token.
                                    this.currentNode = this.createNode(this.currentNode, this.pos + i + 10);
                                    // just call this an ATOM, even though IMAPURL might be more correct
                                    this.currentNode.type = 'ATOM';
                                    // jump i to the ']'
                                    i = this.str.indexOf(']', i + 10);
                                    this.currentNode.endPos = this.pos + i - 1;
                                    this.currentNode.value = this.str.substring(this.currentNode.startPos - this.pos,
                                        this.currentNode.endPos - this.pos + 1);
                                    this.currentNode = this.currentNode.parentNode;

                                    // close out the SECTION
                                    this.currentNode.closed = true;
                                    this.currentNode = this.currentNode.parentNode;
                                    checkSP();
                                }

                                break;
                            }
                            /* falls through */
                        default:
                            // Any ATOM supported char starts a new Atom sequence, otherwise throw an error
                            // Allow \ as the first char for atom to support system flags
                            // Allow % to support LIST '' %
                            if (imapFormalSyntax['ATOM-CHAR']().indexOf(chr) < 0 && chr !== '\\' && chr !== '%') {
                                throw new Error('Unexpected char at position ' + (this.pos + i));
                            }

                            this.currentNode = this.createNode(this.currentNode, this.pos + i);
                            this.currentNode.type = 'ATOM';
                            this.currentNode.value = chr;
                            this.state = 'ATOM';
                            break;
                    }
                    break;

                case 'ATOM':

                    // space finishes an atom
                    if (chr === ' ') {
                        this.currentNode.endPos = this.pos + i - 1;
                        this.currentNode = this.currentNode.parentNode;
                        this.state = 'NORMAL';
                        break;
                    }

                    //
                    if (
                        this.currentNode.parentNode &&
                        (
                            (chr === ')' && this.currentNode.parentNode.type === 'LIST') ||
                            (chr === ']' && this.currentNode.parentNode.type === 'SECTION')
                        )
                    ) {
                        this.currentNode.endPos = this.pos + i - 1;
                        this.currentNode = this.currentNode.parentNode;

                        this.currentNode.closed = true;
                        this.currentNode.endPos = this.pos + i;
                        this.currentNode = this.currentNode.parentNode;
                        this.state = 'NORMAL';

                        checkSP();
                        break;
                    }

                    if ((chr === ',' || chr === ':') && this.currentNode.value.match(/^\d+$/)) {
                        this.currentNode.type = 'SEQUENCE';
                        this.currentNode.closed = true;
                        this.state = 'SEQUENCE';
                    }

                    // [ starts a section group for this element
                    if (chr === '[' && ['BODY', 'BODY.PEEK'].indexOf(this.currentNode.value.toUpperCase()) >= 0) {
                        this.currentNode.endPos = this.pos + i;
                        this.currentNode = this.createNode(this.currentNode.parentNode, this.pos + i);
                        this.currentNode.type = 'SECTION';
                        this.currentNode.closed = false;
                        this.state = 'NORMAL';
                        break;
                    }

                    if (chr === '<') {
                        throw new Error('Unexpected start of partial at position ' + this.pos);
                    }

                    // if the char is not ATOM compatible, throw. Allow \* as an exception
                    if (imapFormalSyntax['ATOM-CHAR']().indexOf(chr) < 0 && chr !== ']' && !(chr === '*' && this.currentNode.value === '\\')) {
                        throw new Error('Unexpected char at position ' + (this.pos + i));
                    } else if (this.currentNode.value === '\\*') {
                        throw new Error('Unexpected char at position ' + (this.pos + i));
                    }

                    this.currentNode.value += chr;
                    break;

                case 'STRING':

                    // DQUOTE ends the string sequence
                    if (chr === '"') {
                        this.currentNode.endPos = this.pos + i;
                        this.currentNode.closed = true;
                        this.currentNode = this.currentNode.parentNode;
                        this.state = 'NORMAL';

                        checkSP();
                        break;
                    }

                    // \ Escapes the following char
                    if (chr === '\\') {
                        i++;
                        if (i >= len) {
                            throw new Error('Unexpected end of input at position ' + (this.pos + i));
                        }
                        chr = this.str.charAt(i);
                    }

                    /* // skip this check, otherwise the parser might explode on binary input
                    if (imapFormalSyntax['TEXT-CHAR']().indexOf(chr) < 0) {
                        throw new Error('Unexpected char at position ' + (this.pos + i));
                    }
                    */

                    this.currentNode.value += chr;
                    break;

                case 'PARTIAL':
                    if (chr === '>') {
                        if (this.currentNode.value.substr(-1) === '.') {
                            throw new Error('Unexpected end of partial at position ' + this.pos);
                        }
                        this.currentNode.endPos = this.pos + i;
                        this.currentNode.closed = true;
                        this.currentNode = this.currentNode.parentNode;
                        this.state = 'NORMAL';
                        checkSP();
                        break;
                    }

                    if (chr === '.' && (!this.currentNode.value.length || this.currentNode.value.match(/\./))) {
                        throw new Error('Unexpected partial separator . at position ' + this.pos);
                    }

                    if (imapFormalSyntax.DIGIT().indexOf(chr) < 0 && chr !== '.') {
                        throw new Error('Unexpected char at position ' + (this.pos + i));
                    }

                    if (this.currentNode.value.match(/^0$|\.0$/) && chr !== '.') {
                        throw new Error('Invalid partial at position ' + (this.pos + i));
                    }

                    this.currentNode.value += chr;
                    break;

                case 'LITERAL':
                    if (this.currentNode.started) {
                        //if(imapFormalSyntax['CHAR8']().indexOf(chr) < 0){
                        if (chr === '\u0000') {
                            throw new Error('Unexpected \\x00 at position ' + (this.pos + i));
                        }
                        this.currentNode.value += chr;

                        if (this.currentNode.value.length >= this.currentNode.literalLength) {
                            this.currentNode.endPos = this.pos + i;
                            this.currentNode.closed = true;
                            this.currentNode = this.currentNode.parentNode;
                            this.state = 'NORMAL';
                            checkSP();
                        }
                        break;
                    }

                    if (chr === '+' && this.options.literalPlus) {
                        this.currentNode.literalPlus = true;
                        break;
                    }

                    if (chr === '}') {
                        if (!('literalLength' in this.currentNode)) {
                            throw new Error('Unexpected literal prefix end char } at position ' + (this.pos + i));
                        }
                        if (this.str.charAt(i + 1) === '\n') {
                            i++;
                        } else if (this.str.charAt(i + 1) === '\r' && this.str.charAt(i + 2) === '\n') {
                            i += 2;
                        } else {
                            throw new Error('Unexpected char at position ' + (this.pos + i));
                        }
                        this.currentNode.literalLength = Number(this.currentNode.literalLength);
                        this.currentNode.started = true;

                        if (!this.currentNode.literalLength) {
                            // special case where literal content length is 0
                            // close the node right away, do not wait for additional input
                            this.currentNode.endPos = this.pos + i;
                            this.currentNode.closed = true;
                            this.currentNode = this.currentNode.parentNode;
                            this.state = 'NORMAL';
                            checkSP();
                        }
                        break;
                    }
                    if (imapFormalSyntax.DIGIT().indexOf(chr) < 0) {
                        throw new Error('Unexpected char at position ' + (this.pos + i));
                    }
                    if (this.currentNode.literalLength === '0') {
                        throw new Error('Invalid literal at position ' + (this.pos + i));
                    }
                    this.currentNode.literalLength = (this.currentNode.literalLength || '') + chr;
                    break;

                case 'SEQUENCE':
                    // space finishes the sequence set
                    if (chr === ' ') {
                        if (!this.currentNode.value.substr(-1).match(/\d/) && this.currentNode.value.substr(-1) !== '*') {
                            throw new Error('Unexpected whitespace at position ' + (this.pos + i));
                        }

                        if (this.currentNode.value.substr(-1) === '*' && this.currentNode.value.substr(-2, 1) !== ':') {
                            throw new Error('Unexpected whitespace at position ' + (this.pos + i));
                        }

                        this.currentNode.closed = true;
                        this.currentNode.endPos = this.pos + i - 1;
                        this.currentNode = this.currentNode.parentNode;
                        this.state = 'NORMAL';
                        break;
                    } else if (this.currentNode.parentNode &&
                        chr === ']' &&
                        this.currentNode.parentNode.type === 'SECTION') {
                        this.currentNode.endPos = this.pos + i - 1;
                        this.currentNode = this.currentNode.parentNode;

                        this.currentNode.closed = true;
                        this.currentNode.endPos = this.pos + i;
                        this.currentNode = this.currentNode.parentNode;
                        this.state = 'NORMAL';

                        checkSP();
                        break;
                    }

                    if (chr === ':') {
                        if (!this.currentNode.value.substr(-1).match(/\d/) && this.currentNode.value.substr(-1) !== '*') {
                            throw new Error('Unexpected range separator : at position ' + (this.pos + i));
                        }
                    } else if (chr === '*') {
                        if ([',', ':'].indexOf(this.currentNode.value.substr(-1)) < 0) {
                            throw new Error('Unexpected range wildcard at position ' + (this.pos + i));
                        }
                    } else if (chr === ',') {
                        if (!this.currentNode.value.substr(-1).match(/\d/) && this.currentNode.value.substr(-1) !== '*') {
                            throw new Error('Unexpected sequence separator , at position ' + (this.pos + i));
                        }
                        if (this.currentNode.value.substr(-1) === '*' && this.currentNode.value.substr(-2, 1) !== ':') {
                            throw new Error('Unexpected sequence separator , at position ' + (this.pos + i));
                        }
                    } else if (!chr.match(/\d/)) {
                        throw new Error('Unexpected char at position ' + (this.pos + i));
                    }

                    if (chr.match(/\d/) && this.currentNode.value.substr(-1) === '*') {
                        throw new Error('Unexpected number at position ' + (this.pos + i));
                    }

                    this.currentNode.value += chr;
                    break;
            }
        }
    };

    return function(command, options) {
        var parser, response = {};

        options = options || {};

        parser = new ParserInstance(command, options);

        response.tag = parser.getTag();
        parser.getSpace();
        response.command = parser.getCommand();

        if (['UID', 'AUTHENTICATE'].indexOf((response.command || '').toUpperCase()) >= 0) {
            parser.getSpace();
            response.command += ' ' + parser.getElement(imapFormalSyntax.command());
        }

        if (parser.remainder.trim().length) {
            parser.getSpace();
            response.attributes = parser.getAttributes();
        }

        if (parser.humanReadable) {
            response.attributes = (response.attributes || []).concat({
                type: 'TEXT',
                value: parser.humanReadable
            });
        }

        return response;
    };

}));

},{"./emailjs-imap-formal-syntax":70}],73:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    var encoding;

    if (typeof define === 'function' && define.amd) {
        // amd for browser
        define(['emailjs-stringencoding'], function(encoding) {
            return factory(encoding.TextEncoder, encoding.TextDecoder, root.btoa);
        });
    } else if (typeof exports === 'object' && typeof navigator !== 'undefined') {
        // common.js for browser
        encoding = requireb('emailjs-stringencoding');
        module.exports = factory(encoding.TextEncoder, encoding.TextDecoder, root.btoa);
    } else if (typeof exports === 'object') {
        // common.js for node.js
        encoding = requireb('emailjs-stringencoding');
        module.exports = factory(encoding.TextEncoder, encoding.TextDecoder, function(str) {
            var NodeBuffer = requireb('buffer').Buffer;
            return new NodeBuffer(str, 'binary').toString("base64");
        });
    } else {
        // global for browser
        root['emailjs-mime-codec'] = factory(root.TextEncoder, root.TextDecoder, root.btoa);
    }
}(this, function(TextEncoder, TextDecoder, btoa) {
    'use strict';

    btoa = btoa || base64Encode;

    var mimecodec = {
        /**
         * Encodes all non printable and non ascii bytes to =XX form, where XX is the
         * byte value in hex. This function does not convert linebreaks etc. it
         * only escapes character sequences
         *
         * @param {String|Uint8Array} data Either a string or an Uint8Array
         * @param {String} [fromCharset='UTF-8'] Source encoding
         * @return {String} Mime encoded string
         */
        mimeEncode: function(data, fromCharset) {
            fromCharset = fromCharset || 'UTF-8';

            var buffer = mimecodec.charset.convert(data || '', fromCharset),
                ranges = [
                    // https://tools.ietf.org/html/rfc2045#section-6.7
                    [0x09], // <TAB>
                    [0x0A], // <LF>
                    [0x0D], // <CR>
                    [0x20, 0x3C], // <SP>!"#$%&'()*+,-./0123456789:;
                    [0x3E, 0x7E] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
                ],
                result = '',
                ord;

            for (var i = 0, len = buffer.length; i < len; i++) {
                ord = buffer[i];
                // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line
                if (mimecodec._checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {
                    result += String.fromCharCode(ord);
                    continue;
                }
                result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();
            }

            return result;
        },

        /**
         * Decodes mime encoded string to an unicode string
         *
         * @param {String} str Mime encoded string
         * @param {String} [fromCharset='UTF-8'] Source encoding
         * @return {String} Decoded unicode string
         */
        mimeDecode: function(str, fromCharset) {
            str = (str || '').toString();

            fromCharset = fromCharset || 'UTF-8';

            var encodedBytesCount = (str.match(/\=[\da-fA-F]{2}/g) || []).length,
                bufferLength = str.length - encodedBytesCount * 2,
                chr, hex,
                buffer = new Uint8Array(bufferLength),
                bufferPos = 0;

            for (var i = 0, len = str.length; i < len; i++) {
                chr = str.charAt(i);
                if (chr === '=' && (hex = str.substr(i + 1, 2)) && /[\da-fA-F]{2}/.test(hex)) {
                    buffer[bufferPos++] = parseInt(hex, 16);
                    i += 2;
                    continue;
                }
                buffer[bufferPos++] = chr.charCodeAt(0);
            }

            return mimecodec.charset.decode(buffer, fromCharset);
        },

        /**
         * Encodes a string or an typed array of given charset into unicode
         * base64 string. Also adds line breaks
         *
         * @param {String|Uint8Array} data String to be base64 encoded
         * @param {String} [fromCharset='UTF-8']
         * @return {String} Base64 encoded string
         */
        base64Encode: function(data, fromCharset) {
            var buf, b64;

            if (fromCharset !== 'binary' && typeof data !== 'string') {
                buf = mimecodec.charset.convert(data || '', fromCharset);
            } else {
                buf = data;
            }

            b64 = mimecodec.base64.encode(buf);
            return mimecodec._addSoftLinebreaks(b64, 'base64');
        },

        /**
         * Decodes a base64 string of any charset into an unicode string
         *
         * @param {String} str Base64 encoded string
         * @param {String} [fromCharset='UTF-8'] Original charset of the base64 encoded string
         * @return {String} Decoded unicode string
         */
        base64Decode: function(str, fromCharset) {
            var buf = mimecodec.base64.decode(str || '', 'buffer');
            return mimecodec.charset.decode(buf, fromCharset);
        },

        /**
         * Encodes a string or an Uint8Array into a quoted printable encoding
         * This is almost the same as mimeEncode, except line breaks will be changed
         * as well to ensure that the lines are never longer than allowed length
         *
         * @param {String|Uint8Array} data String or an Uint8Array to mime encode
         * @param {String} [fromCharset='UTF-8'] Original charset of the string
         * @return {String} Mime encoded string
         */
        quotedPrintableEncode: function(data, fromCharset) {
            var mimeEncodedStr = mimecodec.mimeEncode(data, fromCharset);

            mimeEncodedStr = mimeEncodedStr.
                // fix line breaks, ensure <CR><LF>
            replace(/\r?\n|\r/g, '\r\n').
                // replace spaces in the end of lines
            replace(/[\t ]+$/gm, function(spaces) {
                return spaces.replace(/ /g, '=20').replace(/\t/g, '=09');
            });

            // add soft line breaks to ensure line lengths sjorter than 76 bytes
            return mimecodec._addSoftLinebreaks(mimeEncodedStr, 'qp');
        },

        /**
         * Decodes a string from a quoted printable encoding. This is almost the
         * same as mimeDecode, except line breaks will be changed as well
         *
         * @param {String} str Mime encoded string to decode
         * @param {String} [fromCharset='UTF-8'] Original charset of the string
         * @return {String} Mime decoded string
         */
        quotedPrintableDecode: function(str, fromCharset) {
            str = (str || '').toString();

            str = str.
                // remove invalid whitespace from the end of lines
            replace(/[\t ]+$/gm, '').
                // remove soft line breaks
            replace(/\=(?:\r?\n|$)/g, '');

            return mimecodec.mimeDecode(str, fromCharset);
        },

        /**
         * Encodes a string or an Uint8Array to an UTF-8 MIME Word (rfc2047)
         *
         * @param {String|Uint8Array} data String to be encoded
         * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
         * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
         * @param {String} [fromCharset='UTF-8'] Source sharacter set
         * @return {String} Single or several mime words joined together
         */
        mimeWordEncode: function(data, mimeWordEncoding, maxLength, fromCharset) {
            mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);

            if (!fromCharset && typeof maxLength === 'string' && !maxLength.match(/^[0-9]+$/)) {
                fromCharset = maxLength;
                maxLength = undefined;
            }

            maxLength = maxLength || 0;

            var encodedStr,
                toCharset = 'UTF-8',
                i, len, parts;

            if (maxLength && maxLength > 7 + toCharset.length) {
                maxLength -= (7 + toCharset.length);
            }

            if (mimeWordEncoding === 'Q') {
                encodedStr = mimecodec.mimeEncode(data, fromCharset);
                // https://tools.ietf.org/html/rfc2047#section-5 rule (3)
                encodedStr = encodedStr.replace(/[^a-z0-9!*+\-\/=]/ig, function(chr) {
                    var code = chr.charCodeAt(0);
                    if(chr === ' '){
                        return '_';
                    }else{
                        return '=' + (code < 0x10 ? '0' : '') + code.toString(16).toUpperCase();
                    }
                });
            } else if (mimeWordEncoding === 'B') {
                encodedStr = typeof data === 'string' ? data : mimecodec.decode(data, fromCharset);
                maxLength = Math.max(3, (maxLength - maxLength % 4) / 4 * 3);
            }

            if (maxLength && encodedStr.length > maxLength) {
                if (mimeWordEncoding === 'Q') {
                    encodedStr = mimecodec._splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');
                } else {

                    // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences
                    parts = [];
                    for (i = 0, len = encodedStr.length; i < len; i += maxLength) {
                        parts.push(mimecodec.base64.encode(encodedStr.substr(i, maxLength)));
                    }

                    if (parts.length > 1) {
                        return '=?' + toCharset + '?' + mimeWordEncoding + '?' + parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?') + '?=';
                    } else {
                        encodedStr = parts.join('');
                    }
                }
            } else if (mimeWordEncoding === 'B') {
                encodedStr = mimecodec.base64.encode(encodedStr);
            }

            return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');
        },

        /**
         * Finds word sequences with non ascii text and converts these to mime words
         *
         * @param {String|Uint8Array} data String to be encoded
         * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
         * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
         * @param {String} [fromCharset='UTF-8'] Source sharacter set
         * @return {String} String with possible mime words
         */
        mimeWordsEncode: function(data, mimeWordEncoding, maxLength, fromCharset) {
            if (!fromCharset && typeof maxLength === 'string' && !maxLength.match(/^[0-9]+$/)) {
                fromCharset = maxLength;
                maxLength = undefined;
            }

            maxLength = maxLength || 0;

            var decodedValue = mimecodec.charset.decode(mimecodec.charset.convert((data || ''), fromCharset)),
                encodedValue;

            encodedValue = decodedValue.replace(/([^\s\u0080-\uFFFF]*[\u0080-\uFFFF]+[^\s\u0080-\uFFFF]*(?:\s+[^\s\u0080-\uFFFF]*[\u0080-\uFFFF]+[^\s\u0080-\uFFFF]*\s*)?)+/g, function(match) {
                return match.length ? mimecodec.mimeWordEncode(match, mimeWordEncoding || 'Q', maxLength) : '';
            });

            return encodedValue;
        },

        /**
         * Decode a complete mime word encoded string
         *
         * @param {String} str Mime word encoded string
         * @return {String} Decoded unicode string
         */
        mimeWordDecode: function(str) {
            str = (str || '').toString().trim();

            var fromCharset, encoding, match;

            match = str.match(/^\=\?([\w_\-\*]+)\?([QqBb])\?([^\?]+)\?\=$/i);
            if (!match) {
                return str;
            }

            // RFC2231 added language tag to the encoding
            // see: https://tools.ietf.org/html/rfc2231#section-5
            // this implementation silently ignores this tag
            fromCharset = match[1].split('*').shift();

            encoding = (match[2] || 'Q').toString().toUpperCase();
            str = (match[3] || '').replace(/_/g, ' ');

            if (encoding === 'B') {
                return mimecodec.base64Decode(str, fromCharset);
            } else if (encoding === 'Q') {
                return mimecodec.mimeDecode(str, fromCharset);
            } else {
                return str;
            }

        },

        /**
         * Decode a string that might include one or several mime words
         *
         * @param {String} str String including some mime words that will be encoded
         * @return {String} Decoded unicode string
         */
        mimeWordsDecode: function(str) {
            str = (str || '').toString();
            str = str.
            replace(/(=\?[^?]+\?[QqBb]\?[^?]+\?=)\s+(?==\?[^?]+\?[QqBb]\?[^?]+\?=)/g, '$1').
            replace(/\=\?([\w_\-\*]+)\?([QqBb])\?[^\?]+\?\=/g, function(mimeWord) {
                return mimecodec.mimeWordDecode(mimeWord);
            });

            return str;
        },

        /**
         * Folds long lines, useful for folding header lines (afterSpace=false) and
         * flowed text (afterSpace=true)
         *
         * @param {String} str String to be folded
         * @param {Number} [lineLengthMax=76] Maximum length of a line
         * @param {Boolean} afterSpace If true, leave a space in th end of a line
         * @return {String} String with folded lines
         */
        foldLines: function(str, lineLengthMax, afterSpace) {
            str = (str || '').toString();
            lineLengthMax = lineLengthMax || 76;

            var pos = 0,
                len = str.length,
                result = '',
                line, match;

            while (pos < len) {
                line = str.substr(pos, lineLengthMax);
                if (line.length < lineLengthMax) {
                    result += line;
                    break;
                }
                if ((match = line.match(/^[^\n\r]*(\r?\n|\r)/))) {
                    line = match[0];
                    result += line;
                    pos += line.length;
                    continue;
                } else if ((match = line.match(/(\s+)[^\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {
                    line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));
                } else if ((match = str.substr(pos + line.length).match(/^[^\s]+(\s*)/))) {
                    line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));
                }

                result += line;
                pos += line.length;
                if (pos < len) {
                    result += '\r\n';
                }
            }

            return result;
        },

        /**
         * Encodes and folds a header line for a MIME message header.
         * Shorthand for mimeWordsEncode + foldLines
         *
         * @param {String} key Key name, will not be encoded
         * @param {String|Uint8Array} value Value to be encoded
         * @param {String} [fromCharset='UTF-8'] Character set of the value
         * @return {String} encoded and folded header line
         */
        headerLineEncode: function(key, value, fromCharset) {
            var encodedValue = mimecodec.mimeWordsEncode(value, 'Q', 52, fromCharset);
            return mimecodec.foldLines(key + ': ' + encodedValue, 76);
        },

        /**
         * Splits a string by :
         * The result is not mime word decoded, you need to do your own decoding based
         * on the rules for the specific header key
         *
         * @param {String} headerLine Single header line, might include linebreaks as well if folded
         * @return {Object} And object of {key, value}
         */
        headerLineDecode: function(headerLine) {
            var line = (headerLine || '').toString().replace(/(?:\r?\n|\r)[ \t]*/g, ' ').trim(),
                match = line.match(/^\s*([^:]+):(.*)$/),
                key = (match && match[1] || '').trim(),
                value = (match && match[2] || '').trim();

            return {
                key: key,
                value: value
            };
        },

        /**
         * Parses a block of header lines. Does not decode mime words as every
         * header might have its own rules (eg. formatted email addresses and such)
         *
         * @param {String} headers Headers string
         * @return {Object} An object of headers, where header keys are object keys. NB! Several values with the same key make up an Array
         */
        headerLinesDecode: function(headers) {
            var lines = headers.split(/\r?\n|\r/),
                headersObj = {},
                key, value,
                header,
                i, len;

            for (i = lines.length - 1; i >= 0; i--) {
                if (i && lines[i].match(/^\s/)) {
                    lines[i - 1] += '\r\n' + lines[i];
                    lines.splice(i, 1);
                }
            }

            for (i = 0, len = lines.length; i < len; i++) {
                header = mimecodec.headerLineDecode(lines[i]);
                key = (header.key || '').toString().toLowerCase().trim();
                value = header.value || '';

                if (!headersObj[key]) {
                    headersObj[key] = value;
                } else {
                    headersObj[key] = [].concat(headersObj[key], value);
                }
            }

            return headersObj;
        },

        /**
         * Converts 'binary' string to an Uint8Array
         *
         * @param {String} 'binary' string
         * @return {Uint8Array} Octet stream buffer
         */
        toTypedArray: function(binaryString) {
            var buf = new Uint8Array(binaryString.length);
            for (var i = 0, len = binaryString.length; i < len; i++) {
                buf[i] = binaryString.charCodeAt(i);
            }
            return buf;
        },

        /**
         * Converts an Uint8Array to 'binary' string
         *
         * @param {Uint8Array} buf Octet stream buffer
         * @return {String} 'binary' string
         */
        fromTypedArray: function(buf) {
            var i, l;

            // ensure the value is a Uint8Array, not ArrayBuffer if used
            if (!buf.buffer) {
                buf = new Uint8Array(buf);
            }

            var sbits = new Array(buf.length);
            for (i = 0, l = buf.length; i < l; i++) {
                sbits[i] = String.fromCharCode(buf[i]);
            }

            return sbits.join('');
        },

        /**
         * Parses a header value with key=value arguments into a structured
         * object.
         *
         *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->
         *   {
         *     'value': 'text/plain',
         *     'params': {
         *       'charset': 'UTF-8'
         *     }
         *   }
         *
         * @param {String} str Header value
         * @return {Object} Header value as a parsed structure
         */
        parseHeaderValue: function(str) {
            var response = {
                    value: false,
                    params: {}
                },
                key = false,
                value = '',
                type = 'value',
                quote = false,
                escaped = false,
                chr;

            for (var i = 0, len = str.length; i < len; i++) {
                chr = str.charAt(i);
                if (type === 'key') {
                    if (chr === '=') {
                        key = value.trim().toLowerCase();
                        type = 'value';
                        value = '';
                        continue;
                    }
                    value += chr;
                } else {
                    if (escaped) {
                        value += chr;
                    } else if (chr === '\\') {
                        escaped = true;
                        continue;
                    } else if (quote && chr === quote) {
                        quote = false;
                    } else if (!quote && chr === '"') {
                        quote = chr;
                    } else if (!quote && chr === ';') {
                        if (key === false) {
                            response.value = value.trim();
                        } else {
                            response.params[key] = value.trim();
                        }
                        type = 'key';
                        value = '';
                    } else {
                        value += chr;
                    }
                    escaped = false;

                }
            }

            if (type === 'value') {
                if (key === false) {
                    response.value = value.trim();
                } else {
                    response.params[key] = value.trim();
                }
            } else if (value.trim()) {
                response.params[value.trim().toLowerCase()] = '';
            }

            // handle parameter value continuations
            // https://tools.ietf.org/html/rfc2231#section-3

            // preprocess values
            Object.keys(response.params).forEach(function(key) {
                var actualKey, nr, match, value;
                if ((match = key.match(/(\*(\d+)|\*(\d+)\*|\*)$/))) {
                    actualKey = key.substr(0, match.index);
                    nr = Number(match[2] || match[3]) || 0;

                    if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {
                        response.params[actualKey] = {
                            charset: false,
                            values: []
                        };
                    }

                    value = response.params[key];

                    if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {
                        response.params[actualKey].charset = match[1] || 'iso-8859-1';
                        value = match[2];
                    }

                    response.params[actualKey].values[nr] = value;

                    // remove the old reference
                    delete response.params[key];
                }
            });

            // concatenate split rfc2231 strings and convert encoded strings to mime encoded words
            Object.keys(response.params).forEach(function(key) {
                var value;
                if (response.params[key] && Array.isArray(response.params[key].values)) {
                    value = response.params[key].values.map(function(val) {
                        return val || '';
                    }).join('');

                    if (response.params[key].charset) {
                        // convert "%AB" to "=?charset?Q?=AB?="
                        response.params[key] = '=?' +
                            response.params[key].charset +
                            '?Q?' +
                            value.
                            // fix invalidly encoded chars
                        replace(/[=\?_\s]/g, function(s) {
                                var c = s.charCodeAt(0).toString(16);
                                if (s === ' ') {
                                    return '_';
                                } else {
                                    return '%' + (c.length < 2 ? '0' : '') + c;
                                }
                            }).
                            // change from urlencoding to percent encoding
                        replace(/%/g, '=') +
                            '?=';
                    } else {
                        response.params[key] = value;
                    }
                }
            }.bind(this));

            return response;
        },

        /**
         * Encodes a string or an Uint8Array to an UTF-8 Parameter Value Continuation encoding (rfc2231)
         * Useful for splitting long parameter values.
         *
         * For example
         *      title="unicode string"
         * becomes
         *     title*0*="utf-8''unicode"
         *     title*1*="%20string"
         *
         * @param {String|Uint8Array} data String to be encoded
         * @param {Number} [maxLength=50] Max length for generated chunks
         * @param {String} [fromCharset='UTF-8'] Source sharacter set
         * @return {Array} A list of encoded keys and headers
         */
        continuationEncode: function(key, data, maxLength, fromCharset) {
            var list = [];
            var encodedStr = typeof data === 'string' ? data : mimecodec.decode(data, fromCharset);
            var chr;
            var line;
            var startPos = 0;
            var isEncoded = false;

            maxLength = maxLength || 50;

            // process ascii only text
            if (/^[\w.\- ]*$/.test(data)) {

                // check if conversion is even needed
                if (encodedStr.length <= maxLength) {
                    return [{
                        key: key,
                        value: /[\s";=]/.test(encodedStr) ? '"' + encodedStr + '"' : encodedStr
                    }];
                }

                encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), function(str) {
                    list.push({
                        line: str
                    });
                    return '';
                });

                if (encodedStr) {
                    list.push({
                        line: encodedStr
                    });
                }

            } else {

                // first line includes the charset and language info and needs to be encoded
                // even if it does not contain any unicode characters
                line = 'utf-8\'\'';
                isEncoded = true;
                startPos = 0;
                // process text with unicode or special chars
                for (var i = 0, len = encodedStr.length; i < len; i++) {

                    chr = encodedStr[i];

                    if (isEncoded) {
                        chr = encodeURIComponent(chr);
                    } else {
                        // try to urlencode current char
                        chr = chr === ' ' ? chr : encodeURIComponent(chr);
                        // By default it is not requirebd to encode a line, the need
                        // only appears when the string contains unicode or special chars
                        // in this case we start processing the line over and encode all chars
                        if (chr !== encodedStr[i]) {
                            // Check if it is even possible to add the encoded char to the line
                            // If not, there is no reason to use this line, just push it to the list
                            // and start a new line with the char that needs encoding
                            if ((encodeURIComponent(line) + chr).length >= maxLength) {
                                list.push({
                                    line: line,
                                    encoded: isEncoded
                                });
                                line = '';
                                startPos = i - 1;
                            } else {
                                isEncoded = true;
                                i = startPos;
                                line = '';
                                continue;
                            }
                        }
                    }

                    // if the line is already too long, push it to the list and start a new one
                    if ((line + chr).length >= maxLength) {
                        list.push({
                            line: line,
                            encoded: isEncoded
                        });
                        line = chr = encodedStr[i] === ' ' ? ' ' : encodeURIComponent(encodedStr[i]);
                        if (chr === encodedStr[i]) {
                            isEncoded = false;
                            startPos = i - 1;
                        } else {
                            isEncoded = true;
                        }
                    } else {
                        line += chr;
                    }
                }

                if (line) {
                    list.push({
                        line: line,
                        encoded: isEncoded
                    });
                }
            }

            return list.map(function(item, i) {
                return {
                    // encoded lines: {name}*{part}*
                    // unencoded lines: {name}*{part}
                    // if any line needs to be encoded then the first line (part==0) is always encoded
                    key: key + '*' + i + (item.encoded ? '*' : ''),
                    value: /[\s";=]/.test(item.line) ? '"' + item.line + '"' : item.line
                };
            });
        },

        /**
         * Splits a mime encoded string. Needed for dividing mime words into smaller chunks
         *
         * @param {String} str Mime encoded string to be split up
         * @param {Number} maxlen Maximum length of characters for one part (minimum 12)
         * @return {Array} Split string
         */
        _splitMimeEncodedString: function(str, maxlen) {
            var curLine, match, chr, done,
                lines = [];

            // requireb at least 12 symbols to fit possible 4 octet UTF-8 sequences
            maxlen = Math.max(maxlen || 0, 12);

            while (str.length) {
                curLine = str.substr(0, maxlen);

                // move incomplete escaped char back to main
                if ((match = curLine.match(/\=[0-9A-F]?$/i))) {
                    curLine = curLine.substr(0, match.index);
                }

                done = false;
                while (!done) {
                    done = true;
                    // check if not middle of a unicode char sequence
                    if ((match = str.substr(curLine.length).match(/^\=([0-9A-F]{2})/i))) {
                        chr = parseInt(match[1], 16);
                        // invalid sequence, move one char back anc recheck
                        if (chr < 0xC2 && chr > 0x7F) {
                            curLine = curLine.substr(0, curLine.length - 3);
                            done = false;
                        }
                    }
                }

                if (curLine.length) {
                    lines.push(curLine);
                }
                str = str.substr(curLine.length);
            }

            return lines;
        },

        /**
         * Adds soft line breaks (the ones that will be stripped out when decoding) to
         * ensure that no line in the message is never longer than 76 symbols
         *
         * Lines can't be longer than 76 + <CR><LF> = 78 bytes
         * http://tools.ietf.org/html/rfc2045#section-6.7
         *
         * @param {String} str Encoded string
         * @param {String} encoding Either "qp" or "base64" (the default)
         * @return {String} String with forced line breaks
         */
        _addSoftLinebreaks: function(str, encoding) {
            var lineLengthMax = 76;

            encoding = (encoding || 'base64').toString().toLowerCase().trim();

            if (encoding === 'qp') {
                return mimecodec._addQPSoftLinebreaks(str, lineLengthMax);
            } else {
                return mimecodec._addBase64SoftLinebreaks(str, lineLengthMax);
            }
        },

        /**
         * Adds soft line breaks (the ones that will be stripped out when decoding base64) to
         * ensure that no line in the message is never longer than lineLengthMax
         *
         * @param {String} base64EncodedStr String in BASE64 encoding
         * @param {Number} lineLengthMax Maximum length of a line
         * @return {String} String with forced line breaks
         */
        _addBase64SoftLinebreaks: function(base64EncodedStr, lineLengthMax) {
            base64EncodedStr = (base64EncodedStr || '').toString().trim();
            return base64EncodedStr.replace(new RegExp('.{' + lineLengthMax + '}', 'g'), '$&\r\n').trim();
        },

        /**
         * Adds soft line breaks(the ones that will be stripped out when decoding QP) to * ensure that no line in the message is never longer than lineLengthMax * * Not sure of how and why this works, but at least it seems to be working: /
         *
         * @param {String} qpEncodedStr String in Quoted-Printable encoding
         * @param {Number} lineLengthMax Maximum length of a line
         * @return {String} String with forced line breaks
         */
        _addQPSoftLinebreaks: function(qpEncodedStr, lineLengthMax) {
            qpEncodedStr = (qpEncodedStr || '').toString();

            lineLengthMax = lineLengthMax || 76;

            var pos = 0,
                len = qpEncodedStr.length,
                match, code, line,
                lineMargin = Math.floor(lineLengthMax / 3),
                result = '';

            // insert soft linebreaks where needed
            while (pos < len) {
                line = qpEncodedStr.substr(pos, lineLengthMax);
                if ((match = line.match(/\r\n/))) {
                    line = line.substr(0, match.index + match[0].length);
                    result += line;
                    pos += line.length;
                    continue;
                }

                if (line.substr(-1) === '\n') {
                    // nothing to change here
                    result += line;
                    pos += line.length;
                    continue;
                } else if ((match = line.substr(-lineMargin).match(/\n.*?$/))) {
                    // truncate to nearest line break
                    line = line.substr(0, line.length - (match[0].length - 1));
                    result += line;
                    pos += line.length;
                    continue;
                } else if (line.length > lineLengthMax - lineMargin && (match = line.substr(-lineMargin).match(/[ \t\.,!\?][^ \t\.,!\?]*$/))) {
                    // truncate to nearest space
                    line = line.substr(0, line.length - (match[0].length - 1));
                } else if (line.substr(-1) === '\r') {
                    line = line.substr(0, line.length - 1);
                } else {
                    if (line.match(/\=[\da-f]{0,2}$/i)) {

                        // push incomplete encoding sequences to the next line
                        if ((match = line.match(/\=[\da-f]{0,1}$/i))) {
                            line = line.substr(0, line.length - match[0].length);
                        }

                        // ensure that utf-8 sequences are not split
                        while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\da-f]{2}){1,4}$/i) && (match = line.match(/\=[\da-f]{2}$/ig))) {
                            code = parseInt(match[0].substr(1, 2), 16);
                            if (code < 128) {
                                break;
                            }

                            line = line.substr(0, line.length - 3);

                            if (code >= 0xC0) {
                                break;
                            }
                        }

                    }
                }

                if (pos + line.length < len && line.substr(-1) !== '\n') {
                    if (line.length === lineLengthMax && line.match(/\=[\da-f]{2}$/i)) {
                        line = line.substr(0, line.length - 3);
                    } else if (line.length === lineLengthMax) {
                        line = line.substr(0, line.length - 1);
                    }
                    pos += line.length;
                    line += '=\r\n';
                } else {
                    pos += line.length;
                }

                result += line;
            }

            return result;
        },

        /**
         * Checks if a number is in specified ranges or not
         *
         * @param {Number} nr Number to check for
         * @ranges {Array} ranges Array of range duples
         * @return {Boolean} Returns true, if nr was found to be at least one of the specified ranges
         */
        _checkRanges: function(nr, ranges) {
            for (var i = ranges.length - 1; i >= 0; i--) {
                if (!ranges[i].length) {
                    continue;
                }
                if (ranges[i].length === 1 && nr === ranges[i][0]) {
                    return true;
                }
                if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {
                    return true;
                }
            }
            return false;
        }
    };

    /**
     * Character set encoding and decoding functions
     */
    mimecodec.charset = {

        /**
         * Encodes an unicode string into an Uint8Array object as UTF-8
         *
         * TextEncoder only supports unicode encodings (utf-8, utf16le/be) but no other,
         * so we force UTF-8 here.
         *
         * @param {String} str String to be encoded
         * @return {Uint8Array} UTF-8 encoded typed array
         */
        encode: function(str) {
            return new TextEncoder('UTF-8').encode(str);
        },

        /**
         * Decodes a string from Uint8Array to an unicode string using specified encoding
         *
         * @param {Uint8Array} buf Binary data to be decoded
         * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset
         * @return {String} Decded string
         */
        decode: function(buf, fromCharset) {
            fromCharset = mimecodec.charset.normalizeCharset(fromCharset || 'UTF-8');

            // ensure the value is a Uint8Array, not ArrayBuffer if used
            if (!buf.buffer) {
                buf = new Uint8Array(buf);
            }

            try {
                return new TextDecoder(fromCharset).decode(buf);
            } catch (E) {
                try {
                    return new TextDecoder('utf-8', {
                        fatal: true // if the input is not a valid utf-8 the decoder will throw
                    }).decode(buf);
                } catch (E) {
                    try {
                        return new TextDecoder('iso-8859-15').decode(buf);
                    } catch (E) {
                        // should not happen as there is something matching for every byte (non character bytes are allowed)
                        return mimecodec.fromTypedArray(buf);
                    }
                }
            }

        },

        /**
         * Convert a string from specific encoding to UTF-8 Uint8Array
         *
         * @param {String|Uint8Array} str String to be encoded
         * @param {String} [fromCharset='UTF-8'] Source encoding for the string
         * @return {Uint8Array} UTF-8 encoded typed array
         */
        convert: function(data, fromCharset) {
            fromCharset = mimecodec.charset.normalizeCharset(fromCharset || 'UTF-8');

            var bufString;

            if (typeof data !== 'string') {
                if (fromCharset.match(/^utf[\-_]?8$/)) {
                    return data;
                }
                bufString = mimecodec.charset.decode(data, fromCharset);
                return mimecodec.charset.encode(bufString);
            }
            return mimecodec.charset.encode(data);
        },

        /**
         * Converts well known invalid character set names to proper names.
         * eg. win-1257 will be converted to WINDOWS-1257
         *
         * @param {String} charset Charset name to convert
         * @return {String} Canoninicalized charset name
         */
        normalizeCharset: function(charset) {
            var match;

            if ((match = charset.match(/^utf[\-_]?(\d+)$/i))) {
                return 'UTF-' + match[1];
            }

            if ((match = charset.match(/^win[\-_]?(\d+)$/i))) {
                return 'WINDOWS-' + match[1];
            }

            if ((match = charset.match(/^latin[\-_]?(\d+)$/i))) {
                return 'ISO-8859-' + match[1];
            }

            return charset;
        }
    };

    /**
     * Base64 encoding and decoding functions
     */
    mimecodec.base64 = {

        /**
         * Encodes input into base64
         *
         * @param {String|Uint8Array} data Data to be encoded into base64
         * @return {String} Base64 encoded string
         */
        encode: function(data) {
            if (!data) {
                return '';
            }

            if (typeof data === 'string') {
                // window.btoa uses pseudo binary encoding, so unicode strings
                // need to be converted before encoding
                return btoa(unescape(encodeURIComponent(data)));
            }

            var len = data.byteLength,
                binStr = '';

            if (!data.buffer) {
                data.buffer = new Uint8Array(data);
            }

            for (var i = 0; i < len; i++) {
                binStr += String.fromCharCode(data[i]);
            }

            return btoa(binStr);
        },

        /**
         * Decodes base64 encoded string into an unicode string or Uint8Array
         *
         * @param {String} data Base64 encoded data
         * @param {String} [outputEncoding='buffer'] Output encoding, either 'string' or 'buffer' (Uint8Array)
         * @return {String|Uint8Array} Decoded string
         */
        decode: function(data, outputEncoding) {
            outputEncoding = (outputEncoding || 'buffer').toLowerCase().trim();

            var buf = mimecodec.base64.toTypedArray(data);

            if (outputEncoding === 'string') {
                return mimecodec.charset.decode(buf);
            } else {
                return buf;
            }
        },

        /**
         * Safe base64 decoding. Does not throw on unexpected input.
         *
         * Implementation from the MDN docs:
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding
         * (MDN code samples are MIT licensed)
         *
         * @param {String} base64Str Base64 encoded string
         * @returns {Uint8Array} Decoded binary blob
         */
        toTypedArray: function(base64Str) {
            var bitsSoFar = 0;
            var validBits = 0;
            var iOut = 0;
            var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));
            var c;
            var bits;

            for (var i = 0, len = base64Str.length; i < len; i++) {
                c = base64Str.charCodeAt(i);
                if (c >= 0x41 && c <= 0x5a) { // [A-Z]
                    bits = c - 0x41;
                } else if (c >= 0x61 && c <= 0x7a) { // [a-z]
                    bits = c - 0x61 + 0x1a;
                } else if (c >= 0x30 && c <= 0x39) { // [0-9]
                    bits = c - 0x30 + 0x34;
                } else if (c === 0x2b) { // +
                    bits = 0x3e;
                } else if (c === 0x2f) { // /
                    bits = 0x3f;
                } else if (c === 0x3d) { // =
                    validBits = 0;
                    continue;
                } else {
                    // ignore all other characters!
                    continue;
                }
                bitsSoFar = (bitsSoFar << 6) | bits;
                validBits += 6;
                if (validBits >= 8) {
                    validBits -= 8;
                    arr[iOut++] = bitsSoFar >> validBits;
                    if (validBits === 2) {
                        bitsSoFar &= 0x03;
                    } else if (validBits === 4) {
                        bitsSoFar &= 0x0f;
                    }
                }
            }

            if (iOut < arr.length) {
                return arr.subarray(0, iOut);
            }
            return arr;
        }
    };

    /*
     * Encodes a string in base 64. DedicatedWorkerGlobalScope for Safari does not provide btoa.
     * https://github.com/davidchambers/Base64.js
     */
    function base64Encode(input) {
        var str = String(input);
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        for (var block, charCode, idx = 0, map = chars, output = ''; str.charAt(idx | 0) || (map = '=', idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
            charCode = str.charCodeAt(idx += 3 / 4);
            if (charCode > 0xFF) {
                throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
            }
            block = block << 8 | charCode;
        }
        return output;
    }

    return mimecodec;
}));

},{"buffer":7,"emailjs-stringencoding":75}],74:[function(requireb,module,exports){
// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['emailjs-mime-codec', 'emailjs-addressparser'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('emailjs-mime-codec'), requireb('emailjs-addressparser'));
    } else {
        root['emailjs-mime-parser'] = factory(root['emailjs-mime-codec'], root['emailjs-addressparser']);
    }

}(this, function(mimecodec, addressparser) {
    'use strict';

    var TIMEZONE_ABBREVATIONS = {
        "ACDT": "+1030",
        "ACST": "+0930",
        "ACT": "+0800",
        "ADT": "-0300",
        "AEDT": "+1100",
        "AEST": "+1000",
        "AFT": "+0430",
        "AKDT": "-0800",
        "AKST": "-0900",
        "AMST": "-0300",
        "AMT": "+0400",
        "ART": "-0300",
        "AST": "+0300",
        "AWDT": "+0900",
        "AWST": "+0800",
        "AZOST": "-0100",
        "AZT": "+0400",
        "BDT": "+0800",
        "BIOT": "+0600",
        "BIT": "-1200",
        "BOT": "-0400",
        "BRT": "-0300",
        "BST": "+0600",
        "BTT": "+0600",
        "CAT": "+0200",
        "CCT": "+0630",
        "CDT": "-0500",
        "CEDT": "+0200",
        "CEST": "+0200",
        "CET": "+0100",
        "CHADT": "+1345",
        "CHAST": "+1245",
        "CHOT": "+0800",
        "CHST": "+1000",
        "CHUT": "+1000",
        "CIST": "-0800",
        "CIT": "+0800",
        "CKT": "-1000",
        "CLST": "-0300",
        "CLT": "-0400",
        "COST": "-0400",
        "COT": "-0500",
        "CST": "-0600",
        "CT": "+0800",
        "CVT": "-0100",
        "CWST": "+0845",
        "CXT": "+0700",
        "DAVT": "+0700",
        "DDUT": "+1000",
        "DFT": "+0100",
        "EASST": "-0500",
        "EAST": "-0600",
        "EAT": "+0300",
        "ECT": "-0500",
        "EDT": "-0400",
        "EEDT": "+0300",
        "EEST": "+0300",
        "EET": "+0200",
        "EGST": "+0000",
        "EGT": "-0100",
        "EIT": "+0900",
        "EST": "-0500",
        "FET": "+0300",
        "FJT": "+1200",
        "FKST": "-0300",
        "FKT": "-0400",
        "FNT": "-0200",
        "GALT": "-0600",
        "GAMT": "-0900",
        "GET": "+0400",
        "GFT": "-0300",
        "GILT": "+1200",
        "GIT": "-0900",
        "GMT": "+0000",
        "GST": "+0400",
        "GYT": "-0400",
        "HADT": "-0900",
        "HAEC": "+0200",
        "HAST": "-1000",
        "HKT": "+0800",
        "HMT": "+0500",
        "HOVT": "+0700",
        "HST": "-1000",
        "ICT": "+0700",
        "IDT": "+0300",
        "IOT": "+0300",
        "IRDT": "+0430",
        "IRKT": "+0900",
        "IRST": "+0330",
        "IST": "+0530",
        "JST": "+0900",
        "KGT": "+0600",
        "KOST": "+1100",
        "KRAT": "+0700",
        "KST": "+0900",
        "LHST": "+1030",
        "LINT": "+1400",
        "MAGT": "+1200",
        "MART": "-0930",
        "MAWT": "+0500",
        "MDT": "-0600",
        "MET": "+0100",
        "MEST": "+0200",
        "MHT": "+1200",
        "MIST": "+1100",
        "MIT": "-0930",
        "MMT": "+0630",
        "MSK": "+0400",
        "MST": "-0700",
        "MUT": "+0400",
        "MVT": "+0500",
        "MYT": "+0800",
        "NCT": "+1100",
        "NDT": "-0230",
        "NFT": "+1130",
        "NPT": "+0545",
        "NST": "-0330",
        "NT": "-0330",
        "NUT": "-1100",
        "NZDT": "+1300",
        "NZST": "+1200",
        "OMST": "+0700",
        "ORAT": "+0500",
        "PDT": "-0700",
        "PET": "-0500",
        "PETT": "+1200",
        "PGT": "+1000",
        "PHOT": "+1300",
        "PHT": "+0800",
        "PKT": "+0500",
        "PMDT": "-0200",
        "PMST": "-0300",
        "PONT": "+1100",
        "PST": "-0800",
        "PYST": "-0300",
        "PYT": "-0400",
        "RET": "+0400",
        "ROTT": "-0300",
        "SAKT": "+1100",
        "SAMT": "+0400",
        "SAST": "+0200",
        "SBT": "+1100",
        "SCT": "+0400",
        "SGT": "+0800",
        "SLST": "+0530",
        "SRT": "-0300",
        "SST": "+0800",
        "SYOT": "+0300",
        "TAHT": "-1000",
        "THA": "+0700",
        "TFT": "+0500",
        "TJT": "+0500",
        "TKT": "+1300",
        "TLT": "+0900",
        "TMT": "+0500",
        "TOT": "+1300",
        "TVT": "+1200",
        "UCT": "+0000",
        "ULAT": "+0800",
        "UTC": "+0000",
        "UYST": "-0200",
        "UYT": "-0300",
        "UZT": "+0500",
        "VET": "-0430",
        "VLAT": "+1000",
        "VOLT": "+0400",
        "VOST": "+0600",
        "VUT": "+1100",
        "WAKT": "+1200",
        "WAST": "+0200",
        "WAT": "+0100",
        "WEDT": "+0100",
        "WEST": "+0100",
        "WET": "+0000",
        "WST": "+0800",
        "YAKT": "+1000",
        "YEKT": "+0600",
        "Z": "+0000"
    };

    /**
     * Creates a parser for a mime stream
     *
     * @constructor
     */
    function MimeParser() {
        /**
         * Returned to the write calls
         */
        this.running = true;

        /**
         * Cache for parsed node objects
         */
        this.nodes = {};

        /**
         * Root node object
         */
        this.node = new MimeNode(null, this);

        /**
         * Data is written to nodes one line at the time. If entire line
         * is not received yet, buffer it before passing on
         */
        this._remainder = '';
    }

    /**
     * Writes a chunk of data to the processing queue. Splits data to lines and feeds
     * complete lines to the current node element
     *
     * @param {Uint8Array|String} chunk Chunk to be processed. Either an Uint8Array value or a 'binary' string
     */
    MimeParser.prototype.write = function(chunk) {
        if (!chunk || !chunk.length) {
            return !this.running;
        }

        var lines = (this._remainder + (typeof chunk === 'object' ?
            mimecodec.fromTypedArray(chunk) : chunk)).split(/\r?\n/g);
        this._remainder = lines.pop();

        for (var i = 0, len = lines.length; i < len; i++) {
            this.node.writeLine(lines[i]);
        }

        return !this.running;
    };

    /**
     * Indicates that there is no more data coming
     *
     * @param {Uint8Array|String} [chunk] Final chunk to be processed
     */
    MimeParser.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
            this.write(chunk);
        }

        if (this.node._lineCount || this._remainder) {
            this.node.writeLine(this._remainder);
            this._remainder = '';
        }

        if (this.node) {
            this.node.finalize();
        }

        this.onend();
    };

    /**
     * Retrieves a mime part object for specified path
     *
     *   parser.getNode('1.2.3')
     *
     * @param {String} path Path to the node
     */
    MimeParser.prototype.getNode = function(path) {
        path = path || '';
        return this.nodes['node' + path] || null;
    };

    // PARSER EVENTS

    /**
     * Override this function.
     * Called when the parsing is ended
     * @event
     */
    MimeParser.prototype.onend = function() {};

    /**
     * Override this function.
     * Called when the parsing is ended
     * @event
     * @param {Object} node Current mime part. See node.header for header lines
     */
    MimeParser.prototype.onheader = function() {};

    /**
     * Override this function.
     * Called when a body chunk is emitted
     * @event
     * @param {Object} node Current mime part
     * @param {Uint8Array} chunk Body chunk
     */
    MimeParser.prototype.onbody = function() {};

    // NODE PROCESSING

    /**
     * Creates an object that holds and manages one part of the multipart message
     *
     * @constructor
     * @param {Object} parentNode Reference to the parent element. If not specified, then this is root node
     * @param {Object} parser MimeParser object
     */
    function MimeNode(parentNode, parser) {

        // Public properties

        /**
         * An array of unfolded header lines
         */
        this.header = [];

        /**
         * An object that holds header key=value pairs
         */
        this.headers = {};

        /**
         * Path for this node
         */
        this.path = parentNode ? parentNode.path.concat(parentNode._childNodes.length + 1) : [];

        // Private properties

        /**
         * Reference to the 'master' parser object
         */
        this._parser = parser;

        /**
         * Parent node for this specific node
         */
        this._parentNode = parentNode;

        /**
         * Current state, always starts out with HEADER
         */
        this._state = 'HEADER';

        /**
         * Body buffer
         */
        this._bodyBuffer = '';

        /**
         * Line counter bor the body part
         */
        this._lineCount = 0;

        /**
         * If this is a multipart or message/rfc822 mime part, the value
         * will be converted to array and hold all child nodes for this node
         */
        this._childNodes = false;

        /**
         * Active child node (if available)
         */
        this._currentChild = false;

        /**
         * Remainder string when dealing with base64 and qp values
         */
        this._lineRemainder = '';

        /**
         * Indicates if this is a multipart node
         */
        this._isMultipart = false;

        /**
         * Stores boundary value for current multipart node
         */
        this._multipartBoundary = false;

        /**
         * Indicates if this is a message/rfc822 node
         */
        this._isRfc822 = false;

        /**
         * Stores the raw content of this node
         */
        this.raw = '';

        // Att this node to the path cache
        this._parser.nodes['node' + this.path.join('.')] = this;
    }

    // Public methods

    /**
     * Processes an enitre input line
     *
     * @param {String} line Entire input line as 'binary' string
     */
    MimeNode.prototype.writeLine = function(line) {

        this.raw += (this.raw ? '\n' : '') + line;

        if (this._state === 'HEADER') {
            this._processHeaderLine(line);
        } else if (this._state === 'BODY') {
            this._processBodyLine(line);
        }
    };

    /**
     * Processes any remainders
     */
    MimeNode.prototype.finalize = function() {
        if (this._isRfc822) {
            this._currentChild.finalize();
        } else {
            this._emitBody(true);
        }
    };

    // Private methods

    /**
     * Processes a line in the HEADER state. It the line is empty, change state to BODY
     *
     * @param {String} line Entire input line as 'binary' string
     */
    MimeNode.prototype._processHeaderLine = function(line) {
        if (!line) {
            this._parseHeaders();
            this._parser.onheader(this);
            this._state = 'BODY';
            return;
        }

        if (line.match(/^\s/) && this.header.length) {
            this.header[this.header.length - 1] += '\n' + line;
        } else {
            this.header.push(line);
        }
    };

    /**
     * Joins folded header lines and calls Content-Type and Transfer-Encoding processors
     */
    MimeNode.prototype._parseHeaders = function() {

        // Join header lines
        var key, value, hasBinary;

        for (var i = 0, len = this.header.length; i < len; i++) {
            value = this.header[i].split(':');
            key = (value.shift() || '').trim().toLowerCase();
            value = (value.join(':') || '').replace(/\n/g, '').trim();

            if (value.match(/[\u0080-\uFFFF]/)) {
                if (!this.charset) {
                    hasBinary = true;
                }
                // use default charset at first and if the actual charset is resolved, the conversion is re-run
                value = mimecodec.charset.decode(mimecodec.charset.convert(mimecodec.toTypedArray(value), this.charset || 'iso-8859-1'));
            }

            if (!this.headers[key]) {
                this.headers[key] = [this._parseHeaderValue(key, value)];
            } else {
                this.headers[key].push(this._parseHeaderValue(key, value));
            }

            if (!this.charset && key === 'content-type') {
                this.charset = this.headers[key][this.headers[key].length - 1].params.charset;
            }

            if (hasBinary && this.charset) {
                // reset values and start over once charset has been resolved and 8bit content has been found
                hasBinary = false;
                this.headers = {};
                i = -1; // next iteration has i == 0
            }
        }

        this._processContentType();
        this._processContentTransferEncoding();
    };

    /**
     * Parses single header value
     * @param {String} key Header key
     * @param {String} value Value for the key
     * @return {Object} parsed header
     */
    MimeNode.prototype._parseHeaderValue = function(key, value) {
        var parsedValue, isAddress = false;

        switch (key) {
            case 'content-type':
            case 'content-transfer-encoding':
            case 'content-disposition':
            case 'dkim-signature':
                parsedValue = mimecodec.parseHeaderValue(value);
                break;
            case 'from':
            case 'sender':
            case 'to':
            case 'reply-to':
            case 'cc':
            case 'bcc':
            case 'abuse-reports-to':
            case 'errors-to':
            case 'return-path':
            case 'delivered-to':
                isAddress = true;
                parsedValue = {
                    value: [].concat(addressparser.parse(value) || [])
                };
                break;
            case 'date':
                parsedValue = {
                    value: this._parseDate(value)
                };
                break;
            default:
                parsedValue = {
                    value: value
                };
        }
        parsedValue.initial = value;

        this._decodeHeaderCharset(parsedValue, {
            isAddress: isAddress
        });

        return parsedValue;
    };

    /**
     * Checks if a date string can be parsed. Falls back replacing timezone
     * abbrevations with timezone values
     *
     * @param {String} str Date header
     * @returns {String} UTC date string if parsing succeeded, otherwise returns input value
     */
    MimeNode.prototype._parseDate = function(str) {
        str = (str || '').toString().trim();

        var date = new Date(str);

        if (this._isValidDate(date)) {
            return date.toUTCString().replace(/GMT/, '+0000');
        }

        // Assume last alpha part is a timezone
        // Ex: "Date: Thu, 15 May 2014 13:53:30 EEST"
        str = str.replace(/\b[a-z]+$/i, function(tz) {
            tz = tz.toUpperCase();
            if (TIMEZONE_ABBREVATIONS.hasOwnProperty(tz)) {
                return TIMEZONE_ABBREVATIONS[tz];
            }
            return tz;
        });

        date = new Date(str);

        if (this._isValidDate(date)) {
            return date.toUTCString().replace(/GMT/, '+0000');
        } else {
            return str;
        }
    };

    /**
     * Checks if a value is a Date object and it contains an actual date value
     * @param {Date} date Date object to check
     * @returns {Boolean} True if the value is a valid date
     */
    MimeNode.prototype._isValidDate = function(date) {
        return Object.prototype.toString.call(date) === '[object Date]' && date.toString() !== 'Invalid Date';
    };

    MimeNode.prototype._decodeHeaderCharset = function(parsed, options) {
        options = options || {};

        // decode default value
        if (typeof parsed.value === 'string') {
            parsed.value = mimecodec.mimeWordsDecode(parsed.value);
        }

        // decode possible params
        Object.keys(parsed.params || {}).forEach(function(key) {
            if (typeof parsed.params[key] === 'string') {
                parsed.params[key] = mimecodec.mimeWordsDecode(parsed.params[key]);
            }
        });

        // decode addresses
        if (options.isAddress && Array.isArray(parsed.value)) {
            parsed.value.forEach(function(addr) {
                if (addr.name) {
                    addr.name = mimecodec.mimeWordsDecode(addr.name);
                    if (Array.isArray(addr.group)) {
                        this._decodeHeaderCharset({
                            value: addr.group
                        }, {
                            isAddress: true
                        });
                    }
                }
            }.bind(this));
        }

        return parsed;
    };

    /**
     * Parses Content-Type value and selects following actions.
     */
    MimeNode.prototype._processContentType = function() {
        var contentDisposition;

        this.contentType = this.headers['content-type'] && this.headers['content-type'][0] ||
            mimecodec.parseHeaderValue('text/plain');
        this.contentType.value = (this.contentType.value || '').toLowerCase().trim();
        this.contentType.type = (this.contentType.value.split('/').shift() || 'text');

        if (this.contentType.params && this.contentType.params.charset && !this.charset) {
            this.charset = this.contentType.params.charset;
        }

        if (this.contentType.type === 'multipart' && this.contentType.params.boundary) {
            this._childNodes = [];
            this._isMultipart = (this.contentType.value.split('/').pop() || 'mixed');
            this._multipartBoundary = this.contentType.params.boundary;
        }

        if (this.contentType.value === 'message/rfc822') {
            /**
             * Parse message/rfc822 only if the mime part is not marked with content-disposition: attachment,
             * otherwise treat it like a regular attachment
             */
            contentDisposition = this.headers['content-disposition'] && this.headers['content-disposition'][0] ||
                mimecodec.parseHeaderValue('');
            if ((contentDisposition.value || '').toLowerCase().trim() !== 'attachment') {
                this._childNodes = [];
                this._currentChild = new MimeNode(this, this._parser);
                this._childNodes.push(this._currentChild);
                this._isRfc822 = true;
            }
        }
    };

    /**
     * Parses Content-Trasnfer-Encoding value to see if the body needs to be converted
     * before it can be emitted
     */
    MimeNode.prototype._processContentTransferEncoding = function() {
        this.contentTransferEncoding = this.headers['content-transfer-encoding'] && this.headers['content-transfer-encoding'][0] ||
            mimecodec.parseHeaderValue('7bit');
        this.contentTransferEncoding.value = (this.contentTransferEncoding.value || '').toLowerCase().trim();
    };

    /**
     * Processes a line in the BODY state. If this is a multipart or rfc822 node,
     * passes line value to child nodes.
     *
     * @param {String} line Entire input line as 'binary' string
     */
    MimeNode.prototype._processBodyLine = function(line) {
        var curLine, match;

        this._lineCount++;

        if (this._isMultipart) {
            if (line === '--' + this._multipartBoundary) {
                if (this._currentChild) {
                    this._currentChild.finalize();
                }
                this._currentChild = new MimeNode(this, this._parser);
                this._childNodes.push(this._currentChild);
            } else if (line === '--' + this._multipartBoundary + '--') {
                if (this._currentChild) {
                    this._currentChild.finalize();
                }
                this._currentChild = false;
            } else if (this._currentChild) {
                this._currentChild.writeLine(line);
            } else {
                // Ignore body for multipart
            }
        } else if (this._isRfc822) {
            this._currentChild.writeLine(line);
        } else {
            switch (this.contentTransferEncoding.value) {
                case 'base64':
                    curLine = this._lineRemainder + line.trim();

                    if (curLine.length % 4) {
                        this._lineRemainder = curLine.substr(-curLine.length % 4);
                        curLine = curLine.substr(0, curLine.length - this._lineRemainder.length);
                    } else {
                        this._lineRemainder = '';
                    }

                    if (curLine.length) {
                        this._bodyBuffer += mimecodec.fromTypedArray(mimecodec.base64.decode(curLine));
                    }

                    break;
                case 'quoted-printable':
                    curLine = this._lineRemainder + (this._lineCount > 1 ? '\n' : '') + line;

                    if ((match = curLine.match(/=[a-f0-9]{0,1}$/i))) {
                        this._lineRemainder = match[0];
                        curLine = curLine.substr(0, curLine.length - this._lineRemainder.length);
                    } else {
                        this._lineRemainder = '';
                    }

                    this._bodyBuffer += curLine.replace(/\=(\r?\n|$)/g, '').replace(/=([a-f0-9]{2})/ig, function(m, code) {
                        return String.fromCharCode(parseInt(code, 16));
                    });
                    break;
                    // case '7bit':
                    // case '8bit':
                default:
                    this._bodyBuffer += (this._lineCount > 1 ? '\n' : '') + line;
                    break;
            }
        }
    };

    /**
     * Emits a chunk of the body
     *
     * @param {Boolean} forceEmit If set to true does not keep any remainders
     */
    MimeNode.prototype._emitBody = function() {
        var contentDisposition = this.headers['content-disposition'] && this.headers['content-disposition'][0] ||
            mimecodec.parseHeaderValue('');
        var delSp;

        if (this._isMultipart || !this._bodyBuffer) {
            return;
        }

        // Process flowed text before emitting it
        if (/^text\/(plain|html)$/i.test(this.contentType.value) &&
            this.contentType.params && /^flowed$/i.test(this.contentType.params.format)) {

            delSp = /^yes$/i.test(this.contentType.params.delsp);

            this._bodyBuffer = this._bodyBuffer.
            split('\n').
            // remove soft linebreaks
            // soft linebreaks are added after space symbols
            reduce(function(previousValue, currentValue) {
                var body = previousValue;
                if (delSp) {
                    // delsp adds spaces to text to be able to fold it
                    // these spaces can be removed once the text is unfolded
                    body = body.replace(/[ ]+$/, '');
                }
                if (/ $/.test(previousValue) && !/(^|\n)\-\- $/.test(previousValue)) {
                    return body + currentValue;
                } else {
                    return body + '\n' + currentValue;
                }
            }).
            // remove whitespace stuffing
            // http://tools.ietf.org/html/rfc3676#section-4.4
            replace(/^ /gm, '');
        }

        this.content = mimecodec.toTypedArray(this._bodyBuffer);

        if (/^text\/(plain|html)$/i.test(this.contentType.value) && !/^attachment$/i.test(contentDisposition.value)) {

            if (!this.charset && /^text\/html$/i.test(this.contentType.value)) {
                this.charset = this._detectHTMLCharset(this._bodyBuffer);
            }

            // decode "binary" string to an unicode string
            if (!/^utf[\-_]?8$/i.test(this.charset)) {
                this.content = mimecodec.charset.convert(mimecodec.toTypedArray(this._bodyBuffer), this.charset || 'iso-8859-1');
            }

            // override charset for text nodes
            this.charset = this.contentType.params.charset = 'utf-8';
        }
        this._bodyBuffer = '';

        this._parser.onbody(this, this.content);
    };

    /**
     * Detect charset from a html file
     *
     * @param {String} html Input HTML
     * @returns {String} Charset if found or undefined
     */
    MimeNode.prototype._detectHTMLCharset = function(html) {
        var charset, input, meta;

        if (typeof html !== 'string') {
            html = html.toString('ascii');
        }

        html = html.replace(/\r?\n|\r/g, " ");

        if ((meta = html.match(/<meta\s+http-equiv=["'\s]*content-type[^>]*?>/i))) {
            input = meta[0];
        }

        if (input) {
            charset = input.match(/charset\s?=\s?([a-zA-Z\-_:0-9]*);?/);
            if (charset) {
                charset = (charset[1] || '').trim().toLowerCase();
            }
        }

        if (!charset && (meta = html.match(/<meta\s+charset=["'\s]*([^"'<>\/\s]+)/i))) {
            charset = (meta[1] || '').trim().toLowerCase();
        }

        return charset;
    };

    return MimeParser;
}));

},{"emailjs-addressparser":64,"emailjs-mime-codec":73}],75:[function(requireb,module,exports){
(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        var stringencoding = factory();
        root.TextEncoder = stringencoding.TextEncoder;
        root.TextDecoder = stringencoding.TextDecoder;
    }

}(this, function() {
    'use strict';

    var ENCODING_INDEXES = {
        "big5": [null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 17392, 19506,
            17923, 17830, 17784, 160359, 19831, 17843, 162993,
            19682, 163013, 15253, 18230, 18244, 19527, 19520,
            148159, 144919, 160594, 159371, 159954, 19543,
            172881, 18255, 17882, 19589, 162924, 19719, 19108,
            18081, 158499, 29221, 154196, 137827, 146950,
            147297, 26189, 22267, null, 32149, 22813, 166841,
            15860, 38708, 162799, 23515, 138590, 23204, 13861,
            171696, 23249, 23479, 23804, 26478, 34195, 170309,
            29793, 29853, 14453, 138579, 145054, 155681, 16108,
            153822, 15093, 31484, 40855, 147809, 166157, 143850,
            133770, 143966, 17162, 33924, 40854, 37935, 18736,
            34323, 22678, 38730, 37400, 31184, 31282, 26208,
            27177, 34973, 29772, 31685, 26498, 31276, 21071,
            36934, 13542, 29636, 155065, 29894, 40903, 22451,
            18735, 21580, 16689, 145038, 22552, 31346, 162661,
            35727, 18094, 159368, 16769, 155033, 31662, 140476,
            40904, 140481, 140489, 140492, 40905, 34052, 144827,
            16564, 40906, 17633, 175615, 25281, 28782, 40907,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 12736,
            12737, 12738, 12739, 12740, 131340, 12741, 131281,
            131277, 12742, 12743, 131275, 139240, 12744, 131274,
            12745, 12746, 12747, 12748, 131342, 12749, 12750,
            256, 193, 461, 192, 274, 201, 282, 200, 332, 211,
            465, 210, null, 7870, null, 7872, 202, 257, 225,
            462, 224, 593, 275, 233, 283, 232, 299, 237, 464,
            236, 333, 243, 466, 242, 363, 250, 468, 249, 470,
            472, 474, 476, 252, null, 7871, null, 7873, 234,
            609, 9178, 9179, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 172969, 135493,
            null, 25866, null, null, 20029, 28381, 40270, 37343,
            null, null, 161589, 25745, 20250, 20264, 20392,
            20822, 20852, 20892, 20964, 21153, 21160, 21307,
            21326, 21457, 21464, 22242, 22768, 22788, 22791,
            22834, 22836, 23398, 23454, 23455, 23706, 24198,
            24635, 25993, 26622, 26628, 26725, 27982, 28860,
            30005, 32420, 32428, 32442, 32455, 32463, 32479,
            32518, 32567, 33402, 33487, 33647, 35270, 35774,
            35810, 36710, 36711, 36718, 29713, 31996, 32205,
            26950, 31433, 21031, null, null, null, null, 37260,
            30904, 37214, 32956, null, 36107, 33014, 133607,
            null, null, 32927, 40647, 19661, 40393, 40460,
            19518, 171510, 159758, 40458, 172339, 13761, null,
            28314, 33342, 29977, null, 18705, 39532, 39567,
            40857, 31111, 164972, 138698, 132560, 142054, 20004,
            20097, 20096, 20103, 20159, 20203, 20279, 13388,
            20413, 15944, 20483, 20616, 13437, 13459, 13477,
            20870, 22789, 20955, 20988, 20997, 20105, 21113,
            21136, 21287, 13767, 21417, 13649, 21424, 13651,
            21442, 21539, 13677, 13682, 13953, 21651, 21667,
            21684, 21689, 21712, 21743, 21784, 21795, 21800,
            13720, 21823, 13733, 13759, 21975, 13765, 163204,
            21797, null, 134210, 134421, 151851, 21904, 142534,
            14828, 131905, 36422, 150968, 169189, 16467, 164030,
            30586, 142392, 14900, 18389, 164189, 158194, 151018,
            25821, 134524, 135092, 134357, 135412, 25741, 36478,
            134806, 134155, 135012, 142505, 164438, 148691,
            null, 134470, 170573, 164073, 18420, 151207, 142530,
            39602, 14951, 169460, 16365, 13574, 152263, 169940,
            161992, 142660, 40302, 38933, null, 17369, 155813,
            25780, 21731, 142668, 142282, 135287, 14843, 135279,
            157402, 157462, 162208, 25834, 151634, 134211,
            36456, 139681, 166732, 132913, null, 18443, 131497,
            16378, 22643, 142733, null, 148936, 132348, 155799,
            134988, 134550, 21881, 16571, 17338, null, 19124,
            141926, 135325, 33194, 39157, 134556, 25465, 14846,
            141173, 36288, 22177, 25724, 15939, null, 173569,
            134665, 142031, 142537, null, 135368, 145858, 14738,
            14854, 164507, 13688, 155209, 139463, 22098, 134961,
            142514, 169760, 13500, 27709, 151099, null, null,
            161140, 142987, 139784, 173659, 167117, 134778,
            134196, 157724, 32659, 135375, 141315, 141625,
            13819, 152035, 134796, 135053, 134826, 16275,
            134960, 134471, 135503, 134732, null, 134827,
            134057, 134472, 135360, 135485, 16377, 140950,
            25650, 135085, 144372, 161337, 142286, 134526,
            134527, 142417, 142421, 14872, 134808, 135367,
            134958, 173618, 158544, 167122, 167321, 167114,
            38314, 21708, 33476, 21945, null, 171715, 39974,
            39606, 161630, 142830, 28992, 33133, 33004, 23580,
            157042, 33076, 14231, 21343, 164029, 37302, 134906,
            134671, 134775, 134907, 13789, 151019, 13833,
            134358, 22191, 141237, 135369, 134672, 134776,
            135288, 135496, 164359, 136277, 134777, 151120,
            142756, 23124, 135197, 135198, 135413, 135414,
            22428, 134673, 161428, 164557, 135093, 134779,
            151934, 14083, 135094, 135552, 152280, 172733,
            149978, 137274, 147831, 164476, 22681, 21096, 13850,
            153405, 31666, 23400, 18432, 19244, 40743, 18919,
            39967, 39821, 154484, 143677, 22011, 13810, 22153,
            20008, 22786, 138177, 194680, 38737, 131206, 20059,
            20155, 13630, 23587, 24401, 24516, 14586, 25164,
            25909, 27514, 27701, 27706, 28780, 29227, 20012,
            29357, 149737, 32594, 31035, 31993, 32595, 156266,
            13505, null, 156491, 32770, 32896, 157202, 158033,
            21341, 34916, 35265, 161970, 35744, 36125, 38021,
            38264, 38271, 38376, 167439, 38886, 39029, 39118,
            39134, 39267, 170000, 40060, 40479, 40644, 27503,
            63751, 20023, 131207, 38429, 25143, 38050, null,
            20539, 28158, 171123, 40870, 15817, 34959, 147790,
            28791, 23797, 19232, 152013, 13657, 154928, 24866,
            166450, 36775, 37366, 29073, 26393, 29626, 144001,
            172295, 15499, 137600, 19216, 30948, 29698, 20910,
            165647, 16393, 27235, 172730, 16931, 34319, 133743,
            31274, 170311, 166634, 38741, 28749, 21284, 139390,
            37876, 30425, 166371, 40871, 30685, 20131, 20464,
            20668, 20015, 20247, 40872, 21556, 32139, 22674,
            22736, 138678, 24210, 24217, 24514, 141074, 25995,
            144377, 26905, 27203, 146531, 27903, null, 29184,
            148741, 29580, 16091, 150035, 23317, 29881, 35715,
            154788, 153237, 31379, 31724, 31939, 32364, 33528,
            34199, 40873, 34960, 40874, 36537, 40875, 36815,
            34143, 39392, 37409, 40876, 167353, 136255, 16497,
            17058, 23066, null, null, null, 39016, 26475, 17014,
            22333, null, 34262, 149883, 33471, 160013, 19585,
            159092, 23931, 158485, 159678, 40877, 40878, 23446,
            40879, 26343, 32347, 28247, 31178, 15752, 17603,
            143958, 141206, 17306, 17718, null, 23765, 146202,
            35577, 23672, 15634, 144721, 23928, 40882, 29015,
            17752, 147692, 138787, 19575, 14712, 13386, 131492,
            158785, 35532, 20404, 131641, 22975, 33132, 38998,
            170234, 24379, 134047, null, 139713, 166253, 16642,
            18107, 168057, 16135, 40883, 172469, 16632, 14294,
            18167, 158790, 16764, 165554, 160767, 17773, 14548,
            152730, 17761, 17691, 19849, 19579, 19830, 17898,
            16328, 150287, 13921, 17630, 17597, 16877, 23870,
            23880, 23894, 15868, 14351, 23972, 23993, 14368,
            14392, 24130, 24253, 24357, 24451, 14600, 14612,
            14655, 14669, 24791, 24893, 23781, 14729, 25015,
            25017, 25039, 14776, 25132, 25232, 25317, 25368,
            14840, 22193, 14851, 25570, 25595, 25607, 25690,
            14923, 25792, 23829, 22049, 40863, 14999, 25990,
            15037, 26111, 26195, 15090, 26258, 15138, 26390,
            15170, 26532, 26624, 15192, 26698, 26756, 15218,
            15217, 15227, 26889, 26947, 29276, 26980, 27039,
            27013, 15292, 27094, 15325, 27237, 27252, 27249,
            27266, 15340, 27289, 15346, 27307, 27317, 27348,
            27382, 27521, 27585, 27626, 27765, 27818, 15563,
            27906, 27910, 27942, 28033, 15599, 28068, 28081,
            28181, 28184, 28201, 28294, 166336, 28347, 28386,
            28378, 40831, 28392, 28393, 28452, 28468, 15686,
            147265, 28545, 28606, 15722, 15733, 29111, 23705,
            15754, 28716, 15761, 28752, 28756, 28783, 28799,
            28809, 131877, 17345, 13809, 134872, 147159, 22462,
            159443, 28990, 153568, 13902, 27042, 166889, 23412,
            31305, 153825, 169177, 31333, 31357, 154028, 31419,
            31408, 31426, 31427, 29137, 156813, 16842, 31450,
            31453, 31466, 16879, 21682, 154625, 31499, 31573,
            31529, 152334, 154878, 31650, 31599, 33692, 154548,
            158847, 31696, 33825, 31634, 31672, 154912, 15789,
            154725, 33938, 31738, 31750, 31797, 154817, 31812,
            31875, 149634, 31910, 26237, 148856, 31945, 31943,
            31974, 31860, 31987, 31989, 31950, 32359, 17693,
            159300, 32093, 159446, 29837, 32137, 32171, 28981,
            32179, 32210, 147543, 155689, 32228, 15635, 32245,
            137209, 32229, 164717, 32285, 155937, 155994, 32366,
            32402, 17195, 37996, 32295, 32576, 32577, 32583,
            31030, 156368, 39393, 32663, 156497, 32675, 136801,
            131176, 17756, 145254, 17667, 164666, 32762, 156809,
            32773, 32776, 32797, 32808, 32815, 172167, 158915,
            32827, 32828, 32865, 141076, 18825, 157222, 146915,
            157416, 26405, 32935, 166472, 33031, 33050, 22704,
            141046, 27775, 156824, 151480, 25831, 136330, 33304,
            137310, 27219, 150117, 150165, 17530, 33321, 133901,
            158290, 146814, 20473, 136445, 34018, 33634, 158474,
            149927, 144688, 137075, 146936, 33450, 26907,
            194964, 16859, 34123, 33488, 33562, 134678, 137140,
            14017, 143741, 144730, 33403, 33506, 33560, 147083,
            159139, 158469, 158615, 144846, 15807, 33565, 21996,
            33669, 17675, 159141, 33708, 33729, 33747, 13438,
            159444, 27223, 34138, 13462, 159298, 143087, 33880,
            154596, 33905, 15827, 17636, 27303, 33866, 146613,
            31064, 33960, 158614, 159351, 159299, 34014, 33807,
            33681, 17568, 33939, 34020, 154769, 16960, 154816,
            17731, 34100, 23282, 159385, 17703, 34163, 17686,
            26559, 34326, 165413, 165435, 34241, 159880, 34306,
            136578, 159949, 194994, 17770, 34344, 13896, 137378,
            21495, 160666, 34430, 34673, 172280, 34798, 142375,
            34737, 34778, 34831, 22113, 34412, 26710, 17935,
            34885, 34886, 161248, 146873, 161252, 34910, 34972,
            18011, 34996, 34997, 25537, 35013, 30583, 161551,
            35207, 35210, 35238, 35241, 35239, 35260, 166437,
            35303, 162084, 162493, 35484, 30611, 37374, 35472,
            162393, 31465, 162618, 147343, 18195, 162616, 29052,
            35596, 35615, 152624, 152933, 35647, 35660, 35661,
            35497, 150138, 35728, 35739, 35503, 136927, 17941,
            34895, 35995, 163156, 163215, 195028, 14117, 163155,
            36054, 163224, 163261, 36114, 36099, 137488, 36059,
            28764, 36113, 150729, 16080, 36215, 36265, 163842,
            135188, 149898, 15228, 164284, 160012, 31463, 36525,
            36534, 36547, 37588, 36633, 36653, 164709, 164882,
            36773, 37635, 172703, 133712, 36787, 18730, 166366,
            165181, 146875, 24312, 143970, 36857, 172052,
            165564, 165121, 140069, 14720, 159447, 36919,
            165180, 162494, 36961, 165228, 165387, 37032,
            165651, 37060, 165606, 37038, 37117, 37223, 15088,
            37289, 37316, 31916, 166195, 138889, 37390, 27807,
            37441, 37474, 153017, 37561, 166598, 146587, 166668,
            153051, 134449, 37676, 37739, 166625, 166891, 28815,
            23235, 166626, 166629, 18789, 37444, 166892, 166969,
            166911, 37747, 37979, 36540, 38277, 38310, 37926,
            38304, 28662, 17081, 140922, 165592, 135804, 146990,
            18911, 27676, 38523, 38550, 16748, 38563, 159445,
            25050, 38582, 30965, 166624, 38589, 21452, 18849,
            158904, 131700, 156688, 168111, 168165, 150225,
            137493, 144138, 38705, 34370, 38710, 18959, 17725,
            17797, 150249, 28789, 23361, 38683, 38748, 168405,
            38743, 23370, 168427, 38751, 37925, 20688, 143543,
            143548, 38793, 38815, 38833, 38846, 38848, 38866,
            38880, 152684, 38894, 29724, 169011, 38911, 38901,
            168989, 162170, 19153, 38964, 38963, 38987, 39014,
            15118, 160117, 15697, 132656, 147804, 153350, 39114,
            39095, 39112, 39111, 19199, 159015, 136915, 21936,
            39137, 39142, 39148, 37752, 39225, 150057, 19314,
            170071, 170245, 39413, 39436, 39483, 39440, 39512,
            153381, 14020, 168113, 170965, 39648, 39650, 170757,
            39668, 19470, 39700, 39725, 165376, 20532, 39732,
            158120, 14531, 143485, 39760, 39744, 171326, 23109,
            137315, 39822, 148043, 39938, 39935, 39948, 171624,
            40404, 171959, 172434, 172459, 172257, 172323,
            172511, 40318, 40323, 172340, 40462, 26760, 40388,
            139611, 172435, 172576, 137531, 172595, 40249,
            172217, 172724, 40592, 40597, 40606, 40610, 19764,
            40618, 40623, 148324, 40641, 15200, 14821, 15645,
            20274, 14270, 166955, 40706, 40712, 19350, 37924,
            159138, 40727, 40726, 40761, 22175, 22154, 40773,
            39352, 168075, 38898, 33919, 40802, 40809, 31452,
            40846, 29206, 19390, 149877, 149947, 29047, 150008,
            148296, 150097, 29598, 166874, 137466, 31135,
            166270, 167478, 37737, 37875, 166468, 37612, 37761,
            37835, 166252, 148665, 29207, 16107, 30578, 31299,
            28880, 148595, 148472, 29054, 137199, 28835, 137406,
            144793, 16071, 137349, 152623, 137208, 14114,
            136955, 137273, 14049, 137076, 137425, 155467,
            14115, 136896, 22363, 150053, 136190, 135848,
            136134, 136374, 34051, 145062, 34051, 33877, 149908,
            160101, 146993, 152924, 147195, 159826, 17652,
            145134, 170397, 159526, 26617, 14131, 15381, 15847,
            22636, 137506, 26640, 16471, 145215, 147681, 147595,
            147727, 158753, 21707, 22174, 157361, 22162, 135135,
            134056, 134669, 37830, 166675, 37788, 20216, 20779,
            14361, 148534, 20156, 132197, 131967, 20299, 20362,
            153169, 23144, 131499, 132043, 14745, 131850,
            132116, 13365, 20265, 131776, 167603, 131701, 35546,
            131596, 20120, 20685, 20749, 20386, 20227, 150030,
            147082, 20290, 20526, 20588, 20609, 20428, 20453,
            20568, 20732, 20825, 20827, 20829, 20830, 28278,
            144789, 147001, 147135, 28018, 137348, 147081,
            20904, 20931, 132576, 17629, 132259, 132242, 132241,
            36218, 166556, 132878, 21081, 21156, 133235, 21217,
            37742, 18042, 29068, 148364, 134176, 149932, 135396,
            27089, 134685, 29817, 16094, 29849, 29716, 29782,
            29592, 19342, 150204, 147597, 21456, 13700, 29199,
            147657, 21940, 131909, 21709, 134086, 22301, 37469,
            38644, 37734, 22493, 22413, 22399, 13886, 22731,
            23193, 166470, 136954, 137071, 136976, 23084, 22968,
            37519, 23166, 23247, 23058, 153926, 137715, 137313,
            148117, 14069, 27909, 29763, 23073, 155267, 23169,
            166871, 132115, 37856, 29836, 135939, 28933, 18802,
            37896, 166395, 37821, 14240, 23582, 23710, 24158,
            24136, 137622, 137596, 146158, 24269, 23375, 137475,
            137476, 14081, 137376, 14045, 136958, 14035, 33066,
            166471, 138682, 144498, 166312, 24332, 24334,
            137511, 137131, 23147, 137019, 23364, 34324, 161277,
            34912, 24702, 141408, 140843, 24539, 16056, 140719,
            140734, 168072, 159603, 25024, 131134, 131142,
            140827, 24985, 24984, 24693, 142491, 142599, 149204,
            168269, 25713, 149093, 142186, 14889, 142114,
            144464, 170218, 142968, 25399, 173147, 25782, 25393,
            25553, 149987, 142695, 25252, 142497, 25659, 25963,
            26994, 15348, 143502, 144045, 149897, 144043, 21773,
            144096, 137433, 169023, 26318, 144009, 143795,
            15072, 16784, 152964, 166690, 152975, 136956,
            152923, 152613, 30958, 143619, 137258, 143924,
            13412, 143887, 143746, 148169, 26254, 159012, 26219,
            19347, 26160, 161904, 138731, 26211, 144082, 144097,
            26142, 153714, 14545, 145466, 145340, 15257, 145314,
            144382, 29904, 15254, 26511, 149034, 26806, 26654,
            15300, 27326, 14435, 145365, 148615, 27187, 27218,
            27337, 27397, 137490, 25873, 26776, 27212, 15319,
            27258, 27479, 147392, 146586, 37792, 37618, 166890,
            166603, 37513, 163870, 166364, 37991, 28069, 28427,
            149996, 28007, 147327, 15759, 28164, 147516, 23101,
            28170, 22599, 27940, 30786, 28987, 148250, 148086,
            28913, 29264, 29319, 29332, 149391, 149285, 20857,
            150180, 132587, 29818, 147192, 144991, 150090,
            149783, 155617, 16134, 16049, 150239, 166947,
            147253, 24743, 16115, 29900, 29756, 37767, 29751,
            17567, 159210, 17745, 30083, 16227, 150745, 150790,
            16216, 30037, 30323, 173510, 15129, 29800, 166604,
            149931, 149902, 15099, 15821, 150094, 16127, 149957,
            149747, 37370, 22322, 37698, 166627, 137316, 20703,
            152097, 152039, 30584, 143922, 30478, 30479, 30587,
            149143, 145281, 14942, 149744, 29752, 29851, 16063,
            150202, 150215, 16584, 150166, 156078, 37639,
            152961, 30750, 30861, 30856, 30930, 29648, 31065,
            161601, 153315, 16654, 31131, 33942, 31141, 27181,
            147194, 31290, 31220, 16750, 136934, 16690, 37429,
            31217, 134476, 149900, 131737, 146874, 137070,
            13719, 21867, 13680, 13994, 131540, 134157, 31458,
            23129, 141045, 154287, 154268, 23053, 131675, 30960,
            23082, 154566, 31486, 16889, 31837, 31853, 16913,
            154547, 155324, 155302, 31949, 150009, 137136,
            31886, 31868, 31918, 27314, 32220, 32263, 32211,
            32590, 156257, 155996, 162632, 32151, 155266, 17002,
            158581, 133398, 26582, 131150, 144847, 22468,
            156690, 156664, 149858, 32733, 31527, 133164,
            154345, 154947, 31500, 155150, 39398, 34373, 39523,
            27164, 144447, 14818, 150007, 157101, 39455, 157088,
            33920, 160039, 158929, 17642, 33079, 17410, 32966,
            33033, 33090, 157620, 39107, 158274, 33378, 33381,
            158289, 33875, 159143, 34320, 160283, 23174, 16767,
            137280, 23339, 137377, 23268, 137432, 34464, 195004,
            146831, 34861, 160802, 23042, 34926, 20293, 34951,
            35007, 35046, 35173, 35149, 153219, 35156, 161669,
            161668, 166901, 166873, 166812, 166393, 16045,
            33955, 18165, 18127, 14322, 35389, 35356, 169032,
            24397, 37419, 148100, 26068, 28969, 28868, 137285,
            40301, 35999, 36073, 163292, 22938, 30659, 23024,
            17262, 14036, 36394, 36519, 150537, 36656, 36682,
            17140, 27736, 28603, 140065, 18587, 28537, 28299,
            137178, 39913, 14005, 149807, 37051, 37015, 21873,
            18694, 37307, 37892, 166475, 16482, 166652, 37927,
            166941, 166971, 34021, 35371, 38297, 38311, 38295,
            38294, 167220, 29765, 16066, 149759, 150082, 148458,
            16103, 143909, 38543, 167655, 167526, 167525, 16076,
            149997, 150136, 147438, 29714, 29803, 16124, 38721,
            168112, 26695, 18973, 168083, 153567, 38749, 37736,
            166281, 166950, 166703, 156606, 37562, 23313, 35689,
            18748, 29689, 147995, 38811, 38769, 39224, 134950,
            24001, 166853, 150194, 38943, 169178, 37622, 169431,
            37349, 17600, 166736, 150119, 166756, 39132, 166469,
            16128, 37418, 18725, 33812, 39227, 39245, 162566,
            15869, 39323, 19311, 39338, 39516, 166757, 153800,
            27279, 39457, 23294, 39471, 170225, 19344, 170312,
            39356, 19389, 19351, 37757, 22642, 135938, 22562,
            149944, 136424, 30788, 141087, 146872, 26821, 15741,
            37976, 14631, 24912, 141185, 141675, 24839, 40015,
            40019, 40059, 39989, 39952, 39807, 39887, 171565,
            39839, 172533, 172286, 40225, 19630, 147716, 40472,
            19632, 40204, 172468, 172269, 172275, 170287, 40357,
            33981, 159250, 159711, 158594, 34300, 17715, 159140,
            159364, 159216, 33824, 34286, 159232, 145367,
            155748, 31202, 144796, 144960, 18733, 149982, 15714,
            37851, 37566, 37704, 131775, 30905, 37495, 37965,
            20452, 13376, 36964, 152925, 30781, 30804, 30902,
            30795, 137047, 143817, 149825, 13978, 20338, 28634,
            28633, 28702, 28702, 21524, 147893, 22459, 22771,
            22410, 40214, 22487, 28980, 13487, 147884, 29163,
            158784, 151447, 23336, 137141, 166473, 24844, 23246,
            23051, 17084, 148616, 14124, 19323, 166396, 37819,
            37816, 137430, 134941, 33906, 158912, 136211,
            148218, 142374, 148417, 22932, 146871, 157505,
            32168, 155995, 155812, 149945, 149899, 166394,
            37605, 29666, 16105, 29876, 166755, 137375, 16097,
            150195, 27352, 29683, 29691, 16086, 150078, 150164,
            137177, 150118, 132007, 136228, 149989, 29768,
            149782, 28837, 149878, 37508, 29670, 37727, 132350,
            37681, 166606, 166422, 37766, 166887, 153045, 18741,
            166530, 29035, 149827, 134399, 22180, 132634,
            134123, 134328, 21762, 31172, 137210, 32254, 136898,
            150096, 137298, 17710, 37889, 14090, 166592, 149933,
            22960, 137407, 137347, 160900, 23201, 14050, 146779,
            14000, 37471, 23161, 166529, 137314, 37748, 15565,
            133812, 19094, 14730, 20724, 15721, 15692, 136092,
            29045, 17147, 164376, 28175, 168164, 17643, 27991,
            163407, 28775, 27823, 15574, 147437, 146989, 28162,
            28428, 15727, 132085, 30033, 14012, 13512, 18048,
            16090, 18545, 22980, 37486, 18750, 36673, 166940,
            158656, 22546, 22472, 14038, 136274, 28926, 148322,
            150129, 143331, 135856, 140221, 26809, 26983,
            136088, 144613, 162804, 145119, 166531, 145366,
            144378, 150687, 27162, 145069, 158903, 33854, 17631,
            17614, 159014, 159057, 158850, 159710, 28439,
            160009, 33597, 137018, 33773, 158848, 159827,
            137179, 22921, 23170, 137139, 23137, 23153, 137477,
            147964, 14125, 23023, 137020, 14023, 29070, 37776,
            26266, 148133, 23150, 23083, 148115, 27179, 147193,
            161590, 148571, 148170, 28957, 148057, 166369,
            20400, 159016, 23746, 148686, 163405, 148413, 27148,
            148054, 135940, 28838, 28979, 148457, 15781, 27871,
            194597, 150095, 32357, 23019, 23855, 15859, 24412,
            150109, 137183, 32164, 33830, 21637, 146170, 144128,
            131604, 22398, 133333, 132633, 16357, 139166,
            172726, 28675, 168283, 23920, 29583, 31955, 166489,
            168992, 20424, 32743, 29389, 29456, 162548, 29496,
            29497, 153334, 29505, 29512, 16041, 162584, 36972,
            29173, 149746, 29665, 33270, 16074, 30476, 16081,
            27810, 22269, 29721, 29726, 29727, 16098, 16112,
            16116, 16122, 29907, 16142, 16211, 30018, 30061,
            30066, 30093, 16252, 30152, 30172, 16320, 30285,
            16343, 30324, 16348, 30330, 151388, 29064, 22051,
            35200, 22633, 16413, 30531, 16441, 26465, 16453,
            13787, 30616, 16490, 16495, 23646, 30654, 30667,
            22770, 30744, 28857, 30748, 16552, 30777, 30791,
            30801, 30822, 33864, 152885, 31027, 26627, 31026,
            16643, 16649, 31121, 31129, 36795, 31238, 36796,
            16743, 31377, 16818, 31420, 33401, 16836, 31439,
            31451, 16847, 20001, 31586, 31596, 31611, 31762,
            31771, 16992, 17018, 31867, 31900, 17036, 31928,
            17044, 31981, 36755, 28864, 134351, 32207, 32212,
            32208, 32253, 32686, 32692, 29343, 17303, 32800,
            32805, 31545, 32814, 32817, 32852, 15820, 22452,
            28832, 32951, 33001, 17389, 33036, 29482, 33038,
            33042, 30048, 33044, 17409, 15161, 33110, 33113,
            33114, 17427, 22586, 33148, 33156, 17445, 33171,
            17453, 33189, 22511, 33217, 33252, 33364, 17551,
            33446, 33398, 33482, 33496, 33535, 17584, 33623,
            38505, 27018, 33797, 28917, 33892, 24803, 33928,
            17668, 33982, 34017, 34040, 34064, 34104, 34130,
            17723, 34159, 34160, 34272, 17783, 34418, 34450,
            34482, 34543, 38469, 34699, 17926, 17943, 34990,
            35071, 35108, 35143, 35217, 162151, 35369, 35384,
            35476, 35508, 35921, 36052, 36082, 36124, 18328,
            22623, 36291, 18413, 20206, 36410, 21976, 22356,
            36465, 22005, 36528, 18487, 36558, 36578, 36580,
            36589, 36594, 36791, 36801, 36810, 36812, 36915,
            39364, 18605, 39136, 37395, 18718, 37416, 37464,
            37483, 37553, 37550, 37567, 37603, 37611, 37619,
            37620, 37629, 37699, 37764, 37805, 18757, 18769,
            40639, 37911, 21249, 37917, 37933, 37950, 18794,
            37972, 38009, 38189, 38306, 18855, 38388, 38451,
            18917, 26528, 18980, 38720, 18997, 38834, 38850,
            22100, 19172, 24808, 39097, 19225, 39153, 22596,
            39182, 39193, 20916, 39196, 39223, 39234, 39261,
            39266, 19312, 39365, 19357, 39484, 39695, 31363,
            39785, 39809, 39901, 39921, 39924, 19565, 39968,
            14191, 138178, 40265, 39994, 40702, 22096, 40339,
            40381, 40384, 40444, 38134, 36790, 40571, 40620,
            40625, 40637, 40646, 38108, 40674, 40689, 40696,
            31432, 40772, 131220, 131767, 132000, 26906, 38083,
            22956, 132311, 22592, 38081, 14265, 132565, 132629,
            132726, 136890, 22359, 29043, 133826, 133837,
            134079, 21610, 194619, 134091, 21662, 134139,
            134203, 134227, 134245, 134268, 24807, 134285,
            22138, 134325, 134365, 134381, 134511, 134578,
            134600, 26965, 39983, 34725, 134660, 134670, 134871,
            135056, 134957, 134771, 23584, 135100, 24075,
            135260, 135247, 135286, 26398, 135291, 135304,
            135318, 13895, 135359, 135379, 135471, 135483,
            21348, 33965, 135907, 136053, 135990, 35713, 136567,
            136729, 137155, 137159, 20088, 28859, 137261,
            137578, 137773, 137797, 138282, 138352, 138412,
            138952, 25283, 138965, 139029, 29080, 26709, 139333,
            27113, 14024, 139900, 140247, 140282, 141098,
            141425, 141647, 33533, 141671, 141715, 142037,
            35237, 142056, 36768, 142094, 38840, 142143, 38983,
            39613, 142412, null, 142472, 142519, 154600, 142600,
            142610, 142775, 142741, 142914, 143220, 143308,
            143411, 143462, 144159, 144350, 24497, 26184, 26303,
            162425, 144743, 144883, 29185, 149946, 30679,
            144922, 145174, 32391, 131910, 22709, 26382, 26904,
            146087, 161367, 155618, 146961, 147129, 161278,
            139418, 18640, 19128, 147737, 166554, 148206,
            148237, 147515, 148276, 148374, 150085, 132554,
            20946, 132625, 22943, 138920, 15294, 146687, 148484,
            148694, 22408, 149108, 14747, 149295, 165352,
            170441, 14178, 139715, 35678, 166734, 39382, 149522,
            149755, 150037, 29193, 150208, 134264, 22885,
            151205, 151430, 132985, 36570, 151596, 21135, 22335,
            29041, 152217, 152601, 147274, 150183, 21948,
            152646, 152686, 158546, 37332, 13427, 152895,
            161330, 152926, 18200, 152930, 152934, 153543,
            149823, 153693, 20582, 13563, 144332, 24798, 153859,
            18300, 166216, 154286, 154505, 154630, 138640,
            22433, 29009, 28598, 155906, 162834, 36950, 156082,
            151450, 35682, 156674, 156746, 23899, 158711, 36662,
            156804, 137500, 35562, 150006, 156808, 147439,
            156946, 19392, 157119, 157365, 141083, 37989,
            153569, 24981, 23079, 194765, 20411, 22201, 148769,
            157436, 20074, 149812, 38486, 28047, 158909, 13848,
            35191, 157593, 157806, 156689, 157790, 29151,
            157895, 31554, 168128, 133649, 157990, 37124,
            158009, 31301, 40432, 158202, 39462, 158253, 13919,
            156777, 131105, 31107, 158260, 158555, 23852,
            144665, 33743, 158621, 18128, 158884, 30011, 34917,
            159150, 22710, 14108, 140685, 159819, 160205, 15444,
            160384, 160389, 37505, 139642, 160395, 37680,
            160486, 149968, 27705, 38047, 160848, 134904, 34855,
            35061, 141606, 164979, 137137, 28344, 150058,
            137248, 14756, 14009, 23568, 31203, 17727, 26294,
            171181, 170148, 35139, 161740, 161880, 22230, 16607,
            136714, 14753, 145199, 164072, 136133, 29101, 33638,
            162269, 168360, 23143, 19639, 159919, 166315,
            162301, 162314, 162571, 163174, 147834, 31555,
            31102, 163849, 28597, 172767, 27139, 164632, 21410,
            159239, 37823, 26678, 38749, 164207, 163875, 158133,
            136173, 143919, 163912, 23941, 166960, 163971,
            22293, 38947, 166217, 23979, 149896, 26046, 27093,
            21458, 150181, 147329, 15377, 26422, 163984, 164084,
            164142, 139169, 164175, 164233, 164271, 164378,
            164614, 164655, 164746, 13770, 164968, 165546,
            18682, 25574, 166230, 30728, 37461, 166328, 17394,
            166375, 17375, 166376, 166726, 166868, 23032,
            166921, 36619, 167877, 168172, 31569, 168208,
            168252, 15863, 168286, 150218, 36816, 29327, 22155,
            169191, 169449, 169392, 169400, 169778, 170193,
            170313, 170346, 170435, 170536, 170766, 171354,
            171419, 32415, 171768, 171811, 19620, 38215, 172691,
            29090, 172799, 19857, 36882, 173515, 19868, 134300,
            36798, 21953, 36794, 140464, 36793, 150163, 17673,
            32383, 28502, 27313, 20202, 13540, 166700, 161949,
            14138, 36480, 137205, 163876, 166764, 166809,
            162366, 157359, 15851, 161365, 146615, 153141,
            153942, 20122, 155265, 156248, 22207, 134765, 36366,
            23405, 147080, 150686, 25566, 25296, 137206, 137339,
            25904, 22061, 154698, 21530, 152337, 15814, 171416,
            19581, 22050, 22046, 32585, 155352, 22901, 146752,
            34672, 19996, 135146, 134473, 145082, 33047, 40286,
            36120, 30267, 40005, 30286, 30649, 37701, 21554,
            33096, 33527, 22053, 33074, 33816, 32957, 21994,
            31074, 22083, 21526, 134813, 13774, 22021, 22001,
            26353, 164578, 13869, 30004, 22000, 21946, 21655,
            21874, 134209, 134294, 24272, 151880, 134774,
            142434, 134818, 40619, 32090, 21982, 135285, 25245,
            38765, 21652, 36045, 29174, 37238, 25596, 25529,
            25598, 21865, 142147, 40050, 143027, 20890, 13535,
            134567, 20903, 21581, 21790, 21779, 30310, 36397,
            157834, 30129, 32950, 34820, 34694, 35015, 33206,
            33820, 135361, 17644, 29444, 149254, 23440, 33547,
            157843, 22139, 141044, 163119, 147875, 163187,
            159440, 160438, 37232, 135641, 37384, 146684,
            173737, 134828, 134905, 29286, 138402, 18254,
            151490, 163833, 135147, 16634, 40029, 25887, 142752,
            18675, 149472, 171388, 135148, 134666, 24674,
            161187, 135149, null, 155720, 135559, 29091, 32398,
            40272, 19994, 19972, 13687, 23309, 27826, 21351,
            13996, 14812, 21373, 13989, 149016, 22682, 150382,
            33325, 21579, 22442, 154261, 133497, null, 14930,
            140389, 29556, 171692, 19721, 39917, 146686, 171824,
            19547, 151465, 169374, 171998, 33884, 146870,
            160434, 157619, 145184, 25390, 32037, 147191,
            146988, 14890, 36872, 21196, 15988, 13946, 17897,
            132238, 30272, 23280, 134838, 30842, 163630, 22695,
            16575, 22140, 39819, 23924, 30292, 173108, 40581,
            19681, 30201, 14331, 24857, 143578, 148466, null,
            22109, 135849, 22439, 149859, 171526, 21044, 159918,
            13741, 27722, 40316, 31830, 39737, 22494, 137068,
            23635, 25811, 169168, 156469, 160100, 34477, 134440,
            159010, 150242, 134513, null, 20990, 139023, 23950,
            38659, 138705, 40577, 36940, 31519, 39682, 23761,
            31651, 25192, 25397, 39679, 31695, 39722, 31870,
            39726, 31810, 31878, 39957, 31740, 39689, 40727,
            39963, 149822, 40794, 21875, 23491, 20477, 40600,
            20466, 21088, 15878, 21201, 22375, 20566, 22967,
            24082, 38856, 40363, 36700, 21609, 38836, 39232,
            38842, 21292, 24880, 26924, 21466, 39946, 40194,
            19515, 38465, 27008, 20646, 30022, 137069, 39386,
            21107, null, 37209, 38529, 37212, null, 37201,
            167575, 25471, 159011, 27338, 22033, 37262, 30074,
            25221, 132092, 29519, 31856, 154657, 146685, null,
            149785, 30422, 39837, 20010, 134356, 33726, 34882,
            null, 23626, 27072, 20717, 22394, 21023, 24053,
            20174, 27697, 131570, 20281, 21660, 21722, 21146,
            36226, 13822, 24332, 13811, null, 27474, 37244,
            40869, 39831, 38958, 39092, 39610, 40616, 40580,
            29050, 31508, null, 27642, 34840, 32632, null,
            22048, 173642, 36471, 40787, null, 36308, 36431,
            40476, 36353, 25218, 164733, 36392, 36469, 31443,
            150135, 31294, 30936, 27882, 35431, 30215, 166490,
            40742, 27854, 34774, 30147, 172722, 30803, 194624,
            36108, 29410, 29553, 35629, 29442, 29937, 36075,
            150203, 34351, 24506, 34976, 17591, null, 137275,
            159237, null, 35454, 140571, null, 24829, 30311,
            39639, 40260, 37742, 39823, 34805, null, 34831,
            36087, 29484, 38689, 39856, 13782, 29362, 19463,
            31825, 39242, 155993, 24921, 19460, 40598, 24957,
            null, 22367, 24943, 25254, 25145, 25294, 14940,
            25058, 21418, 144373, 25444, 26626, 13778, 23895,
            166850, 36826, 167481, null, 20697, 138566, 30982,
            21298, 38456, 134971, 16485, null, 30718, null,
            31938, 155418, 31962, 31277, 32870, 32867, 32077,
            29957, 29938, 35220, 33306, 26380, 32866, 160902,
            32859, 29936, 33027, 30500, 35209, 157644, 30035,
            159441, 34729, 34766, 33224, 34700, 35401, 36013,
            35651, 30507, 29944, 34010, 13877, 27058, 36262,
            null, 35241, 29800, 28089, 34753, 147473, 29927,
            15835, 29046, 24740, 24988, 15569, 29026, 24695,
            null, 32625, 166701, 29264, 24809, 19326, 21024,
            15384, 146631, 155351, 161366, 152881, 137540,
            135934, 170243, 159196, 159917, 23745, 156077,
            166415, 145015, 131310, 157766, 151310, 17762,
            23327, 156492, 40784, 40614, 156267, 12288, 65292,
            12289, 12290, 65294, 8231, 65307, 65306, 65311,
            65281, 65072, 8230, 8229, 65104, 65105, 65106, 183,
            65108, 65109, 65110, 65111, 65372, 8211, 65073,
            8212, 65075, 9588, 65076, 65103, 65288, 65289,
            65077, 65078, 65371, 65373, 65079, 65080, 12308,
            12309, 65081, 65082, 12304, 12305, 65083, 65084,
            12298, 12299, 65085, 65086, 12296, 12297, 65087,
            65088, 12300, 12301, 65089, 65090, 12302, 12303,
            65091, 65092, 65113, 65114, 65115, 65116, 65117,
            65118, 8216, 8217, 8220, 8221, 12317, 12318, 8245,
            8242, 65283, 65286, 65290, 8251, 167, 12291, 9675,
            9679, 9651, 9650, 9678, 9734, 9733, 9671, 9670,
            9633, 9632, 9661, 9660, 12963, 8453, 175, 65507,
            65343, 717, 65097, 65098, 65101, 65102, 65099,
            65100, 65119, 65120, 65121, 65291, 65293, 215, 247,
            177, 8730, 65308, 65310, 65309, 8806, 8807, 8800,
            8734, 8786, 8801, 65122, 65123, 65124, 65125, 65126,
            65374, 8745, 8746, 8869, 8736, 8735, 8895, 13266,
            13265, 8747, 8750, 8757, 8756, 9792, 9794, 8853,
            8857, 8593, 8595, 8592, 8594, 8598, 8599, 8601,
            8600, 8741, 8739, 65295, 65340, 8725, 65128, 65284,
            65509, 12306, 65504, 65505, 65285, 65312, 8451,
            8457, 65129, 65130, 65131, 13269, 13212, 13213,
            13214, 13262, 13217, 13198, 13199, 13252, 176,
            20825, 20827, 20830, 20829, 20833, 20835, 21991,
            29929, 31950, 9601, 9602, 9603, 9604, 9605, 9606,
            9607, 9608, 9615, 9614, 9613, 9612, 9611, 9610,
            9609, 9532, 9524, 9516, 9508, 9500, 9620, 9472,
            9474, 9621, 9484, 9488, 9492, 9496, 9581, 9582,
            9584, 9583, 9552, 9566, 9578, 9569, 9698, 9699,
            9701, 9700, 9585, 9586, 9587, 65296, 65297, 65298,
            65299, 65300, 65301, 65302, 65303, 65304, 65305,
            8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551,
            8552, 8553, 12321, 12322, 12323, 12324, 12325,
            12326, 12327, 12328, 12329, 21313, 21316, 21317,
            65313, 65314, 65315, 65316, 65317, 65318, 65319,
            65320, 65321, 65322, 65323, 65324, 65325, 65326,
            65327, 65328, 65329, 65330, 65331, 65332, 65333,
            65334, 65335, 65336, 65337, 65338, 65345, 65346,
            65347, 65348, 65349, 65350, 65351, 65352, 65353,
            65354, 65355, 65356, 65357, 65358, 65359, 65360,
            65361, 65362, 65363, 65364, 65365, 65366, 65367,
            65368, 65369, 65370, 913, 914, 915, 916, 917, 918,
            919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
            929, 931, 932, 933, 934, 935, 936, 937, 945, 946,
            947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
            957, 958, 959, 960, 961, 963, 964, 965, 966, 967,
            968, 969, 12549, 12550, 12551, 12552, 12553, 12554,
            12555, 12556, 12557, 12558, 12559, 12560, 12561,
            12562, 12563, 12564, 12565, 12566, 12567, 12568,
            12569, 12570, 12571, 12572, 12573, 12574, 12575,
            12576, 12577, 12578, 12579, 12580, 12581, 12582,
            12583, 12584, 12585, 729, 713, 714, 711, 715, 9216,
            9217, 9218, 9219, 9220, 9221, 9222, 9223, 9224,
            9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232,
            9233, 9234, 9235, 9236, 9237, 9238, 9239, 9240,
            9241, 9242, 9243, 9244, 9245, 9246, 9247, 9249,
            8364, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 19968, 20057,
            19969, 19971, 20035, 20061, 20102, 20108, 20154,
            20799, 20837, 20843, 20960, 20992, 20993, 21147,
            21269, 21313, 21340, 21448, 19977, 19979, 19976,
            19978, 20011, 20024, 20961, 20037, 20040, 20063,
            20062, 20110, 20129, 20800, 20995, 21242, 21315,
            21449, 21475, 22303, 22763, 22805, 22823, 22899,
            23376, 23377, 23379, 23544, 23567, 23586, 23608,
            23665, 24029, 24037, 24049, 24050, 24051, 24062,
            24178, 24318, 24331, 24339, 25165, 19985, 19984,
            19981, 20013, 20016, 20025, 20043, 23609, 20104,
            20113, 20117, 20114, 20116, 20130, 20161, 20160,
            20163, 20166, 20167, 20173, 20170, 20171, 20164,
            20803, 20801, 20839, 20845, 20846, 20844, 20887,
            20982, 20998, 20999, 21000, 21243, 21246, 21247,
            21270, 21305, 21320, 21319, 21317, 21342, 21380,
            21451, 21450, 21453, 22764, 22825, 22827, 22826,
            22829, 23380, 23569, 23588, 23610, 23663, 24052,
            24187, 24319, 24340, 24341, 24515, 25096, 25142,
            25163, 25166, 25903, 25991, 26007, 26020, 26041,
            26085, 26352, 26376, 26408, 27424, 27490, 27513,
            27595, 27604, 27611, 27663, 27700, 28779, 29226,
            29238, 29243, 29255, 29273, 29275, 29356, 29579,
            19993, 19990, 19989, 19988, 19992, 20027, 20045,
            20047, 20046, 20197, 20184, 20180, 20181, 20182,
            20183, 20195, 20196, 20185, 20190, 20805, 20804,
            20873, 20874, 20908, 20985, 20986, 20984, 21002,
            21152, 21151, 21253, 21254, 21271, 21277, 20191,
            21322, 21321, 21345, 21344, 21359, 21358, 21435,
            21487, 21476, 21491, 21484, 21486, 21481, 21480,
            21500, 21496, 21493, 21483, 21478, 21482, 21490,
            21489, 21488, 21477, 21485, 21499, 22235, 22234,
            22806, 22830, 22833, 22900, 22902, 23381, 23427,
            23612, 24040, 24039, 24038, 24066, 24067, 24179,
            24188, 24321, 24344, 24343, 24517, 25098, 25171,
            25172, 25170, 25169, 26021, 26086, 26414, 26412,
            26410, 26411, 26413, 27491, 27597, 27665, 27664,
            27704, 27713, 27712, 27710, 29359, 29572, 29577,
            29916, 29926, 29976, 29983, 29992, 29993, 30000,
            30001, 30002, 30003, 30091, 30333, 30382, 30399,
            30446, 30683, 30690, 30707, 31034, 31166, 31348,
            31435, 19998, 19999, 20050, 20051, 20073, 20121,
            20132, 20134, 20133, 20223, 20233, 20249, 20234,
            20245, 20237, 20240, 20241, 20239, 20210, 20214,
            20219, 20208, 20211, 20221, 20225, 20235, 20809,
            20807, 20806, 20808, 20840, 20849, 20877, 20912,
            21015, 21009, 21010, 21006, 21014, 21155, 21256,
            21281, 21280, 21360, 21361, 21513, 21519, 21516,
            21514, 21520, 21505, 21515, 21508, 21521, 21517,
            21512, 21507, 21518, 21510, 21522, 22240, 22238,
            22237, 22323, 22320, 22312, 22317, 22316, 22319,
            22313, 22809, 22810, 22839, 22840, 22916, 22904,
            22915, 22909, 22905, 22914, 22913, 23383, 23384,
            23431, 23432, 23429, 23433, 23546, 23574, 23673,
            24030, 24070, 24182, 24180, 24335, 24347, 24537,
            24534, 25102, 25100, 25101, 25104, 25187, 25179,
            25176, 25910, 26089, 26088, 26092, 26093, 26354,
            26355, 26377, 26429, 26420, 26417, 26421, 27425,
            27492, 27515, 27670, 27741, 27735, 27737, 27743,
            27744, 27728, 27733, 27745, 27739, 27725, 27726,
            28784, 29279, 29277, 30334, 31481, 31859, 31992,
            32566, 32650, 32701, 32769, 32771, 32780, 32786,
            32819, 32895, 32905, 32907, 32908, 33251, 33258,
            33267, 33276, 33292, 33307, 33311, 33390, 33394,
            33406, 34411, 34880, 34892, 34915, 35199, 38433,
            20018, 20136, 20301, 20303, 20295, 20311, 20318,
            20276, 20315, 20309, 20272, 20304, 20305, 20285,
            20282, 20280, 20291, 20308, 20284, 20294, 20323,
            20316, 20320, 20271, 20302, 20278, 20313, 20317,
            20296, 20314, 20812, 20811, 20813, 20853, 20918,
            20919, 21029, 21028, 21033, 21034, 21032, 21163,
            21161, 21162, 21164, 21283, 21363, 21365, 21533,
            21549, 21534, 21566, 21542, 21582, 21543, 21574,
            21571, 21555, 21576, 21570, 21531, 21545, 21578,
            21561, 21563, 21560, 21550, 21557, 21558, 21536,
            21564, 21568, 21553, 21547, 21535, 21548, 22250,
            22256, 22244, 22251, 22346, 22353, 22336, 22349,
            22343, 22350, 22334, 22352, 22351, 22331, 22767,
            22846, 22941, 22930, 22952, 22942, 22947, 22937,
            22934, 22925, 22948, 22931, 22922, 22949, 23389,
            23388, 23386, 23387, 23436, 23435, 23439, 23596,
            23616, 23617, 23615, 23614, 23696, 23697, 23700,
            23692, 24043, 24076, 24207, 24199, 24202, 24311,
            24324, 24351, 24420, 24418, 24439, 24441, 24536,
            24524, 24535, 24525, 24561, 24555, 24568, 24554,
            25106, 25105, 25220, 25239, 25238, 25216, 25206,
            25225, 25197, 25226, 25212, 25214, 25209, 25203,
            25234, 25199, 25240, 25198, 25237, 25235, 25233,
            25222, 25913, 25915, 25912, 26097, 26356, 26463,
            26446, 26447, 26448, 26449, 26460, 26454, 26462,
            26441, 26438, 26464, 26451, 26455, 27493, 27599,
            27714, 27742, 27801, 27777, 27784, 27785, 27781,
            27803, 27754, 27770, 27792, 27760, 27788, 27752,
            27798, 27794, 27773, 27779, 27762, 27774, 27764,
            27782, 27766, 27789, 27796, 27800, 27778, 28790,
            28796, 28797, 28792, 29282, 29281, 29280, 29380,
            29378, 29590, 29996, 29995, 30007, 30008, 30338,
            30447, 30691, 31169, 31168, 31167, 31350, 31995,
            32597, 32918, 32915, 32925, 32920, 32923, 32922,
            32946, 33391, 33426, 33419, 33421, 35211, 35282,
            35328, 35895, 35910, 35925, 35997, 36196, 36208,
            36275, 36523, 36554, 36763, 36784, 36802, 36806,
            36805, 36804, 24033, 37009, 37026, 37034, 37030,
            37027, 37193, 37318, 37324, 38450, 38446, 38449,
            38442, 38444, 20006, 20054, 20083, 20107, 20123,
            20126, 20139, 20140, 20335, 20381, 20365, 20339,
            20351, 20332, 20379, 20363, 20358, 20355, 20336,
            20341, 20360, 20329, 20347, 20374, 20350, 20367,
            20369, 20346, 20820, 20818, 20821, 20841, 20855,
            20854, 20856, 20925, 20989, 21051, 21048, 21047,
            21050, 21040, 21038, 21046, 21057, 21182, 21179,
            21330, 21332, 21331, 21329, 21350, 21367, 21368,
            21369, 21462, 21460, 21463, 21619, 21621, 21654,
            21624, 21653, 21632, 21627, 21623, 21636, 21650,
            21638, 21628, 21648, 21617, 21622, 21644, 21658,
            21602, 21608, 21643, 21629, 21646, 22266, 22403,
            22391, 22378, 22377, 22369, 22374, 22372, 22396,
            22812, 22857, 22855, 22856, 22852, 22868, 22974,
            22971, 22996, 22969, 22958, 22993, 22982, 22992,
            22989, 22987, 22995, 22986, 22959, 22963, 22994,
            22981, 23391, 23396, 23395, 23447, 23450, 23448,
            23452, 23449, 23451, 23578, 23624, 23621, 23622,
            23735, 23713, 23736, 23721, 23723, 23729, 23731,
            24088, 24090, 24086, 24085, 24091, 24081, 24184,
            24218, 24215, 24220, 24213, 24214, 24310, 24358,
            24359, 24361, 24448, 24449, 24447, 24444, 24541,
            24544, 24573, 24565, 24575, 24591, 24596, 24623,
            24629, 24598, 24618, 24597, 24609, 24615, 24617,
            24619, 24603, 25110, 25109, 25151, 25150, 25152,
            25215, 25289, 25292, 25284, 25279, 25282, 25273,
            25298, 25307, 25259, 25299, 25300, 25291, 25288,
            25256, 25277, 25276, 25296, 25305, 25287, 25293,
            25269, 25306, 25265, 25304, 25302, 25303, 25286,
            25260, 25294, 25918, 26023, 26044, 26106, 26132,
            26131, 26124, 26118, 26114, 26126, 26112, 26127,
            26133, 26122, 26119, 26381, 26379, 26477, 26507,
            26517, 26481, 26524, 26483, 26487, 26503, 26525,
            26519, 26479, 26480, 26495, 26505, 26494, 26512,
            26485, 26522, 26515, 26492, 26474, 26482, 27427,
            27494, 27495, 27519, 27667, 27675, 27875, 27880,
            27891, 27825, 27852, 27877, 27827, 27837, 27838,
            27836, 27874, 27819, 27861, 27859, 27832, 27844,
            27833, 27841, 27822, 27863, 27845, 27889, 27839,
            27835, 27873, 27867, 27850, 27820, 27887, 27868,
            27862, 27872, 28821, 28814, 28818, 28810, 28825,
            29228, 29229, 29240, 29256, 29287, 29289, 29376,
            29390, 29401, 29399, 29392, 29609, 29608, 29599,
            29611, 29605, 30013, 30109, 30105, 30106, 30340,
            30402, 30450, 30452, 30693, 30717, 31038, 31040,
            31041, 31177, 31176, 31354, 31353, 31482, 31998,
            32596, 32652, 32651, 32773, 32954, 32933, 32930,
            32945, 32929, 32939, 32937, 32948, 32938, 32943,
            33253, 33278, 33293, 33459, 33437, 33433, 33453,
            33469, 33439, 33465, 33457, 33452, 33445, 33455,
            33464, 33443, 33456, 33470, 33463, 34382, 34417,
            21021, 34920, 36555, 36814, 36820, 36817, 37045,
            37048, 37041, 37046, 37319, 37329, 38263, 38272,
            38428, 38464, 38463, 38459, 38468, 38466, 38585,
            38632, 38738, 38750, 20127, 20141, 20142, 20449,
            20405, 20399, 20415, 20448, 20433, 20431, 20445,
            20419, 20406, 20440, 20447, 20426, 20439, 20398,
            20432, 20420, 20418, 20442, 20430, 20446, 20407,
            20823, 20882, 20881, 20896, 21070, 21059, 21066,
            21069, 21068, 21067, 21063, 21191, 21193, 21187,
            21185, 21261, 21335, 21371, 21402, 21467, 21676,
            21696, 21672, 21710, 21705, 21688, 21670, 21683,
            21703, 21698, 21693, 21674, 21697, 21700, 21704,
            21679, 21675, 21681, 21691, 21673, 21671, 21695,
            22271, 22402, 22411, 22432, 22435, 22434, 22478,
            22446, 22419, 22869, 22865, 22863, 22862, 22864,
            23004, 23000, 23039, 23011, 23016, 23043, 23013,
            23018, 23002, 23014, 23041, 23035, 23401, 23459,
            23462, 23460, 23458, 23461, 23553, 23630, 23631,
            23629, 23627, 23769, 23762, 24055, 24093, 24101,
            24095, 24189, 24224, 24230, 24314, 24328, 24365,
            24421, 24456, 24453, 24458, 24459, 24455, 24460,
            24457, 24594, 24605, 24608, 24613, 24590, 24616,
            24653, 24688, 24680, 24674, 24646, 24643, 24684,
            24683, 24682, 24676, 25153, 25308, 25366, 25353,
            25340, 25325, 25345, 25326, 25341, 25351, 25329,
            25335, 25327, 25324, 25342, 25332, 25361, 25346,
            25919, 25925, 26027, 26045, 26082, 26149, 26157,
            26144, 26151, 26159, 26143, 26152, 26161, 26148,
            26359, 26623, 26579, 26609, 26580, 26576, 26604,
            26550, 26543, 26613, 26601, 26607, 26564, 26577,
            26548, 26586, 26597, 26552, 26575, 26590, 26611,
            26544, 26585, 26594, 26589, 26578, 27498, 27523,
            27526, 27573, 27602, 27607, 27679, 27849, 27915,
            27954, 27946, 27969, 27941, 27916, 27953, 27934,
            27927, 27963, 27965, 27966, 27958, 27931, 27893,
            27961, 27943, 27960, 27945, 27950, 27957, 27918,
            27947, 28843, 28858, 28851, 28844, 28847, 28845,
            28856, 28846, 28836, 29232, 29298, 29295, 29300,
            29417, 29408, 29409, 29623, 29642, 29627, 29618,
            29645, 29632, 29619, 29978, 29997, 30031, 30028,
            30030, 30027, 30123, 30116, 30117, 30114, 30115,
            30328, 30342, 30343, 30344, 30408, 30406, 30403,
            30405, 30465, 30457, 30456, 30473, 30475, 30462,
            30460, 30471, 30684, 30722, 30740, 30732, 30733,
            31046, 31049, 31048, 31047, 31161, 31162, 31185,
            31186, 31179, 31359, 31361, 31487, 31485, 31869,
            32002, 32005, 32000, 32009, 32007, 32004, 32006,
            32568, 32654, 32703, 32772, 32784, 32781, 32785,
            32822, 32982, 32997, 32986, 32963, 32964, 32972,
            32993, 32987, 32974, 32990, 32996, 32989, 33268,
            33314, 33511, 33539, 33541, 33507, 33499, 33510,
            33540, 33509, 33538, 33545, 33490, 33495, 33521,
            33537, 33500, 33492, 33489, 33502, 33491, 33503,
            33519, 33542, 34384, 34425, 34427, 34426, 34893,
            34923, 35201, 35284, 35336, 35330, 35331, 35998,
            36000, 36212, 36211, 36276, 36557, 36556, 36848,
            36838, 36834, 36842, 36837, 36845, 36843, 36836,
            36840, 37066, 37070, 37057, 37059, 37195, 37194,
            37325, 38274, 38480, 38475, 38476, 38477, 38754,
            38761, 38859, 38893, 38899, 38913, 39080, 39131,
            39135, 39318, 39321, 20056, 20147, 20492, 20493,
            20515, 20463, 20518, 20517, 20472, 20521, 20502,
            20486, 20540, 20511, 20506, 20498, 20497, 20474,
            20480, 20500, 20520, 20465, 20513, 20491, 20505,
            20504, 20467, 20462, 20525, 20522, 20478, 20523,
            20489, 20860, 20900, 20901, 20898, 20941, 20940,
            20934, 20939, 21078, 21084, 21076, 21083, 21085,
            21290, 21375, 21407, 21405, 21471, 21736, 21776,
            21761, 21815, 21756, 21733, 21746, 21766, 21754,
            21780, 21737, 21741, 21729, 21769, 21742, 21738,
            21734, 21799, 21767, 21757, 21775, 22275, 22276,
            22466, 22484, 22475, 22467, 22537, 22799, 22871,
            22872, 22874, 23057, 23064, 23068, 23071, 23067,
            23059, 23020, 23072, 23075, 23081, 23077, 23052,
            23049, 23403, 23640, 23472, 23475, 23478, 23476,
            23470, 23477, 23481, 23480, 23556, 23633, 23637,
            23632, 23789, 23805, 23803, 23786, 23784, 23792,
            23798, 23809, 23796, 24046, 24109, 24107, 24235,
            24237, 24231, 24369, 24466, 24465, 24464, 24665,
            24675, 24677, 24656, 24661, 24685, 24681, 24687,
            24708, 24735, 24730, 24717, 24724, 24716, 24709,
            24726, 25159, 25331, 25352, 25343, 25422, 25406,
            25391, 25429, 25410, 25414, 25423, 25417, 25402,
            25424, 25405, 25386, 25387, 25384, 25421, 25420,
            25928, 25929, 26009, 26049, 26053, 26178, 26185,
            26191, 26179, 26194, 26188, 26181, 26177, 26360,
            26388, 26389, 26391, 26657, 26680, 26696, 26694,
            26707, 26681, 26690, 26708, 26665, 26803, 26647,
            26700, 26705, 26685, 26612, 26704, 26688, 26684,
            26691, 26666, 26693, 26643, 26648, 26689, 27530,
            27529, 27575, 27683, 27687, 27688, 27686, 27684,
            27888, 28010, 28053, 28040, 28039, 28006, 28024,
            28023, 27993, 28051, 28012, 28041, 28014, 27994,
            28020, 28009, 28044, 28042, 28025, 28037, 28005,
            28052, 28874, 28888, 28900, 28889, 28872, 28879,
            29241, 29305, 29436, 29433, 29437, 29432, 29431,
            29574, 29677, 29705, 29678, 29664, 29674, 29662,
            30036, 30045, 30044, 30042, 30041, 30142, 30149,
            30151, 30130, 30131, 30141, 30140, 30137, 30146,
            30136, 30347, 30384, 30410, 30413, 30414, 30505,
            30495, 30496, 30504, 30697, 30768, 30759, 30776,
            30749, 30772, 30775, 30757, 30765, 30752, 30751,
            30770, 31061, 31056, 31072, 31071, 31062, 31070,
            31069, 31063, 31066, 31204, 31203, 31207, 31199,
            31206, 31209, 31192, 31364, 31368, 31449, 31494,
            31505, 31881, 32033, 32023, 32011, 32010, 32032,
            32034, 32020, 32016, 32021, 32026, 32028, 32013,
            32025, 32027, 32570, 32607, 32660, 32709, 32705,
            32774, 32792, 32789, 32793, 32791, 32829, 32831,
            33009, 33026, 33008, 33029, 33005, 33012, 33030,
            33016, 33011, 33032, 33021, 33034, 33020, 33007,
            33261, 33260, 33280, 33296, 33322, 33323, 33320,
            33324, 33467, 33579, 33618, 33620, 33610, 33592,
            33616, 33609, 33589, 33588, 33615, 33586, 33593,
            33590, 33559, 33600, 33585, 33576, 33603, 34388,
            34442, 34474, 34451, 34468, 34473, 34444, 34467,
            34460, 34928, 34935, 34945, 34946, 34941, 34937,
            35352, 35344, 35342, 35340, 35349, 35338, 35351,
            35347, 35350, 35343, 35345, 35912, 35962, 35961,
            36001, 36002, 36215, 36524, 36562, 36564, 36559,
            36785, 36865, 36870, 36855, 36864, 36858, 36852,
            36867, 36861, 36869, 36856, 37013, 37089, 37085,
            37090, 37202, 37197, 37196, 37336, 37341, 37335,
            37340, 37337, 38275, 38498, 38499, 38497, 38491,
            38493, 38500, 38488, 38494, 38587, 39138, 39340,
            39592, 39640, 39717, 39730, 39740, 20094, 20602,
            20605, 20572, 20551, 20547, 20556, 20570, 20553,
            20581, 20598, 20558, 20565, 20597, 20596, 20599,
            20559, 20495, 20591, 20589, 20828, 20885, 20976,
            21098, 21103, 21202, 21209, 21208, 21205, 21264,
            21263, 21273, 21311, 21312, 21310, 21443, 26364,
            21830, 21866, 21862, 21828, 21854, 21857, 21827,
            21834, 21809, 21846, 21839, 21845, 21807, 21860,
            21816, 21806, 21852, 21804, 21859, 21811, 21825,
            21847, 22280, 22283, 22281, 22495, 22533, 22538,
            22534, 22496, 22500, 22522, 22530, 22581, 22519,
            22521, 22816, 22882, 23094, 23105, 23113, 23142,
            23146, 23104, 23100, 23138, 23130, 23110, 23114,
            23408, 23495, 23493, 23492, 23490, 23487, 23494,
            23561, 23560, 23559, 23648, 23644, 23645, 23815,
            23814, 23822, 23835, 23830, 23842, 23825, 23849,
            23828, 23833, 23844, 23847, 23831, 24034, 24120,
            24118, 24115, 24119, 24247, 24248, 24246, 24245,
            24254, 24373, 24375, 24407, 24428, 24425, 24427,
            24471, 24473, 24478, 24472, 24481, 24480, 24476,
            24703, 24739, 24713, 24736, 24744, 24779, 24756,
            24806, 24765, 24773, 24763, 24757, 24796, 24764,
            24792, 24789, 24774, 24799, 24760, 24794, 24775,
            25114, 25115, 25160, 25504, 25511, 25458, 25494,
            25506, 25509, 25463, 25447, 25496, 25514, 25457,
            25513, 25481, 25475, 25499, 25451, 25512, 25476,
            25480, 25497, 25505, 25516, 25490, 25487, 25472,
            25467, 25449, 25448, 25466, 25949, 25942, 25937,
            25945, 25943, 21855, 25935, 25944, 25941, 25940,
            26012, 26011, 26028, 26063, 26059, 26060, 26062,
            26205, 26202, 26212, 26216, 26214, 26206, 26361,
            21207, 26395, 26753, 26799, 26786, 26771, 26805,
            26751, 26742, 26801, 26791, 26775, 26800, 26755,
            26820, 26797, 26758, 26757, 26772, 26781, 26792,
            26783, 26785, 26754, 27442, 27578, 27627, 27628,
            27691, 28046, 28092, 28147, 28121, 28082, 28129,
            28108, 28132, 28155, 28154, 28165, 28103, 28107,
            28079, 28113, 28078, 28126, 28153, 28088, 28151,
            28149, 28101, 28114, 28186, 28085, 28122, 28139,
            28120, 28138, 28145, 28142, 28136, 28102, 28100,
            28074, 28140, 28095, 28134, 28921, 28937, 28938,
            28925, 28911, 29245, 29309, 29313, 29468, 29467,
            29462, 29459, 29465, 29575, 29701, 29706, 29699,
            29702, 29694, 29709, 29920, 29942, 29943, 29980,
            29986, 30053, 30054, 30050, 30064, 30095, 30164,
            30165, 30133, 30154, 30157, 30350, 30420, 30418,
            30427, 30519, 30526, 30524, 30518, 30520, 30522,
            30827, 30787, 30798, 31077, 31080, 31085, 31227,
            31378, 31381, 31520, 31528, 31515, 31532, 31526,
            31513, 31518, 31534, 31890, 31895, 31893, 32070,
            32067, 32113, 32046, 32057, 32060, 32064, 32048,
            32051, 32068, 32047, 32066, 32050, 32049, 32573,
            32670, 32666, 32716, 32718, 32722, 32796, 32842,
            32838, 33071, 33046, 33059, 33067, 33065, 33072,
            33060, 33282, 33333, 33335, 33334, 33337, 33678,
            33694, 33688, 33656, 33698, 33686, 33725, 33707,
            33682, 33674, 33683, 33673, 33696, 33655, 33659,
            33660, 33670, 33703, 34389, 24426, 34503, 34496,
            34486, 34500, 34485, 34502, 34507, 34481, 34479,
            34505, 34899, 34974, 34952, 34987, 34962, 34966,
            34957, 34955, 35219, 35215, 35370, 35357, 35363,
            35365, 35377, 35373, 35359, 35355, 35362, 35913,
            35930, 36009, 36012, 36011, 36008, 36010, 36007,
            36199, 36198, 36286, 36282, 36571, 36575, 36889,
            36877, 36890, 36887, 36899, 36895, 36893, 36880,
            36885, 36894, 36896, 36879, 36898, 36886, 36891,
            36884, 37096, 37101, 37117, 37207, 37326, 37365,
            37350, 37347, 37351, 37357, 37353, 38281, 38506,
            38517, 38515, 38520, 38512, 38516, 38518, 38519,
            38508, 38592, 38634, 38633, 31456, 31455, 38914,
            38915, 39770, 40165, 40565, 40575, 40613, 40635,
            20642, 20621, 20613, 20633, 20625, 20608, 20630,
            20632, 20634, 26368, 20977, 21106, 21108, 21109,
            21097, 21214, 21213, 21211, 21338, 21413, 21883,
            21888, 21927, 21884, 21898, 21917, 21912, 21890,
            21916, 21930, 21908, 21895, 21899, 21891, 21939,
            21934, 21919, 21822, 21938, 21914, 21947, 21932,
            21937, 21886, 21897, 21931, 21913, 22285, 22575,
            22570, 22580, 22564, 22576, 22577, 22561, 22557,
            22560, 22777, 22778, 22880, 23159, 23194, 23167,
            23186, 23195, 23207, 23411, 23409, 23506, 23500,
            23507, 23504, 23562, 23563, 23601, 23884, 23888,
            23860, 23879, 24061, 24133, 24125, 24128, 24131,
            24190, 24266, 24257, 24258, 24260, 24380, 24429,
            24489, 24490, 24488, 24785, 24801, 24754, 24758,
            24800, 24860, 24867, 24826, 24853, 24816, 24827,
            24820, 24936, 24817, 24846, 24822, 24841, 24832,
            24850, 25119, 25161, 25507, 25484, 25551, 25536,
            25577, 25545, 25542, 25549, 25554, 25571, 25552,
            25569, 25558, 25581, 25582, 25462, 25588, 25578,
            25563, 25682, 25562, 25593, 25950, 25958, 25954,
            25955, 26001, 26000, 26031, 26222, 26224, 26228,
            26230, 26223, 26257, 26234, 26238, 26231, 26366,
            26367, 26399, 26397, 26874, 26837, 26848, 26840,
            26839, 26885, 26847, 26869, 26862, 26855, 26873,
            26834, 26866, 26851, 26827, 26829, 26893, 26898,
            26894, 26825, 26842, 26990, 26875, 27454, 27450,
            27453, 27544, 27542, 27580, 27631, 27694, 27695,
            27692, 28207, 28216, 28244, 28193, 28210, 28263,
            28234, 28192, 28197, 28195, 28187, 28251, 28248,
            28196, 28246, 28270, 28205, 28198, 28271, 28212,
            28237, 28218, 28204, 28227, 28189, 28222, 28363,
            28297, 28185, 28238, 28259, 28228, 28274, 28265,
            28255, 28953, 28954, 28966, 28976, 28961, 28982,
            29038, 28956, 29260, 29316, 29312, 29494, 29477,
            29492, 29481, 29754, 29738, 29747, 29730, 29733,
            29749, 29750, 29748, 29743, 29723, 29734, 29736,
            29989, 29990, 30059, 30058, 30178, 30171, 30179,
            30169, 30168, 30174, 30176, 30331, 30332, 30358,
            30355, 30388, 30428, 30543, 30701, 30813, 30828,
            30831, 31245, 31240, 31243, 31237, 31232, 31384,
            31383, 31382, 31461, 31459, 31561, 31574, 31558,
            31568, 31570, 31572, 31565, 31563, 31567, 31569,
            31903, 31909, 32094, 32080, 32104, 32085, 32043,
            32110, 32114, 32097, 32102, 32098, 32112, 32115,
            21892, 32724, 32725, 32779, 32850, 32901, 33109,
            33108, 33099, 33105, 33102, 33081, 33094, 33086,
            33100, 33107, 33140, 33298, 33308, 33769, 33795,
            33784, 33805, 33760, 33733, 33803, 33729, 33775,
            33777, 33780, 33879, 33802, 33776, 33804, 33740,
            33789, 33778, 33738, 33848, 33806, 33796, 33756,
            33799, 33748, 33759, 34395, 34527, 34521, 34541,
            34516, 34523, 34532, 34512, 34526, 34903, 35009,
            35010, 34993, 35203, 35222, 35387, 35424, 35413,
            35422, 35388, 35393, 35412, 35419, 35408, 35398,
            35380, 35386, 35382, 35414, 35937, 35970, 36015,
            36028, 36019, 36029, 36033, 36027, 36032, 36020,
            36023, 36022, 36031, 36024, 36234, 36229, 36225,
            36302, 36317, 36299, 36314, 36305, 36300, 36315,
            36294, 36603, 36600, 36604, 36764, 36910, 36917,
            36913, 36920, 36914, 36918, 37122, 37109, 37129,
            37118, 37219, 37221, 37327, 37396, 37397, 37411,
            37385, 37406, 37389, 37392, 37383, 37393, 38292,
            38287, 38283, 38289, 38291, 38290, 38286, 38538,
            38542, 38539, 38525, 38533, 38534, 38541, 38514,
            38532, 38593, 38597, 38596, 38598, 38599, 38639,
            38642, 38860, 38917, 38918, 38920, 39143, 39146,
            39151, 39145, 39154, 39149, 39342, 39341, 40643,
            40653, 40657, 20098, 20653, 20661, 20658, 20659,
            20677, 20670, 20652, 20663, 20667, 20655, 20679,
            21119, 21111, 21117, 21215, 21222, 21220, 21218,
            21219, 21295, 21983, 21992, 21971, 21990, 21966,
            21980, 21959, 21969, 21987, 21988, 21999, 21978,
            21985, 21957, 21958, 21989, 21961, 22290, 22291,
            22622, 22609, 22616, 22615, 22618, 22612, 22635,
            22604, 22637, 22602, 22626, 22610, 22603, 22887,
            23233, 23241, 23244, 23230, 23229, 23228, 23219,
            23234, 23218, 23913, 23919, 24140, 24185, 24265,
            24264, 24338, 24409, 24492, 24494, 24858, 24847,
            24904, 24863, 24819, 24859, 24825, 24833, 24840,
            24910, 24908, 24900, 24909, 24894, 24884, 24871,
            24845, 24838, 24887, 25121, 25122, 25619, 25662,
            25630, 25642, 25645, 25661, 25644, 25615, 25628,
            25620, 25613, 25654, 25622, 25623, 25606, 25964,
            26015, 26032, 26263, 26249, 26247, 26248, 26262,
            26244, 26264, 26253, 26371, 27028, 26989, 26970,
            26999, 26976, 26964, 26997, 26928, 27010, 26954,
            26984, 26987, 26974, 26963, 27001, 27014, 26973,
            26979, 26971, 27463, 27506, 27584, 27583, 27603,
            27645, 28322, 28335, 28371, 28342, 28354, 28304,
            28317, 28359, 28357, 28325, 28312, 28348, 28346,
            28331, 28369, 28310, 28316, 28356, 28372, 28330,
            28327, 28340, 29006, 29017, 29033, 29028, 29001,
            29031, 29020, 29036, 29030, 29004, 29029, 29022,
            28998, 29032, 29014, 29242, 29266, 29495, 29509,
            29503, 29502, 29807, 29786, 29781, 29791, 29790,
            29761, 29759, 29785, 29787, 29788, 30070, 30072,
            30208, 30192, 30209, 30194, 30193, 30202, 30207,
            30196, 30195, 30430, 30431, 30555, 30571, 30566,
            30558, 30563, 30585, 30570, 30572, 30556, 30565,
            30568, 30562, 30702, 30862, 30896, 30871, 30872,
            30860, 30857, 30844, 30865, 30867, 30847, 31098,
            31103, 31105, 33836, 31165, 31260, 31258, 31264,
            31252, 31263, 31262, 31391, 31392, 31607, 31680,
            31584, 31598, 31591, 31921, 31923, 31925, 32147,
            32121, 32145, 32129, 32143, 32091, 32622, 32617,
            32618, 32626, 32681, 32680, 32676, 32854, 32856,
            32902, 32900, 33137, 33136, 33144, 33125, 33134,
            33139, 33131, 33145, 33146, 33126, 33285, 33351,
            33922, 33911, 33853, 33841, 33909, 33894, 33899,
            33865, 33900, 33883, 33852, 33845, 33889, 33891,
            33897, 33901, 33862, 34398, 34396, 34399, 34553,
            34579, 34568, 34567, 34560, 34558, 34555, 34562,
            34563, 34566, 34570, 34905, 35039, 35028, 35033,
            35036, 35032, 35037, 35041, 35018, 35029, 35026,
            35228, 35299, 35435, 35442, 35443, 35430, 35433,
            35440, 35463, 35452, 35427, 35488, 35441, 35461,
            35437, 35426, 35438, 35436, 35449, 35451, 35390,
            35432, 35938, 35978, 35977, 36042, 36039, 36040,
            36036, 36018, 36035, 36034, 36037, 36321, 36319,
            36328, 36335, 36339, 36346, 36330, 36324, 36326,
            36530, 36611, 36617, 36606, 36618, 36767, 36786,
            36939, 36938, 36947, 36930, 36948, 36924, 36949,
            36944, 36935, 36943, 36942, 36941, 36945, 36926,
            36929, 37138, 37143, 37228, 37226, 37225, 37321,
            37431, 37463, 37432, 37437, 37440, 37438, 37467,
            37451, 37476, 37457, 37428, 37449, 37453, 37445,
            37433, 37439, 37466, 38296, 38552, 38548, 38549,
            38605, 38603, 38601, 38602, 38647, 38651, 38649,
            38646, 38742, 38772, 38774, 38928, 38929, 38931,
            38922, 38930, 38924, 39164, 39156, 39165, 39166,
            39347, 39345, 39348, 39649, 40169, 40578, 40718,
            40723, 40736, 20711, 20718, 20709, 20694, 20717,
            20698, 20693, 20687, 20689, 20721, 20686, 20713,
            20834, 20979, 21123, 21122, 21297, 21421, 22014,
            22016, 22043, 22039, 22013, 22036, 22022, 22025,
            22029, 22030, 22007, 22038, 22047, 22024, 22032,
            22006, 22296, 22294, 22645, 22654, 22659, 22675,
            22666, 22649, 22661, 22653, 22781, 22821, 22818,
            22820, 22890, 22889, 23265, 23270, 23273, 23255,
            23254, 23256, 23267, 23413, 23518, 23527, 23521,
            23525, 23526, 23528, 23522, 23524, 23519, 23565,
            23650, 23940, 23943, 24155, 24163, 24149, 24151,
            24148, 24275, 24278, 24330, 24390, 24432, 24505,
            24903, 24895, 24907, 24951, 24930, 24931, 24927,
            24922, 24920, 24949, 25130, 25735, 25688, 25684,
            25764, 25720, 25695, 25722, 25681, 25703, 25652,
            25709, 25723, 25970, 26017, 26071, 26070, 26274,
            26280, 26269, 27036, 27048, 27029, 27073, 27054,
            27091, 27083, 27035, 27063, 27067, 27051, 27060,
            27088, 27085, 27053, 27084, 27046, 27075, 27043,
            27465, 27468, 27699, 28467, 28436, 28414, 28435,
            28404, 28457, 28478, 28448, 28460, 28431, 28418,
            28450, 28415, 28399, 28422, 28465, 28472, 28466,
            28451, 28437, 28459, 28463, 28552, 28458, 28396,
            28417, 28402, 28364, 28407, 29076, 29081, 29053,
            29066, 29060, 29074, 29246, 29330, 29334, 29508,
            29520, 29796, 29795, 29802, 29808, 29805, 29956,
            30097, 30247, 30221, 30219, 30217, 30227, 30433,
            30435, 30596, 30589, 30591, 30561, 30913, 30879,
            30887, 30899, 30889, 30883, 31118, 31119, 31117,
            31278, 31281, 31402, 31401, 31469, 31471, 31649,
            31637, 31627, 31605, 31639, 31645, 31636, 31631,
            31672, 31623, 31620, 31929, 31933, 31934, 32187,
            32176, 32156, 32189, 32190, 32160, 32202, 32180,
            32178, 32177, 32186, 32162, 32191, 32181, 32184,
            32173, 32210, 32199, 32172, 32624, 32736, 32737,
            32735, 32862, 32858, 32903, 33104, 33152, 33167,
            33160, 33162, 33151, 33154, 33255, 33274, 33287,
            33300, 33310, 33355, 33993, 33983, 33990, 33988,
            33945, 33950, 33970, 33948, 33995, 33976, 33984,
            34003, 33936, 33980, 34001, 33994, 34623, 34588,
            34619, 34594, 34597, 34612, 34584, 34645, 34615,
            34601, 35059, 35074, 35060, 35065, 35064, 35069,
            35048, 35098, 35055, 35494, 35468, 35486, 35491,
            35469, 35489, 35475, 35492, 35498, 35493, 35496,
            35480, 35473, 35482, 35495, 35946, 35981, 35980,
            36051, 36049, 36050, 36203, 36249, 36245, 36348,
            36628, 36626, 36629, 36627, 36771, 36960, 36952,
            36956, 36963, 36953, 36958, 36962, 36957, 36955,
            37145, 37144, 37150, 37237, 37240, 37239, 37236,
            37496, 37504, 37509, 37528, 37526, 37499, 37523,
            37532, 37544, 37500, 37521, 38305, 38312, 38313,
            38307, 38309, 38308, 38553, 38556, 38555, 38604,
            38610, 38656, 38780, 38789, 38902, 38935, 38936,
            39087, 39089, 39171, 39173, 39180, 39177, 39361,
            39599, 39600, 39654, 39745, 39746, 40180, 40182,
            40179, 40636, 40763, 40778, 20740, 20736, 20731,
            20725, 20729, 20738, 20744, 20745, 20741, 20956,
            21127, 21128, 21129, 21133, 21130, 21232, 21426,
            22062, 22075, 22073, 22066, 22079, 22068, 22057,
            22099, 22094, 22103, 22132, 22070, 22063, 22064,
            22656, 22687, 22686, 22707, 22684, 22702, 22697,
            22694, 22893, 23305, 23291, 23307, 23285, 23308,
            23304, 23534, 23532, 23529, 23531, 23652, 23653,
            23965, 23956, 24162, 24159, 24161, 24290, 24282,
            24287, 24285, 24291, 24288, 24392, 24433, 24503,
            24501, 24950, 24935, 24942, 24925, 24917, 24962,
            24956, 24944, 24939, 24958, 24999, 24976, 25003,
            24974, 25004, 24986, 24996, 24980, 25006, 25134,
            25705, 25711, 25721, 25758, 25778, 25736, 25744,
            25776, 25765, 25747, 25749, 25769, 25746, 25774,
            25773, 25771, 25754, 25772, 25753, 25762, 25779,
            25973, 25975, 25976, 26286, 26283, 26292, 26289,
            27171, 27167, 27112, 27137, 27166, 27161, 27133,
            27169, 27155, 27146, 27123, 27138, 27141, 27117,
            27153, 27472, 27470, 27556, 27589, 27590, 28479,
            28540, 28548, 28497, 28518, 28500, 28550, 28525,
            28507, 28536, 28526, 28558, 28538, 28528, 28516,
            28567, 28504, 28373, 28527, 28512, 28511, 29087,
            29100, 29105, 29096, 29270, 29339, 29518, 29527,
            29801, 29835, 29827, 29822, 29824, 30079, 30240,
            30249, 30239, 30244, 30246, 30241, 30242, 30362,
            30394, 30436, 30606, 30599, 30604, 30609, 30603,
            30923, 30917, 30906, 30922, 30910, 30933, 30908,
            30928, 31295, 31292, 31296, 31293, 31287, 31291,
            31407, 31406, 31661, 31665, 31684, 31668, 31686,
            31687, 31681, 31648, 31692, 31946, 32224, 32244,
            32239, 32251, 32216, 32236, 32221, 32232, 32227,
            32218, 32222, 32233, 32158, 32217, 32242, 32249,
            32629, 32631, 32687, 32745, 32806, 33179, 33180,
            33181, 33184, 33178, 33176, 34071, 34109, 34074,
            34030, 34092, 34093, 34067, 34065, 34083, 34081,
            34068, 34028, 34085, 34047, 34054, 34690, 34676,
            34678, 34656, 34662, 34680, 34664, 34649, 34647,
            34636, 34643, 34907, 34909, 35088, 35079, 35090,
            35091, 35093, 35082, 35516, 35538, 35527, 35524,
            35477, 35531, 35576, 35506, 35529, 35522, 35519,
            35504, 35542, 35533, 35510, 35513, 35547, 35916,
            35918, 35948, 36064, 36062, 36070, 36068, 36076,
            36077, 36066, 36067, 36060, 36074, 36065, 36205,
            36255, 36259, 36395, 36368, 36381, 36386, 36367,
            36393, 36383, 36385, 36382, 36538, 36637, 36635,
            36639, 36649, 36646, 36650, 36636, 36638, 36645,
            36969, 36974, 36968, 36973, 36983, 37168, 37165,
            37159, 37169, 37255, 37257, 37259, 37251, 37573,
            37563, 37559, 37610, 37548, 37604, 37569, 37555,
            37564, 37586, 37575, 37616, 37554, 38317, 38321,
            38660, 38662, 38663, 38665, 38752, 38797, 38795,
            38799, 38945, 38955, 38940, 39091, 39178, 39187,
            39186, 39192, 39389, 39376, 39391, 39387, 39377,
            39381, 39378, 39385, 39607, 39662, 39663, 39719,
            39749, 39748, 39799, 39791, 40198, 40201, 40195,
            40617, 40638, 40654, 22696, 40786, 20754, 20760,
            20756, 20752, 20757, 20864, 20906, 20957, 21137,
            21139, 21235, 22105, 22123, 22137, 22121, 22116,
            22136, 22122, 22120, 22117, 22129, 22127, 22124,
            22114, 22134, 22721, 22718, 22727, 22725, 22894,
            23325, 23348, 23416, 23536, 23566, 24394, 25010,
            24977, 25001, 24970, 25037, 25014, 25022, 25034,
            25032, 25136, 25797, 25793, 25803, 25787, 25788,
            25818, 25796, 25799, 25794, 25805, 25791, 25810,
            25812, 25790, 25972, 26310, 26313, 26297, 26308,
            26311, 26296, 27197, 27192, 27194, 27225, 27243,
            27224, 27193, 27204, 27234, 27233, 27211, 27207,
            27189, 27231, 27208, 27481, 27511, 27653, 28610,
            28593, 28577, 28611, 28580, 28609, 28583, 28595,
            28608, 28601, 28598, 28582, 28576, 28596, 29118,
            29129, 29136, 29138, 29128, 29141, 29113, 29134,
            29145, 29148, 29123, 29124, 29544, 29852, 29859,
            29848, 29855, 29854, 29922, 29964, 29965, 30260,
            30264, 30266, 30439, 30437, 30624, 30622, 30623,
            30629, 30952, 30938, 30956, 30951, 31142, 31309,
            31310, 31302, 31308, 31307, 31418, 31705, 31761,
            31689, 31716, 31707, 31713, 31721, 31718, 31957,
            31958, 32266, 32273, 32264, 32283, 32291, 32286,
            32285, 32265, 32272, 32633, 32690, 32752, 32753,
            32750, 32808, 33203, 33193, 33192, 33275, 33288,
            33368, 33369, 34122, 34137, 34120, 34152, 34153,
            34115, 34121, 34157, 34154, 34142, 34691, 34719,
            34718, 34722, 34701, 34913, 35114, 35122, 35109,
            35115, 35105, 35242, 35238, 35558, 35578, 35563,
            35569, 35584, 35548, 35559, 35566, 35582, 35585,
            35586, 35575, 35565, 35571, 35574, 35580, 35947,
            35949, 35987, 36084, 36420, 36401, 36404, 36418,
            36409, 36405, 36667, 36655, 36664, 36659, 36776,
            36774, 36981, 36980, 36984, 36978, 36988, 36986,
            37172, 37266, 37664, 37686, 37624, 37683, 37679,
            37666, 37628, 37675, 37636, 37658, 37648, 37670,
            37665, 37653, 37678, 37657, 38331, 38567, 38568,
            38570, 38613, 38670, 38673, 38678, 38669, 38675,
            38671, 38747, 38748, 38758, 38808, 38960, 38968,
            38971, 38967, 38957, 38969, 38948, 39184, 39208,
            39198, 39195, 39201, 39194, 39405, 39394, 39409,
            39608, 39612, 39675, 39661, 39720, 39825, 40213,
            40227, 40230, 40232, 40210, 40219, 40664, 40660,
            40845, 40860, 20778, 20767, 20769, 20786, 21237,
            22158, 22144, 22160, 22149, 22151, 22159, 22741,
            22739, 22737, 22734, 23344, 23338, 23332, 23418,
            23607, 23656, 23996, 23994, 23997, 23992, 24171,
            24396, 24509, 25033, 25026, 25031, 25062, 25035,
            25138, 25140, 25806, 25802, 25816, 25824, 25840,
            25830, 25836, 25841, 25826, 25837, 25986, 25987,
            26329, 26326, 27264, 27284, 27268, 27298, 27292,
            27355, 27299, 27262, 27287, 27280, 27296, 27484,
            27566, 27610, 27656, 28632, 28657, 28639, 28640,
            28635, 28644, 28651, 28655, 28544, 28652, 28641,
            28649, 28629, 28654, 28656, 29159, 29151, 29166,
            29158, 29157, 29165, 29164, 29172, 29152, 29237,
            29254, 29552, 29554, 29865, 29872, 29862, 29864,
            30278, 30274, 30284, 30442, 30643, 30634, 30640,
            30636, 30631, 30637, 30703, 30967, 30970, 30964,
            30959, 30977, 31143, 31146, 31319, 31423, 31751,
            31757, 31742, 31735, 31756, 31712, 31968, 31964,
            31966, 31970, 31967, 31961, 31965, 32302, 32318,
            32326, 32311, 32306, 32323, 32299, 32317, 32305,
            32325, 32321, 32308, 32313, 32328, 32309, 32319,
            32303, 32580, 32755, 32764, 32881, 32882, 32880,
            32879, 32883, 33222, 33219, 33210, 33218, 33216,
            33215, 33213, 33225, 33214, 33256, 33289, 33393,
            34218, 34180, 34174, 34204, 34193, 34196, 34223,
            34203, 34183, 34216, 34186, 34407, 34752, 34769,
            34739, 34770, 34758, 34731, 34747, 34746, 34760,
            34763, 35131, 35126, 35140, 35128, 35133, 35244,
            35598, 35607, 35609, 35611, 35594, 35616, 35613,
            35588, 35600, 35905, 35903, 35955, 36090, 36093,
            36092, 36088, 36091, 36264, 36425, 36427, 36424,
            36426, 36676, 36670, 36674, 36677, 36671, 36991,
            36989, 36996, 36993, 36994, 36992, 37177, 37283,
            37278, 37276, 37709, 37762, 37672, 37749, 37706,
            37733, 37707, 37656, 37758, 37740, 37723, 37744,
            37722, 37716, 38346, 38347, 38348, 38344, 38342,
            38577, 38584, 38614, 38684, 38686, 38816, 38867,
            38982, 39094, 39221, 39425, 39423, 39854, 39851,
            39850, 39853, 40251, 40255, 40587, 40655, 40670,
            40668, 40669, 40667, 40766, 40779, 21474, 22165,
            22190, 22745, 22744, 23352, 24413, 25059, 25139,
            25844, 25842, 25854, 25862, 25850, 25851, 25847,
            26039, 26332, 26406, 27315, 27308, 27331, 27323,
            27320, 27330, 27310, 27311, 27487, 27512, 27567,
            28681, 28683, 28670, 28678, 28666, 28689, 28687,
            29179, 29180, 29182, 29176, 29559, 29557, 29863,
            29887, 29973, 30294, 30296, 30290, 30653, 30655,
            30651, 30652, 30990, 31150, 31329, 31330, 31328,
            31428, 31429, 31787, 31783, 31786, 31774, 31779,
            31777, 31975, 32340, 32341, 32350, 32346, 32353,
            32338, 32345, 32584, 32761, 32763, 32887, 32886,
            33229, 33231, 33290, 34255, 34217, 34253, 34256,
            34249, 34224, 34234, 34233, 34214, 34799, 34796,
            34802, 34784, 35206, 35250, 35316, 35624, 35641,
            35628, 35627, 35920, 36101, 36441, 36451, 36454,
            36452, 36447, 36437, 36544, 36681, 36685, 36999,
            36995, 37000, 37291, 37292, 37328, 37780, 37770,
            37782, 37794, 37811, 37806, 37804, 37808, 37784,
            37786, 37783, 38356, 38358, 38352, 38357, 38626,
            38620, 38617, 38619, 38622, 38692, 38819, 38822,
            38829, 38905, 38989, 38991, 38988, 38990, 38995,
            39098, 39230, 39231, 39229, 39214, 39333, 39438,
            39617, 39683, 39686, 39759, 39758, 39757, 39882,
            39881, 39933, 39880, 39872, 40273, 40285, 40288,
            40672, 40725, 40748, 20787, 22181, 22750, 22751,
            22754, 23541, 40848, 24300, 25074, 25079, 25078,
            25077, 25856, 25871, 26336, 26333, 27365, 27357,
            27354, 27347, 28699, 28703, 28712, 28698, 28701,
            28693, 28696, 29190, 29197, 29272, 29346, 29560,
            29562, 29885, 29898, 29923, 30087, 30086, 30303,
            30305, 30663, 31001, 31153, 31339, 31337, 31806,
            31807, 31800, 31805, 31799, 31808, 32363, 32365,
            32377, 32361, 32362, 32645, 32371, 32694, 32697,
            32696, 33240, 34281, 34269, 34282, 34261, 34276,
            34277, 34295, 34811, 34821, 34829, 34809, 34814,
            35168, 35167, 35158, 35166, 35649, 35676, 35672,
            35657, 35674, 35662, 35663, 35654, 35673, 36104,
            36106, 36476, 36466, 36487, 36470, 36460, 36474,
            36468, 36692, 36686, 36781, 37002, 37003, 37297,
            37294, 37857, 37841, 37855, 37827, 37832, 37852,
            37853, 37846, 37858, 37837, 37848, 37860, 37847,
            37864, 38364, 38580, 38627, 38698, 38695, 38753,
            38876, 38907, 39006, 39000, 39003, 39100, 39237,
            39241, 39446, 39449, 39693, 39912, 39911, 39894,
            39899, 40329, 40289, 40306, 40298, 40300, 40594,
            40599, 40595, 40628, 21240, 22184, 22199, 22198,
            22196, 22204, 22756, 23360, 23363, 23421, 23542,
            24009, 25080, 25082, 25880, 25876, 25881, 26342,
            26407, 27372, 28734, 28720, 28722, 29200, 29563,
            29903, 30306, 30309, 31014, 31018, 31020, 31019,
            31431, 31478, 31820, 31811, 31821, 31983, 31984,
            36782, 32381, 32380, 32386, 32588, 32768, 33242,
            33382, 34299, 34297, 34321, 34298, 34310, 34315,
            34311, 34314, 34836, 34837, 35172, 35258, 35320,
            35696, 35692, 35686, 35695, 35679, 35691, 36111,
            36109, 36489, 36481, 36485, 36482, 37300, 37323,
            37912, 37891, 37885, 38369, 38704, 39108, 39250,
            39249, 39336, 39467, 39472, 39479, 39477, 39955,
            39949, 40569, 40629, 40680, 40751, 40799, 40803,
            40801, 20791, 20792, 22209, 22208, 22210, 22804,
            23660, 24013, 25084, 25086, 25885, 25884, 26005,
            26345, 27387, 27396, 27386, 27570, 28748, 29211,
            29351, 29910, 29908, 30313, 30675, 31824, 32399,
            32396, 32700, 34327, 34349, 34330, 34851, 34850,
            34849, 34847, 35178, 35180, 35261, 35700, 35703,
            35709, 36115, 36490, 36493, 36491, 36703, 36783,
            37306, 37934, 37939, 37941, 37946, 37944, 37938,
            37931, 38370, 38712, 38713, 38706, 38911, 39015,
            39013, 39255, 39493, 39491, 39488, 39486, 39631,
            39764, 39761, 39981, 39973, 40367, 40372, 40386,
            40376, 40605, 40687, 40729, 40796, 40806, 40807,
            20796, 20795, 22216, 22218, 22217, 23423, 24020,
            24018, 24398, 25087, 25892, 27402, 27489, 28753,
            28760, 29568, 29924, 30090, 30318, 30316, 31155,
            31840, 31839, 32894, 32893, 33247, 35186, 35183,
            35324, 35712, 36118, 36119, 36497, 36499, 36705,
            37192, 37956, 37969, 37970, 38717, 38718, 38851,
            38849, 39019, 39253, 39509, 39501, 39634, 39706,
            40009, 39985, 39998, 39995, 40403, 40407, 40756,
            40812, 40810, 40852, 22220, 24022, 25088, 25891,
            25899, 25898, 26348, 27408, 29914, 31434, 31844,
            31843, 31845, 32403, 32406, 32404, 33250, 34360,
            34367, 34865, 35722, 37008, 37007, 37987, 37984,
            37988, 38760, 39023, 39260, 39514, 39515, 39511,
            39635, 39636, 39633, 40020, 40023, 40022, 40421,
            40607, 40692, 22225, 22761, 25900, 28766, 30321,
            30322, 30679, 32592, 32648, 34870, 34873, 34914,
            35731, 35730, 35734, 33399, 36123, 37312, 37994,
            38722, 38728, 38724, 38854, 39024, 39519, 39714,
            39768, 40031, 40441, 40442, 40572, 40573, 40711,
            40823, 40818, 24307, 27414, 28771, 31852, 31854,
            34875, 35264, 36513, 37313, 38002, 38000, 39025,
            39262, 39638, 39715, 40652, 28772, 30682, 35738,
            38007, 38857, 39522, 39525, 32412, 35740, 36522,
            37317, 38013, 38014, 38012, 40055, 40056, 40695,
            35924, 38015, 40474, 29224, 39530, 39729, 40475,
            40478, 31858, 9312, 9313, 9314, 9315, 9316, 9317,
            9318, 9319, 9320, 9321, 9332, 9333, 9334, 9335,
            9336, 9337, 9338, 9339, 9340, 9341, 8560, 8561,
            8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569,
            20022, 20031, 20101, 20128, 20866, 20886, 20907,
            21241, 21304, 21353, 21430, 22794, 23424, 24027,
            12083, 24191, 24308, 24400, 24417, 25908, 26080,
            30098, 30326, 36789, 38582, 168, 710, 12541, 12542,
            12445, 12446, 12291, 20189, 12293, 12294, 12295,
            12540, 65339, 65341, 10045, 12353, 12354, 12355,
            12356, 12357, 12358, 12359, 12360, 12361, 12362,
            12363, 12364, 12365, 12366, 12367, 12368, 12369,
            12370, 12371, 12372, 12373, 12374, 12375, 12376,
            12377, 12378, 12379, 12380, 12381, 12382, 12383,
            12384, 12385, 12386, 12387, 12388, 12389, 12390,
            12391, 12392, 12393, 12394, 12395, 12396, 12397,
            12398, 12399, 12400, 12401, 12402, 12403, 12404,
            12405, 12406, 12407, 12408, 12409, 12410, 12411,
            12412, 12413, 12414, 12415, 12416, 12417, 12418,
            12419, 12420, 12421, 12422, 12423, 12424, 12425,
            12426, 12427, 12428, 12429, 12430, 12431, 12432,
            12433, 12434, 12435, 12449, 12450, 12451, 12452,
            12453, 12454, 12455, 12456, 12457, 12458, 12459,
            12460, 12461, 12462, 12463, 12464, 12465, 12466,
            12467, 12468, 12469, 12470, 12471, 12472, 12473,
            12474, 12475, 12476, 12477, 12478, 12479, 12480,
            12481, 12482, 12483, 12484, 12485, 12486, 12487,
            12488, 12489, 12490, 12491, 12492, 12493, 12494,
            12495, 12496, 12497, 12498, 12499, 12500, 12501,
            12502, 12503, 12504, 12505, 12506, 12507, 12508,
            12509, 12510, 12511, 12512, 12513, 12514, 12515,
            12516, 12517, 12518, 12519, 12520, 12521, 12522,
            12523, 12524, 12525, 12526, 12527, 12528, 12529,
            12530, 12531, 12532, 12533, 12534, 1040, 1041, 1042,
            1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049,
            1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
            1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
            1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
            1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080,
            1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
            1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
            1097, 1098, 1099, 1100, 1101, 1102, 1103, 8679,
            8632, 8633, 12751, 131276, 20058, 131210, 20994,
            17553, 40880, 20872, 40881, 161287, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 65506, 65508,
            65287, 65282, 12849, 8470, 8481, 12443, 12444,
            11904, 11908, 11910, 11911, 11912, 11914, 11916,
            11917, 11925, 11932, 11933, 11941, 11943, 11946,
            11948, 11950, 11958, 11964, 11966, 11974, 11978,
            11980, 11981, 11983, 11990, 11991, 11998, 12003,
            null, null, null, 643, 592, 603, 596, 629, 339, 248,
            331, 650, 618, 20034, 20060, 20981, 21274, 21378,
            19975, 19980, 20039, 20109, 22231, 64012, 23662,
            24435, 19983, 20871, 19982, 20014, 20115, 20162,
            20169, 20168, 20888, 21244, 21356, 21433, 22304,
            22787, 22828, 23568, 24063, 26081, 27571, 27596,
            27668, 29247, 20017, 20028, 20200, 20188, 20201,
            20193, 20189, 20186, 21004, 21276, 21324, 22306,
            22307, 22807, 22831, 23425, 23428, 23570, 23611,
            23668, 23667, 24068, 24192, 24194, 24521, 25097,
            25168, 27669, 27702, 27715, 27711, 27707, 29358,
            29360, 29578, 31160, 32906, 38430, 20238, 20248,
            20268, 20213, 20244, 20209, 20224, 20215, 20232,
            20253, 20226, 20229, 20258, 20243, 20228, 20212,
            20242, 20913, 21011, 21001, 21008, 21158, 21282,
            21279, 21325, 21386, 21511, 22241, 22239, 22318,
            22314, 22324, 22844, 22912, 22908, 22917, 22907,
            22910, 22903, 22911, 23382, 23573, 23589, 23676,
            23674, 23675, 23678, 24031, 24181, 24196, 24322,
            24346, 24436, 24533, 24532, 24527, 25180, 25182,
            25188, 25185, 25190, 25186, 25177, 25184, 25178,
            25189, 26095, 26094, 26430, 26425, 26424, 26427,
            26426, 26431, 26428, 26419, 27672, 27718, 27730,
            27740, 27727, 27722, 27732, 27723, 27724, 28785,
            29278, 29364, 29365, 29582, 29994, 30335, 31349,
            32593, 33400, 33404, 33408, 33405, 33407, 34381,
            35198, 37017, 37015, 37016, 37019, 37012, 38434,
            38436, 38432, 38435, 20310, 20283, 20322, 20297,
            20307, 20324, 20286, 20327, 20306, 20319, 20289,
            20312, 20269, 20275, 20287, 20321, 20879, 20921,
            21020, 21022, 21025, 21165, 21166, 21257, 21347,
            21362, 21390, 21391, 21552, 21559, 21546, 21588,
            21573, 21529, 21532, 21541, 21528, 21565, 21583,
            21569, 21544, 21540, 21575, 22254, 22247, 22245,
            22337, 22341, 22348, 22345, 22347, 22354, 22790,
            22848, 22950, 22936, 22944, 22935, 22926, 22946,
            22928, 22927, 22951, 22945, 23438, 23442, 23592,
            23594, 23693, 23695, 23688, 23691, 23689, 23698,
            23690, 23686, 23699, 23701, 24032, 24074, 24078,
            24203, 24201, 24204, 24200, 24205, 24325, 24349,
            24440, 24438, 24530, 24529, 24528, 24557, 24552,
            24558, 24563, 24545, 24548, 24547, 24570, 24559,
            24567, 24571, 24576, 24564, 25146, 25219, 25228,
            25230, 25231, 25236, 25223, 25201, 25211, 25210,
            25200, 25217, 25224, 25207, 25213, 25202, 25204,
            25911, 26096, 26100, 26099, 26098, 26101, 26437,
            26439, 26457, 26453, 26444, 26440, 26461, 26445,
            26458, 26443, 27600, 27673, 27674, 27768, 27751,
            27755, 27780, 27787, 27791, 27761, 27759, 27753,
            27802, 27757, 27783, 27797, 27804, 27750, 27763,
            27749, 27771, 27790, 28788, 28794, 29283, 29375,
            29373, 29379, 29382, 29377, 29370, 29381, 29589,
            29591, 29587, 29588, 29586, 30010, 30009, 30100,
            30101, 30337, 31037, 32820, 32917, 32921, 32912,
            32914, 32924, 33424, 33423, 33413, 33422, 33425,
            33427, 33418, 33411, 33412, 35960, 36809, 36799,
            37023, 37025, 37029, 37022, 37031, 37024, 38448,
            38440, 38447, 38445, 20019, 20376, 20348, 20357,
            20349, 20352, 20359, 20342, 20340, 20361, 20356,
            20343, 20300, 20375, 20330, 20378, 20345, 20353,
            20344, 20368, 20380, 20372, 20382, 20370, 20354,
            20373, 20331, 20334, 20894, 20924, 20926, 21045,
            21042, 21043, 21062, 21041, 21180, 21258, 21259,
            21308, 21394, 21396, 21639, 21631, 21633, 21649,
            21634, 21640, 21611, 21626, 21630, 21605, 21612,
            21620, 21606, 21645, 21615, 21601, 21600, 21656,
            21603, 21607, 21604, 22263, 22265, 22383, 22386,
            22381, 22379, 22385, 22384, 22390, 22400, 22389,
            22395, 22387, 22388, 22370, 22376, 22397, 22796,
            22853, 22965, 22970, 22991, 22990, 22962, 22988,
            22977, 22966, 22972, 22979, 22998, 22961, 22973,
            22976, 22984, 22964, 22983, 23394, 23397, 23443,
            23445, 23620, 23623, 23726, 23716, 23712, 23733,
            23727, 23720, 23724, 23711, 23715, 23725, 23714,
            23722, 23719, 23709, 23717, 23734, 23728, 23718,
            24087, 24084, 24089, 24360, 24354, 24355, 24356,
            24404, 24450, 24446, 24445, 24542, 24549, 24621,
            24614, 24601, 24626, 24587, 24628, 24586, 24599,
            24627, 24602, 24606, 24620, 24610, 24589, 24592,
            24622, 24595, 24593, 24588, 24585, 24604, 25108,
            25149, 25261, 25268, 25297, 25278, 25258, 25270,
            25290, 25262, 25267, 25263, 25275, 25257, 25264,
            25272, 25917, 26024, 26043, 26121, 26108, 26116,
            26130, 26120, 26107, 26115, 26123, 26125, 26117,
            26109, 26129, 26128, 26358, 26378, 26501, 26476,
            26510, 26514, 26486, 26491, 26520, 26502, 26500,
            26484, 26509, 26508, 26490, 26527, 26513, 26521,
            26499, 26493, 26497, 26488, 26489, 26516, 27429,
            27520, 27518, 27614, 27677, 27795, 27884, 27883,
            27886, 27865, 27830, 27860, 27821, 27879, 27831,
            27856, 27842, 27834, 27843, 27846, 27885, 27890,
            27858, 27869, 27828, 27786, 27805, 27776, 27870,
            27840, 27952, 27853, 27847, 27824, 27897, 27855,
            27881, 27857, 28820, 28824, 28805, 28819, 28806,
            28804, 28817, 28822, 28802, 28826, 28803, 29290,
            29398, 29387, 29400, 29385, 29404, 29394, 29396,
            29402, 29388, 29393, 29604, 29601, 29613, 29606,
            29602, 29600, 29612, 29597, 29917, 29928, 30015,
            30016, 30014, 30092, 30104, 30383, 30451, 30449,
            30448, 30453, 30712, 30716, 30713, 30715, 30714,
            30711, 31042, 31039, 31173, 31352, 31355, 31483,
            31861, 31997, 32821, 32911, 32942, 32931, 32952,
            32949, 32941, 33312, 33440, 33472, 33451, 33434,
            33432, 33435, 33461, 33447, 33454, 33468, 33438,
            33466, 33460, 33448, 33441, 33449, 33474, 33444,
            33475, 33462, 33442, 34416, 34415, 34413, 34414,
            35926, 36818, 36811, 36819, 36813, 36822, 36821,
            36823, 37042, 37044, 37039, 37043, 37040, 38457,
            38461, 38460, 38458, 38467, 20429, 20421, 20435,
            20402, 20425, 20427, 20417, 20436, 20444, 20441,
            20411, 20403, 20443, 20423, 20438, 20410, 20416,
            20409, 20460, 21060, 21065, 21184, 21186, 21309,
            21372, 21399, 21398, 21401, 21400, 21690, 21665,
            21677, 21669, 21711, 21699, 33549, 21687, 21678,
            21718, 21686, 21701, 21702, 21664, 21616, 21692,
            21666, 21694, 21618, 21726, 21680, 22453, 22430,
            22431, 22436, 22412, 22423, 22429, 22427, 22420,
            22424, 22415, 22425, 22437, 22426, 22421, 22772,
            22797, 22867, 23009, 23006, 23022, 23040, 23025,
            23005, 23034, 23037, 23036, 23030, 23012, 23026,
            23031, 23003, 23017, 23027, 23029, 23008, 23038,
            23028, 23021, 23464, 23628, 23760, 23768, 23756,
            23767, 23755, 23771, 23774, 23770, 23753, 23751,
            23754, 23766, 23763, 23764, 23759, 23752, 23750,
            23758, 23775, 23800, 24057, 24097, 24098, 24099,
            24096, 24100, 24240, 24228, 24226, 24219, 24227,
            24229, 24327, 24366, 24406, 24454, 24631, 24633,
            24660, 24690, 24670, 24645, 24659, 24647, 24649,
            24667, 24652, 24640, 24642, 24671, 24612, 24644,
            24664, 24678, 24686, 25154, 25155, 25295, 25357,
            25355, 25333, 25358, 25347, 25323, 25337, 25359,
            25356, 25336, 25334, 25344, 25363, 25364, 25338,
            25365, 25339, 25328, 25921, 25923, 26026, 26047,
            26166, 26145, 26162, 26165, 26140, 26150, 26146,
            26163, 26155, 26170, 26141, 26164, 26169, 26158,
            26383, 26384, 26561, 26610, 26568, 26554, 26588,
            26555, 26616, 26584, 26560, 26551, 26565, 26603,
            26596, 26591, 26549, 26573, 26547, 26615, 26614,
            26606, 26595, 26562, 26553, 26574, 26599, 26608,
            26546, 26620, 26566, 26605, 26572, 26542, 26598,
            26587, 26618, 26569, 26570, 26563, 26602, 26571,
            27432, 27522, 27524, 27574, 27606, 27608, 27616,
            27680, 27681, 27944, 27956, 27949, 27935, 27964,
            27967, 27922, 27914, 27866, 27955, 27908, 27929,
            27962, 27930, 27921, 27904, 27933, 27970, 27905,
            27928, 27959, 27907, 27919, 27968, 27911, 27936,
            27948, 27912, 27938, 27913, 27920, 28855, 28831,
            28862, 28849, 28848, 28833, 28852, 28853, 28841,
            29249, 29257, 29258, 29292, 29296, 29299, 29294,
            29386, 29412, 29416, 29419, 29407, 29418, 29414,
            29411, 29573, 29644, 29634, 29640, 29637, 29625,
            29622, 29621, 29620, 29675, 29631, 29639, 29630,
            29635, 29638, 29624, 29643, 29932, 29934, 29998,
            30023, 30024, 30119, 30122, 30329, 30404, 30472,
            30467, 30468, 30469, 30474, 30455, 30459, 30458,
            30695, 30696, 30726, 30737, 30738, 30725, 30736,
            30735, 30734, 30729, 30723, 30739, 31050, 31052,
            31051, 31045, 31044, 31189, 31181, 31183, 31190,
            31182, 31360, 31358, 31441, 31488, 31489, 31866,
            31864, 31865, 31871, 31872, 31873, 32003, 32008,
            32001, 32600, 32657, 32653, 32702, 32775, 32782,
            32783, 32788, 32823, 32984, 32967, 32992, 32977,
            32968, 32962, 32976, 32965, 32995, 32985, 32988,
            32970, 32981, 32969, 32975, 32983, 32998, 32973,
            33279, 33313, 33428, 33497, 33534, 33529, 33543,
            33512, 33536, 33493, 33594, 33515, 33494, 33524,
            33516, 33505, 33522, 33525, 33548, 33531, 33526,
            33520, 33514, 33508, 33504, 33530, 33523, 33517,
            34423, 34420, 34428, 34419, 34881, 34894, 34919,
            34922, 34921, 35283, 35332, 35335, 36210, 36835,
            36833, 36846, 36832, 37105, 37053, 37055, 37077,
            37061, 37054, 37063, 37067, 37064, 37332, 37331,
            38484, 38479, 38481, 38483, 38474, 38478, 20510,
            20485, 20487, 20499, 20514, 20528, 20507, 20469,
            20468, 20531, 20535, 20524, 20470, 20471, 20503,
            20508, 20512, 20519, 20533, 20527, 20529, 20494,
            20826, 20884, 20883, 20938, 20932, 20933, 20936,
            20942, 21089, 21082, 21074, 21086, 21087, 21077,
            21090, 21197, 21262, 21406, 21798, 21730, 21783,
            21778, 21735, 21747, 21732, 21786, 21759, 21764,
            21768, 21739, 21777, 21765, 21745, 21770, 21755,
            21751, 21752, 21728, 21774, 21763, 21771, 22273,
            22274, 22476, 22578, 22485, 22482, 22458, 22470,
            22461, 22460, 22456, 22454, 22463, 22471, 22480,
            22457, 22465, 22798, 22858, 23065, 23062, 23085,
            23086, 23061, 23055, 23063, 23050, 23070, 23091,
            23404, 23463, 23469, 23468, 23555, 23638, 23636,
            23788, 23807, 23790, 23793, 23799, 23808, 23801,
            24105, 24104, 24232, 24238, 24234, 24236, 24371,
            24368, 24423, 24669, 24666, 24679, 24641, 24738,
            24712, 24704, 24722, 24705, 24733, 24707, 24725,
            24731, 24727, 24711, 24732, 24718, 25113, 25158,
            25330, 25360, 25430, 25388, 25412, 25413, 25398,
            25411, 25572, 25401, 25419, 25418, 25404, 25385,
            25409, 25396, 25432, 25428, 25433, 25389, 25415,
            25395, 25434, 25425, 25400, 25431, 25408, 25416,
            25930, 25926, 26054, 26051, 26052, 26050, 26186,
            26207, 26183, 26193, 26386, 26387, 26655, 26650,
            26697, 26674, 26675, 26683, 26699, 26703, 26646,
            26673, 26652, 26677, 26667, 26669, 26671, 26702,
            26692, 26676, 26653, 26642, 26644, 26662, 26664,
            26670, 26701, 26682, 26661, 26656, 27436, 27439,
            27437, 27441, 27444, 27501, 32898, 27528, 27622,
            27620, 27624, 27619, 27618, 27623, 27685, 28026,
            28003, 28004, 28022, 27917, 28001, 28050, 27992,
            28002, 28013, 28015, 28049, 28045, 28143, 28031,
            28038, 27998, 28007, 28000, 28055, 28016, 28028,
            27999, 28034, 28056, 27951, 28008, 28043, 28030,
            28032, 28036, 27926, 28035, 28027, 28029, 28021,
            28048, 28892, 28883, 28881, 28893, 28875, 32569,
            28898, 28887, 28882, 28894, 28896, 28884, 28877,
            28869, 28870, 28871, 28890, 28878, 28897, 29250,
            29304, 29303, 29302, 29440, 29434, 29428, 29438,
            29430, 29427, 29435, 29441, 29651, 29657, 29669,
            29654, 29628, 29671, 29667, 29673, 29660, 29650,
            29659, 29652, 29661, 29658, 29655, 29656, 29672,
            29918, 29919, 29940, 29941, 29985, 30043, 30047,
            30128, 30145, 30139, 30148, 30144, 30143, 30134,
            30138, 30346, 30409, 30493, 30491, 30480, 30483,
            30482, 30499, 30481, 30485, 30489, 30490, 30498,
            30503, 30755, 30764, 30754, 30773, 30767, 30760,
            30766, 30763, 30753, 30761, 30771, 30762, 30769,
            31060, 31067, 31055, 31068, 31059, 31058, 31057,
            31211, 31212, 31200, 31214, 31213, 31210, 31196,
            31198, 31197, 31366, 31369, 31365, 31371, 31372,
            31370, 31367, 31448, 31504, 31492, 31507, 31493,
            31503, 31496, 31498, 31502, 31497, 31506, 31876,
            31889, 31882, 31884, 31880, 31885, 31877, 32030,
            32029, 32017, 32014, 32024, 32022, 32019, 32031,
            32018, 32015, 32012, 32604, 32609, 32606, 32608,
            32605, 32603, 32662, 32658, 32707, 32706, 32704,
            32790, 32830, 32825, 33018, 33010, 33017, 33013,
            33025, 33019, 33024, 33281, 33327, 33317, 33587,
            33581, 33604, 33561, 33617, 33573, 33622, 33599,
            33601, 33574, 33564, 33570, 33602, 33614, 33563,
            33578, 33544, 33596, 33613, 33558, 33572, 33568,
            33591, 33583, 33577, 33607, 33605, 33612, 33619,
            33566, 33580, 33611, 33575, 33608, 34387, 34386,
            34466, 34472, 34454, 34445, 34449, 34462, 34439,
            34455, 34438, 34443, 34458, 34437, 34469, 34457,
            34465, 34471, 34453, 34456, 34446, 34461, 34448,
            34452, 34883, 34884, 34925, 34933, 34934, 34930,
            34944, 34929, 34943, 34927, 34947, 34942, 34932,
            34940, 35346, 35911, 35927, 35963, 36004, 36003,
            36214, 36216, 36277, 36279, 36278, 36561, 36563,
            36862, 36853, 36866, 36863, 36859, 36868, 36860,
            36854, 37078, 37088, 37081, 37082, 37091, 37087,
            37093, 37080, 37083, 37079, 37084, 37092, 37200,
            37198, 37199, 37333, 37346, 37338, 38492, 38495,
            38588, 39139, 39647, 39727, 20095, 20592, 20586,
            20577, 20574, 20576, 20563, 20555, 20573, 20594,
            20552, 20557, 20545, 20571, 20554, 20578, 20501,
            20549, 20575, 20585, 20587, 20579, 20580, 20550,
            20544, 20590, 20595, 20567, 20561, 20944, 21099,
            21101, 21100, 21102, 21206, 21203, 21293, 21404,
            21877, 21878, 21820, 21837, 21840, 21812, 21802,
            21841, 21858, 21814, 21813, 21808, 21842, 21829,
            21772, 21810, 21861, 21838, 21817, 21832, 21805,
            21819, 21824, 21835, 22282, 22279, 22523, 22548,
            22498, 22518, 22492, 22516, 22528, 22509, 22525,
            22536, 22520, 22539, 22515, 22479, 22535, 22510,
            22499, 22514, 22501, 22508, 22497, 22542, 22524,
            22544, 22503, 22529, 22540, 22513, 22505, 22512,
            22541, 22532, 22876, 23136, 23128, 23125, 23143,
            23134, 23096, 23093, 23149, 23120, 23135, 23141,
            23148, 23123, 23140, 23127, 23107, 23133, 23122,
            23108, 23131, 23112, 23182, 23102, 23117, 23097,
            23116, 23152, 23145, 23111, 23121, 23126, 23106,
            23132, 23410, 23406, 23489, 23488, 23641, 23838,
            23819, 23837, 23834, 23840, 23820, 23848, 23821,
            23846, 23845, 23823, 23856, 23826, 23843, 23839,
            23854, 24126, 24116, 24241, 24244, 24249, 24242,
            24243, 24374, 24376, 24475, 24470, 24479, 24714,
            24720, 24710, 24766, 24752, 24762, 24787, 24788,
            24783, 24804, 24793, 24797, 24776, 24753, 24795,
            24759, 24778, 24767, 24771, 24781, 24768, 25394,
            25445, 25482, 25474, 25469, 25533, 25502, 25517,
            25501, 25495, 25515, 25486, 25455, 25479, 25488,
            25454, 25519, 25461, 25500, 25453, 25518, 25468,
            25508, 25403, 25503, 25464, 25477, 25473, 25489,
            25485, 25456, 25939, 26061, 26213, 26209, 26203,
            26201, 26204, 26210, 26392, 26745, 26759, 26768,
            26780, 26733, 26734, 26798, 26795, 26966, 26735,
            26787, 26796, 26793, 26741, 26740, 26802, 26767,
            26743, 26770, 26748, 26731, 26738, 26794, 26752,
            26737, 26750, 26779, 26774, 26763, 26784, 26761,
            26788, 26744, 26747, 26769, 26764, 26762, 26749,
            27446, 27443, 27447, 27448, 27537, 27535, 27533,
            27534, 27532, 27690, 28096, 28075, 28084, 28083,
            28276, 28076, 28137, 28130, 28087, 28150, 28116,
            28160, 28104, 28128, 28127, 28118, 28094, 28133,
            28124, 28125, 28123, 28148, 28106, 28093, 28141,
            28144, 28090, 28117, 28098, 28111, 28105, 28112,
            28146, 28115, 28157, 28119, 28109, 28131, 28091,
            28922, 28941, 28919, 28951, 28916, 28940, 28912,
            28932, 28915, 28944, 28924, 28927, 28934, 28947,
            28928, 28920, 28918, 28939, 28930, 28942, 29310,
            29307, 29308, 29311, 29469, 29463, 29447, 29457,
            29464, 29450, 29448, 29439, 29455, 29470, 29576,
            29686, 29688, 29685, 29700, 29697, 29693, 29703,
            29696, 29690, 29692, 29695, 29708, 29707, 29684,
            29704, 30052, 30051, 30158, 30162, 30159, 30155,
            30156, 30161, 30160, 30351, 30345, 30419, 30521,
            30511, 30509, 30513, 30514, 30516, 30515, 30525,
            30501, 30523, 30517, 30792, 30802, 30793, 30797,
            30794, 30796, 30758, 30789, 30800, 31076, 31079,
            31081, 31082, 31075, 31083, 31073, 31163, 31226,
            31224, 31222, 31223, 31375, 31380, 31376, 31541,
            31559, 31540, 31525, 31536, 31522, 31524, 31539,
            31512, 31530, 31517, 31537, 31531, 31533, 31535,
            31538, 31544, 31514, 31523, 31892, 31896, 31894,
            31907, 32053, 32061, 32056, 32054, 32058, 32069,
            32044, 32041, 32065, 32071, 32062, 32063, 32074,
            32059, 32040, 32611, 32661, 32668, 32669, 32667,
            32714, 32715, 32717, 32720, 32721, 32711, 32719,
            32713, 32799, 32798, 32795, 32839, 32835, 32840,
            33048, 33061, 33049, 33051, 33069, 33055, 33068,
            33054, 33057, 33045, 33063, 33053, 33058, 33297,
            33336, 33331, 33338, 33332, 33330, 33396, 33680,
            33699, 33704, 33677, 33658, 33651, 33700, 33652,
            33679, 33665, 33685, 33689, 33653, 33684, 33705,
            33661, 33667, 33676, 33693, 33691, 33706, 33675,
            33662, 33701, 33711, 33672, 33687, 33712, 33663,
            33702, 33671, 33710, 33654, 33690, 34393, 34390,
            34495, 34487, 34498, 34497, 34501, 34490, 34480,
            34504, 34489, 34483, 34488, 34508, 34484, 34491,
            34492, 34499, 34493, 34494, 34898, 34953, 34965,
            34984, 34978, 34986, 34970, 34961, 34977, 34975,
            34968, 34983, 34969, 34971, 34967, 34980, 34988,
            34956, 34963, 34958, 35202, 35286, 35289, 35285,
            35376, 35367, 35372, 35358, 35897, 35899, 35932,
            35933, 35965, 36005, 36221, 36219, 36217, 36284,
            36290, 36281, 36287, 36289, 36568, 36574, 36573,
            36572, 36567, 36576, 36577, 36900, 36875, 36881,
            36892, 36876, 36897, 37103, 37098, 37104, 37108,
            37106, 37107, 37076, 37099, 37100, 37097, 37206,
            37208, 37210, 37203, 37205, 37356, 37364, 37361,
            37363, 37368, 37348, 37369, 37354, 37355, 37367,
            37352, 37358, 38266, 38278, 38280, 38524, 38509,
            38507, 38513, 38511, 38591, 38762, 38916, 39141,
            39319, 20635, 20629, 20628, 20638, 20619, 20643,
            20611, 20620, 20622, 20637, 20584, 20636, 20626,
            20610, 20615, 20831, 20948, 21266, 21265, 21412,
            21415, 21905, 21928, 21925, 21933, 21879, 22085,
            21922, 21907, 21896, 21903, 21941, 21889, 21923,
            21906, 21924, 21885, 21900, 21926, 21887, 21909,
            21921, 21902, 22284, 22569, 22583, 22553, 22558,
            22567, 22563, 22568, 22517, 22600, 22565, 22556,
            22555, 22579, 22591, 22582, 22574, 22585, 22584,
            22573, 22572, 22587, 22881, 23215, 23188, 23199,
            23162, 23202, 23198, 23160, 23206, 23164, 23205,
            23212, 23189, 23214, 23095, 23172, 23178, 23191,
            23171, 23179, 23209, 23163, 23165, 23180, 23196,
            23183, 23187, 23197, 23530, 23501, 23499, 23508,
            23505, 23498, 23502, 23564, 23600, 23863, 23875,
            23915, 23873, 23883, 23871, 23861, 23889, 23886,
            23893, 23859, 23866, 23890, 23869, 23857, 23897,
            23874, 23865, 23881, 23864, 23868, 23858, 23862,
            23872, 23877, 24132, 24129, 24408, 24486, 24485,
            24491, 24777, 24761, 24780, 24802, 24782, 24772,
            24852, 24818, 24842, 24854, 24837, 24821, 24851,
            24824, 24828, 24830, 24769, 24835, 24856, 24861,
            24848, 24831, 24836, 24843, 25162, 25492, 25521,
            25520, 25550, 25573, 25576, 25583, 25539, 25757,
            25587, 25546, 25568, 25590, 25557, 25586, 25589,
            25697, 25567, 25534, 25565, 25564, 25540, 25560,
            25555, 25538, 25543, 25548, 25547, 25544, 25584,
            25559, 25561, 25906, 25959, 25962, 25956, 25948,
            25960, 25957, 25996, 26013, 26014, 26030, 26064,
            26066, 26236, 26220, 26235, 26240, 26225, 26233,
            26218, 26226, 26369, 26892, 26835, 26884, 26844,
            26922, 26860, 26858, 26865, 26895, 26838, 26871,
            26859, 26852, 26870, 26899, 26896, 26867, 26849,
            26887, 26828, 26888, 26992, 26804, 26897, 26863,
            26822, 26900, 26872, 26832, 26877, 26876, 26856,
            26891, 26890, 26903, 26830, 26824, 26845, 26846,
            26854, 26868, 26833, 26886, 26836, 26857, 26901,
            26917, 26823, 27449, 27451, 27455, 27452, 27540,
            27543, 27545, 27541, 27581, 27632, 27634, 27635,
            27696, 28156, 28230, 28231, 28191, 28233, 28296,
            28220, 28221, 28229, 28258, 28203, 28223, 28225,
            28253, 28275, 28188, 28211, 28235, 28224, 28241,
            28219, 28163, 28206, 28254, 28264, 28252, 28257,
            28209, 28200, 28256, 28273, 28267, 28217, 28194,
            28208, 28243, 28261, 28199, 28280, 28260, 28279,
            28245, 28281, 28242, 28262, 28213, 28214, 28250,
            28960, 28958, 28975, 28923, 28974, 28977, 28963,
            28965, 28962, 28978, 28959, 28968, 28986, 28955,
            29259, 29274, 29320, 29321, 29318, 29317, 29323,
            29458, 29451, 29488, 29474, 29489, 29491, 29479,
            29490, 29485, 29478, 29475, 29493, 29452, 29742,
            29740, 29744, 29739, 29718, 29722, 29729, 29741,
            29745, 29732, 29731, 29725, 29737, 29728, 29746,
            29947, 29999, 30063, 30060, 30183, 30170, 30177,
            30182, 30173, 30175, 30180, 30167, 30357, 30354,
            30426, 30534, 30535, 30532, 30541, 30533, 30538,
            30542, 30539, 30540, 30686, 30700, 30816, 30820,
            30821, 30812, 30829, 30833, 30826, 30830, 30832,
            30825, 30824, 30814, 30818, 31092, 31091, 31090,
            31088, 31234, 31242, 31235, 31244, 31236, 31385,
            31462, 31460, 31562, 31547, 31556, 31560, 31564,
            31566, 31552, 31576, 31557, 31906, 31902, 31912,
            31905, 32088, 32111, 32099, 32083, 32086, 32103,
            32106, 32079, 32109, 32092, 32107, 32082, 32084,
            32105, 32081, 32095, 32078, 32574, 32575, 32613,
            32614, 32674, 32672, 32673, 32727, 32849, 32847,
            32848, 33022, 32980, 33091, 33098, 33106, 33103,
            33095, 33085, 33101, 33082, 33254, 33262, 33271,
            33272, 33273, 33284, 33340, 33341, 33343, 33397,
            33595, 33743, 33785, 33827, 33728, 33768, 33810,
            33767, 33764, 33788, 33782, 33808, 33734, 33736,
            33771, 33763, 33727, 33793, 33757, 33765, 33752,
            33791, 33761, 33739, 33742, 33750, 33781, 33737,
            33801, 33807, 33758, 33809, 33798, 33730, 33779,
            33749, 33786, 33735, 33745, 33770, 33811, 33731,
            33772, 33774, 33732, 33787, 33751, 33762, 33819,
            33755, 33790, 34520, 34530, 34534, 34515, 34531,
            34522, 34538, 34525, 34539, 34524, 34540, 34537,
            34519, 34536, 34513, 34888, 34902, 34901, 35002,
            35031, 35001, 35000, 35008, 35006, 34998, 35004,
            34999, 35005, 34994, 35073, 35017, 35221, 35224,
            35223, 35293, 35290, 35291, 35406, 35405, 35385,
            35417, 35392, 35415, 35416, 35396, 35397, 35410,
            35400, 35409, 35402, 35404, 35407, 35935, 35969,
            35968, 36026, 36030, 36016, 36025, 36021, 36228,
            36224, 36233, 36312, 36307, 36301, 36295, 36310,
            36316, 36303, 36309, 36313, 36296, 36311, 36293,
            36591, 36599, 36602, 36601, 36582, 36590, 36581,
            36597, 36583, 36584, 36598, 36587, 36593, 36588,
            36596, 36585, 36909, 36916, 36911, 37126, 37164,
            37124, 37119, 37116, 37128, 37113, 37115, 37121,
            37120, 37127, 37125, 37123, 37217, 37220, 37215,
            37218, 37216, 37377, 37386, 37413, 37379, 37402,
            37414, 37391, 37388, 37376, 37394, 37375, 37373,
            37382, 37380, 37415, 37378, 37404, 37412, 37401,
            37399, 37381, 37398, 38267, 38285, 38284, 38288,
            38535, 38526, 38536, 38537, 38531, 38528, 38594,
            38600, 38595, 38641, 38640, 38764, 38768, 38766,
            38919, 39081, 39147, 40166, 40697, 20099, 20100,
            20150, 20669, 20671, 20678, 20654, 20676, 20682,
            20660, 20680, 20674, 20656, 20673, 20666, 20657,
            20683, 20681, 20662, 20664, 20951, 21114, 21112,
            21115, 21116, 21955, 21979, 21964, 21968, 21963,
            21962, 21981, 21952, 21972, 21956, 21993, 21951,
            21970, 21901, 21967, 21973, 21986, 21974, 21960,
            22002, 21965, 21977, 21954, 22292, 22611, 22632,
            22628, 22607, 22605, 22601, 22639, 22613, 22606,
            22621, 22617, 22629, 22619, 22589, 22627, 22641,
            22780, 23239, 23236, 23243, 23226, 23224, 23217,
            23221, 23216, 23231, 23240, 23227, 23238, 23223,
            23232, 23242, 23220, 23222, 23245, 23225, 23184,
            23510, 23512, 23513, 23583, 23603, 23921, 23907,
            23882, 23909, 23922, 23916, 23902, 23912, 23911,
            23906, 24048, 24143, 24142, 24138, 24141, 24139,
            24261, 24268, 24262, 24267, 24263, 24384, 24495,
            24493, 24823, 24905, 24906, 24875, 24901, 24886,
            24882, 24878, 24902, 24879, 24911, 24873, 24896,
            25120, 37224, 25123, 25125, 25124, 25541, 25585,
            25579, 25616, 25618, 25609, 25632, 25636, 25651,
            25667, 25631, 25621, 25624, 25657, 25655, 25634,
            25635, 25612, 25638, 25648, 25640, 25665, 25653,
            25647, 25610, 25626, 25664, 25637, 25639, 25611,
            25575, 25627, 25646, 25633, 25614, 25967, 26002,
            26067, 26246, 26252, 26261, 26256, 26251, 26250,
            26265, 26260, 26232, 26400, 26982, 26975, 26936,
            26958, 26978, 26993, 26943, 26949, 26986, 26937,
            26946, 26967, 26969, 27002, 26952, 26953, 26933,
            26988, 26931, 26941, 26981, 26864, 27000, 26932,
            26985, 26944, 26991, 26948, 26998, 26968, 26945,
            26996, 26956, 26939, 26955, 26935, 26972, 26959,
            26961, 26930, 26962, 26927, 27003, 26940, 27462,
            27461, 27459, 27458, 27464, 27457, 27547, 64013,
            27643, 27644, 27641, 27639, 27640, 28315, 28374,
            28360, 28303, 28352, 28319, 28307, 28308, 28320,
            28337, 28345, 28358, 28370, 28349, 28353, 28318,
            28361, 28343, 28336, 28365, 28326, 28367, 28338,
            28350, 28355, 28380, 28376, 28313, 28306, 28302,
            28301, 28324, 28321, 28351, 28339, 28368, 28362,
            28311, 28334, 28323, 28999, 29012, 29010, 29027,
            29024, 28993, 29021, 29026, 29042, 29048, 29034,
            29025, 28994, 29016, 28995, 29003, 29040, 29023,
            29008, 29011, 28996, 29005, 29018, 29263, 29325,
            29324, 29329, 29328, 29326, 29500, 29506, 29499,
            29498, 29504, 29514, 29513, 29764, 29770, 29771,
            29778, 29777, 29783, 29760, 29775, 29776, 29774,
            29762, 29766, 29773, 29780, 29921, 29951, 29950,
            29949, 29981, 30073, 30071, 27011, 30191, 30223,
            30211, 30199, 30206, 30204, 30201, 30200, 30224,
            30203, 30198, 30189, 30197, 30205, 30361, 30389,
            30429, 30549, 30559, 30560, 30546, 30550, 30554,
            30569, 30567, 30548, 30553, 30573, 30688, 30855,
            30874, 30868, 30863, 30852, 30869, 30853, 30854,
            30881, 30851, 30841, 30873, 30848, 30870, 30843,
            31100, 31106, 31101, 31097, 31249, 31256, 31257,
            31250, 31255, 31253, 31266, 31251, 31259, 31248,
            31395, 31394, 31390, 31467, 31590, 31588, 31597,
            31604, 31593, 31602, 31589, 31603, 31601, 31600,
            31585, 31608, 31606, 31587, 31922, 31924, 31919,
            32136, 32134, 32128, 32141, 32127, 32133, 32122,
            32142, 32123, 32131, 32124, 32140, 32148, 32132,
            32125, 32146, 32621, 32619, 32615, 32616, 32620,
            32678, 32677, 32679, 32731, 32732, 32801, 33124,
            33120, 33143, 33116, 33129, 33115, 33122, 33138,
            26401, 33118, 33142, 33127, 33135, 33092, 33121,
            33309, 33353, 33348, 33344, 33346, 33349, 34033,
            33855, 33878, 33910, 33913, 33935, 33933, 33893,
            33873, 33856, 33926, 33895, 33840, 33869, 33917,
            33882, 33881, 33908, 33907, 33885, 34055, 33886,
            33847, 33850, 33844, 33914, 33859, 33912, 33842,
            33861, 33833, 33753, 33867, 33839, 33858, 33837,
            33887, 33904, 33849, 33870, 33868, 33874, 33903,
            33989, 33934, 33851, 33863, 33846, 33843, 33896,
            33918, 33860, 33835, 33888, 33876, 33902, 33872,
            34571, 34564, 34551, 34572, 34554, 34518, 34549,
            34637, 34552, 34574, 34569, 34561, 34550, 34573,
            34565, 35030, 35019, 35021, 35022, 35038, 35035,
            35034, 35020, 35024, 35205, 35227, 35295, 35301,
            35300, 35297, 35296, 35298, 35292, 35302, 35446,
            35462, 35455, 35425, 35391, 35447, 35458, 35460,
            35445, 35459, 35457, 35444, 35450, 35900, 35915,
            35914, 35941, 35940, 35942, 35974, 35972, 35973,
            36044, 36200, 36201, 36241, 36236, 36238, 36239,
            36237, 36243, 36244, 36240, 36242, 36336, 36320,
            36332, 36337, 36334, 36304, 36329, 36323, 36322,
            36327, 36338, 36331, 36340, 36614, 36607, 36609,
            36608, 36613, 36615, 36616, 36610, 36619, 36946,
            36927, 36932, 36937, 36925, 37136, 37133, 37135,
            37137, 37142, 37140, 37131, 37134, 37230, 37231,
            37448, 37458, 37424, 37434, 37478, 37427, 37477,
            37470, 37507, 37422, 37450, 37446, 37485, 37484,
            37455, 37472, 37479, 37487, 37430, 37473, 37488,
            37425, 37460, 37475, 37456, 37490, 37454, 37459,
            37452, 37462, 37426, 38303, 38300, 38302, 38299,
            38546, 38547, 38545, 38551, 38606, 38650, 38653,
            38648, 38645, 38771, 38775, 38776, 38770, 38927,
            38925, 38926, 39084, 39158, 39161, 39343, 39346,
            39344, 39349, 39597, 39595, 39771, 40170, 40173,
            40167, 40576, 40701, 20710, 20692, 20695, 20712,
            20723, 20699, 20714, 20701, 20708, 20691, 20716,
            20720, 20719, 20707, 20704, 20952, 21120, 21121,
            21225, 21227, 21296, 21420, 22055, 22037, 22028,
            22034, 22012, 22031, 22044, 22017, 22035, 22018,
            22010, 22045, 22020, 22015, 22009, 22665, 22652,
            22672, 22680, 22662, 22657, 22655, 22644, 22667,
            22650, 22663, 22673, 22670, 22646, 22658, 22664,
            22651, 22676, 22671, 22782, 22891, 23260, 23278,
            23269, 23253, 23274, 23258, 23277, 23275, 23283,
            23266, 23264, 23259, 23276, 23262, 23261, 23257,
            23272, 23263, 23415, 23520, 23523, 23651, 23938,
            23936, 23933, 23942, 23930, 23937, 23927, 23946,
            23945, 23944, 23934, 23932, 23949, 23929, 23935,
            24152, 24153, 24147, 24280, 24273, 24279, 24270,
            24284, 24277, 24281, 24274, 24276, 24388, 24387,
            24431, 24502, 24876, 24872, 24897, 24926, 24945,
            24947, 24914, 24915, 24946, 24940, 24960, 24948,
            24916, 24954, 24923, 24933, 24891, 24938, 24929,
            24918, 25129, 25127, 25131, 25643, 25677, 25691,
            25693, 25716, 25718, 25714, 25715, 25725, 25717,
            25702, 25766, 25678, 25730, 25694, 25692, 25675,
            25683, 25696, 25680, 25727, 25663, 25708, 25707,
            25689, 25701, 25719, 25971, 26016, 26273, 26272,
            26271, 26373, 26372, 26402, 27057, 27062, 27081,
            27040, 27086, 27030, 27056, 27052, 27068, 27025,
            27033, 27022, 27047, 27021, 27049, 27070, 27055,
            27071, 27076, 27069, 27044, 27092, 27065, 27082,
            27034, 27087, 27059, 27027, 27050, 27041, 27038,
            27097, 27031, 27024, 27074, 27061, 27045, 27078,
            27466, 27469, 27467, 27550, 27551, 27552, 27587,
            27588, 27646, 28366, 28405, 28401, 28419, 28453,
            28408, 28471, 28411, 28462, 28425, 28494, 28441,
            28442, 28455, 28440, 28475, 28434, 28397, 28426,
            28470, 28531, 28409, 28398, 28461, 28480, 28464,
            28476, 28469, 28395, 28423, 28430, 28483, 28421,
            28413, 28406, 28473, 28444, 28412, 28474, 28447,
            28429, 28446, 28424, 28449, 29063, 29072, 29065,
            29056, 29061, 29058, 29071, 29051, 29062, 29057,
            29079, 29252, 29267, 29335, 29333, 29331, 29507,
            29517, 29521, 29516, 29794, 29811, 29809, 29813,
            29810, 29799, 29806, 29952, 29954, 29955, 30077,
            30096, 30230, 30216, 30220, 30229, 30225, 30218,
            30228, 30392, 30593, 30588, 30597, 30594, 30574,
            30592, 30575, 30590, 30595, 30898, 30890, 30900,
            30893, 30888, 30846, 30891, 30878, 30885, 30880,
            30892, 30882, 30884, 31128, 31114, 31115, 31126,
            31125, 31124, 31123, 31127, 31112, 31122, 31120,
            31275, 31306, 31280, 31279, 31272, 31270, 31400,
            31403, 31404, 31470, 31624, 31644, 31626, 31633,
            31632, 31638, 31629, 31628, 31643, 31630, 31621,
            31640, 21124, 31641, 31652, 31618, 31931, 31935,
            31932, 31930, 32167, 32183, 32194, 32163, 32170,
            32193, 32192, 32197, 32157, 32206, 32196, 32198,
            32203, 32204, 32175, 32185, 32150, 32188, 32159,
            32166, 32174, 32169, 32161, 32201, 32627, 32738,
            32739, 32741, 32734, 32804, 32861, 32860, 33161,
            33158, 33155, 33159, 33165, 33164, 33163, 33301,
            33943, 33956, 33953, 33951, 33978, 33998, 33986,
            33964, 33966, 33963, 33977, 33972, 33985, 33997,
            33962, 33946, 33969, 34000, 33949, 33959, 33979,
            33954, 33940, 33991, 33996, 33947, 33961, 33967,
            33960, 34006, 33944, 33974, 33999, 33952, 34007,
            34004, 34002, 34011, 33968, 33937, 34401, 34611,
            34595, 34600, 34667, 34624, 34606, 34590, 34593,
            34585, 34587, 34627, 34604, 34625, 34622, 34630,
            34592, 34610, 34602, 34605, 34620, 34578, 34618,
            34609, 34613, 34626, 34598, 34599, 34616, 34596,
            34586, 34608, 34577, 35063, 35047, 35057, 35058,
            35066, 35070, 35054, 35068, 35062, 35067, 35056,
            35052, 35051, 35229, 35233, 35231, 35230, 35305,
            35307, 35304, 35499, 35481, 35467, 35474, 35471,
            35478, 35901, 35944, 35945, 36053, 36047, 36055,
            36246, 36361, 36354, 36351, 36365, 36349, 36362,
            36355, 36359, 36358, 36357, 36350, 36352, 36356,
            36624, 36625, 36622, 36621, 37155, 37148, 37152,
            37154, 37151, 37149, 37146, 37156, 37153, 37147,
            37242, 37234, 37241, 37235, 37541, 37540, 37494,
            37531, 37498, 37536, 37524, 37546, 37517, 37542,
            37530, 37547, 37497, 37527, 37503, 37539, 37614,
            37518, 37506, 37525, 37538, 37501, 37512, 37537,
            37514, 37510, 37516, 37529, 37543, 37502, 37511,
            37545, 37533, 37515, 37421, 38558, 38561, 38655,
            38744, 38781, 38778, 38782, 38787, 38784, 38786,
            38779, 38788, 38785, 38783, 38862, 38861, 38934,
            39085, 39086, 39170, 39168, 39175, 39325, 39324,
            39363, 39353, 39355, 39354, 39362, 39357, 39367,
            39601, 39651, 39655, 39742, 39743, 39776, 39777,
            39775, 40177, 40178, 40181, 40615, 20735, 20739,
            20784, 20728, 20742, 20743, 20726, 20734, 20747,
            20748, 20733, 20746, 21131, 21132, 21233, 21231,
            22088, 22082, 22092, 22069, 22081, 22090, 22089,
            22086, 22104, 22106, 22080, 22067, 22077, 22060,
            22078, 22072, 22058, 22074, 22298, 22699, 22685,
            22705, 22688, 22691, 22703, 22700, 22693, 22689,
            22783, 23295, 23284, 23293, 23287, 23286, 23299,
            23288, 23298, 23289, 23297, 23303, 23301, 23311,
            23655, 23961, 23959, 23967, 23954, 23970, 23955,
            23957, 23968, 23964, 23969, 23962, 23966, 24169,
            24157, 24160, 24156, 32243, 24283, 24286, 24289,
            24393, 24498, 24971, 24963, 24953, 25009, 25008,
            24994, 24969, 24987, 24979, 25007, 25005, 24991,
            24978, 25002, 24993, 24973, 24934, 25011, 25133,
            25710, 25712, 25750, 25760, 25733, 25751, 25756,
            25743, 25739, 25738, 25740, 25763, 25759, 25704,
            25777, 25752, 25974, 25978, 25977, 25979, 26034,
            26035, 26293, 26288, 26281, 26290, 26295, 26282,
            26287, 27136, 27142, 27159, 27109, 27128, 27157,
            27121, 27108, 27168, 27135, 27116, 27106, 27163,
            27165, 27134, 27175, 27122, 27118, 27156, 27127,
            27111, 27200, 27144, 27110, 27131, 27149, 27132,
            27115, 27145, 27140, 27160, 27173, 27151, 27126,
            27174, 27143, 27124, 27158, 27473, 27557, 27555,
            27554, 27558, 27649, 27648, 27647, 27650, 28481,
            28454, 28542, 28551, 28614, 28562, 28557, 28553,
            28556, 28514, 28495, 28549, 28506, 28566, 28534,
            28524, 28546, 28501, 28530, 28498, 28496, 28503,
            28564, 28563, 28509, 28416, 28513, 28523, 28541,
            28519, 28560, 28499, 28555, 28521, 28543, 28565,
            28515, 28535, 28522, 28539, 29106, 29103, 29083,
            29104, 29088, 29082, 29097, 29109, 29085, 29093,
            29086, 29092, 29089, 29098, 29084, 29095, 29107,
            29336, 29338, 29528, 29522, 29534, 29535, 29536,
            29533, 29531, 29537, 29530, 29529, 29538, 29831,
            29833, 29834, 29830, 29825, 29821, 29829, 29832,
            29820, 29817, 29960, 29959, 30078, 30245, 30238,
            30233, 30237, 30236, 30243, 30234, 30248, 30235,
            30364, 30365, 30366, 30363, 30605, 30607, 30601,
            30600, 30925, 30907, 30927, 30924, 30929, 30926,
            30932, 30920, 30915, 30916, 30921, 31130, 31137,
            31136, 31132, 31138, 31131, 27510, 31289, 31410,
            31412, 31411, 31671, 31691, 31678, 31660, 31694,
            31663, 31673, 31690, 31669, 31941, 31944, 31948,
            31947, 32247, 32219, 32234, 32231, 32215, 32225,
            32259, 32250, 32230, 32246, 32241, 32240, 32238,
            32223, 32630, 32684, 32688, 32685, 32749, 32747,
            32746, 32748, 32742, 32744, 32868, 32871, 33187,
            33183, 33182, 33173, 33186, 33177, 33175, 33302,
            33359, 33363, 33362, 33360, 33358, 33361, 34084,
            34107, 34063, 34048, 34089, 34062, 34057, 34061,
            34079, 34058, 34087, 34076, 34043, 34091, 34042,
            34056, 34060, 34036, 34090, 34034, 34069, 34039,
            34027, 34035, 34044, 34066, 34026, 34025, 34070,
            34046, 34088, 34077, 34094, 34050, 34045, 34078,
            34038, 34097, 34086, 34023, 34024, 34032, 34031,
            34041, 34072, 34080, 34096, 34059, 34073, 34095,
            34402, 34646, 34659, 34660, 34679, 34785, 34675,
            34648, 34644, 34651, 34642, 34657, 34650, 34641,
            34654, 34669, 34666, 34640, 34638, 34655, 34653,
            34671, 34668, 34682, 34670, 34652, 34661, 34639,
            34683, 34677, 34658, 34663, 34665, 34906, 35077,
            35084, 35092, 35083, 35095, 35096, 35097, 35078,
            35094, 35089, 35086, 35081, 35234, 35236, 35235,
            35309, 35312, 35308, 35535, 35526, 35512, 35539,
            35537, 35540, 35541, 35515, 35543, 35518, 35520,
            35525, 35544, 35523, 35514, 35517, 35545, 35902,
            35917, 35983, 36069, 36063, 36057, 36072, 36058,
            36061, 36071, 36256, 36252, 36257, 36251, 36384,
            36387, 36389, 36388, 36398, 36373, 36379, 36374,
            36369, 36377, 36390, 36391, 36372, 36370, 36376,
            36371, 36380, 36375, 36378, 36652, 36644, 36632,
            36634, 36640, 36643, 36630, 36631, 36979, 36976,
            36975, 36967, 36971, 37167, 37163, 37161, 37162,
            37170, 37158, 37166, 37253, 37254, 37258, 37249,
            37250, 37252, 37248, 37584, 37571, 37572, 37568,
            37593, 37558, 37583, 37617, 37599, 37592, 37609,
            37591, 37597, 37580, 37615, 37570, 37608, 37578,
            37576, 37582, 37606, 37581, 37589, 37577, 37600,
            37598, 37607, 37585, 37587, 37557, 37601, 37574,
            37556, 38268, 38316, 38315, 38318, 38320, 38564,
            38562, 38611, 38661, 38664, 38658, 38746, 38794,
            38798, 38792, 38864, 38863, 38942, 38941, 38950,
            38953, 38952, 38944, 38939, 38951, 39090, 39176,
            39162, 39185, 39188, 39190, 39191, 39189, 39388,
            39373, 39375, 39379, 39380, 39374, 39369, 39382,
            39384, 39371, 39383, 39372, 39603, 39660, 39659,
            39667, 39666, 39665, 39750, 39747, 39783, 39796,
            39793, 39782, 39798, 39797, 39792, 39784, 39780,
            39788, 40188, 40186, 40189, 40191, 40183, 40199,
            40192, 40185, 40187, 40200, 40197, 40196, 40579,
            40659, 40719, 40720, 20764, 20755, 20759, 20762,
            20753, 20958, 21300, 21473, 22128, 22112, 22126,
            22131, 22118, 22115, 22125, 22130, 22110, 22135,
            22300, 22299, 22728, 22717, 22729, 22719, 22714,
            22722, 22716, 22726, 23319, 23321, 23323, 23329,
            23316, 23315, 23312, 23318, 23336, 23322, 23328,
            23326, 23535, 23980, 23985, 23977, 23975, 23989,
            23984, 23982, 23978, 23976, 23986, 23981, 23983,
            23988, 24167, 24168, 24166, 24175, 24297, 24295,
            24294, 24296, 24293, 24395, 24508, 24989, 25000,
            24982, 25029, 25012, 25030, 25025, 25036, 25018,
            25023, 25016, 24972, 25815, 25814, 25808, 25807,
            25801, 25789, 25737, 25795, 25819, 25843, 25817,
            25907, 25983, 25980, 26018, 26312, 26302, 26304,
            26314, 26315, 26319, 26301, 26299, 26298, 26316,
            26403, 27188, 27238, 27209, 27239, 27186, 27240,
            27198, 27229, 27245, 27254, 27227, 27217, 27176,
            27226, 27195, 27199, 27201, 27242, 27236, 27216,
            27215, 27220, 27247, 27241, 27232, 27196, 27230,
            27222, 27221, 27213, 27214, 27206, 27477, 27476,
            27478, 27559, 27562, 27563, 27592, 27591, 27652,
            27651, 27654, 28589, 28619, 28579, 28615, 28604,
            28622, 28616, 28510, 28612, 28605, 28574, 28618,
            28584, 28676, 28581, 28590, 28602, 28588, 28586,
            28623, 28607, 28600, 28578, 28617, 28587, 28621,
            28591, 28594, 28592, 29125, 29122, 29119, 29112,
            29142, 29120, 29121, 29131, 29140, 29130, 29127,
            29135, 29117, 29144, 29116, 29126, 29146, 29147,
            29341, 29342, 29545, 29542, 29543, 29548, 29541,
            29547, 29546, 29823, 29850, 29856, 29844, 29842,
            29845, 29857, 29963, 30080, 30255, 30253, 30257,
            30269, 30259, 30268, 30261, 30258, 30256, 30395,
            30438, 30618, 30621, 30625, 30620, 30619, 30626,
            30627, 30613, 30617, 30615, 30941, 30953, 30949,
            30954, 30942, 30947, 30939, 30945, 30946, 30957,
            30943, 30944, 31140, 31300, 31304, 31303, 31414,
            31416, 31413, 31409, 31415, 31710, 31715, 31719,
            31709, 31701, 31717, 31706, 31720, 31737, 31700,
            31722, 31714, 31708, 31723, 31704, 31711, 31954,
            31956, 31959, 31952, 31953, 32274, 32289, 32279,
            32268, 32287, 32288, 32275, 32270, 32284, 32277,
            32282, 32290, 32267, 32271, 32278, 32269, 32276,
            32293, 32292, 32579, 32635, 32636, 32634, 32689,
            32751, 32810, 32809, 32876, 33201, 33190, 33198,
            33209, 33205, 33195, 33200, 33196, 33204, 33202,
            33207, 33191, 33266, 33365, 33366, 33367, 34134,
            34117, 34155, 34125, 34131, 34145, 34136, 34112,
            34118, 34148, 34113, 34146, 34116, 34129, 34119,
            34147, 34110, 34139, 34161, 34126, 34158, 34165,
            34133, 34151, 34144, 34188, 34150, 34141, 34132,
            34149, 34156, 34403, 34405, 34404, 34715, 34703,
            34711, 34707, 34706, 34696, 34689, 34710, 34712,
            34681, 34695, 34723, 34693, 34704, 34705, 34717,
            34692, 34708, 34716, 34714, 34697, 35102, 35110,
            35120, 35117, 35118, 35111, 35121, 35106, 35113,
            35107, 35119, 35116, 35103, 35313, 35552, 35554,
            35570, 35572, 35573, 35549, 35604, 35556, 35551,
            35568, 35528, 35550, 35553, 35560, 35583, 35567,
            35579, 35985, 35986, 35984, 36085, 36078, 36081,
            36080, 36083, 36204, 36206, 36261, 36263, 36403,
            36414, 36408, 36416, 36421, 36406, 36412, 36413,
            36417, 36400, 36415, 36541, 36662, 36654, 36661,
            36658, 36665, 36663, 36660, 36982, 36985, 36987,
            36998, 37114, 37171, 37173, 37174, 37267, 37264,
            37265, 37261, 37263, 37671, 37662, 37640, 37663,
            37638, 37647, 37754, 37688, 37692, 37659, 37667,
            37650, 37633, 37702, 37677, 37646, 37645, 37579,
            37661, 37626, 37669, 37651, 37625, 37623, 37684,
            37634, 37668, 37631, 37673, 37689, 37685, 37674,
            37652, 37644, 37643, 37630, 37641, 37632, 37627,
            37654, 38332, 38349, 38334, 38329, 38330, 38326,
            38335, 38325, 38333, 38569, 38612, 38667, 38674,
            38672, 38809, 38807, 38804, 38896, 38904, 38965,
            38959, 38962, 39204, 39199, 39207, 39209, 39326,
            39406, 39404, 39397, 39396, 39408, 39395, 39402,
            39401, 39399, 39609, 39615, 39604, 39611, 39670,
            39674, 39673, 39671, 39731, 39808, 39813, 39815,
            39804, 39806, 39803, 39810, 39827, 39826, 39824,
            39802, 39829, 39805, 39816, 40229, 40215, 40224,
            40222, 40212, 40233, 40221, 40216, 40226, 40208,
            40217, 40223, 40584, 40582, 40583, 40622, 40621,
            40661, 40662, 40698, 40722, 40765, 20774, 20773,
            20770, 20772, 20768, 20777, 21236, 22163, 22156,
            22157, 22150, 22148, 22147, 22142, 22146, 22143,
            22145, 22742, 22740, 22735, 22738, 23341, 23333,
            23346, 23331, 23340, 23335, 23334, 23343, 23342,
            23419, 23537, 23538, 23991, 24172, 24170, 24510,
            24507, 25027, 25013, 25020, 25063, 25056, 25061,
            25060, 25064, 25054, 25839, 25833, 25827, 25835,
            25828, 25832, 25985, 25984, 26038, 26074, 26322,
            27277, 27286, 27265, 27301, 27273, 27295, 27291,
            27297, 27294, 27271, 27283, 27278, 27285, 27267,
            27304, 27300, 27281, 27263, 27302, 27290, 27269,
            27276, 27282, 27483, 27565, 27657, 28620, 28585,
            28660, 28628, 28643, 28636, 28653, 28647, 28646,
            28638, 28658, 28637, 28642, 28648, 29153, 29169,
            29160, 29170, 29156, 29168, 29154, 29555, 29550,
            29551, 29847, 29874, 29867, 29840, 29866, 29869,
            29873, 29861, 29871, 29968, 29969, 29970, 29967,
            30084, 30275, 30280, 30281, 30279, 30372, 30441,
            30645, 30635, 30642, 30647, 30646, 30644, 30641,
            30632, 30704, 30963, 30973, 30978, 30971, 30972,
            30962, 30981, 30969, 30974, 30980, 31147, 31144,
            31324, 31323, 31318, 31320, 31316, 31322, 31422,
            31424, 31425, 31749, 31759, 31730, 31744, 31743,
            31739, 31758, 31732, 31755, 31731, 31746, 31753,
            31747, 31745, 31736, 31741, 31750, 31728, 31729,
            31760, 31754, 31976, 32301, 32316, 32322, 32307,
            38984, 32312, 32298, 32329, 32320, 32327, 32297,
            32332, 32304, 32315, 32310, 32324, 32314, 32581,
            32639, 32638, 32637, 32756, 32754, 32812, 33211,
            33220, 33228, 33226, 33221, 33223, 33212, 33257,
            33371, 33370, 33372, 34179, 34176, 34191, 34215,
            34197, 34208, 34187, 34211, 34171, 34212, 34202,
            34206, 34167, 34172, 34185, 34209, 34170, 34168,
            34135, 34190, 34198, 34182, 34189, 34201, 34205,
            34177, 34210, 34178, 34184, 34181, 34169, 34166,
            34200, 34192, 34207, 34408, 34750, 34730, 34733,
            34757, 34736, 34732, 34745, 34741, 34748, 34734,
            34761, 34755, 34754, 34764, 34743, 34735, 34756,
            34762, 34740, 34742, 34751, 34744, 34749, 34782,
            34738, 35125, 35123, 35132, 35134, 35137, 35154,
            35127, 35138, 35245, 35247, 35246, 35314, 35315,
            35614, 35608, 35606, 35601, 35589, 35595, 35618,
            35599, 35602, 35605, 35591, 35597, 35592, 35590,
            35612, 35603, 35610, 35919, 35952, 35954, 35953,
            35951, 35989, 35988, 36089, 36207, 36430, 36429,
            36435, 36432, 36428, 36423, 36675, 36672, 36997,
            36990, 37176, 37274, 37282, 37275, 37273, 37279,
            37281, 37277, 37280, 37793, 37763, 37807, 37732,
            37718, 37703, 37756, 37720, 37724, 37750, 37705,
            37712, 37713, 37728, 37741, 37775, 37708, 37738,
            37753, 37719, 37717, 37714, 37711, 37745, 37751,
            37755, 37729, 37726, 37731, 37735, 37760, 37710,
            37721, 38343, 38336, 38345, 38339, 38341, 38327,
            38574, 38576, 38572, 38688, 38687, 38680, 38685,
            38681, 38810, 38817, 38812, 38814, 38813, 38869,
            38868, 38897, 38977, 38980, 38986, 38985, 38981,
            38979, 39205, 39211, 39212, 39210, 39219, 39218,
            39215, 39213, 39217, 39216, 39320, 39331, 39329,
            39426, 39418, 39412, 39415, 39417, 39416, 39414,
            39419, 39421, 39422, 39420, 39427, 39614, 39678,
            39677, 39681, 39676, 39752, 39834, 39848, 39838,
            39835, 39846, 39841, 39845, 39844, 39814, 39842,
            39840, 39855, 40243, 40257, 40295, 40246, 40238,
            40239, 40241, 40248, 40240, 40261, 40258, 40259,
            40254, 40247, 40256, 40253, 32757, 40237, 40586,
            40585, 40589, 40624, 40648, 40666, 40699, 40703,
            40740, 40739, 40738, 40788, 40864, 20785, 20781,
            20782, 22168, 22172, 22167, 22170, 22173, 22169,
            22896, 23356, 23657, 23658, 24000, 24173, 24174,
            25048, 25055, 25069, 25070, 25073, 25066, 25072,
            25067, 25046, 25065, 25855, 25860, 25853, 25848,
            25857, 25859, 25852, 26004, 26075, 26330, 26331,
            26328, 27333, 27321, 27325, 27361, 27334, 27322,
            27318, 27319, 27335, 27316, 27309, 27486, 27593,
            27659, 28679, 28684, 28685, 28673, 28677, 28692,
            28686, 28671, 28672, 28667, 28710, 28668, 28663,
            28682, 29185, 29183, 29177, 29187, 29181, 29558,
            29880, 29888, 29877, 29889, 29886, 29878, 29883,
            29890, 29972, 29971, 30300, 30308, 30297, 30288,
            30291, 30295, 30298, 30374, 30397, 30444, 30658,
            30650, 30975, 30988, 30995, 30996, 30985, 30992,
            30994, 30993, 31149, 31148, 31327, 31772, 31785,
            31769, 31776, 31775, 31789, 31773, 31782, 31784,
            31778, 31781, 31792, 32348, 32336, 32342, 32355,
            32344, 32354, 32351, 32337, 32352, 32343, 32339,
            32693, 32691, 32759, 32760, 32885, 33233, 33234,
            33232, 33375, 33374, 34228, 34246, 34240, 34243,
            34242, 34227, 34229, 34237, 34247, 34244, 34239,
            34251, 34254, 34248, 34245, 34225, 34230, 34258,
            34340, 34232, 34231, 34238, 34409, 34791, 34790,
            34786, 34779, 34795, 34794, 34789, 34783, 34803,
            34788, 34772, 34780, 34771, 34797, 34776, 34787,
            34724, 34775, 34777, 34817, 34804, 34792, 34781,
            35155, 35147, 35151, 35148, 35142, 35152, 35153,
            35145, 35626, 35623, 35619, 35635, 35632, 35637,
            35655, 35631, 35644, 35646, 35633, 35621, 35639,
            35622, 35638, 35630, 35620, 35643, 35645, 35642,
            35906, 35957, 35993, 35992, 35991, 36094, 36100,
            36098, 36096, 36444, 36450, 36448, 36439, 36438,
            36446, 36453, 36455, 36443, 36442, 36449, 36445,
            36457, 36436, 36678, 36679, 36680, 36683, 37160,
            37178, 37179, 37182, 37288, 37285, 37287, 37295,
            37290, 37813, 37772, 37778, 37815, 37787, 37789,
            37769, 37799, 37774, 37802, 37790, 37798, 37781,
            37768, 37785, 37791, 37773, 37809, 37777, 37810,
            37796, 37800, 37812, 37795, 37797, 38354, 38355,
            38353, 38579, 38615, 38618, 24002, 38623, 38616,
            38621, 38691, 38690, 38693, 38828, 38830, 38824,
            38827, 38820, 38826, 38818, 38821, 38871, 38873,
            38870, 38872, 38906, 38992, 38993, 38994, 39096,
            39233, 39228, 39226, 39439, 39435, 39433, 39437,
            39428, 39441, 39434, 39429, 39431, 39430, 39616,
            39644, 39688, 39684, 39685, 39721, 39733, 39754,
            39756, 39755, 39879, 39878, 39875, 39871, 39873,
            39861, 39864, 39891, 39862, 39876, 39865, 39869,
            40284, 40275, 40271, 40266, 40283, 40267, 40281,
            40278, 40268, 40279, 40274, 40276, 40287, 40280,
            40282, 40590, 40588, 40671, 40705, 40704, 40726,
            40741, 40747, 40746, 40745, 40744, 40780, 40789,
            20788, 20789, 21142, 21239, 21428, 22187, 22189,
            22182, 22183, 22186, 22188, 22746, 22749, 22747,
            22802, 23357, 23358, 23359, 24003, 24176, 24511,
            25083, 25863, 25872, 25869, 25865, 25868, 25870,
            25988, 26078, 26077, 26334, 27367, 27360, 27340,
            27345, 27353, 27339, 27359, 27356, 27344, 27371,
            27343, 27341, 27358, 27488, 27568, 27660, 28697,
            28711, 28704, 28694, 28715, 28705, 28706, 28707,
            28713, 28695, 28708, 28700, 28714, 29196, 29194,
            29191, 29186, 29189, 29349, 29350, 29348, 29347,
            29345, 29899, 29893, 29879, 29891, 29974, 30304,
            30665, 30666, 30660, 30705, 31005, 31003, 31009,
            31004, 30999, 31006, 31152, 31335, 31336, 31795,
            31804, 31801, 31788, 31803, 31980, 31978, 32374,
            32373, 32376, 32368, 32375, 32367, 32378, 32370,
            32372, 32360, 32587, 32586, 32643, 32646, 32695,
            32765, 32766, 32888, 33239, 33237, 33380, 33377,
            33379, 34283, 34289, 34285, 34265, 34273, 34280,
            34266, 34263, 34284, 34290, 34296, 34264, 34271,
            34275, 34268, 34257, 34288, 34278, 34287, 34270,
            34274, 34816, 34810, 34819, 34806, 34807, 34825,
            34828, 34827, 34822, 34812, 34824, 34815, 34826,
            34818, 35170, 35162, 35163, 35159, 35169, 35164,
            35160, 35165, 35161, 35208, 35255, 35254, 35318,
            35664, 35656, 35658, 35648, 35667, 35670, 35668,
            35659, 35669, 35665, 35650, 35666, 35671, 35907,
            35959, 35958, 35994, 36102, 36103, 36105, 36268,
            36266, 36269, 36267, 36461, 36472, 36467, 36458,
            36463, 36475, 36546, 36690, 36689, 36687, 36688,
            36691, 36788, 37184, 37183, 37296, 37293, 37854,
            37831, 37839, 37826, 37850, 37840, 37881, 37868,
            37836, 37849, 37801, 37862, 37834, 37844, 37870,
            37859, 37845, 37828, 37838, 37824, 37842, 37863,
            38269, 38362, 38363, 38625, 38697, 38699, 38700,
            38696, 38694, 38835, 38839, 38838, 38877, 38878,
            38879, 39004, 39001, 39005, 38999, 39103, 39101,
            39099, 39102, 39240, 39239, 39235, 39334, 39335,
            39450, 39445, 39461, 39453, 39460, 39451, 39458,
            39456, 39463, 39459, 39454, 39452, 39444, 39618,
            39691, 39690, 39694, 39692, 39735, 39914, 39915,
            39904, 39902, 39908, 39910, 39906, 39920, 39892,
            39895, 39916, 39900, 39897, 39909, 39893, 39905,
            39898, 40311, 40321, 40330, 40324, 40328, 40305,
            40320, 40312, 40326, 40331, 40332, 40317, 40299,
            40308, 40309, 40304, 40297, 40325, 40307, 40315,
            40322, 40303, 40313, 40319, 40327, 40296, 40596,
            40593, 40640, 40700, 40749, 40768, 40769, 40781,
            40790, 40791, 40792, 21303, 22194, 22197, 22195,
            22755, 23365, 24006, 24007, 24302, 24303, 24512,
            24513, 25081, 25879, 25878, 25877, 25875, 26079,
            26344, 26339, 26340, 27379, 27376, 27370, 27368,
            27385, 27377, 27374, 27375, 28732, 28725, 28719,
            28727, 28724, 28721, 28738, 28728, 28735, 28730,
            28729, 28736, 28731, 28723, 28737, 29203, 29204,
            29352, 29565, 29564, 29882, 30379, 30378, 30398,
            30445, 30668, 30670, 30671, 30669, 30706, 31013,
            31011, 31015, 31016, 31012, 31017, 31154, 31342,
            31340, 31341, 31479, 31817, 31816, 31818, 31815,
            31813, 31982, 32379, 32382, 32385, 32384, 32698,
            32767, 32889, 33243, 33241, 33291, 33384, 33385,
            34338, 34303, 34305, 34302, 34331, 34304, 34294,
            34308, 34313, 34309, 34316, 34301, 34841, 34832,
            34833, 34839, 34835, 34838, 35171, 35174, 35257,
            35319, 35680, 35690, 35677, 35688, 35683, 35685,
            35687, 35693, 36270, 36486, 36488, 36484, 36697,
            36694, 36695, 36693, 36696, 36698, 37005, 37187,
            37185, 37303, 37301, 37298, 37299, 37899, 37907,
            37883, 37920, 37903, 37908, 37886, 37909, 37904,
            37928, 37913, 37901, 37877, 37888, 37879, 37895,
            37902, 37910, 37906, 37882, 37897, 37880, 37898,
            37887, 37884, 37900, 37878, 37905, 37894, 38366,
            38368, 38367, 38702, 38703, 38841, 38843, 38909,
            38910, 39008, 39010, 39011, 39007, 39105, 39106,
            39248, 39246, 39257, 39244, 39243, 39251, 39474,
            39476, 39473, 39468, 39466, 39478, 39465, 39470,
            39480, 39469, 39623, 39626, 39622, 39696, 39698,
            39697, 39947, 39944, 39927, 39941, 39954, 39928,
            40000, 39943, 39950, 39942, 39959, 39956, 39945,
            40351, 40345, 40356, 40349, 40338, 40344, 40336,
            40347, 40352, 40340, 40348, 40362, 40343, 40353,
            40346, 40354, 40360, 40350, 40355, 40383, 40361,
            40342, 40358, 40359, 40601, 40603, 40602, 40677,
            40676, 40679, 40678, 40752, 40750, 40795, 40800,
            40798, 40797, 40793, 40849, 20794, 20793, 21144,
            21143, 22211, 22205, 22206, 23368, 23367, 24011,
            24015, 24305, 25085, 25883, 27394, 27388, 27395,
            27384, 27392, 28739, 28740, 28746, 28744, 28745,
            28741, 28742, 29213, 29210, 29209, 29566, 29975,
            30314, 30672, 31021, 31025, 31023, 31828, 31827,
            31986, 32394, 32391, 32392, 32395, 32390, 32397,
            32589, 32699, 32816, 33245, 34328, 34346, 34342,
            34335, 34339, 34332, 34329, 34343, 34350, 34337,
            34336, 34345, 34334, 34341, 34857, 34845, 34843,
            34848, 34852, 34844, 34859, 34890, 35181, 35177,
            35182, 35179, 35322, 35705, 35704, 35653, 35706,
            35707, 36112, 36116, 36271, 36494, 36492, 36702,
            36699, 36701, 37190, 37188, 37189, 37305, 37951,
            37947, 37942, 37929, 37949, 37948, 37936, 37945,
            37930, 37943, 37932, 37952, 37937, 38373, 38372,
            38371, 38709, 38714, 38847, 38881, 39012, 39113,
            39110, 39104, 39256, 39254, 39481, 39485, 39494,
            39492, 39490, 39489, 39482, 39487, 39629, 39701,
            39703, 39704, 39702, 39738, 39762, 39979, 39965,
            39964, 39980, 39971, 39976, 39977, 39972, 39969,
            40375, 40374, 40380, 40385, 40391, 40394, 40399,
            40382, 40389, 40387, 40379, 40373, 40398, 40377,
            40378, 40364, 40392, 40369, 40365, 40396, 40371,
            40397, 40370, 40570, 40604, 40683, 40686, 40685,
            40731, 40728, 40730, 40753, 40782, 40805, 40804,
            40850, 20153, 22214, 22213, 22219, 22897, 23371,
            23372, 24021, 24017, 24306, 25889, 25888, 25894,
            25890, 27403, 27400, 27401, 27661, 28757, 28758,
            28759, 28754, 29214, 29215, 29353, 29567, 29912,
            29909, 29913, 29911, 30317, 30381, 31029, 31156,
            31344, 31345, 31831, 31836, 31833, 31835, 31834,
            31988, 31985, 32401, 32591, 32647, 33246, 33387,
            34356, 34357, 34355, 34348, 34354, 34358, 34860,
            34856, 34854, 34858, 34853, 35185, 35263, 35262,
            35323, 35710, 35716, 35714, 35718, 35717, 35711,
            36117, 36501, 36500, 36506, 36498, 36496, 36502,
            36503, 36704, 36706, 37191, 37964, 37968, 37962,
            37963, 37967, 37959, 37957, 37960, 37961, 37958,
            38719, 38883, 39018, 39017, 39115, 39252, 39259,
            39502, 39507, 39508, 39500, 39503, 39496, 39498,
            39497, 39506, 39504, 39632, 39705, 39723, 39739,
            39766, 39765, 40006, 40008, 39999, 40004, 39993,
            39987, 40001, 39996, 39991, 39988, 39986, 39997,
            39990, 40411, 40402, 40414, 40410, 40395, 40400,
            40412, 40401, 40415, 40425, 40409, 40408, 40406,
            40437, 40405, 40413, 40630, 40688, 40757, 40755,
            40754, 40770, 40811, 40853, 40866, 20797, 21145,
            22760, 22759, 22898, 23373, 24024, 34863, 24399,
            25089, 25091, 25092, 25897, 25893, 26006, 26347,
            27409, 27410, 27407, 27594, 28763, 28762, 29218,
            29570, 29569, 29571, 30320, 30676, 31847, 31846,
            32405, 33388, 34362, 34368, 34361, 34364, 34353,
            34363, 34366, 34864, 34866, 34862, 34867, 35190,
            35188, 35187, 35326, 35724, 35726, 35723, 35720,
            35909, 36121, 36504, 36708, 36707, 37308, 37986,
            37973, 37981, 37975, 37982, 38852, 38853, 38912,
            39510, 39513, 39710, 39711, 39712, 40018, 40024,
            40016, 40010, 40013, 40011, 40021, 40025, 40012,
            40014, 40443, 40439, 40431, 40419, 40427, 40440,
            40420, 40438, 40417, 40430, 40422, 40434, 40432,
            40418, 40428, 40436, 40435, 40424, 40429, 40642,
            40656, 40690, 40691, 40710, 40732, 40760, 40759,
            40758, 40771, 40783, 40817, 40816, 40814, 40815,
            22227, 22221, 23374, 23661, 25901, 26349, 26350,
            27411, 28767, 28769, 28765, 28768, 29219, 29915,
            29925, 30677, 31032, 31159, 31158, 31850, 32407,
            32649, 33389, 34371, 34872, 34871, 34869, 34891,
            35732, 35733, 36510, 36511, 36512, 36509, 37310,
            37309, 37314, 37995, 37992, 37993, 38629, 38726,
            38723, 38727, 38855, 38885, 39518, 39637, 39769,
            40035, 40039, 40038, 40034, 40030, 40032, 40450,
            40446, 40455, 40451, 40454, 40453, 40448, 40449,
            40457, 40447, 40445, 40452, 40608, 40734, 40774,
            40820, 40821, 40822, 22228, 25902, 26040, 27416,
            27417, 27415, 27418, 28770, 29222, 29354, 30680,
            30681, 31033, 31849, 31851, 31990, 32410, 32408,
            32411, 32409, 33248, 33249, 34374, 34375, 34376,
            35193, 35194, 35196, 35195, 35327, 35736, 35737,
            36517, 36516, 36515, 37998, 37997, 37999, 38001,
            38003, 38729, 39026, 39263, 40040, 40046, 40045,
            40459, 40461, 40464, 40463, 40466, 40465, 40609,
            40693, 40713, 40775, 40824, 40827, 40826, 40825,
            22302, 28774, 31855, 34876, 36274, 36518, 37315,
            38004, 38008, 38006, 38005, 39520, 40052, 40051,
            40049, 40053, 40468, 40467, 40694, 40714, 40868,
            28776, 28773, 31991, 34410, 34878, 34877, 34879,
            35742, 35996, 36521, 36553, 38731, 39027, 39028,
            39116, 39265, 39339, 39524, 39526, 39527, 39716,
            40469, 40471, 40776, 25095, 27422, 29223, 34380,
            36520, 38018, 38016, 38017, 39529, 39528, 39726,
            40473, 29225, 34379, 35743, 38019, 40057, 40631,
            30325, 39531, 40058, 40477, 28777, 28778, 40612,
            40830, 40777, 40856, 30849, 37561, 35023, 22715,
            24658, 31911, 23290, 9556, 9574, 9559, 9568, 9580,
            9571, 9562, 9577, 9565, 9554, 9572, 9557, 9566,
            9578, 9569, 9560, 9575, 9563, 9555, 9573, 9558,
            9567, 9579, 9570, 9561, 9576, 9564, 9553, 9552,
            9581, 9582, 9584, 9583, 65517, 132423, 37595,
            132575, 147397, 34124, 17077, 29679, 20917, 13897,
            149826, 166372, 37700, 137691, 33518, 146632, 30780,
            26436, 25311, 149811, 166314, 131744, 158643,
            135941, 20395, 140525, 20488, 159017, 162436,
            144896, 150193, 140563, 20521, 131966, 24484,
            131968, 131911, 28379, 132127, 20605, 20737, 13434,
            20750, 39020, 14147, 33814, 149924, 132231, 20832,
            144308, 20842, 134143, 139516, 131813, 140592,
            132494, 143923, 137603, 23426, 34685, 132531,
            146585, 20914, 20920, 40244, 20937, 20943, 20945,
            15580, 20947, 150182, 20915, 20962, 21314, 20973,
            33741, 26942, 145197, 24443, 21003, 21030, 21052,
            21173, 21079, 21140, 21177, 21189, 31765, 34114,
            21216, 34317, 158483, 21253, 166622, 21833, 28377,
            147328, 133460, 147436, 21299, 21316, 134114, 27851,
            136998, 26651, 29653, 24650, 16042, 14540, 136936,
            29149, 17570, 21357, 21364, 165547, 21374, 21375,
            136598, 136723, 30694, 21395, 166555, 21408, 21419,
            21422, 29607, 153458, 16217, 29596, 21441, 21445,
            27721, 20041, 22526, 21465, 15019, 134031, 21472,
            147435, 142755, 21494, 134263, 21523, 28793, 21803,
            26199, 27995, 21613, 158547, 134516, 21853, 21647,
            21668, 18342, 136973, 134877, 15796, 134477, 166332,
            140952, 21831, 19693, 21551, 29719, 21894, 21929,
            22021, 137431, 147514, 17746, 148533, 26291, 135348,
            22071, 26317, 144010, 26276, 26285, 22093, 22095,
            30961, 22257, 38791, 21502, 22272, 22255, 22253,
            166758, 13859, 135759, 22342, 147877, 27758, 28811,
            22338, 14001, 158846, 22502, 136214, 22531, 136276,
            148323, 22566, 150517, 22620, 22698, 13665, 22752,
            22748, 135740, 22779, 23551, 22339, 172368, 148088,
            37843, 13729, 22815, 26790, 14019, 28249, 136766,
            23076, 21843, 136850, 34053, 22985, 134478, 158849,
            159018, 137180, 23001, 137211, 137138, 159142,
            28017, 137256, 136917, 23033, 159301, 23211, 23139,
            14054, 149929, 23159, 14088, 23190, 29797, 23251,
            159649, 140628, 15749, 137489, 14130, 136888, 24195,
            21200, 23414, 25992, 23420, 162318, 16388, 18525,
            131588, 23509, 24928, 137780, 154060, 132517, 23539,
            23453, 19728, 23557, 138052, 23571, 29646, 23572,
            138405, 158504, 23625, 18653, 23685, 23785, 23791,
            23947, 138745, 138807, 23824, 23832, 23878, 138916,
            23738, 24023, 33532, 14381, 149761, 139337, 139635,
            33415, 14390, 15298, 24110, 27274, 24181, 24186,
            148668, 134355, 21414, 20151, 24272, 21416, 137073,
            24073, 24308, 164994, 24313, 24315, 14496, 24316,
            26686, 37915, 24333, 131521, 194708, 15070, 18606,
            135994, 24378, 157832, 140240, 24408, 140401, 24419,
            38845, 159342, 24434, 37696, 166454, 24487, 23990,
            15711, 152144, 139114, 159992, 140904, 37334,
            131742, 166441, 24625, 26245, 137335, 14691, 15815,
            13881, 22416, 141236, 31089, 15936, 24734, 24740,
            24755, 149890, 149903, 162387, 29860, 20705, 23200,
            24932, 33828, 24898, 194726, 159442, 24961, 20980,
            132694, 24967, 23466, 147383, 141407, 25043, 166813,
            170333, 25040, 14642, 141696, 141505, 24611, 24924,
            25886, 25483, 131352, 25285, 137072, 25301, 142861,
            25452, 149983, 14871, 25656, 25592, 136078, 137212,
            25744, 28554, 142902, 38932, 147596, 153373, 25825,
            25829, 38011, 14950, 25658, 14935, 25933, 28438,
            150056, 150051, 25989, 25965, 25951, 143486, 26037,
            149824, 19255, 26065, 16600, 137257, 26080, 26083,
            24543, 144384, 26136, 143863, 143864, 26180, 143780,
            143781, 26187, 134773, 26215, 152038, 26227, 26228,
            138813, 143921, 165364, 143816, 152339, 30661,
            141559, 39332, 26370, 148380, 150049, 15147, 27130,
            145346, 26462, 26471, 26466, 147917, 168173, 26583,
            17641, 26658, 28240, 37436, 26625, 144358, 159136,
            26717, 144495, 27105, 27147, 166623, 26995, 26819,
            144845, 26881, 26880, 15666, 14849, 144956, 15232,
            26540, 26977, 166474, 17148, 26934, 27032, 15265,
            132041, 33635, 20624, 27129, 144985, 139562, 27205,
            145155, 27293, 15347, 26545, 27336, 168348, 15373,
            27421, 133411, 24798, 27445, 27508, 141261, 28341,
            146139, 132021, 137560, 14144, 21537, 146266, 27617,
            147196, 27612, 27703, 140427, 149745, 158545, 27738,
            33318, 27769, 146876, 17605, 146877, 147876, 149772,
            149760, 146633, 14053, 15595, 134450, 39811, 143865,
            140433, 32655, 26679, 159013, 159137, 159211, 28054,
            27996, 28284, 28420, 149887, 147589, 159346, 34099,
            159604, 20935, 27804, 28189, 33838, 166689, 28207,
            146991, 29779, 147330, 31180, 28239, 23185, 143435,
            28664, 14093, 28573, 146992, 28410, 136343, 147517,
            17749, 37872, 28484, 28508, 15694, 28532, 168304,
            15675, 28575, 147780, 28627, 147601, 147797, 147513,
            147440, 147380, 147775, 20959, 147798, 147799,
            147776, 156125, 28747, 28798, 28839, 28801, 28876,
            28885, 28886, 28895, 16644, 15848, 29108, 29078,
            148087, 28971, 28997, 23176, 29002, 29038, 23708,
            148325, 29007, 37730, 148161, 28972, 148570, 150055,
            150050, 29114, 166888, 28861, 29198, 37954, 29205,
            22801, 37955, 29220, 37697, 153093, 29230, 29248,
            149876, 26813, 29269, 29271, 15957, 143428, 26637,
            28477, 29314, 29482, 29483, 149539, 165931, 18669,
            165892, 29480, 29486, 29647, 29610, 134202, 158254,
            29641, 29769, 147938, 136935, 150052, 26147, 14021,
            149943, 149901, 150011, 29687, 29717, 26883, 150054,
            29753, 132547, 16087, 29788, 141485, 29792, 167602,
            29767, 29668, 29814, 33721, 29804, 14128, 29812,
            37873, 27180, 29826, 18771, 150156, 147807, 150137,
            166799, 23366, 166915, 137374, 29896, 137608, 29966,
            29929, 29982, 167641, 137803, 23511, 167596, 37765,
            30029, 30026, 30055, 30062, 151426, 16132, 150803,
            30094, 29789, 30110, 30132, 30210, 30252, 30289,
            30287, 30319, 30326, 156661, 30352, 33263, 14328,
            157969, 157966, 30369, 30373, 30391, 30412, 159647,
            33890, 151709, 151933, 138780, 30494, 30502, 30528,
            25775, 152096, 30552, 144044, 30639, 166244, 166248,
            136897, 30708, 30729, 136054, 150034, 26826, 30895,
            30919, 30931, 38565, 31022, 153056, 30935, 31028,
            30897, 161292, 36792, 34948, 166699, 155779, 140828,
            31110, 35072, 26882, 31104, 153687, 31133, 162617,
            31036, 31145, 28202, 160038, 16040, 31174, 168205,
            31188
        ],
        "euc-kr": [44034, 44035, 44037, 44038, 44043, 44044, 44045,
            44046, 44047, 44056, 44062, 44063, 44065, 44066,
            44067, 44069, 44070, 44071, 44072, 44073, 44074,
            44075, 44078, 44082, 44083, 44084, 44085, 44086,
            44087, 44090, 44091, 44093, 44094, 44095, 44097,
            44098, 44099, 44100, 44101, 44102, 44103, 44104,
            44105, 44106, 44108, 44110, 44111, 44112, 44113,
            44114, 44115, 44117, 44118, 44119, 44121, 44122,
            44123, 44125, 44126, 44127, 44128, 44129, 44130,
            44131, 44132, 44133, 44134, 44135, 44136, 44137,
            44138, 44139, 44140, 44141, 44142, 44143, 44146,
            44147, 44149, 44150, 44153, 44155, 44156, 44157,
            44158, 44159, 44162, 44167, 44168, 44173, 44174,
            44175, 44177, 44178, 44179, 44181, 44182, 44183,
            44184, 44185, 44186, 44187, 44190, 44194, 44195,
            44196, 44197, 44198, 44199, 44203, 44205, 44206,
            44209, 44210, 44211, 44212, 44213, 44214, 44215,
            44218, 44222, 44223, 44224, 44226, 44227, 44229,
            44230, 44231, 44233, 44234, 44235, 44237, 44238,
            44239, 44240, 44241, 44242, 44243, 44244, 44246,
            44248, 44249, 44250, 44251, 44252, 44253, 44254,
            44255, 44258, 44259, 44261, 44262, 44265, 44267,
            44269, 44270, 44274, 44276, 44279, 44280, 44281,
            44282, 44283, 44286, 44287, 44289, 44290, 44291,
            44293, 44295, 44296, 44297, 44298, 44299, 44302,
            44304, 44306, 44307, 44308, 44309, 44310, 44311,
            44313, 44314, 44315, 44317, 44318, 44319, 44321,
            44322, 44323, 44324, 44325, 44326, 44327, 44328,
            44330, 44331, 44334, 44335, 44336, 44337, 44338,
            44339, 44342, 44343, 44345, 44346, 44347, 44349,
            44350, 44351, 44352, 44353, 44354, 44355, 44358,
            44360, 44362, 44363, 44364, 44365, 44366, 44367,
            44369, 44370, 44371, 44373, 44374, 44375, 44377,
            44378, 44379, 44380, 44381, 44382, 44383, 44384,
            44386, 44388, 44389, 44390, 44391, 44392, 44393,
            44394, 44395, 44398, 44399, 44401, 44402, 44407,
            44408, 44409, 44410, 44414, 44416, 44419, 44420,
            44421, 44422, 44423, 44426, 44427, 44429, 44430,
            44431, 44433, 44434, 44435, 44436, 44437, 44438,
            44439, 44440, 44441, 44442, 44443, 44446, 44447,
            44448, 44449, 44450, 44451, 44453, 44454, 44455,
            44456, 44457, 44458, 44459, 44460, 44461, 44462,
            44463, 44464, 44465, 44466, 44467, 44468, 44469,
            44470, 44472, 44473, 44474, 44475, 44476, 44477,
            44478, 44479, 44482, 44483, 44485, 44486, 44487,
            44489, 44490, 44491, 44492, 44493, 44494, 44495,
            44498, 44500, 44501, 44502, 44503, 44504, 44505,
            44506, 44507, 44509, 44510, 44511, 44513, 44514,
            44515, 44517, 44518, 44519, 44520, 44521, 44522,
            44523, 44524, 44525, 44526, 44527, 44528, 44529,
            44530, 44531, 44532, 44533, 44534, 44535, 44538,
            44539, 44541, 44542, 44546, 44547, 44548, 44549,
            44550, 44551, 44554, 44556, 44558, 44559, 44560,
            44561, 44562, 44563, 44565, 44566, 44567, 44568,
            44569, 44570, 44571, 44572, 44573, 44574, 44575,
            44576, 44577, 44578, 44579, 44580, 44581, 44582,
            44583, 44584, 44585, 44586, 44587, 44588, 44589,
            44590, 44591, 44594, 44595, 44597, 44598, 44601,
            44603, 44604, 44605, 44606, 44607, 44610, 44612,
            44615, 44616, 44617, 44619, 44623, 44625, 44626,
            44627, 44629, 44631, 44632, 44633, 44634, 44635,
            44638, 44642, 44643, 44644, 44646, 44647, 44650,
            44651, 44653, 44654, 44655, 44657, 44658, 44659,
            44660, 44661, 44662, 44663, 44666, 44670, 44671,
            44672, 44673, 44674, 44675, 44678, 44679, 44680,
            44681, 44682, 44683, 44685, 44686, 44687, 44688,
            44689, 44690, 44691, 44692, 44693, 44694, 44695,
            44696, 44697, 44698, 44699, 44700, 44701, 44702,
            44703, 44704, 44705, 44706, 44707, 44708, 44709,
            44710, 44711, 44712, 44713, 44714, 44715, 44716,
            44717, 44718, 44719, 44720, 44721, 44722, 44723,
            44724, 44725, 44726, 44727, 44728, 44729, 44730,
            44731, 44735, 44737, 44738, 44739, 44741, 44742,
            44743, 44744, 44745, 44746, 44747, 44750, 44754,
            44755, 44756, 44757, 44758, 44759, 44762, 44763,
            44765, 44766, 44767, 44768, 44769, 44770, 44771,
            44772, 44773, 44774, 44775, 44777, 44778, 44780,
            44782, 44783, 44784, 44785, 44786, 44787, 44789,
            44790, 44791, 44793, 44794, 44795, 44797, 44798,
            44799, 44800, 44801, 44802, 44803, 44804, 44805,
            44806, 44809, 44810, 44811, 44812, 44814, 44815,
            44817, 44818, 44819, 44820, 44821, 44822, 44823,
            44824, 44825, 44826, 44827, 44828, 44829, 44830,
            44831, 44832, 44833, 44834, 44835, 44836, 44837,
            44838, 44839, 44840, 44841, 44842, 44843, 44846,
            44847, 44849, 44851, 44853, 44854, 44855, 44856,
            44857, 44858, 44859, 44862, 44864, 44868, 44869,
            44870, 44871, 44874, 44875, 44876, 44877, 44878,
            44879, 44881, 44882, 44883, 44884, 44885, 44886,
            44887, 44888, 44889, 44890, 44891, 44894, 44895,
            44896, 44897, 44898, 44899, 44902, 44903, 44904,
            44905, 44906, 44907, 44908, 44909, 44910, 44911,
            44912, 44913, 44914, 44915, 44916, 44917, 44918,
            44919, 44920, 44922, 44923, 44924, 44925, 44926,
            44927, 44929, 44930, 44931, 44933, 44934, 44935,
            44937, 44938, 44939, 44940, 44941, 44942, 44943,
            44946, 44947, 44948, 44950, 44951, 44952, 44953,
            44954, 44955, 44957, 44958, 44959, 44960, 44961,
            44962, 44963, 44964, 44965, 44966, 44967, 44968,
            44969, 44970, 44971, 44972, 44973, 44974, 44975,
            44976, 44977, 44978, 44979, 44980, 44981, 44982,
            44983, 44986, 44987, 44989, 44990, 44991, 44993,
            44994, 44995, 44996, 44997, 44998, 45002, 45004,
            45007, 45008, 45009, 45010, 45011, 45013, 45014,
            45015, 45016, 45017, 45018, 45019, 45021, 45022,
            45023, 45024, 45025, 45026, 45027, 45028, 45029,
            45030, 45031, 45034, 45035, 45036, 45037, 45038,
            45039, 45042, 45043, 45045, 45046, 45047, 45049,
            45050, 45051, 45052, 45053, 45054, 45055, 45058,
            45059, 45061, 45062, 45063, 45064, 45065, 45066,
            45067, 45069, 45070, 45071, 45073, 45074, 45075,
            45077, 45078, 45079, 45080, 45081, 45082, 45083,
            45086, 45087, 45088, 45089, 45090, 45091, 45092,
            45093, 45094, 45095, 45097, 45098, 45099, 45100,
            45101, 45102, 45103, 45104, 45105, 45106, 45107,
            45108, 45109, 45110, 45111, 45112, 45113, 45114,
            45115, 45116, 45117, 45118, 45119, 45120, 45121,
            45122, 45123, 45126, 45127, 45129, 45131, 45133,
            45135, 45136, 45137, 45138, 45142, 45144, 45146,
            45147, 45148, 45150, 45151, 45152, 45153, 45154,
            45155, 45156, 45157, 45158, 45159, 45160, 45161,
            45162, 45163, 45164, 45165, 45166, 45167, 45168,
            45169, 45170, 45171, 45172, 45173, 45174, 45175,
            45176, 45177, 45178, 45179, 45182, 45183, 45185,
            45186, 45187, 45189, 45190, 45191, 45192, 45193,
            45194, 45195, 45198, 45200, 45202, 45203, 45204,
            45205, 45206, 45207, 45211, 45213, 45214, 45219,
            45220, 45221, 45222, 45223, 45226, 45232, 45234,
            45238, 45239, 45241, 45242, 45243, 45245, 45246,
            45247, 45248, 45249, 45250, 45251, 45254, 45258,
            45259, 45260, 45261, 45262, 45263, 45266, 45267,
            45269, 45270, 45271, 45273, 45274, 45275, 45276,
            45277, 45278, 45279, 45281, 45282, 45283, 45284,
            45286, 45287, 45288, 45289, 45290, 45291, 45292,
            45293, 45294, 45295, 45296, 45297, 45298, 45299,
            45300, 45301, 45302, 45303, 45304, 45305, 45306,
            45307, 45308, 45309, 45310, 45311, 45312, 45313,
            45314, 45315, 45316, 45317, 45318, 45319, 45322,
            45325, 45326, 45327, 45329, 45332, 45333, 45334,
            45335, 45338, 45342, 45343, 45344, 45345, 45346,
            45350, 45351, 45353, 45354, 45355, 45357, 45358,
            45359, 45360, 45361, 45362, 45363, 45366, 45370,
            45371, 45372, 45373, 45374, 45375, 45378, 45379,
            45381, 45382, 45383, 45385, 45386, 45387, 45388,
            45389, 45390, 45391, 45394, 45395, 45398, 45399,
            45401, 45402, 45403, 45405, 45406, 45407, 45409,
            45410, 45411, 45412, 45413, 45414, 45415, 45416,
            45417, 45418, 45419, 45420, 45421, 45422, 45423,
            45424, 45425, 45426, 45427, 45428, 45429, 45430,
            45431, 45434, 45435, 45437, 45438, 45439, 45441,
            45443, 45444, 45445, 45446, 45447, 45450, 45452,
            45454, 45455, 45456, 45457, 45461, 45462, 45463,
            45465, 45466, 45467, 45469, 45470, 45471, 45472,
            45473, 45474, 45475, 45476, 45477, 45478, 45479,
            45481, 45482, 45483, 45484, 45485, 45486, 45487,
            45488, 45489, 45490, 45491, 45492, 45493, 45494,
            45495, 45496, 45497, 45498, 45499, 45500, 45501,
            45502, 45503, 45504, 45505, 45506, 45507, 45508,
            45509, 45510, 45511, 45512, 45513, 45514, 45515,
            45517, 45518, 45519, 45521, 45522, 45523, 45525,
            45526, 45527, 45528, 45529, 45530, 45531, 45534,
            45536, 45537, 45538, 45539, 45540, 45541, 45542,
            45543, 45546, 45547, 45549, 45550, 45551, 45553,
            45554, 45555, 45556, 45557, 45558, 45559, 45560,
            45562, 45564, 45566, 45567, 45568, 45569, 45570,
            45571, 45574, 45575, 45577, 45578, 45581, 45582,
            45583, 45584, 45585, 45586, 45587, 45590, 45592,
            45594, 45595, 45596, 45597, 45598, 45599, 45601,
            45602, 45603, 45604, 45605, 45606, 45607, 45608,
            45609, 45610, 45611, 45612, 45613, 45614, 45615,
            45616, 45617, 45618, 45619, 45621, 45622, 45623,
            45624, 45625, 45626, 45627, 45629, 45630, 45631,
            45632, 45633, 45634, 45635, 45636, 45637, 45638,
            45639, 45640, 45641, 45642, 45643, 45644, 45645,
            45646, 45647, 45648, 45649, 45650, 45651, 45652,
            45653, 45654, 45655, 45657, 45658, 45659, 45661,
            45662, 45663, 45665, 45666, 45667, 45668, 45669,
            45670, 45671, 45674, 45675, 45676, 45677, 45678,
            45679, 45680, 45681, 45682, 45683, 45686, 45687,
            45688, 45689, 45690, 45691, 45693, 45694, 45695,
            45696, 45697, 45698, 45699, 45702, 45703, 45704,
            45706, 45707, 45708, 45709, 45710, 45711, 45714,
            45715, 45717, 45718, 45719, 45723, 45724, 45725,
            45726, 45727, 45730, 45732, 45735, 45736, 45737,
            45739, 45741, 45742, 45743, 45745, 45746, 45747,
            45749, 45750, 45751, 45752, 45753, 45754, 45755,
            45756, 45757, 45758, 45759, 45760, 45761, 45762,
            45763, 45764, 45765, 45766, 45767, 45770, 45771,
            45773, 45774, 45775, 45777, 45779, 45780, 45781,
            45782, 45783, 45786, 45788, 45790, 45791, 45792,
            45793, 45795, 45799, 45801, 45802, 45808, 45809,
            45810, 45814, 45820, 45821, 45822, 45826, 45827,
            45829, 45830, 45831, 45833, 45834, 45835, 45836,
            45837, 45838, 45839, 45842, 45846, 45847, 45848,
            45849, 45850, 45851, 45853, 45854, 45855, 45856,
            45857, 45858, 45859, 45860, 45861, 45862, 45863,
            45864, 45865, 45866, 45867, 45868, 45869, 45870,
            45871, 45872, 45873, 45874, 45875, 45876, 45877,
            45878, 45879, 45880, 45881, 45882, 45883, 45884,
            45885, 45886, 45887, 45888, 45889, 45890, 45891,
            45892, 45893, 45894, 45895, 45896, 45897, 45898,
            45899, 45900, 45901, 45902, 45903, 45904, 45905,
            45906, 45907, 45911, 45913, 45914, 45917, 45920,
            45921, 45922, 45923, 45926, 45928, 45930, 45932,
            45933, 45935, 45938, 45939, 45941, 45942, 45943,
            45945, 45946, 45947, 45948, 45949, 45950, 45951,
            45954, 45958, 45959, 45960, 45961, 45962, 45963,
            45965, 45966, 45967, 45969, 45970, 45971, 45973,
            45974, 45975, 45976, 45977, 45978, 45979, 45980,
            45981, 45982, 45983, 45986, 45987, 45988, 45989,
            45990, 45991, 45993, 45994, 45995, 45997, 45998,
            45999, 46000, 46001, 46002, 46003, 46004, 46005,
            46006, 46007, 46008, 46009, 46010, 46011, 46012,
            46013, 46014, 46015, 46016, 46017, 46018, 46019,
            46022, 46023, 46025, 46026, 46029, 46031, 46033,
            46034, 46035, 46038, 46040, 46042, 46044, 46046,
            46047, 46049, 46050, 46051, 46053, 46054, 46055,
            46057, 46058, 46059, 46060, 46061, 46062, 46063,
            46064, 46065, 46066, 46067, 46068, 46069, 46070,
            46071, 46072, 46073, 46074, 46075, 46077, 46078,
            46079, 46080, 46081, 46082, 46083, 46084, 46085,
            46086, 46087, 46088, 46089, 46090, 46091, 46092,
            46093, 46094, 46095, 46097, 46098, 46099, 46100,
            46101, 46102, 46103, 46105, 46106, 46107, 46109,
            46110, 46111, 46113, 46114, 46115, 46116, 46117,
            46118, 46119, 46122, 46124, 46125, 46126, 46127,
            46128, 46129, 46130, 46131, 46133, 46134, 46135,
            46136, 46137, 46138, 46139, 46140, 46141, 46142,
            46143, 46144, 46145, 46146, 46147, 46148, 46149,
            46150, 46151, 46152, 46153, 46154, 46155, 46156,
            46157, 46158, 46159, 46162, 46163, 46165, 46166,
            46167, 46169, 46170, 46171, 46172, 46173, 46174,
            46175, 46178, 46180, 46182, 46183, 46184, 46185,
            46186, 46187, 46189, 46190, 46191, 46192, 46193,
            46194, 46195, 46196, 46197, 46198, 46199, 46200,
            46201, 46202, 46203, 46204, 46205, 46206, 46207,
            46209, 46210, 46211, 46212, 46213, 46214, 46215,
            46217, 46218, 46219, 46220, 46221, 46222, 46223,
            46224, 46225, 46226, 46227, 46228, 46229, 46230,
            46231, 46232, 46233, 46234, 46235, 46236, 46238,
            46239, 46240, 46241, 46242, 46243, 46245, 46246,
            46247, 46249, 46250, 46251, 46253, 46254, 46255,
            46256, 46257, 46258, 46259, 46260, 46262, 46264,
            46266, 46267, 46268, 46269, 46270, 46271, 46273,
            46274, 46275, 46277, 46278, 46279, 46281, 46282,
            46283, 46284, 46285, 46286, 46287, 46289, 46290,
            46291, 46292, 46294, 46295, 46296, 46297, 46298,
            46299, 46302, 46303, 46305, 46306, 46309, 46311,
            46312, 46313, 46314, 46315, 46318, 46320, 46322,
            46323, 46324, 46325, 46326, 46327, 46329, 46330,
            46331, 46332, 46333, 46334, 46335, 46336, 46337,
            46338, 46339, 46340, 46341, 46342, 46343, 46344,
            46345, 46346, 46347, 46348, 46349, 46350, 46351,
            46352, 46353, 46354, 46355, 46358, 46359, 46361,
            46362, 46365, 46366, 46367, 46368, 46369, 46370,
            46371, 46374, 46379, 46380, 46381, 46382, 46383,
            46386, 46387, 46389, 46390, 46391, 46393, 46394,
            46395, 46396, 46397, 46398, 46399, 46402, 46406,
            46407, 46408, 46409, 46410, 46414, 46415, 46417,
            46418, 46419, 46421, 46422, 46423, 46424, 46425,
            46426, 46427, 46430, 46434, 46435, 46436, 46437,
            46438, 46439, 46440, 46441, 46442, 46443, 46444,
            46445, 46446, 46447, 46448, 46449, 46450, 46451,
            46452, 46453, 46454, 46455, 46456, 46457, 46458,
            46459, 46460, 46461, 46462, 46463, 46464, 46465,
            46466, 46467, 46468, 46469, 46470, 46471, 46472,
            46473, 46474, 46475, 46476, 46477, 46478, 46479,
            46480, 46481, 46482, 46483, 46484, 46485, 46486,
            46487, 46488, 46489, 46490, 46491, 46492, 46493,
            46494, 46495, 46498, 46499, 46501, 46502, 46503,
            46505, 46508, 46509, 46510, 46511, 46514, 46518,
            46519, 46520, 46521, 46522, 46526, 46527, 46529,
            46530, 46531, 46533, 46534, 46535, 46536, 46537,
            46538, 46539, 46542, 46546, 46547, 46548, 46549,
            46550, 46551, 46553, 46554, 46555, 46556, 46557,
            46558, 46559, 46560, 46561, 46562, 46563, 46564,
            46565, 46566, 46567, 46568, 46569, 46570, 46571,
            46573, 46574, 46575, 46576, 46577, 46578, 46579,
            46580, 46581, 46582, 46583, 46584, 46585, 46586,
            46587, 46588, 46589, 46590, 46591, 46592, 46593,
            46594, 46595, 46596, 46597, 46598, 46599, 46600,
            46601, 46602, 46603, 46604, 46605, 46606, 46607,
            46610, 46611, 46613, 46614, 46615, 46617, 46618,
            46619, 46620, 46621, 46622, 46623, 46624, 46625,
            46626, 46627, 46628, 46630, 46631, 46632, 46633,
            46634, 46635, 46637, 46638, 46639, 46640, 46641,
            46642, 46643, 46645, 46646, 46647, 46648, 46649,
            46650, 46651, 46652, 46653, 46654, 46655, 46656,
            46657, 46658, 46659, 46660, 46661, 46662, 46663,
            46665, 46666, 46667, 46668, 46669, 46670, 46671,
            46672, 46673, 46674, 46675, 46676, 46677, 46678,
            46679, 46680, 46681, 46682, 46683, 46684, 46685,
            46686, 46687, 46688, 46689, 46690, 46691, 46693,
            46694, 46695, 46697, 46698, 46699, 46700, 46701,
            46702, 46703, 46704, 46705, 46706, 46707, 46708,
            46709, 46710, 46711, 46712, 46713, 46714, 46715,
            46716, 46717, 46718, 46719, 46720, 46721, 46722,
            46723, 46724, 46725, 46726, 46727, 46728, 46729,
            46730, 46731, 46732, 46733, 46734, 46735, 46736,
            46737, 46738, 46739, 46740, 46741, 46742, 46743,
            46744, 46745, 46746, 46747, 46750, 46751, 46753,
            46754, 46755, 46757, 46758, 46759, 46760, 46761,
            46762, 46765, 46766, 46767, 46768, 46770, 46771,
            46772, 46773, 46774, 46775, 46776, 46777, 46778,
            46779, 46780, 46781, 46782, 46783, 46784, 46785,
            46786, 46787, 46788, 46789, 46790, 46791, 46792,
            46793, 46794, 46795, 46796, 46797, 46798, 46799,
            46800, 46801, 46802, 46803, 46805, 46806, 46807,
            46808, 46809, 46810, 46811, 46812, 46813, 46814,
            46815, 46816, 46817, 46818, 46819, 46820, 46821,
            46822, 46823, 46824, 46825, 46826, 46827, 46828,
            46829, 46830, 46831, 46833, 46834, 46835, 46837,
            46838, 46839, 46841, 46842, 46843, 46844, 46845,
            46846, 46847, 46850, 46851, 46852, 46854, 46855,
            46856, 46857, 46858, 46859, 46860, 46861, 46862,
            46863, 46864, 46865, 46866, 46867, 46868, 46869,
            46870, 46871, 46872, 46873, 46874, 46875, 46876,
            46877, 46878, 46879, 46880, 46881, 46882, 46883,
            46884, 46885, 46886, 46887, 46890, 46891, 46893,
            46894, 46897, 46898, 46899, 46900, 46901, 46902,
            46903, 46906, 46908, 46909, 46910, 46911, 46912,
            46913, 46914, 46915, 46917, 46918, 46919, 46921,
            46922, 46923, 46925, 46926, 46927, 46928, 46929,
            46930, 46931, 46934, 46935, 46936, 46937, 46938,
            46939, 46940, 46941, 46942, 46943, 46945, 46946,
            46947, 46949, 46950, 46951, 46953, 46954, 46955,
            46956, 46957, 46958, 46959, 46962, 46964, 46966,
            46967, 46968, 46969, 46970, 46971, 46974, 46975,
            46977, 46978, 46979, 46981, 46982, 46983, 46984,
            46985, 46986, 46987, 46990, 46995, 46996, 46997,
            47002, 47003, 47005, 47006, 47007, 47009, 47010,
            47011, 47012, 47013, 47014, 47015, 47018, 47022,
            47023, 47024, 47025, 47026, 47027, 47030, 47031,
            47033, 47034, 47035, 47036, 47037, 47038, 47039,
            47040, 47041, 47042, 47043, 47044, 47045, 47046,
            47048, 47050, 47051, 47052, 47053, 47054, 47055,
            47056, 47057, 47058, 47059, 47060, 47061, 47062,
            47063, 47064, 47065, 47066, 47067, 47068, 47069,
            47070, 47071, 47072, 47073, 47074, 47075, 47076,
            47077, 47078, 47079, 47080, 47081, 47082, 47083,
            47086, 47087, 47089, 47090, 47091, 47093, 47094,
            47095, 47096, 47097, 47098, 47099, 47102, 47106,
            47107, 47108, 47109, 47110, 47114, 47115, 47117,
            47118, 47119, 47121, 47122, 47123, 47124, 47125,
            47126, 47127, 47130, 47132, 47134, 47135, 47136,
            47137, 47138, 47139, 47142, 47143, 47145, 47146,
            47147, 47149, 47150, 47151, 47152, 47153, 47154,
            47155, 47158, 47162, 47163, 47164, 47165, 47166,
            47167, 47169, 47170, 47171, 47173, 47174, 47175,
            47176, 47177, 47178, 47179, 47180, 47181, 47182,
            47183, 47184, 47186, 47188, 47189, 47190, 47191,
            47192, 47193, 47194, 47195, 47198, 47199, 47201,
            47202, 47203, 47205, 47206, 47207, 47208, 47209,
            47210, 47211, 47214, 47216, 47218, 47219, 47220,
            47221, 47222, 47223, 47225, 47226, 47227, 47229,
            47230, 47231, 47232, 47233, 47234, 47235, 47236,
            47237, 47238, 47239, 47240, 47241, 47242, 47243,
            47244, 47246, 47247, 47248, 47249, 47250, 47251,
            47252, 47253, 47254, 47255, 47256, 47257, 47258,
            47259, 47260, 47261, 47262, 47263, 47264, 47265,
            47266, 47267, 47268, 47269, 47270, 47271, 47273,
            47274, 47275, 47276, 47277, 47278, 47279, 47281,
            47282, 47283, 47285, 47286, 47287, 47289, 47290,
            47291, 47292, 47293, 47294, 47295, 47298, 47300,
            47302, 47303, 47304, 47305, 47306, 47307, 47309,
            47310, 47311, 47313, 47314, 47315, 47317, 47318,
            47319, 47320, 47321, 47322, 47323, 47324, 47326,
            47328, 47330, 47331, 47332, 47333, 47334, 47335,
            47338, 47339, 47341, 47342, 47343, 47345, 47346,
            47347, 47348, 47349, 47350, 47351, 47354, 47356,
            47358, 47359, 47360, 47361, 47362, 47363, 47365,
            47366, 47367, 47368, 47369, 47370, 47371, 47372,
            47373, 47374, 47375, 47376, 47377, 47378, 47379,
            47380, 47381, 47382, 47383, 47385, 47386, 47387,
            47388, 47389, 47390, 47391, 47393, 47394, 47395,
            47396, 47397, 47398, 47399, 47400, 47401, 47402,
            47403, 47404, 47405, 47406, 47407, 47408, 47409,
            47410, 47411, 47412, 47413, 47414, 47415, 47416,
            47417, 47418, 47419, 47422, 47423, 47425, 47426,
            47427, 47429, 47430, 47431, 47432, 47433, 47434,
            47435, 47437, 47438, 47440, 47442, 47443, 47444,
            47445, 47446, 47447, 47450, 47451, 47453, 47454,
            47455, 47457, 47458, 47459, 47460, 47461, 47462,
            47463, 47466, 47468, 47470, 47471, 47472, 47473,
            47474, 47475, 47478, 47479, 47481, 47482, 47483,
            47485, 47486, 47487, 47488, 47489, 47490, 47491,
            47494, 47496, 47499, 47500, 47503, 47504, 47505,
            47506, 47507, 47508, 47509, 47510, 47511, 47512,
            47513, 47514, 47515, 47516, 47517, 47518, 47519,
            47520, 47521, 47522, 47523, 47524, 47525, 47526,
            47527, 47528, 47529, 47530, 47531, 47534, 47535,
            47537, 47538, 47539, 47541, 47542, 47543, 47544,
            47545, 47546, 47547, 47550, 47552, 47554, 47555,
            47556, 47557, 47558, 47559, 47562, 47563, 47565,
            47571, 47572, 47573, 47574, 47575, 47578, 47580,
            47583, 47584, 47586, 47590, 47591, 47593, 47594,
            47595, 47597, 47598, 47599, 47600, 47601, 47602,
            47603, 47606, 47611, 47612, 47613, 47614, 47615,
            47618, 47619, 47620, 47621, 47622, 47623, 47625,
            47626, 47627, 47628, 47629, 47630, 47631, 47632,
            47633, 47634, 47635, 47636, 47638, 47639, 47640,
            47641, 47642, 47643, 47644, 47645, 47646, 47647,
            47648, 47649, 47650, 47651, 47652, 47653, 47654,
            47655, 47656, 47657, 47658, 47659, 47660, 47661,
            47662, 47663, 47664, 47665, 47666, 47667, 47668,
            47669, 47670, 47671, 47674, 47675, 47677, 47678,
            47679, 47681, 47683, 47684, 47685, 47686, 47687,
            47690, 47692, 47695, 47696, 47697, 47698, 47702,
            47703, 47705, 47706, 47707, 47709, 47710, 47711,
            47712, 47713, 47714, 47715, 47718, 47722, 47723,
            47724, 47725, 47726, 47727, 47730, 47731, 47733,
            47734, 47735, 47737, 47738, 47739, 47740, 47741,
            47742, 47743, 47744, 47745, 47746, 47750, 47752,
            47753, 47754, 47755, 47757, 47758, 47759, 47760,
            47761, 47762, 47763, 47764, 47765, 47766, 47767,
            47768, 47769, 47770, 47771, 47772, 47773, 47774,
            47775, 47776, 47777, 47778, 47779, 47780, 47781,
            47782, 47783, 47786, 47789, 47790, 47791, 47793,
            47795, 47796, 47797, 47798, 47799, 47802, 47804,
            47806, 47807, 47808, 47809, 47810, 47811, 47813,
            47814, 47815, 47817, 47818, 47819, 47820, 47821,
            47822, 47823, 47824, 47825, 47826, 47827, 47828,
            47829, 47830, 47831, 47834, 47835, 47836, 47837,
            47838, 47839, 47840, 47841, 47842, 47843, 47844,
            47845, 47846, 47847, 47848, 47849, 47850, 47851,
            47852, 47853, 47854, 47855, 47856, 47857, 47858,
            47859, 47860, 47861, 47862, 47863, 47864, 47865,
            47866, 47867, 47869, 47870, 47871, 47873, 47874,
            47875, 47877, 47878, 47879, 47880, 47881, 47882,
            47883, 47884, 47886, 47888, 47890, 47891, 47892,
            47893, 47894, 47895, 47897, 47898, 47899, 47901,
            47902, 47903, 47905, 47906, 47907, 47908, 47909,
            47910, 47911, 47912, 47914, 47916, 47917, 47918,
            47919, 47920, 47921, 47922, 47923, 47927, 47929,
            47930, 47935, 47936, 47937, 47938, 47939, 47942,
            47944, 47946, 47947, 47948, 47950, 47953, 47954,
            47955, 47957, 47958, 47959, 47961, 47962, 47963,
            47964, 47965, 47966, 47967, 47968, 47970, 47972,
            47973, 47974, 47975, 47976, 47977, 47978, 47979,
            47981, 47982, 47983, 47984, 47985, 47986, 47987,
            47988, 47989, 47990, 47991, 47992, 47993, 47994,
            47995, 47996, 47997, 47998, 47999, 48000, 48001,
            48002, 48003, 48004, 48005, 48006, 48007, 48009,
            48010, 48011, 48013, 48014, 48015, 48017, 48018,
            48019, 48020, 48021, 48022, 48023, 48024, 48025,
            48026, 48027, 48028, 48029, 48030, 48031, 48032,
            48033, 48034, 48035, 48037, 48038, 48039, 48041,
            48042, 48043, 48045, 48046, 48047, 48048, 48049,
            48050, 48051, 48053, 48054, 48056, 48057, 48058,
            48059, 48060, 48061, 48062, 48063, 48065, 48066,
            48067, 48069, 48070, 48071, 48073, 48074, 48075,
            48076, 48077, 48078, 48079, 48081, 48082, 48084,
            48085, 48086, 48087, 48088, 48089, 48090, 48091,
            48092, 48093, 48094, 48095, 48096, 48097, 48098,
            48099, 48100, 48101, 48102, 48103, 48104, 48105,
            48106, 48107, 48108, 48109, 48110, 48111, 48112,
            48113, 48114, 48115, 48116, 48117, 48118, 48119,
            48122, 48123, 48125, 48126, 48129, 48131, 48132,
            48133, 48134, 48135, 48138, 48142, 48144, 48146,
            48147, 48153, 48154, 48160, 48161, 48162, 48163,
            48166, 48168, 48170, 48171, 48172, 48174, 48175,
            48178, 48179, 48181, 48182, 48183, 48185, 48186,
            48187, 48188, 48189, 48190, 48191, 48194, 48198,
            48199, 48200, 48202, 48203, 48206, 48207, 48209,
            48210, 48211, 48212, 48213, 48214, 48215, 48216,
            48217, 48218, 48219, 48220, 48222, 48223, 48224,
            48225, 48226, 48227, 48228, 48229, 48230, 48231,
            48232, 48233, 48234, 48235, 48236, 48237, 48238,
            48239, 48240, 48241, 48242, 48243, 48244, 48245,
            48246, 48247, 48248, 48249, 48250, 48251, 48252,
            48253, 48254, 48255, 48256, 48257, 48258, 48259,
            48262, 48263, 48265, 48266, 48269, 48271, 48272,
            48273, 48274, 48275, 48278, 48280, 48283, 48284,
            48285, 48286, 48287, 48290, 48291, 48293, 48294,
            48297, 48298, 48299, 48300, 48301, 48302, 48303,
            48306, 48310, 48311, 48312, 48313, 48314, 48315,
            48318, 48319, 48321, 48322, 48323, 48325, 48326,
            48327, 48328, 48329, 48330, 48331, 48332, 48334,
            48338, 48339, 48340, 48342, 48343, 48345, 48346,
            48347, 48349, 48350, 48351, 48352, 48353, 48354,
            48355, 48356, 48357, 48358, 48359, 48360, 48361,
            48362, 48363, 48364, 48365, 48366, 48367, 48368,
            48369, 48370, 48371, 48375, 48377, 48378, 48379,
            48381, 48382, 48383, 48384, 48385, 48386, 48387,
            48390, 48392, 48394, 48395, 48396, 48397, 48398,
            48399, 48401, 48402, 48403, 48405, 48406, 48407,
            48408, 48409, 48410, 48411, 48412, 48413, 48414,
            48415, 48416, 48417, 48418, 48419, 48421, 48422,
            48423, 48424, 48425, 48426, 48427, 48429, 48430,
            48431, 48432, 48433, 48434, 48435, 48436, 48437,
            48438, 48439, 48440, 48441, 48442, 48443, 48444,
            48445, 48446, 48447, 48449, 48450, 48451, 48452,
            48453, 48454, 48455, 48458, 48459, 48461, 48462,
            48463, 48465, 48466, 48467, 48468, 48469, 48470,
            48471, 48474, 48475, 48476, 48477, 48478, 48479,
            48480, 48481, 48482, 48483, 48485, 48486, 48487,
            48489, 48490, 48491, 48492, 48493, 48494, 48495,
            48496, 48497, 48498, 48499, 48500, 48501, 48502,
            48503, 48504, 48505, 48506, 48507, 48508, 48509,
            48510, 48511, 48514, 48515, 48517, 48518, 48523,
            48524, 48525, 48526, 48527, 48530, 48532, 48534,
            48535, 48536, 48539, 48541, 48542, 48543, 48544,
            48545, 48546, 48547, 48549, 48550, 48551, 48552,
            48553, 48554, 48555, 48556, 48557, 48558, 48559,
            48561, 48562, 48563, 48564, 48565, 48566, 48567,
            48569, 48570, 48571, 48572, 48573, 48574, 48575,
            48576, 48577, 48578, 48579, 48580, 48581, 48582,
            48583, 48584, 48585, 48586, 48587, 48588, 48589,
            48590, 48591, 48592, 48593, 48594, 48595, 48598,
            48599, 48601, 48602, 48603, 48605, 48606, 48607,
            48608, 48609, 48610, 48611, 48612, 48613, 48614,
            48615, 48616, 48618, 48619, 48620, 48621, 48622,
            48623, 48625, 48626, 48627, 48629, 48630, 48631,
            48633, 48634, 48635, 48636, 48637, 48638, 48639,
            48641, 48642, 48644, 48646, 48647, 48648, 48649,
            48650, 48651, 48654, 48655, 48657, 48658, 48659,
            48661, 48662, 48663, 48664, 48665, 48666, 48667,
            48670, 48672, 48673, 48674, 48675, 48676, 48677,
            48678, 48679, 48680, 48681, 48682, 48683, 48684,
            48685, 48686, 48687, 48688, 48689, 48690, 48691,
            48692, 48693, 48694, 48695, 48696, 48697, 48698,
            48699, 48700, 48701, 48702, 48703, 48704, 48705,
            48706, 48707, 48710, 48711, 48713, 48714, 48715,
            48717, 48719, 48720, 48721, 48722, 48723, 48726,
            48728, 48732, 48733, 48734, 48735, 48738, 48739,
            48741, 48742, 48743, 48745, 48747, 48748, 48749,
            48750, 48751, 48754, 48758, 48759, 48760, 48761,
            48762, 48766, 48767, 48769, 48770, 48771, 48773,
            48774, 48775, 48776, 48777, 48778, 48779, 48782,
            48786, 48787, 48788, 48789, 48790, 48791, 48794,
            48795, 48796, 48797, 48798, 48799, 48800, 48801,
            48802, 48803, 48804, 48805, 48806, 48807, 48809,
            48810, 48811, 48812, 48813, 48814, 48815, 48816,
            48817, 48818, 48819, 48820, 48821, 48822, 48823,
            48824, 48825, 48826, 48827, 48828, 48829, 48830,
            48831, 48832, 48833, 48834, 48835, 48836, 48837,
            48838, 48839, 48840, 48841, 48842, 48843, 48844,
            48845, 48846, 48847, 48850, 48851, 48853, 48854,
            48857, 48858, 48859, 48860, 48861, 48862, 48863,
            48865, 48866, 48870, 48871, 48872, 48873, 48874,
            48875, 48877, 48878, 48879, 48880, 48881, 48882,
            48883, 48884, 48885, 48886, 48887, 48888, 48889,
            48890, 48891, 48892, 48893, 48894, 48895, 48896,
            48898, 48899, 48900, 48901, 48902, 48903, 48906,
            48907, 48908, 48909, 48910, 48911, 48912, 48913,
            48914, 48915, 48916, 48917, 48918, 48919, 48922,
            48926, 48927, 48928, 48929, 48930, 48931, 48932,
            48933, 48934, 48935, 48936, 48937, 48938, 48939,
            48940, 48941, 48942, 48943, 48944, 48945, 48946,
            48947, 48948, 48949, 48950, 48951, 48952, 48953,
            48954, 48955, 48956, 48957, 48958, 48959, 48962,
            48963, 48965, 48966, 48967, 48969, 48970, 48971,
            48972, 48973, 48974, 48975, 48978, 48979, 48980,
            48982, 48983, 48984, 48985, 48986, 48987, 48988,
            48989, 48990, 48991, 48992, 48993, 48994, 48995,
            48996, 48997, 48998, 48999, 49000, 49001, 49002,
            49003, 49004, 49005, 49006, 49007, 49008, 49009,
            49010, 49011, 49012, 49013, 49014, 49015, 49016,
            49017, 49018, 49019, 49020, 49021, 49022, 49023,
            49024, 49025, 49026, 49027, 49028, 49029, 49030,
            49031, 49032, 49033, 49034, 49035, 49036, 49037,
            49038, 49039, 49040, 49041, 49042, 49043, 49045,
            49046, 49047, 49048, 49049, 49050, 49051, 49052,
            49053, 49054, 49055, 49056, 49057, 49058, 49059,
            49060, 49061, 49062, 49063, 49064, 49065, 49066,
            49067, 49068, 49069, 49070, 49071, 49073, 49074,
            49075, 49076, 49077, 49078, 49079, 49080, 49081,
            49082, 49083, 49084, 49085, 49086, 49087, 49088,
            49089, 49090, 49091, 49092, 49094, 49095, 49096,
            49097, 49098, 49099, 49102, 49103, 49105, 49106,
            49107, 49109, 49110, 49111, 49112, 49113, 49114,
            49115, 49117, 49118, 49120, 49122, 49123, 49124,
            49125, 49126, 49127, 49128, 49129, 49130, 49131,
            49132, 49133, 49134, 49135, 49136, 49137, 49138,
            49139, 49140, 49141, 49142, 49143, 49144, 49145,
            49146, 49147, 49148, 49149, 49150, 49151, 49152,
            49153, 49154, 49155, 49156, 49157, 49158, 49159,
            49160, 49161, 49162, 49163, 49164, 49165, 49166,
            49167, 49168, 49169, 49170, 49171, 49172, 49173,
            49174, 49175, 49176, 49177, 49178, 49179, 49180,
            49181, 49182, 49183, 49184, 49185, 49186, 49187,
            49188, 49189, 49190, 49191, 49192, 49193, 49194,
            49195, 49196, 49197, 49198, 49199, 49200, 49201,
            49202, 49203, 49204, 49205, 49206, 49207, 49208,
            49209, 49210, 49211, 49213, 49214, 49215, 49216,
            49217, 49218, 49219, 49220, 49221, 49222, 49223,
            49224, 49225, 49226, 49227, 49228, 49229, 49230,
            49231, 49232, 49234, 49235, 49236, 49237, 49238,
            49239, 49241, 49242, 49243, 49245, 49246, 49247,
            49249, 49250, 49251, 49252, 49253, 49254, 49255,
            49258, 49259, 49260, 49261, 49262, 49263, 49264,
            49265, 49266, 49267, 49268, 49269, 49270, 49271,
            49272, 49273, 49274, 49275, 49276, 49277, 49278,
            49279, 49280, 49281, 49282, 49283, 49284, 49285,
            49286, 49287, 49288, 49289, 49290, 49291, 49292,
            49293, 49294, 49295, 49298, 49299, 49301, 49302,
            49303, 49305, 49306, 49307, 49308, 49309, 49310,
            49311, 49314, 49316, 49318, 49319, 49320, 49321,
            49322, 49323, 49326, 49329, 49330, 49335, 49336,
            49337, 49338, 49339, 49342, 49346, 49347, 49348,
            49350, 49351, 49354, 49355, 49357, 49358, 49359,
            49361, 49362, 49363, 49364, 49365, 49366, 49367,
            49370, 49374, 49375, 49376, 49377, 49378, 49379,
            49382, 49383, 49385, 49386, 49387, 49389, 49390,
            49391, 49392, 49393, 49394, 49395, 49398, 49400,
            49402, 49403, 49404, 49405, 49406, 49407, 49409,
            49410, 49411, 49413, 49414, 49415, 49417, 49418,
            49419, 49420, 49421, 49422, 49423, 49425, 49426,
            49427, 49428, 49430, 49431, 49432, 49433, 49434,
            49435, 49441, 49442, 49445, 49448, 49449, 49450,
            49451, 49454, 49458, 49459, 49460, 49461, 49463,
            49466, 49467, 49469, 49470, 49471, 49473, 49474,
            49475, 49476, 49477, 49478, 49479, 49482, 49486,
            49487, 49488, 49489, 49490, 49491, 49494, 49495,
            49497, 49498, 49499, 49501, 49502, 49503, 49504,
            49505, 49506, 49507, 49510, 49514, 49515, 49516,
            49517, 49518, 49519, 49521, 49522, 49523, 49525,
            49526, 49527, 49529, 49530, 49531, 49532, 49533,
            49534, 49535, 49536, 49537, 49538, 49539, 49540,
            49542, 49543, 49544, 49545, 49546, 49547, 49551,
            49553, 49554, 49555, 49557, 49559, 49560, 49561,
            49562, 49563, 49566, 49568, 49570, 49571, 49572,
            49574, 49575, 49578, 49579, 49581, 49582, 49583,
            49585, 49586, 49587, 49588, 49589, 49590, 49591,
            49592, 49593, 49594, 49595, 49596, 49598, 49599,
            49600, 49601, 49602, 49603, 49605, 49606, 49607,
            49609, 49610, 49611, 49613, 49614, 49615, 49616,
            49617, 49618, 49619, 49621, 49622, 49625, 49626,
            49627, 49628, 49629, 49630, 49631, 49633, 49634,
            49635, 49637, 49638, 49639, 49641, 49642, 49643,
            49644, 49645, 49646, 49647, 49650, 49652, 49653,
            49654, 49655, 49656, 49657, 49658, 49659, 49662,
            49663, 49665, 49666, 49667, 49669, 49670, 49671,
            49672, 49673, 49674, 49675, 49678, 49680, 49682,
            49683, 49684, 49685, 49686, 49687, 49690, 49691,
            49693, 49694, 49697, 49698, 49699, 49700, 49701,
            49702, 49703, 49706, 49708, 49710, 49712, 49715,
            49717, 49718, 49719, 49720, 49721, 49722, 49723,
            49724, 49725, 49726, 49727, 49728, 49729, 49730,
            49731, 49732, 49733, 49734, 49735, 49737, 49738,
            49739, 49740, 49741, 49742, 49743, 49746, 49747,
            49749, 49750, 49751, 49753, 49754, 49755, 49756,
            49757, 49758, 49759, 49761, 49762, 49763, 49764,
            49766, 49767, 49768, 49769, 49770, 49771, 49774,
            49775, 49777, 49778, 49779, 49781, 49782, 49783,
            49784, 49785, 49786, 49787, 49790, 49792, 49794,
            49795, 49796, 49797, 49798, 49799, 49802, 49803,
            49804, 49805, 49806, 49807, 49809, 49810, 49811,
            49812, 49813, 49814, 49815, 49817, 49818, 49820,
            49822, 49823, 49824, 49825, 49826, 49827, 49830,
            49831, 49833, 49834, 49835, 49838, 49839, 49840,
            49841, 49842, 49843, 49846, 49848, 49850, 49851,
            49852, 49853, 49854, 49855, 49856, 49857, 49858,
            49859, 49860, 49861, 49862, 49863, 49864, 49865,
            49866, 49867, 49868, 49869, 49870, 49871, 49872,
            49873, 49874, 49875, 49876, 49877, 49878, 49879,
            49880, 49881, 49882, 49883, 49886, 49887, 49889,
            49890, 49893, 49894, 49895, 49896, 49897, 49898,
            49902, 49904, 49906, 49907, 49908, 49909, 49911,
            49914, 49917, 49918, 49919, 49921, 49922, 49923,
            49924, 49925, 49926, 49927, 49930, 49931, 49934,
            49935, 49936, 49937, 49938, 49942, 49943, 49945,
            49946, 49947, 49949, 49950, 49951, 49952, 49953,
            49954, 49955, 49958, 49959, 49962, 49963, 49964,
            49965, 49966, 49967, 49968, 49969, 49970, 49971,
            49972, 49973, 49974, 49975, 49976, 49977, 49978,
            49979, 49980, 49981, 49982, 49983, 49984, 49985,
            49986, 49987, 49988, 49990, 49991, 49992, 49993,
            49994, 49995, 49996, 49997, 49998, 49999, 50000,
            50001, 50002, 50003, 50004, 50005, 50006, 50007,
            50008, 50009, 50010, 50011, 50012, 50013, 50014,
            50015, 50016, 50017, 50018, 50019, 50020, 50021,
            50022, 50023, 50026, 50027, 50029, 50030, 50031,
            50033, 50035, 50036, 50037, 50038, 50039, 50042,
            50043, 50046, 50047, 50048, 50049, 50050, 50051,
            50053, 50054, 50055, 50057, 50058, 50059, 50061,
            50062, 50063, 50064, 50065, 50066, 50067, 50068,
            50069, 50070, 50071, 50072, 50073, 50074, 50075,
            50076, 50077, 50078, 50079, 50080, 50081, 50082,
            50083, 50084, 50085, 50086, 50087, 50088, 50089,
            50090, 50091, 50092, 50093, 50094, 50095, 50096,
            50097, 50098, 50099, 50100, 50101, 50102, 50103,
            50104, 50105, 50106, 50107, 50108, 50109, 50110,
            50111, 50113, 50114, 50115, 50116, 50117, 50118,
            50119, 50120, 50121, 50122, 50123, 50124, 50125,
            50126, 50127, 50128, 50129, 50130, 50131, 50132,
            50133, 50134, 50135, 50138, 50139, 50141, 50142,
            50145, 50147, 50148, 50149, 50150, 50151, 50154,
            50155, 50156, 50158, 50159, 50160, 50161, 50162,
            50163, 50166, 50167, 50169, 50170, 50171, 50172,
            50173, 50174, 50175, 50176, 50177, 50178, 50179,
            50180, 50181, 50182, 50183, 50185, 50186, 50187,
            50188, 50189, 50190, 50191, 50193, 50194, 50195,
            50196, 50197, 50198, 50199, 50200, 50201, 50202,
            50203, 50204, 50205, 50206, 50207, 50208, 50209,
            50210, 50211, 50213, 50214, 50215, 50216, 50217,
            50218, 50219, 50221, 50222, 50223, 50225, 50226,
            50227, 50229, 50230, 50231, 50232, 50233, 50234,
            50235, 50238, 50239, 50240, 50241, 50242, 50243,
            50244, 50245, 50246, 50247, 50249, 50250, 50251,
            50252, 50253, 50254, 50255, 50256, 50257, 50258,
            50259, 50260, 50261, 50262, 50263, 50264, 50265,
            50266, 50267, 50268, 50269, 50270, 50271, 50272,
            50273, 50274, 50275, 50278, 50279, 50281, 50282,
            50283, 50285, 50286, 50287, 50288, 50289, 50290,
            50291, 50294, 50295, 50296, 50298, 50299, 50300,
            50301, 50302, 50303, 50305, 50306, 50307, 50308,
            50309, 50310, 50311, 50312, 50313, 50314, 50315,
            50316, 50317, 50318, 50319, 50320, 50321, 50322,
            50323, 50325, 50326, 50327, 50328, 50329, 50330,
            50331, 50333, 50334, 50335, 50336, 50337, 50338,
            50339, 50340, 50341, 50342, 50343, 50344, 50345,
            50346, 50347, 50348, 50349, 50350, 50351, 50352,
            50353, 50354, 50355, 50356, 50357, 50358, 50359,
            50361, 50362, 50363, 50365, 50366, 50367, 50368,
            50369, 50370, 50371, 50372, 50373, 50374, 50375,
            50376, 50377, 50378, 50379, 50380, 50381, 50382,
            50383, 50384, 50385, 50386, 50387, 50388, 50389,
            50390, 50391, 50392, 50393, 50394, 50395, 50396,
            50397, 50398, 50399, 50400, 50401, 50402, 50403,
            50404, 50405, 50406, 50407, 50408, 50410, 50411,
            50412, 50413, 50414, 50415, 50418, 50419, 50421,
            50422, 50423, 50425, 50427, 50428, 50429, 50430,
            50434, 50435, 50436, 50437, 50438, 50439, 50440,
            50441, 50442, 50443, 50445, 50446, 50447, 50449,
            50450, 50451, 50453, 50454, 50455, 50456, 50457,
            50458, 50459, 50461, 50462, 50463, 50464, 50465,
            50466, 50467, 50468, 50469, 50470, 50471, 50474,
            50475, 50477, 50478, 50479, 50481, 50482, 50483,
            50484, 50485, 50486, 50487, 50490, 50492, 50494,
            50495, 50496, 50497, 50498, 50499, 50502, 50503,
            50507, 50511, 50512, 50513, 50514, 50518, 50522,
            50523, 50524, 50527, 50530, 50531, 50533, 50534,
            50535, 50537, 50538, 50539, 50540, 50541, 50542,
            50543, 50546, 50550, 50551, 50552, 50553, 50554,
            50555, 50558, 50559, 50561, 50562, 50563, 50565,
            50566, 50568, 50569, 50570, 50571, 50574, 50576,
            50578, 50579, 50580, 50582, 50585, 50586, 50587,
            50589, 50590, 50591, 50593, 50594, 50595, 50596,
            50597, 50598, 50599, 50600, 50602, 50603, 50604,
            50605, 50606, 50607, 50608, 50609, 50610, 50611,
            50614, 50615, 50618, 50623, 50624, 50625, 50626,
            50627, 50635, 50637, 50639, 50642, 50643, 50645,
            50646, 50647, 50649, 50650, 50651, 50652, 50653,
            50654, 50655, 50658, 50660, 50662, 50663, 50664,
            50665, 50666, 50667, 50671, 50673, 50674, 50675,
            50677, 50680, 50681, 50682, 50683, 50690, 50691,
            50692, 50697, 50698, 50699, 50701, 50702, 50703,
            50705, 50706, 50707, 50708, 50709, 50710, 50711,
            50714, 50717, 50718, 50719, 50720, 50721, 50722,
            50723, 50726, 50727, 50729, 50730, 50731, 50735,
            50737, 50738, 50742, 50744, 50746, 50748, 50749,
            50750, 50751, 50754, 50755, 50757, 50758, 50759,
            50761, 50762, 50763, 50764, 50765, 50766, 50767,
            50770, 50774, 50775, 50776, 50777, 50778, 50779,
            50782, 50783, 50785, 50786, 50787, 50788, 50789,
            50790, 50791, 50792, 50793, 50794, 50795, 50797,
            50798, 50800, 50802, 50803, 50804, 50805, 50806,
            50807, 50810, 50811, 50813, 50814, 50815, 50817,
            50818, 50819, 50820, 50821, 50822, 50823, 50826,
            50828, 50830, 50831, 50832, 50833, 50834, 50835,
            50838, 50839, 50841, 50842, 50843, 50845, 50846,
            50847, 50848, 50849, 50850, 50851, 50854, 50856,
            50858, 50859, 50860, 50861, 50862, 50863, 50866,
            50867, 50869, 50870, 50871, 50875, 50876, 50877,
            50878, 50879, 50882, 50884, 50886, 50887, 50888,
            50889, 50890, 50891, 50894, 50895, 50897, 50898,
            50899, 50901, 50902, 50903, 50904, 50905, 50906,
            50907, 50910, 50911, 50914, 50915, 50916, 50917,
            50918, 50919, 50922, 50923, 50925, 50926, 50927,
            50929, 50930, 50931, 50932, 50933, 50934, 50935,
            50938, 50939, 50940, 50942, 50943, 50944, 50945,
            50946, 50947, 50950, 50951, 50953, 50954, 50955,
            50957, 50958, 50959, 50960, 50961, 50962, 50963,
            50966, 50968, 50970, 50971, 50972, 50973, 50974,
            50975, 50978, 50979, 50981, 50982, 50983, 50985,
            50986, 50987, 50988, 50989, 50990, 50991, 50994,
            50996, 50998, 51000, 51001, 51002, 51003, 51006,
            51007, 51009, 51010, 51011, 51013, 51014, 51015,
            51016, 51017, 51019, 51022, 51024, 51033, 51034,
            51035, 51037, 51038, 51039, 51041, 51042, 51043,
            51044, 51045, 51046, 51047, 51049, 51050, 51052,
            51053, 51054, 51055, 51056, 51057, 51058, 51059,
            51062, 51063, 51065, 51066, 51067, 51071, 51072,
            51073, 51074, 51078, 51083, 51084, 51085, 51087,
            51090, 51091, 51093, 51097, 51099, 51100, 51101,
            51102, 51103, 51106, 51111, 51112, 51113, 51114,
            51115, 51118, 51119, 51121, 51122, 51123, 51125,
            51126, 51127, 51128, 51129, 51130, 51131, 51134,
            51138, 51139, 51140, 51141, 51142, 51143, 51146,
            51147, 51149, 51151, 51153, 51154, 51155, 51156,
            51157, 51158, 51159, 51161, 51162, 51163, 51164,
            51166, 51167, 51168, 51169, 51170, 51171, 51173,
            51174, 51175, 51177, 51178, 51179, 51181, 51182,
            51183, 51184, 51185, 51186, 51187, 51188, 51189,
            51190, 51191, 51192, 51193, 51194, 51195, 51196,
            51197, 51198, 51199, 51202, 51203, 51205, 51206,
            51207, 51209, 51211, 51212, 51213, 51214, 51215,
            51218, 51220, 51223, 51224, 51225, 51226, 51227,
            51230, 51231, 51233, 51234, 51235, 51237, 51238,
            51239, 51240, 51241, 51242, 51243, 51246, 51248,
            51250, 51251, 51252, 51253, 51254, 51255, 51257,
            51258, 51259, 51261, 51262, 51263, 51265, 51266,
            51267, 51268, 51269, 51270, 51271, 51274, 51275,
            51278, 51279, 51280, 51281, 51282, 51283, 51285,
            51286, 51287, 51288, 51289, 51290, 51291, 51292,
            51293, 51294, 51295, 51296, 51297, 51298, 51299,
            51300, 51301, 51302, 51303, 51304, 51305, 51306,
            51307, 51308, 51309, 51310, 51311, 51314, 51315,
            51317, 51318, 51319, 51321, 51323, 51324, 51325,
            51326, 51327, 51330, 51332, 51336, 51337, 51338,
            51342, 51343, 51344, 51345, 51346, 51347, 51349,
            51350, 51351, 51352, 51353, 51354, 51355, 51356,
            51358, 51360, 51362, 51363, 51364, 51365, 51366,
            51367, 51369, 51370, 51371, 51372, 51373, 51374,
            51375, 51376, 51377, 51378, 51379, 51380, 51381,
            51382, 51383, 51384, 51385, 51386, 51387, 51390,
            51391, 51392, 51393, 51394, 51395, 51397, 51398,
            51399, 51401, 51402, 51403, 51405, 51406, 51407,
            51408, 51409, 51410, 51411, 51414, 51416, 51418,
            51419, 51420, 51421, 51422, 51423, 51426, 51427,
            51429, 51430, 51431, 51432, 51433, 51434, 51435,
            51436, 51437, 51438, 51439, 51440, 51441, 51442,
            51443, 51444, 51446, 51447, 51448, 51449, 51450,
            51451, 51454, 51455, 51457, 51458, 51459, 51463,
            51464, 51465, 51466, 51467, 51470, 12288, 12289,
            12290, 183, 8229, 8230, 168, 12291, 173, 8213, 8741,
            65340, 8764, 8216, 8217, 8220, 8221, 12308, 12309,
            12296, 12297, 12298, 12299, 12300, 12301, 12302,
            12303, 12304, 12305, 177, 215, 247, 8800, 8804,
            8805, 8734, 8756, 176, 8242, 8243, 8451, 8491,
            65504, 65505, 65509, 9794, 9792, 8736, 8869, 8978,
            8706, 8711, 8801, 8786, 167, 8251, 9734, 9733, 9675,
            9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650,
            9661, 9660, 8594, 8592, 8593, 8595, 8596, 12307,
            8810, 8811, 8730, 8765, 8733, 8757, 8747, 8748,
            8712, 8715, 8838, 8839, 8834, 8835, 8746, 8745,
            8743, 8744, 65506, 51472, 51474, 51475, 51476,
            51477, 51478, 51479, 51481, 51482, 51483, 51484,
            51485, 51486, 51487, 51488, 51489, 51490, 51491,
            51492, 51493, 51494, 51495, 51496, 51497, 51498,
            51499, 51501, 51502, 51503, 51504, 51505, 51506,
            51507, 51509, 51510, 51511, 51512, 51513, 51514,
            51515, 51516, 51517, 51518, 51519, 51520, 51521,
            51522, 51523, 51524, 51525, 51526, 51527, 51528,
            51529, 51530, 51531, 51532, 51533, 51534, 51535,
            51538, 51539, 51541, 51542, 51543, 51545, 51546,
            51547, 51548, 51549, 51550, 51551, 51554, 51556,
            51557, 51558, 51559, 51560, 51561, 51562, 51563,
            51565, 51566, 51567, 8658, 8660, 8704, 8707, 180,
            65374, 711, 728, 733, 730, 729, 184, 731, 161, 191,
            720, 8750, 8721, 8719, 164, 8457, 8240, 9665, 9664,
            9655, 9654, 9828, 9824, 9825, 9829, 9831, 9827,
            8857, 9672, 9635, 9680, 9681, 9618, 9636, 9637,
            9640, 9639, 9638, 9641, 9832, 9743, 9742, 9756,
            9758, 182, 8224, 8225, 8597, 8599, 8601, 8598, 8600,
            9837, 9833, 9834, 9836, 12927, 12828, 8470, 13255,
            8482, 13250, 13272, 8481, 8364, 174, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 51569, 51570, 51571,
            51573, 51574, 51575, 51576, 51577, 51578, 51579,
            51581, 51582, 51583, 51584, 51585, 51586, 51587,
            51588, 51589, 51590, 51591, 51594, 51595, 51597,
            51598, 51599, 51601, 51602, 51603, 51604, 51605,
            51606, 51607, 51610, 51612, 51614, 51615, 51616,
            51617, 51618, 51619, 51620, 51621, 51622, 51623,
            51624, 51625, 51626, 51627, 51628, 51629, 51630,
            51631, 51632, 51633, 51634, 51635, 51636, 51637,
            51638, 51639, 51640, 51641, 51642, 51643, 51644,
            51645, 51646, 51647, 51650, 51651, 51653, 51654,
            51657, 51659, 51660, 51661, 51662, 51663, 51666,
            51668, 51671, 51672, 51675, 65281, 65282, 65283,
            65284, 65285, 65286, 65287, 65288, 65289, 65290,
            65291, 65292, 65293, 65294, 65295, 65296, 65297,
            65298, 65299, 65300, 65301, 65302, 65303, 65304,
            65305, 65306, 65307, 65308, 65309, 65310, 65311,
            65312, 65313, 65314, 65315, 65316, 65317, 65318,
            65319, 65320, 65321, 65322, 65323, 65324, 65325,
            65326, 65327, 65328, 65329, 65330, 65331, 65332,
            65333, 65334, 65335, 65336, 65337, 65338, 65339,
            65510, 65341, 65342, 65343, 65344, 65345, 65346,
            65347, 65348, 65349, 65350, 65351, 65352, 65353,
            65354, 65355, 65356, 65357, 65358, 65359, 65360,
            65361, 65362, 65363, 65364, 65365, 65366, 65367,
            65368, 65369, 65370, 65371, 65372, 65373, 65507,
            51678, 51679, 51681, 51683, 51685, 51686, 51688,
            51689, 51690, 51691, 51694, 51698, 51699, 51700,
            51701, 51702, 51703, 51706, 51707, 51709, 51710,
            51711, 51713, 51714, 51715, 51716, 51717, 51718,
            51719, 51722, 51726, 51727, 51728, 51729, 51730,
            51731, 51733, 51734, 51735, 51737, 51738, 51739,
            51740, 51741, 51742, 51743, 51744, 51745, 51746,
            51747, 51748, 51749, 51750, 51751, 51752, 51754,
            51755, 51756, 51757, 51758, 51759, 51760, 51761,
            51762, 51763, 51764, 51765, 51766, 51767, 51768,
            51769, 51770, 51771, 51772, 51773, 51774, 51775,
            51776, 51777, 51778, 51779, 51780, 51781, 51782,
            12593, 12594, 12595, 12596, 12597, 12598, 12599,
            12600, 12601, 12602, 12603, 12604, 12605, 12606,
            12607, 12608, 12609, 12610, 12611, 12612, 12613,
            12614, 12615, 12616, 12617, 12618, 12619, 12620,
            12621, 12622, 12623, 12624, 12625, 12626, 12627,
            12628, 12629, 12630, 12631, 12632, 12633, 12634,
            12635, 12636, 12637, 12638, 12639, 12640, 12641,
            12642, 12643, 12644, 12645, 12646, 12647, 12648,
            12649, 12650, 12651, 12652, 12653, 12654, 12655,
            12656, 12657, 12658, 12659, 12660, 12661, 12662,
            12663, 12664, 12665, 12666, 12667, 12668, 12669,
            12670, 12671, 12672, 12673, 12674, 12675, 12676,
            12677, 12678, 12679, 12680, 12681, 12682, 12683,
            12684, 12685, 12686, 51783, 51784, 51785, 51786,
            51787, 51790, 51791, 51793, 51794, 51795, 51797,
            51798, 51799, 51800, 51801, 51802, 51803, 51806,
            51810, 51811, 51812, 51813, 51814, 51815, 51817,
            51818, 51819, 51820, 51821, 51822, 51823, 51824,
            51825, 51826, 51827, 51828, 51829, 51830, 51831,
            51832, 51833, 51834, 51835, 51836, 51838, 51839,
            51840, 51841, 51842, 51843, 51845, 51846, 51847,
            51848, 51849, 51850, 51851, 51852, 51853, 51854,
            51855, 51856, 51857, 51858, 51859, 51860, 51861,
            51862, 51863, 51865, 51866, 51867, 51868, 51869,
            51870, 51871, 51872, 51873, 51874, 51875, 51876,
            51877, 51878, 51879, 8560, 8561, 8562, 8563, 8564,
            8565, 8566, 8567, 8568, 8569, null, null, null,
            null, null, 8544, 8545, 8546, 8547, 8548, 8549,
            8550, 8551, 8552, 8553, null, null, null, null,
            null, null, null, 913, 914, 915, 916, 917, 918, 919,
            920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
            931, 932, 933, 934, 935, 936, 937, null, null, null,
            null, null, null, null, null, 945, 946, 947, 948,
            949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
            959, 960, 961, 963, 964, 965, 966, 967, 968, 969,
            null, null, null, null, null, null, 51880, 51881,
            51882, 51883, 51884, 51885, 51886, 51887, 51888,
            51889, 51890, 51891, 51892, 51893, 51894, 51895,
            51896, 51897, 51898, 51899, 51902, 51903, 51905,
            51906, 51907, 51909, 51910, 51911, 51912, 51913,
            51914, 51915, 51918, 51920, 51922, 51924, 51925,
            51926, 51927, 51930, 51931, 51932, 51933, 51934,
            51935, 51937, 51938, 51939, 51940, 51941, 51942,
            51943, 51944, 51945, 51946, 51947, 51949, 51950,
            51951, 51952, 51953, 51954, 51955, 51957, 51958,
            51959, 51960, 51961, 51962, 51963, 51964, 51965,
            51966, 51967, 51968, 51969, 51970, 51971, 51972,
            51973, 51974, 51975, 51977, 51978, 9472, 9474, 9484,
            9488, 9496, 9492, 9500, 9516, 9508, 9524, 9532,
            9473, 9475, 9487, 9491, 9499, 9495, 9507, 9523,
            9515, 9531, 9547, 9504, 9519, 9512, 9527, 9535,
            9501, 9520, 9509, 9528, 9538, 9490, 9489, 9498,
            9497, 9494, 9493, 9486, 9485, 9502, 9503, 9505,
            9506, 9510, 9511, 9513, 9514, 9517, 9518, 9521,
            9522, 9525, 9526, 9529, 9530, 9533, 9534, 9536,
            9537, 9539, 9540, 9541, 9542, 9543, 9544, 9545,
            9546, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 51979, 51980, 51981, 51982, 51983,
            51985, 51986, 51987, 51989, 51990, 51991, 51993,
            51994, 51995, 51996, 51997, 51998, 51999, 52002,
            52003, 52004, 52005, 52006, 52007, 52008, 52009,
            52010, 52011, 52012, 52013, 52014, 52015, 52016,
            52017, 52018, 52019, 52020, 52021, 52022, 52023,
            52024, 52025, 52026, 52027, 52028, 52029, 52030,
            52031, 52032, 52034, 52035, 52036, 52037, 52038,
            52039, 52042, 52043, 52045, 52046, 52047, 52049,
            52050, 52051, 52052, 52053, 52054, 52055, 52058,
            52059, 52060, 52062, 52063, 52064, 52065, 52066,
            52067, 52069, 52070, 52071, 52072, 52073, 52074,
            52075, 52076, 13205, 13206, 13207, 8467, 13208,
            13252, 13219, 13220, 13221, 13222, 13209, 13210,
            13211, 13212, 13213, 13214, 13215, 13216, 13217,
            13218, 13258, 13197, 13198, 13199, 13263, 13192,
            13193, 13256, 13223, 13224, 13232, 13233, 13234,
            13235, 13236, 13237, 13238, 13239, 13240, 13241,
            13184, 13185, 13186, 13187, 13188, 13242, 13243,
            13244, 13245, 13246, 13247, 13200, 13201, 13202,
            13203, 13204, 8486, 13248, 13249, 13194, 13195,
            13196, 13270, 13253, 13229, 13230, 13231, 13275,
            13225, 13226, 13227, 13228, 13277, 13264, 13267,
            13251, 13257, 13276, 13254, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 52077, 52078, 52079, 52080, 52081,
            52082, 52083, 52084, 52085, 52086, 52087, 52090,
            52091, 52092, 52093, 52094, 52095, 52096, 52097,
            52098, 52099, 52100, 52101, 52102, 52103, 52104,
            52105, 52106, 52107, 52108, 52109, 52110, 52111,
            52112, 52113, 52114, 52115, 52116, 52117, 52118,
            52119, 52120, 52121, 52122, 52123, 52125, 52126,
            52127, 52128, 52129, 52130, 52131, 52132, 52133,
            52134, 52135, 52136, 52137, 52138, 52139, 52140,
            52141, 52142, 52143, 52144, 52145, 52146, 52147,
            52148, 52149, 52150, 52151, 52153, 52154, 52155,
            52156, 52157, 52158, 52159, 52160, 52161, 52162,
            52163, 52164, 198, 208, 170, 294, null, 306, null,
            319, 321, 216, 338, 186, 222, 358, 330, null, 12896,
            12897, 12898, 12899, 12900, 12901, 12902, 12903,
            12904, 12905, 12906, 12907, 12908, 12909, 12910,
            12911, 12912, 12913, 12914, 12915, 12916, 12917,
            12918, 12919, 12920, 12921, 12922, 12923, 9424,
            9425, 9426, 9427, 9428, 9429, 9430, 9431, 9432,
            9433, 9434, 9435, 9436, 9437, 9438, 9439, 9440,
            9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448,
            9449, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
            9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 189,
            8531, 8532, 188, 190, 8539, 8540, 8541, 8542, 52165,
            52166, 52167, 52168, 52169, 52170, 52171, 52172,
            52173, 52174, 52175, 52176, 52177, 52178, 52179,
            52181, 52182, 52183, 52184, 52185, 52186, 52187,
            52188, 52189, 52190, 52191, 52192, 52193, 52194,
            52195, 52197, 52198, 52200, 52202, 52203, 52204,
            52205, 52206, 52207, 52208, 52209, 52210, 52211,
            52212, 52213, 52214, 52215, 52216, 52217, 52218,
            52219, 52220, 52221, 52222, 52223, 52224, 52225,
            52226, 52227, 52228, 52229, 52230, 52231, 52232,
            52233, 52234, 52235, 52238, 52239, 52241, 52242,
            52243, 52245, 52246, 52247, 52248, 52249, 52250,
            52251, 52254, 52255, 52256, 52259, 52260, 230, 273,
            240, 295, 305, 307, 312, 320, 322, 248, 339, 223,
            254, 359, 331, 329, 12800, 12801, 12802, 12803,
            12804, 12805, 12806, 12807, 12808, 12809, 12810,
            12811, 12812, 12813, 12814, 12815, 12816, 12817,
            12818, 12819, 12820, 12821, 12822, 12823, 12824,
            12825, 12826, 12827, 9372, 9373, 9374, 9375, 9376,
            9377, 9378, 9379, 9380, 9381, 9382, 9383, 9384,
            9385, 9386, 9387, 9388, 9389, 9390, 9391, 9392,
            9393, 9394, 9395, 9396, 9397, 9332, 9333, 9334,
            9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342,
            9343, 9344, 9345, 9346, 185, 178, 179, 8308, 8319,
            8321, 8322, 8323, 8324, 52261, 52262, 52266, 52267,
            52269, 52271, 52273, 52274, 52275, 52276, 52277,
            52278, 52279, 52282, 52287, 52288, 52289, 52290,
            52291, 52294, 52295, 52297, 52298, 52299, 52301,
            52302, 52303, 52304, 52305, 52306, 52307, 52310,
            52314, 52315, 52316, 52317, 52318, 52319, 52321,
            52322, 52323, 52325, 52327, 52329, 52330, 52331,
            52332, 52333, 52334, 52335, 52337, 52338, 52339,
            52340, 52342, 52343, 52344, 52345, 52346, 52347,
            52348, 52349, 52350, 52351, 52352, 52353, 52354,
            52355, 52356, 52357, 52358, 52359, 52360, 52361,
            52362, 52363, 52364, 52365, 52366, 52367, 52368,
            52369, 52370, 52371, 12353, 12354, 12355, 12356,
            12357, 12358, 12359, 12360, 12361, 12362, 12363,
            12364, 12365, 12366, 12367, 12368, 12369, 12370,
            12371, 12372, 12373, 12374, 12375, 12376, 12377,
            12378, 12379, 12380, 12381, 12382, 12383, 12384,
            12385, 12386, 12387, 12388, 12389, 12390, 12391,
            12392, 12393, 12394, 12395, 12396, 12397, 12398,
            12399, 12400, 12401, 12402, 12403, 12404, 12405,
            12406, 12407, 12408, 12409, 12410, 12411, 12412,
            12413, 12414, 12415, 12416, 12417, 12418, 12419,
            12420, 12421, 12422, 12423, 12424, 12425, 12426,
            12427, 12428, 12429, 12430, 12431, 12432, 12433,
            12434, 12435, null, null, null, null, null, null,
            null, null, null, null, null, 52372, 52373, 52374,
            52375, 52378, 52379, 52381, 52382, 52383, 52385,
            52386, 52387, 52388, 52389, 52390, 52391, 52394,
            52398, 52399, 52400, 52401, 52402, 52403, 52406,
            52407, 52409, 52410, 52411, 52413, 52414, 52415,
            52416, 52417, 52418, 52419, 52422, 52424, 52426,
            52427, 52428, 52429, 52430, 52431, 52433, 52434,
            52435, 52437, 52438, 52439, 52440, 52441, 52442,
            52443, 52444, 52445, 52446, 52447, 52448, 52449,
            52450, 52451, 52453, 52454, 52455, 52456, 52457,
            52458, 52459, 52461, 52462, 52463, 52465, 52466,
            52467, 52468, 52469, 52470, 52471, 52472, 52473,
            52474, 52475, 52476, 52477, 12449, 12450, 12451,
            12452, 12453, 12454, 12455, 12456, 12457, 12458,
            12459, 12460, 12461, 12462, 12463, 12464, 12465,
            12466, 12467, 12468, 12469, 12470, 12471, 12472,
            12473, 12474, 12475, 12476, 12477, 12478, 12479,
            12480, 12481, 12482, 12483, 12484, 12485, 12486,
            12487, 12488, 12489, 12490, 12491, 12492, 12493,
            12494, 12495, 12496, 12497, 12498, 12499, 12500,
            12501, 12502, 12503, 12504, 12505, 12506, 12507,
            12508, 12509, 12510, 12511, 12512, 12513, 12514,
            12515, 12516, 12517, 12518, 12519, 12520, 12521,
            12522, 12523, 12524, 12525, 12526, 12527, 12528,
            12529, 12530, 12531, 12532, 12533, 12534, null,
            null, null, null, null, null, null, null, 52478,
            52479, 52480, 52482, 52483, 52484, 52485, 52486,
            52487, 52490, 52491, 52493, 52494, 52495, 52497,
            52498, 52499, 52500, 52501, 52502, 52503, 52506,
            52508, 52510, 52511, 52512, 52513, 52514, 52515,
            52517, 52518, 52519, 52521, 52522, 52523, 52525,
            52526, 52527, 52528, 52529, 52530, 52531, 52532,
            52533, 52534, 52535, 52536, 52538, 52539, 52540,
            52541, 52542, 52543, 52544, 52545, 52546, 52547,
            52548, 52549, 52550, 52551, 52552, 52553, 52554,
            52555, 52556, 52557, 52558, 52559, 52560, 52561,
            52562, 52563, 52564, 52565, 52566, 52567, 52568,
            52569, 52570, 52571, 52573, 52574, 52575, 1040,
            1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047,
            1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
            1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
            1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 1072,
            1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079,
            1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
            1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
            1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 52577, 52578, 52579,
            52581, 52582, 52583, 52584, 52585, 52586, 52587,
            52590, 52592, 52594, 52595, 52596, 52597, 52598,
            52599, 52601, 52602, 52603, 52604, 52605, 52606,
            52607, 52608, 52609, 52610, 52611, 52612, 52613,
            52614, 52615, 52617, 52618, 52619, 52620, 52621,
            52622, 52623, 52624, 52625, 52626, 52627, 52630,
            52631, 52633, 52634, 52635, 52637, 52638, 52639,
            52640, 52641, 52642, 52643, 52646, 52648, 52650,
            52651, 52652, 52653, 52654, 52655, 52657, 52658,
            52659, 52660, 52661, 52662, 52663, 52664, 52665,
            52666, 52667, 52668, 52669, 52670, 52671, 52672,
            52673, 52674, 52675, 52677, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, 52678, 52679, 52680, 52681, 52682,
            52683, 52685, 52686, 52687, 52689, 52690, 52691,
            52692, 52693, 52694, 52695, 52696, 52697, 52698,
            52699, 52700, 52701, 52702, 52703, 52704, 52705,
            52706, 52707, 52708, 52709, 52710, 52711, 52713,
            52714, 52715, 52717, 52718, 52719, 52721, 52722,
            52723, 52724, 52725, 52726, 52727, 52730, 52732,
            52734, 52735, 52736, 52737, 52738, 52739, 52741,
            52742, 52743, 52745, 52746, 52747, 52749, 52750,
            52751, 52752, 52753, 52754, 52755, 52757, 52758,
            52759, 52760, 52762, 52763, 52764, 52765, 52766,
            52767, 52770, 52771, 52773, 52774, 52775, 52777,
            52778, 52779, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            52780, 52781, 52782, 52783, 52786, 52788, 52790,
            52791, 52792, 52793, 52794, 52795, 52796, 52797,
            52798, 52799, 52800, 52801, 52802, 52803, 52804,
            52805, 52806, 52807, 52808, 52809, 52810, 52811,
            52812, 52813, 52814, 52815, 52816, 52817, 52818,
            52819, 52820, 52821, 52822, 52823, 52826, 52827,
            52829, 52830, 52834, 52835, 52836, 52837, 52838,
            52839, 52842, 52844, 52846, 52847, 52848, 52849,
            52850, 52851, 52854, 52855, 52857, 52858, 52859,
            52861, 52862, 52863, 52864, 52865, 52866, 52867,
            52870, 52872, 52874, 52875, 52876, 52877, 52878,
            52879, 52882, 52883, 52885, 52886, 52887, 52889,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 52890, 52891,
            52892, 52893, 52894, 52895, 52898, 52902, 52903,
            52904, 52905, 52906, 52907, 52910, 52911, 52912,
            52913, 52914, 52915, 52916, 52917, 52918, 52919,
            52920, 52921, 52922, 52923, 52924, 52925, 52926,
            52927, 52928, 52930, 52931, 52932, 52933, 52934,
            52935, 52936, 52937, 52938, 52939, 52940, 52941,
            52942, 52943, 52944, 52945, 52946, 52947, 52948,
            52949, 52950, 52951, 52952, 52953, 52954, 52955,
            52956, 52957, 52958, 52959, 52960, 52961, 52962,
            52963, 52966, 52967, 52969, 52970, 52973, 52974,
            52975, 52976, 52977, 52978, 52979, 52982, 52986,
            52987, 52988, 52989, 52990, 52991, 44032, 44033,
            44036, 44039, 44040, 44041, 44042, 44048, 44049,
            44050, 44051, 44052, 44053, 44054, 44055, 44057,
            44058, 44059, 44060, 44061, 44064, 44068, 44076,
            44077, 44079, 44080, 44081, 44088, 44089, 44092,
            44096, 44107, 44109, 44116, 44120, 44124, 44144,
            44145, 44148, 44151, 44152, 44154, 44160, 44161,
            44163, 44164, 44165, 44166, 44169, 44170, 44171,
            44172, 44176, 44180, 44188, 44189, 44191, 44192,
            44193, 44200, 44201, 44202, 44204, 44207, 44208,
            44216, 44217, 44219, 44220, 44221, 44225, 44228,
            44232, 44236, 44245, 44247, 44256, 44257, 44260,
            44263, 44264, 44266, 44268, 44271, 44272, 44273,
            44275, 44277, 44278, 44284, 44285, 44288, 44292,
            44294, 52994, 52995, 52997, 52998, 52999, 53001,
            53002, 53003, 53004, 53005, 53006, 53007, 53010,
            53012, 53014, 53015, 53016, 53017, 53018, 53019,
            53021, 53022, 53023, 53025, 53026, 53027, 53029,
            53030, 53031, 53032, 53033, 53034, 53035, 53038,
            53042, 53043, 53044, 53045, 53046, 53047, 53049,
            53050, 53051, 53052, 53053, 53054, 53055, 53056,
            53057, 53058, 53059, 53060, 53061, 53062, 53063,
            53064, 53065, 53066, 53067, 53068, 53069, 53070,
            53071, 53072, 53073, 53074, 53075, 53078, 53079,
            53081, 53082, 53083, 53085, 53086, 53087, 53088,
            53089, 53090, 53091, 53094, 53096, 53098, 53099,
            53100, 44300, 44301, 44303, 44305, 44312, 44316,
            44320, 44329, 44332, 44333, 44340, 44341, 44344,
            44348, 44356, 44357, 44359, 44361, 44368, 44372,
            44376, 44385, 44387, 44396, 44397, 44400, 44403,
            44404, 44405, 44406, 44411, 44412, 44413, 44415,
            44417, 44418, 44424, 44425, 44428, 44432, 44444,
            44445, 44452, 44471, 44480, 44481, 44484, 44488,
            44496, 44497, 44499, 44508, 44512, 44516, 44536,
            44537, 44540, 44543, 44544, 44545, 44552, 44553,
            44555, 44557, 44564, 44592, 44593, 44596, 44599,
            44600, 44602, 44608, 44609, 44611, 44613, 44614,
            44618, 44620, 44621, 44622, 44624, 44628, 44630,
            44636, 44637, 44639, 44640, 44641, 44645, 44648,
            44649, 44652, 44656, 44664, 53101, 53102, 53103,
            53106, 53107, 53109, 53110, 53111, 53113, 53114,
            53115, 53116, 53117, 53118, 53119, 53121, 53122,
            53123, 53124, 53126, 53127, 53128, 53129, 53130,
            53131, 53133, 53134, 53135, 53136, 53137, 53138,
            53139, 53140, 53141, 53142, 53143, 53144, 53145,
            53146, 53147, 53148, 53149, 53150, 53151, 53152,
            53154, 53155, 53156, 53157, 53158, 53159, 53161,
            53162, 53163, 53164, 53165, 53166, 53167, 53169,
            53170, 53171, 53172, 53173, 53174, 53175, 53176,
            53177, 53178, 53179, 53180, 53181, 53182, 53183,
            53184, 53185, 53186, 53187, 53189, 53190, 53191,
            53192, 53193, 53194, 53195, 44665, 44667, 44668,
            44669, 44676, 44677, 44684, 44732, 44733, 44734,
            44736, 44740, 44748, 44749, 44751, 44752, 44753,
            44760, 44761, 44764, 44776, 44779, 44781, 44788,
            44792, 44796, 44807, 44808, 44813, 44816, 44844,
            44845, 44848, 44850, 44852, 44860, 44861, 44863,
            44865, 44866, 44867, 44872, 44873, 44880, 44892,
            44893, 44900, 44901, 44921, 44928, 44932, 44936,
            44944, 44945, 44949, 44956, 44984, 44985, 44988,
            44992, 44999, 45000, 45001, 45003, 45005, 45006,
            45012, 45020, 45032, 45033, 45040, 45041, 45044,
            45048, 45056, 45057, 45060, 45068, 45072, 45076,
            45084, 45085, 45096, 45124, 45125, 45128, 45130,
            45132, 45134, 45139, 45140, 45141, 45143, 45145,
            53196, 53197, 53198, 53199, 53200, 53201, 53202,
            53203, 53204, 53205, 53206, 53207, 53208, 53209,
            53210, 53211, 53212, 53213, 53214, 53215, 53218,
            53219, 53221, 53222, 53223, 53225, 53226, 53227,
            53228, 53229, 53230, 53231, 53234, 53236, 53238,
            53239, 53240, 53241, 53242, 53243, 53245, 53246,
            53247, 53249, 53250, 53251, 53253, 53254, 53255,
            53256, 53257, 53258, 53259, 53260, 53261, 53262,
            53263, 53264, 53266, 53267, 53268, 53269, 53270,
            53271, 53273, 53274, 53275, 53276, 53277, 53278,
            53279, 53280, 53281, 53282, 53283, 53284, 53285,
            53286, 53287, 53288, 53289, 53290, 53291, 53292,
            45149, 45180, 45181, 45184, 45188, 45196, 45197,
            45199, 45201, 45208, 45209, 45210, 45212, 45215,
            45216, 45217, 45218, 45224, 45225, 45227, 45228,
            45229, 45230, 45231, 45233, 45235, 45236, 45237,
            45240, 45244, 45252, 45253, 45255, 45256, 45257,
            45264, 45265, 45268, 45272, 45280, 45285, 45320,
            45321, 45323, 45324, 45328, 45330, 45331, 45336,
            45337, 45339, 45340, 45341, 45347, 45348, 45349,
            45352, 45356, 45364, 45365, 45367, 45368, 45369,
            45376, 45377, 45380, 45384, 45392, 45393, 45396,
            45397, 45400, 45404, 45408, 45432, 45433, 45436,
            45440, 45442, 45448, 45449, 45451, 45453, 45458,
            45459, 45460, 45464, 45468, 45480, 45516, 45520,
            45524, 45532, 45533, 53294, 53295, 53296, 53297,
            53298, 53299, 53302, 53303, 53305, 53306, 53307,
            53309, 53310, 53311, 53312, 53313, 53314, 53315,
            53318, 53320, 53322, 53323, 53324, 53325, 53326,
            53327, 53329, 53330, 53331, 53333, 53334, 53335,
            53337, 53338, 53339, 53340, 53341, 53342, 53343,
            53345, 53346, 53347, 53348, 53349, 53350, 53351,
            53352, 53353, 53354, 53355, 53358, 53359, 53361,
            53362, 53363, 53365, 53366, 53367, 53368, 53369,
            53370, 53371, 53374, 53375, 53376, 53378, 53379,
            53380, 53381, 53382, 53383, 53384, 53385, 53386,
            53387, 53388, 53389, 53390, 53391, 53392, 53393,
            53394, 53395, 53396, 45535, 45544, 45545, 45548,
            45552, 45561, 45563, 45565, 45572, 45573, 45576,
            45579, 45580, 45588, 45589, 45591, 45593, 45600,
            45620, 45628, 45656, 45660, 45664, 45672, 45673,
            45684, 45685, 45692, 45700, 45701, 45705, 45712,
            45713, 45716, 45720, 45721, 45722, 45728, 45729,
            45731, 45733, 45734, 45738, 45740, 45744, 45748,
            45768, 45769, 45772, 45776, 45778, 45784, 45785,
            45787, 45789, 45794, 45796, 45797, 45798, 45800,
            45803, 45804, 45805, 45806, 45807, 45811, 45812,
            45813, 45815, 45816, 45817, 45818, 45819, 45823,
            45824, 45825, 45828, 45832, 45840, 45841, 45843,
            45844, 45845, 45852, 45908, 45909, 45910, 45912,
            45915, 45916, 45918, 45919, 45924, 45925, 53397,
            53398, 53399, 53400, 53401, 53402, 53403, 53404,
            53405, 53406, 53407, 53408, 53409, 53410, 53411,
            53414, 53415, 53417, 53418, 53419, 53421, 53422,
            53423, 53424, 53425, 53426, 53427, 53430, 53432,
            53434, 53435, 53436, 53437, 53438, 53439, 53442,
            53443, 53445, 53446, 53447, 53450, 53451, 53452,
            53453, 53454, 53455, 53458, 53462, 53463, 53464,
            53465, 53466, 53467, 53470, 53471, 53473, 53474,
            53475, 53477, 53478, 53479, 53480, 53481, 53482,
            53483, 53486, 53490, 53491, 53492, 53493, 53494,
            53495, 53497, 53498, 53499, 53500, 53501, 53502,
            53503, 53504, 53505, 53506, 53507, 53508, 45927,
            45929, 45931, 45934, 45936, 45937, 45940, 45944,
            45952, 45953, 45955, 45956, 45957, 45964, 45968,
            45972, 45984, 45985, 45992, 45996, 46020, 46021,
            46024, 46027, 46028, 46030, 46032, 46036, 46037,
            46039, 46041, 46043, 46045, 46048, 46052, 46056,
            46076, 46096, 46104, 46108, 46112, 46120, 46121,
            46123, 46132, 46160, 46161, 46164, 46168, 46176,
            46177, 46179, 46181, 46188, 46208, 46216, 46237,
            46244, 46248, 46252, 46261, 46263, 46265, 46272,
            46276, 46280, 46288, 46293, 46300, 46301, 46304,
            46307, 46308, 46310, 46316, 46317, 46319, 46321,
            46328, 46356, 46357, 46360, 46363, 46364, 46372,
            46373, 46375, 46376, 46377, 46378, 46384, 46385,
            46388, 46392, 53509, 53510, 53511, 53512, 53513,
            53514, 53515, 53516, 53518, 53519, 53520, 53521,
            53522, 53523, 53524, 53525, 53526, 53527, 53528,
            53529, 53530, 53531, 53532, 53533, 53534, 53535,
            53536, 53537, 53538, 53539, 53540, 53541, 53542,
            53543, 53544, 53545, 53546, 53547, 53548, 53549,
            53550, 53551, 53554, 53555, 53557, 53558, 53559,
            53561, 53563, 53564, 53565, 53566, 53567, 53570,
            53574, 53575, 53576, 53577, 53578, 53579, 53582,
            53583, 53585, 53586, 53587, 53589, 53590, 53591,
            53592, 53593, 53594, 53595, 53598, 53600, 53602,
            53603, 53604, 53605, 53606, 53607, 53609, 53610,
            53611, 53613, 46400, 46401, 46403, 46404, 46405,
            46411, 46412, 46413, 46416, 46420, 46428, 46429,
            46431, 46432, 46433, 46496, 46497, 46500, 46504,
            46506, 46507, 46512, 46513, 46515, 46516, 46517,
            46523, 46524, 46525, 46528, 46532, 46540, 46541,
            46543, 46544, 46545, 46552, 46572, 46608, 46609,
            46612, 46616, 46629, 46636, 46644, 46664, 46692,
            46696, 46748, 46749, 46752, 46756, 46763, 46764,
            46769, 46804, 46832, 46836, 46840, 46848, 46849,
            46853, 46888, 46889, 46892, 46895, 46896, 46904,
            46905, 46907, 46916, 46920, 46924, 46932, 46933,
            46944, 46948, 46952, 46960, 46961, 46963, 46965,
            46972, 46973, 46976, 46980, 46988, 46989, 46991,
            46992, 46993, 46994, 46998, 46999, 53614, 53615,
            53616, 53617, 53618, 53619, 53620, 53621, 53622,
            53623, 53624, 53625, 53626, 53627, 53629, 53630,
            53631, 53632, 53633, 53634, 53635, 53637, 53638,
            53639, 53641, 53642, 53643, 53644, 53645, 53646,
            53647, 53648, 53649, 53650, 53651, 53652, 53653,
            53654, 53655, 53656, 53657, 53658, 53659, 53660,
            53661, 53662, 53663, 53666, 53667, 53669, 53670,
            53671, 53673, 53674, 53675, 53676, 53677, 53678,
            53679, 53682, 53684, 53686, 53687, 53688, 53689,
            53691, 53693, 53694, 53695, 53697, 53698, 53699,
            53700, 53701, 53702, 53703, 53704, 53705, 53706,
            53707, 53708, 53709, 53710, 53711, 47000, 47001,
            47004, 47008, 47016, 47017, 47019, 47020, 47021,
            47028, 47029, 47032, 47047, 47049, 47084, 47085,
            47088, 47092, 47100, 47101, 47103, 47104, 47105,
            47111, 47112, 47113, 47116, 47120, 47128, 47129,
            47131, 47133, 47140, 47141, 47144, 47148, 47156,
            47157, 47159, 47160, 47161, 47168, 47172, 47185,
            47187, 47196, 47197, 47200, 47204, 47212, 47213,
            47215, 47217, 47224, 47228, 47245, 47272, 47280,
            47284, 47288, 47296, 47297, 47299, 47301, 47308,
            47312, 47316, 47325, 47327, 47329, 47336, 47337,
            47340, 47344, 47352, 47353, 47355, 47357, 47364,
            47384, 47392, 47420, 47421, 47424, 47428, 47436,
            47439, 47441, 47448, 47449, 47452, 47456, 47464,
            47465, 53712, 53713, 53714, 53715, 53716, 53717,
            53718, 53719, 53721, 53722, 53723, 53724, 53725,
            53726, 53727, 53728, 53729, 53730, 53731, 53732,
            53733, 53734, 53735, 53736, 53737, 53738, 53739,
            53740, 53741, 53742, 53743, 53744, 53745, 53746,
            53747, 53749, 53750, 53751, 53753, 53754, 53755,
            53756, 53757, 53758, 53759, 53760, 53761, 53762,
            53763, 53764, 53765, 53766, 53768, 53770, 53771,
            53772, 53773, 53774, 53775, 53777, 53778, 53779,
            53780, 53781, 53782, 53783, 53784, 53785, 53786,
            53787, 53788, 53789, 53790, 53791, 53792, 53793,
            53794, 53795, 53796, 53797, 53798, 53799, 53800,
            53801, 47467, 47469, 47476, 47477, 47480, 47484,
            47492, 47493, 47495, 47497, 47498, 47501, 47502,
            47532, 47533, 47536, 47540, 47548, 47549, 47551,
            47553, 47560, 47561, 47564, 47566, 47567, 47568,
            47569, 47570, 47576, 47577, 47579, 47581, 47582,
            47585, 47587, 47588, 47589, 47592, 47596, 47604,
            47605, 47607, 47608, 47609, 47610, 47616, 47617,
            47624, 47637, 47672, 47673, 47676, 47680, 47682,
            47688, 47689, 47691, 47693, 47694, 47699, 47700,
            47701, 47704, 47708, 47716, 47717, 47719, 47720,
            47721, 47728, 47729, 47732, 47736, 47747, 47748,
            47749, 47751, 47756, 47784, 47785, 47787, 47788,
            47792, 47794, 47800, 47801, 47803, 47805, 47812,
            47816, 47832, 47833, 47868, 53802, 53803, 53806,
            53807, 53809, 53810, 53811, 53813, 53814, 53815,
            53816, 53817, 53818, 53819, 53822, 53824, 53826,
            53827, 53828, 53829, 53830, 53831, 53833, 53834,
            53835, 53836, 53837, 53838, 53839, 53840, 53841,
            53842, 53843, 53844, 53845, 53846, 53847, 53848,
            53849, 53850, 53851, 53853, 53854, 53855, 53856,
            53857, 53858, 53859, 53861, 53862, 53863, 53864,
            53865, 53866, 53867, 53868, 53869, 53870, 53871,
            53872, 53873, 53874, 53875, 53876, 53877, 53878,
            53879, 53880, 53881, 53882, 53883, 53884, 53885,
            53886, 53887, 53890, 53891, 53893, 53894, 53895,
            53897, 53898, 53899, 53900, 47872, 47876, 47885,
            47887, 47889, 47896, 47900, 47904, 47913, 47915,
            47924, 47925, 47926, 47928, 47931, 47932, 47933,
            47934, 47940, 47941, 47943, 47945, 47949, 47951,
            47952, 47956, 47960, 47969, 47971, 47980, 48008,
            48012, 48016, 48036, 48040, 48044, 48052, 48055,
            48064, 48068, 48072, 48080, 48083, 48120, 48121,
            48124, 48127, 48128, 48130, 48136, 48137, 48139,
            48140, 48141, 48143, 48145, 48148, 48149, 48150,
            48151, 48152, 48155, 48156, 48157, 48158, 48159,
            48164, 48165, 48167, 48169, 48173, 48176, 48177,
            48180, 48184, 48192, 48193, 48195, 48196, 48197,
            48201, 48204, 48205, 48208, 48221, 48260, 48261,
            48264, 48267, 48268, 48270, 48276, 48277, 48279,
            53901, 53902, 53903, 53906, 53907, 53908, 53910,
            53911, 53912, 53913, 53914, 53915, 53917, 53918,
            53919, 53921, 53922, 53923, 53925, 53926, 53927,
            53928, 53929, 53930, 53931, 53933, 53934, 53935,
            53936, 53938, 53939, 53940, 53941, 53942, 53943,
            53946, 53947, 53949, 53950, 53953, 53955, 53956,
            53957, 53958, 53959, 53962, 53964, 53965, 53966,
            53967, 53968, 53969, 53970, 53971, 53973, 53974,
            53975, 53977, 53978, 53979, 53981, 53982, 53983,
            53984, 53985, 53986, 53987, 53990, 53991, 53992,
            53993, 53994, 53995, 53996, 53997, 53998, 53999,
            54002, 54003, 54005, 54006, 54007, 54009, 54010,
            48281, 48282, 48288, 48289, 48292, 48295, 48296,
            48304, 48305, 48307, 48308, 48309, 48316, 48317,
            48320, 48324, 48333, 48335, 48336, 48337, 48341,
            48344, 48348, 48372, 48373, 48374, 48376, 48380,
            48388, 48389, 48391, 48393, 48400, 48404, 48420,
            48428, 48448, 48456, 48457, 48460, 48464, 48472,
            48473, 48484, 48488, 48512, 48513, 48516, 48519,
            48520, 48521, 48522, 48528, 48529, 48531, 48533,
            48537, 48538, 48540, 48548, 48560, 48568, 48596,
            48597, 48600, 48604, 48617, 48624, 48628, 48632,
            48640, 48643, 48645, 48652, 48653, 48656, 48660,
            48668, 48669, 48671, 48708, 48709, 48712, 48716,
            48718, 48724, 48725, 48727, 48729, 48730, 48731,
            48736, 48737, 48740, 54011, 54012, 54013, 54014,
            54015, 54018, 54020, 54022, 54023, 54024, 54025,
            54026, 54027, 54031, 54033, 54034, 54035, 54037,
            54039, 54040, 54041, 54042, 54043, 54046, 54050,
            54051, 54052, 54054, 54055, 54058, 54059, 54061,
            54062, 54063, 54065, 54066, 54067, 54068, 54069,
            54070, 54071, 54074, 54078, 54079, 54080, 54081,
            54082, 54083, 54086, 54087, 54088, 54089, 54090,
            54091, 54092, 54093, 54094, 54095, 54096, 54097,
            54098, 54099, 54100, 54101, 54102, 54103, 54104,
            54105, 54106, 54107, 54108, 54109, 54110, 54111,
            54112, 54113, 54114, 54115, 54116, 54117, 54118,
            54119, 54120, 54121, 48744, 48746, 48752, 48753,
            48755, 48756, 48757, 48763, 48764, 48765, 48768,
            48772, 48780, 48781, 48783, 48784, 48785, 48792,
            48793, 48808, 48848, 48849, 48852, 48855, 48856,
            48864, 48867, 48868, 48869, 48876, 48897, 48904,
            48905, 48920, 48921, 48923, 48924, 48925, 48960,
            48961, 48964, 48968, 48976, 48977, 48981, 49044,
            49072, 49093, 49100, 49101, 49104, 49108, 49116,
            49119, 49121, 49212, 49233, 49240, 49244, 49248,
            49256, 49257, 49296, 49297, 49300, 49304, 49312,
            49313, 49315, 49317, 49324, 49325, 49327, 49328,
            49331, 49332, 49333, 49334, 49340, 49341, 49343,
            49344, 49345, 49349, 49352, 49353, 49356, 49360,
            49368, 49369, 49371, 49372, 49373, 49380, 54122,
            54123, 54124, 54125, 54126, 54127, 54128, 54129,
            54130, 54131, 54132, 54133, 54134, 54135, 54136,
            54137, 54138, 54139, 54142, 54143, 54145, 54146,
            54147, 54149, 54150, 54151, 54152, 54153, 54154,
            54155, 54158, 54162, 54163, 54164, 54165, 54166,
            54167, 54170, 54171, 54173, 54174, 54175, 54177,
            54178, 54179, 54180, 54181, 54182, 54183, 54186,
            54188, 54190, 54191, 54192, 54193, 54194, 54195,
            54197, 54198, 54199, 54201, 54202, 54203, 54205,
            54206, 54207, 54208, 54209, 54210, 54211, 54214,
            54215, 54218, 54219, 54220, 54221, 54222, 54223,
            54225, 54226, 54227, 54228, 54229, 54230, 49381,
            49384, 49388, 49396, 49397, 49399, 49401, 49408,
            49412, 49416, 49424, 49429, 49436, 49437, 49438,
            49439, 49440, 49443, 49444, 49446, 49447, 49452,
            49453, 49455, 49456, 49457, 49462, 49464, 49465,
            49468, 49472, 49480, 49481, 49483, 49484, 49485,
            49492, 49493, 49496, 49500, 49508, 49509, 49511,
            49512, 49513, 49520, 49524, 49528, 49541, 49548,
            49549, 49550, 49552, 49556, 49558, 49564, 49565,
            49567, 49569, 49573, 49576, 49577, 49580, 49584,
            49597, 49604, 49608, 49612, 49620, 49623, 49624,
            49632, 49636, 49640, 49648, 49649, 49651, 49660,
            49661, 49664, 49668, 49676, 49677, 49679, 49681,
            49688, 49689, 49692, 49695, 49696, 49704, 49705,
            49707, 49709, 54231, 54233, 54234, 54235, 54236,
            54237, 54238, 54239, 54240, 54242, 54244, 54245,
            54246, 54247, 54248, 54249, 54250, 54251, 54254,
            54255, 54257, 54258, 54259, 54261, 54262, 54263,
            54264, 54265, 54266, 54267, 54270, 54272, 54274,
            54275, 54276, 54277, 54278, 54279, 54281, 54282,
            54283, 54284, 54285, 54286, 54287, 54288, 54289,
            54290, 54291, 54292, 54293, 54294, 54295, 54296,
            54297, 54298, 54299, 54300, 54302, 54303, 54304,
            54305, 54306, 54307, 54308, 54309, 54310, 54311,
            54312, 54313, 54314, 54315, 54316, 54317, 54318,
            54319, 54320, 54321, 54322, 54323, 54324, 54325,
            54326, 54327, 49711, 49713, 49714, 49716, 49736,
            49744, 49745, 49748, 49752, 49760, 49765, 49772,
            49773, 49776, 49780, 49788, 49789, 49791, 49793,
            49800, 49801, 49808, 49816, 49819, 49821, 49828,
            49829, 49832, 49836, 49837, 49844, 49845, 49847,
            49849, 49884, 49885, 49888, 49891, 49892, 49899,
            49900, 49901, 49903, 49905, 49910, 49912, 49913,
            49915, 49916, 49920, 49928, 49929, 49932, 49933,
            49939, 49940, 49941, 49944, 49948, 49956, 49957,
            49960, 49961, 49989, 50024, 50025, 50028, 50032,
            50034, 50040, 50041, 50044, 50045, 50052, 50056,
            50060, 50112, 50136, 50137, 50140, 50143, 50144,
            50146, 50152, 50153, 50157, 50164, 50165, 50168,
            50184, 50192, 50212, 50220, 50224, 54328, 54329,
            54330, 54331, 54332, 54333, 54334, 54335, 54337,
            54338, 54339, 54341, 54342, 54343, 54344, 54345,
            54346, 54347, 54348, 54349, 54350, 54351, 54352,
            54353, 54354, 54355, 54356, 54357, 54358, 54359,
            54360, 54361, 54362, 54363, 54365, 54366, 54367,
            54369, 54370, 54371, 54373, 54374, 54375, 54376,
            54377, 54378, 54379, 54380, 54382, 54384, 54385,
            54386, 54387, 54388, 54389, 54390, 54391, 54394,
            54395, 54397, 54398, 54401, 54403, 54404, 54405,
            54406, 54407, 54410, 54412, 54414, 54415, 54416,
            54417, 54418, 54419, 54421, 54422, 54423, 54424,
            54425, 54426, 54427, 54428, 54429, 50228, 50236,
            50237, 50248, 50276, 50277, 50280, 50284, 50292,
            50293, 50297, 50304, 50324, 50332, 50360, 50364,
            50409, 50416, 50417, 50420, 50424, 50426, 50431,
            50432, 50433, 50444, 50448, 50452, 50460, 50472,
            50473, 50476, 50480, 50488, 50489, 50491, 50493,
            50500, 50501, 50504, 50505, 50506, 50508, 50509,
            50510, 50515, 50516, 50517, 50519, 50520, 50521,
            50525, 50526, 50528, 50529, 50532, 50536, 50544,
            50545, 50547, 50548, 50549, 50556, 50557, 50560,
            50564, 50567, 50572, 50573, 50575, 50577, 50581,
            50583, 50584, 50588, 50592, 50601, 50612, 50613,
            50616, 50617, 50619, 50620, 50621, 50622, 50628,
            50629, 50630, 50631, 50632, 50633, 50634, 50636,
            50638, 54430, 54431, 54432, 54433, 54434, 54435,
            54436, 54437, 54438, 54439, 54440, 54442, 54443,
            54444, 54445, 54446, 54447, 54448, 54449, 54450,
            54451, 54452, 54453, 54454, 54455, 54456, 54457,
            54458, 54459, 54460, 54461, 54462, 54463, 54464,
            54465, 54466, 54467, 54468, 54469, 54470, 54471,
            54472, 54473, 54474, 54475, 54477, 54478, 54479,
            54481, 54482, 54483, 54485, 54486, 54487, 54488,
            54489, 54490, 54491, 54493, 54494, 54496, 54497,
            54498, 54499, 54500, 54501, 54502, 54503, 54505,
            54506, 54507, 54509, 54510, 54511, 54513, 54514,
            54515, 54516, 54517, 54518, 54519, 54521, 54522,
            54524, 50640, 50641, 50644, 50648, 50656, 50657,
            50659, 50661, 50668, 50669, 50670, 50672, 50676,
            50678, 50679, 50684, 50685, 50686, 50687, 50688,
            50689, 50693, 50694, 50695, 50696, 50700, 50704,
            50712, 50713, 50715, 50716, 50724, 50725, 50728,
            50732, 50733, 50734, 50736, 50739, 50740, 50741,
            50743, 50745, 50747, 50752, 50753, 50756, 50760,
            50768, 50769, 50771, 50772, 50773, 50780, 50781,
            50784, 50796, 50799, 50801, 50808, 50809, 50812,
            50816, 50824, 50825, 50827, 50829, 50836, 50837,
            50840, 50844, 50852, 50853, 50855, 50857, 50864,
            50865, 50868, 50872, 50873, 50874, 50880, 50881,
            50883, 50885, 50892, 50893, 50896, 50900, 50908,
            50909, 50912, 50913, 50920, 54526, 54527, 54528,
            54529, 54530, 54531, 54533, 54534, 54535, 54537,
            54538, 54539, 54541, 54542, 54543, 54544, 54545,
            54546, 54547, 54550, 54552, 54553, 54554, 54555,
            54556, 54557, 54558, 54559, 54560, 54561, 54562,
            54563, 54564, 54565, 54566, 54567, 54568, 54569,
            54570, 54571, 54572, 54573, 54574, 54575, 54576,
            54577, 54578, 54579, 54580, 54581, 54582, 54583,
            54584, 54585, 54586, 54587, 54590, 54591, 54593,
            54594, 54595, 54597, 54598, 54599, 54600, 54601,
            54602, 54603, 54606, 54608, 54610, 54611, 54612,
            54613, 54614, 54615, 54618, 54619, 54621, 54622,
            54623, 54625, 54626, 54627, 50921, 50924, 50928,
            50936, 50937, 50941, 50948, 50949, 50952, 50956,
            50964, 50965, 50967, 50969, 50976, 50977, 50980,
            50984, 50992, 50993, 50995, 50997, 50999, 51004,
            51005, 51008, 51012, 51018, 51020, 51021, 51023,
            51025, 51026, 51027, 51028, 51029, 51030, 51031,
            51032, 51036, 51040, 51048, 51051, 51060, 51061,
            51064, 51068, 51069, 51070, 51075, 51076, 51077,
            51079, 51080, 51081, 51082, 51086, 51088, 51089,
            51092, 51094, 51095, 51096, 51098, 51104, 51105,
            51107, 51108, 51109, 51110, 51116, 51117, 51120,
            51124, 51132, 51133, 51135, 51136, 51137, 51144,
            51145, 51148, 51150, 51152, 51160, 51165, 51172,
            51176, 51180, 51200, 51201, 51204, 51208, 51210,
            54628, 54630, 54631, 54634, 54636, 54638, 54639,
            54640, 54641, 54642, 54643, 54646, 54647, 54649,
            54650, 54651, 54653, 54654, 54655, 54656, 54657,
            54658, 54659, 54662, 54666, 54667, 54668, 54669,
            54670, 54671, 54673, 54674, 54675, 54676, 54677,
            54678, 54679, 54680, 54681, 54682, 54683, 54684,
            54685, 54686, 54687, 54688, 54689, 54690, 54691,
            54692, 54694, 54695, 54696, 54697, 54698, 54699,
            54700, 54701, 54702, 54703, 54704, 54705, 54706,
            54707, 54708, 54709, 54710, 54711, 54712, 54713,
            54714, 54715, 54716, 54717, 54718, 54719, 54720,
            54721, 54722, 54723, 54724, 54725, 54726, 54727,
            51216, 51217, 51219, 51221, 51222, 51228, 51229,
            51232, 51236, 51244, 51245, 51247, 51249, 51256,
            51260, 51264, 51272, 51273, 51276, 51277, 51284,
            51312, 51313, 51316, 51320, 51322, 51328, 51329,
            51331, 51333, 51334, 51335, 51339, 51340, 51341,
            51348, 51357, 51359, 51361, 51368, 51388, 51389,
            51396, 51400, 51404, 51412, 51413, 51415, 51417,
            51424, 51425, 51428, 51445, 51452, 51453, 51456,
            51460, 51461, 51462, 51468, 51469, 51471, 51473,
            51480, 51500, 51508, 51536, 51537, 51540, 51544,
            51552, 51553, 51555, 51564, 51568, 51572, 51580,
            51592, 51593, 51596, 51600, 51608, 51609, 51611,
            51613, 51648, 51649, 51652, 51655, 51656, 51658,
            51664, 51665, 51667, 54730, 54731, 54733, 54734,
            54735, 54737, 54739, 54740, 54741, 54742, 54743,
            54746, 54748, 54750, 54751, 54752, 54753, 54754,
            54755, 54758, 54759, 54761, 54762, 54763, 54765,
            54766, 54767, 54768, 54769, 54770, 54771, 54774,
            54776, 54778, 54779, 54780, 54781, 54782, 54783,
            54786, 54787, 54789, 54790, 54791, 54793, 54794,
            54795, 54796, 54797, 54798, 54799, 54802, 54806,
            54807, 54808, 54809, 54810, 54811, 54813, 54814,
            54815, 54817, 54818, 54819, 54821, 54822, 54823,
            54824, 54825, 54826, 54827, 54828, 54830, 54831,
            54832, 54833, 54834, 54835, 54836, 54837, 54838,
            54839, 54842, 54843, 51669, 51670, 51673, 51674,
            51676, 51677, 51680, 51682, 51684, 51687, 51692,
            51693, 51695, 51696, 51697, 51704, 51705, 51708,
            51712, 51720, 51721, 51723, 51724, 51725, 51732,
            51736, 51753, 51788, 51789, 51792, 51796, 51804,
            51805, 51807, 51808, 51809, 51816, 51837, 51844,
            51864, 51900, 51901, 51904, 51908, 51916, 51917,
            51919, 51921, 51923, 51928, 51929, 51936, 51948,
            51956, 51976, 51984, 51988, 51992, 52000, 52001,
            52033, 52040, 52041, 52044, 52048, 52056, 52057,
            52061, 52068, 52088, 52089, 52124, 52152, 52180,
            52196, 52199, 52201, 52236, 52237, 52240, 52244,
            52252, 52253, 52257, 52258, 52263, 52264, 52265,
            52268, 52270, 52272, 52280, 52281, 52283, 54845,
            54846, 54847, 54849, 54850, 54851, 54852, 54854,
            54855, 54858, 54860, 54862, 54863, 54864, 54866,
            54867, 54870, 54871, 54873, 54874, 54875, 54877,
            54878, 54879, 54880, 54881, 54882, 54883, 54884,
            54885, 54886, 54888, 54890, 54891, 54892, 54893,
            54894, 54895, 54898, 54899, 54901, 54902, 54903,
            54904, 54905, 54906, 54907, 54908, 54909, 54910,
            54911, 54912, 54913, 54914, 54916, 54918, 54919,
            54920, 54921, 54922, 54923, 54926, 54927, 54929,
            54930, 54931, 54933, 54934, 54935, 54936, 54937,
            54938, 54939, 54940, 54942, 54944, 54946, 54947,
            54948, 54949, 54950, 54951, 54953, 54954, 52284,
            52285, 52286, 52292, 52293, 52296, 52300, 52308,
            52309, 52311, 52312, 52313, 52320, 52324, 52326,
            52328, 52336, 52341, 52376, 52377, 52380, 52384,
            52392, 52393, 52395, 52396, 52397, 52404, 52405,
            52408, 52412, 52420, 52421, 52423, 52425, 52432,
            52436, 52452, 52460, 52464, 52481, 52488, 52489,
            52492, 52496, 52504, 52505, 52507, 52509, 52516,
            52520, 52524, 52537, 52572, 52576, 52580, 52588,
            52589, 52591, 52593, 52600, 52616, 52628, 52629,
            52632, 52636, 52644, 52645, 52647, 52649, 52656,
            52676, 52684, 52688, 52712, 52716, 52720, 52728,
            52729, 52731, 52733, 52740, 52744, 52748, 52756,
            52761, 52768, 52769, 52772, 52776, 52784, 52785,
            52787, 52789, 54955, 54957, 54958, 54959, 54961,
            54962, 54963, 54964, 54965, 54966, 54967, 54968,
            54970, 54972, 54973, 54974, 54975, 54976, 54977,
            54978, 54979, 54982, 54983, 54985, 54986, 54987,
            54989, 54990, 54991, 54992, 54994, 54995, 54997,
            54998, 55000, 55002, 55003, 55004, 55005, 55006,
            55007, 55009, 55010, 55011, 55013, 55014, 55015,
            55017, 55018, 55019, 55020, 55021, 55022, 55023,
            55025, 55026, 55027, 55028, 55030, 55031, 55032,
            55033, 55034, 55035, 55038, 55039, 55041, 55042,
            55043, 55045, 55046, 55047, 55048, 55049, 55050,
            55051, 55052, 55053, 55054, 55055, 55056, 55058,
            55059, 55060, 52824, 52825, 52828, 52831, 52832,
            52833, 52840, 52841, 52843, 52845, 52852, 52853,
            52856, 52860, 52868, 52869, 52871, 52873, 52880,
            52881, 52884, 52888, 52896, 52897, 52899, 52900,
            52901, 52908, 52909, 52929, 52964, 52965, 52968,
            52971, 52972, 52980, 52981, 52983, 52984, 52985,
            52992, 52993, 52996, 53000, 53008, 53009, 53011,
            53013, 53020, 53024, 53028, 53036, 53037, 53039,
            53040, 53041, 53048, 53076, 53077, 53080, 53084,
            53092, 53093, 53095, 53097, 53104, 53105, 53108,
            53112, 53120, 53125, 53132, 53153, 53160, 53168,
            53188, 53216, 53217, 53220, 53224, 53232, 53233,
            53235, 53237, 53244, 53248, 53252, 53265, 53272,
            53293, 53300, 53301, 53304, 53308, 55061, 55062,
            55063, 55066, 55067, 55069, 55070, 55071, 55073,
            55074, 55075, 55076, 55077, 55078, 55079, 55082,
            55084, 55086, 55087, 55088, 55089, 55090, 55091,
            55094, 55095, 55097, 55098, 55099, 55101, 55102,
            55103, 55104, 55105, 55106, 55107, 55109, 55110,
            55112, 55114, 55115, 55116, 55117, 55118, 55119,
            55122, 55123, 55125, 55130, 55131, 55132, 55133,
            55134, 55135, 55138, 55140, 55142, 55143, 55144,
            55146, 55147, 55149, 55150, 55151, 55153, 55154,
            55155, 55157, 55158, 55159, 55160, 55161, 55162,
            55163, 55166, 55167, 55168, 55170, 55171, 55172,
            55173, 55174, 55175, 55178, 55179, 53316, 53317,
            53319, 53321, 53328, 53332, 53336, 53344, 53356,
            53357, 53360, 53364, 53372, 53373, 53377, 53412,
            53413, 53416, 53420, 53428, 53429, 53431, 53433,
            53440, 53441, 53444, 53448, 53449, 53456, 53457,
            53459, 53460, 53461, 53468, 53469, 53472, 53476,
            53484, 53485, 53487, 53488, 53489, 53496, 53517,
            53552, 53553, 53556, 53560, 53562, 53568, 53569,
            53571, 53572, 53573, 53580, 53581, 53584, 53588,
            53596, 53597, 53599, 53601, 53608, 53612, 53628,
            53636, 53640, 53664, 53665, 53668, 53672, 53680,
            53681, 53683, 53685, 53690, 53692, 53696, 53720,
            53748, 53752, 53767, 53769, 53776, 53804, 53805,
            53808, 53812, 53820, 53821, 53823, 53825, 53832,
            53852, 55181, 55182, 55183, 55185, 55186, 55187,
            55188, 55189, 55190, 55191, 55194, 55196, 55198,
            55199, 55200, 55201, 55202, 55203, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 53860,
            53888, 53889, 53892, 53896, 53904, 53905, 53909,
            53916, 53920, 53924, 53932, 53937, 53944, 53945,
            53948, 53951, 53952, 53954, 53960, 53961, 53963,
            53972, 53976, 53980, 53988, 53989, 54000, 54001,
            54004, 54008, 54016, 54017, 54019, 54021, 54028,
            54029, 54030, 54032, 54036, 54038, 54044, 54045,
            54047, 54048, 54049, 54053, 54056, 54057, 54060,
            54064, 54072, 54073, 54075, 54076, 54077, 54084,
            54085, 54140, 54141, 54144, 54148, 54156, 54157,
            54159, 54160, 54161, 54168, 54169, 54172, 54176,
            54184, 54185, 54187, 54189, 54196, 54200, 54204,
            54212, 54213, 54216, 54217, 54224, 54232, 54241,
            54243, 54252, 54253, 54256, 54260, 54268, 54269,
            54271, 54273, 54280, 54301, 54336, 54340, 54364,
            54368, 54372, 54381, 54383, 54392, 54393, 54396,
            54399, 54400, 54402, 54408, 54409, 54411, 54413,
            54420, 54441, 54476, 54480, 54484, 54492, 54495,
            54504, 54508, 54512, 54520, 54523, 54525, 54532,
            54536, 54540, 54548, 54549, 54551, 54588, 54589,
            54592, 54596, 54604, 54605, 54607, 54609, 54616,
            54617, 54620, 54624, 54629, 54632, 54633, 54635,
            54637, 54644, 54645, 54648, 54652, 54660, 54661,
            54663, 54664, 54665, 54672, 54693, 54728, 54729,
            54732, 54736, 54738, 54744, 54745, 54747, 54749,
            54756, 54757, 54760, 54764, 54772, 54773, 54775,
            54777, 54784, 54785, 54788, 54792, 54800, 54801,
            54803, 54804, 54805, 54812, 54816, 54820, 54829,
            54840, 54841, 54844, 54848, 54853, 54856, 54857,
            54859, 54861, 54865, 54868, 54869, 54872, 54876,
            54887, 54889, 54896, 54897, 54900, 54915, 54917,
            54924, 54925, 54928, 54932, 54941, 54943, 54945,
            54952, 54956, 54960, 54969, 54971, 54980, 54981,
            54984, 54988, 54993, 54996, 54999, 55001, 55008,
            55012, 55016, 55024, 55029, 55036, 55037, 55040,
            55044, 55057, 55064, 55065, 55068, 55072, 55080,
            55081, 55083, 55085, 55092, 55093, 55096, 55100,
            55108, 55111, 55113, 55120, 55121, 55124, 55126,
            55127, 55128, 55129, 55136, 55137, 55139, 55141,
            55145, 55148, 55152, 55156, 55164, 55165, 55169,
            55176, 55177, 55180, 55184, 55192, 55193, 55195,
            55197, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 20285,
            20339, 20551, 20729, 21152, 21487, 21621, 21733,
            22025, 23233, 23478, 26247, 26550, 26551, 26607,
            27468, 29634, 30146, 31292, 33499, 33540, 34903,
            34952, 35382, 36040, 36303, 36603, 36838, 39381,
            21051, 21364, 21508, 24682, 24932, 27580, 29647,
            33050, 35258, 35282, 38307, 20355, 21002, 22718,
            22904, 23014, 24178, 24185, 25031, 25536, 26438,
            26604, 26751, 28567, 30286, 30475, 30965, 31240,
            31487, 31777, 32925, 33390, 33393, 35563, 38291,
            20075, 21917, 26359, 28212, 30883, 31469, 33883,
            35088, 34638, 38824, 21208, 22350, 22570, 23884,
            24863, 25022, 25121, 25954, 26577, 27204, 28187,
            29976, 30131, 30435, 30640, 32058, 37039, 37969,
            37970, 40853, 21283, 23724, 30002, 32987, 37440,
            38296, 21083, 22536, 23004, 23713, 23831, 24247,
            24378, 24394, 24951, 27743, 30074, 30086, 31968,
            32115, 32177, 32652, 33108, 33313, 34193, 35137,
            35611, 37628, 38477, 40007, 20171, 20215, 20491,
            20977, 22607, 24887, 24894, 24936, 25913, 27114,
            28433, 30117, 30342, 30422, 31623, 33445, 33995,
            63744, 37799, 38283, 21888, 23458, 22353, 63745,
            31923, 32697, 37301, 20520, 21435, 23621, 24040,
            25298, 25454, 25818, 25831, 28192, 28844, 31067,
            36317, 36382, 63746, 36989, 37445, 37624, 20094,
            20214, 20581, 24062, 24314, 24838, 26967, 33137,
            34388, 36423, 37749, 39467, 20062, 20625, 26480,
            26688, 20745, 21133, 21138, 27298, 30652, 37392,
            40660, 21163, 24623, 36850, 20552, 25001, 25581,
            25802, 26684, 27268, 28608, 33160, 35233, 38548,
            22533, 29309, 29356, 29956, 32121, 32365, 32937,
            35211, 35700, 36963, 40273, 25225, 27770, 28500,
            32080, 32570, 35363, 20860, 24906, 31645, 35609,
            37463, 37772, 20140, 20435, 20510, 20670, 20742,
            21185, 21197, 21375, 22384, 22659, 24218, 24465,
            24950, 25004, 25806, 25964, 26223, 26299, 26356,
            26775, 28039, 28805, 28913, 29855, 29861, 29898,
            30169, 30828, 30956, 31455, 31478, 32069, 32147,
            32789, 32831, 33051, 33686, 35686, 36629, 36885,
            37857, 38915, 38968, 39514, 39912, 20418, 21843,
            22586, 22865, 23395, 23622, 24760, 25106, 26690,
            26800, 26856, 28330, 30028, 30328, 30926, 31293,
            31995, 32363, 32380, 35336, 35489, 35903, 38542,
            40388, 21476, 21481, 21578, 21617, 22266, 22993,
            23396, 23611, 24235, 25335, 25911, 25925, 25970,
            26272, 26543, 27073, 27837, 30204, 30352, 30590,
            31295, 32660, 32771, 32929, 33167, 33510, 33533,
            33776, 34241, 34865, 34996, 35493, 63747, 36764,
            37678, 38599, 39015, 39640, 40723, 21741, 26011,
            26354, 26767, 31296, 35895, 40288, 22256, 22372,
            23825, 26118, 26801, 26829, 28414, 29736, 34974,
            39908, 27752, 63748, 39592, 20379, 20844, 20849,
            21151, 23380, 24037, 24656, 24685, 25329, 25511,
            25915, 29657, 31354, 34467, 36002, 38799, 20018,
            23521, 25096, 26524, 29916, 31185, 33747, 35463,
            35506, 36328, 36942, 37707, 38982, 24275, 27112,
            34303, 37101, 63749, 20896, 23448, 23532, 24931,
            26874, 27454, 28748, 29743, 29912, 31649, 32592,
            33733, 35264, 36011, 38364, 39208, 21038, 24669,
            25324, 36866, 20362, 20809, 21281, 22745, 24291,
            26336, 27960, 28826, 29378, 29654, 31568, 33009,
            37979, 21350, 25499, 32619, 20054, 20608, 22602,
            22750, 24618, 24871, 25296, 27088, 39745, 23439,
            32024, 32945, 36703, 20132, 20689, 21676, 21932,
            23308, 23968, 24039, 25898, 25934, 26657, 27211,
            29409, 30350, 30703, 32094, 32761, 33184, 34126,
            34527, 36611, 36686, 37066, 39171, 39509, 39851,
            19992, 20037, 20061, 20167, 20465, 20855, 21246,
            21312, 21475, 21477, 21646, 22036, 22389, 22434,
            23495, 23943, 24272, 25084, 25304, 25937, 26552,
            26601, 27083, 27472, 27590, 27628, 27714, 28317,
            28792, 29399, 29590, 29699, 30655, 30697, 31350,
            32127, 32777, 33276, 33285, 33290, 33503, 34914,
            35635, 36092, 36544, 36881, 37041, 37476, 37558,
            39378, 39493, 40169, 40407, 40860, 22283, 23616,
            33738, 38816, 38827, 40628, 21531, 31384, 32676,
            35033, 36557, 37089, 22528, 23624, 25496, 31391,
            23470, 24339, 31353, 31406, 33422, 36524, 20518,
            21048, 21240, 21367, 22280, 25331, 25458, 27402,
            28099, 30519, 21413, 29527, 34152, 36470, 38357,
            26426, 27331, 28528, 35437, 36556, 39243, 63750,
            26231, 27512, 36020, 39740, 63751, 21483, 22317,
            22862, 25542, 27131, 29674, 30789, 31418, 31429,
            31998, 33909, 35215, 36211, 36917, 38312, 21243,
            22343, 30023, 31584, 33740, 37406, 63752, 27224,
            20811, 21067, 21127, 25119, 26840, 26997, 38553,
            20677, 21156, 21220, 25027, 26020, 26681, 27135,
            29822, 31563, 33465, 33771, 35250, 35641, 36817,
            39241, 63753, 20170, 22935, 25810, 26129, 27278,
            29748, 31105, 31165, 33449, 34942, 34943, 35167,
            63754, 37670, 20235, 21450, 24613, 25201, 27762,
            32026, 32102, 20120, 20834, 30684, 32943, 20225,
            20238, 20854, 20864, 21980, 22120, 22331, 22522,
            22524, 22804, 22855, 22931, 23492, 23696, 23822,
            24049, 24190, 24524, 25216, 26071, 26083, 26398,
            26399, 26462, 26827, 26820, 27231, 27450, 27683,
            27773, 27778, 28103, 29592, 29734, 29738, 29826,
            29859, 30072, 30079, 30849, 30959, 31041, 31047,
            31048, 31098, 31637, 32000, 32186, 32648, 32774,
            32813, 32908, 35352, 35663, 35912, 36215, 37665,
            37668, 39138, 39249, 39438, 39439, 39525, 40594,
            32202, 20342, 21513, 25326, 26708, 37329, 21931,
            20794, 63755, 63756, 23068, 25062, 63757, 25295,
            25343, 63758, 63759, 63760, 63761, 63762, 63763,
            37027, 63764, 63765, 63766, 63767, 63768, 35582,
            63769, 63770, 63771, 63772, 26262, 63773, 29014,
            63774, 63775, 38627, 63776, 25423, 25466, 21335,
            63777, 26511, 26976, 28275, 63778, 30007, 63779,
            63780, 63781, 32013, 63782, 63783, 34930, 22218,
            23064, 63784, 63785, 63786, 63787, 63788, 20035,
            63789, 20839, 22856, 26608, 32784, 63790, 22899,
            24180, 25754, 31178, 24565, 24684, 25288, 25467,
            23527, 23511, 21162, 63791, 22900, 24361, 24594,
            63792, 63793, 63794, 29785, 63795, 63796, 63797,
            63798, 63799, 63800, 39377, 63801, 63802, 63803,
            63804, 63805, 63806, 63807, 63808, 63809, 63810,
            63811, 28611, 63812, 63813, 33215, 36786, 24817,
            63814, 63815, 33126, 63816, 63817, 23615, 63818,
            63819, 63820, 63821, 63822, 63823, 63824, 63825,
            23273, 35365, 26491, 32016, 63826, 63827, 63828,
            63829, 63830, 63831, 33021, 63832, 63833, 23612,
            27877, 21311, 28346, 22810, 33590, 20025, 20150,
            20294, 21934, 22296, 22727, 24406, 26039, 26086,
            27264, 27573, 28237, 30701, 31471, 31774, 32222,
            34507, 34962, 37170, 37723, 25787, 28606, 29562,
            30136, 36948, 21846, 22349, 25018, 25812, 26311,
            28129, 28251, 28525, 28601, 30192, 32835, 33213,
            34113, 35203, 35527, 35674, 37663, 27795, 30035,
            31572, 36367, 36957, 21776, 22530, 22616, 24162,
            25095, 25758, 26848, 30070, 31958, 34739, 40680,
            20195, 22408, 22382, 22823, 23565, 23729, 24118,
            24453, 25140, 25825, 29619, 33274, 34955, 36024,
            38538, 40667, 23429, 24503, 24755, 20498, 20992,
            21040, 22294, 22581, 22615, 23566, 23648, 23798,
            23947, 24230, 24466, 24764, 25361, 25481, 25623,
            26691, 26873, 27330, 28120, 28193, 28372, 28644,
            29182, 30428, 30585, 31153, 31291, 33796, 35241,
            36077, 36339, 36424, 36867, 36884, 36947, 37117,
            37709, 38518, 38876, 27602, 28678, 29272, 29346,
            29544, 30563, 31167, 31716, 32411, 35712, 22697,
            24775, 25958, 26109, 26302, 27788, 28958, 29129,
            35930, 38931, 20077, 31361, 20189, 20908, 20941,
            21205, 21516, 24999, 26481, 26704, 26847, 27934,
            28540, 30140, 30643, 31461, 33012, 33891, 37509,
            20828, 26007, 26460, 26515, 30168, 31431, 33651,
            63834, 35910, 36887, 38957, 23663, 33216, 33434,
            36929, 36975, 37389, 24471, 23965, 27225, 29128,
            30331, 31561, 34276, 35588, 37159, 39472, 21895,
            25078, 63835, 30313, 32645, 34367, 34746, 35064,
            37007, 63836, 27931, 28889, 29662, 32097, 33853,
            63837, 37226, 39409, 63838, 20098, 21365, 27396,
            27410, 28734, 29211, 34349, 40478, 21068, 36771,
            23888, 25829, 25900, 27414, 28651, 31811, 32412,
            34253, 35172, 35261, 25289, 33240, 34847, 24266,
            26391, 28010, 29436, 29701, 29807, 34690, 37086,
            20358, 23821, 24480, 33802, 20919, 25504, 30053,
            20142, 20486, 20841, 20937, 26753, 27153, 31918,
            31921, 31975, 33391, 35538, 36635, 37327, 20406,
            20791, 21237, 21570, 24300, 24942, 25150, 26053,
            27354, 28670, 31018, 34268, 34851, 38317, 39522,
            39530, 40599, 40654, 21147, 26310, 27511, 28701,
            31019, 36706, 38722, 24976, 25088, 25891, 28451,
            29001, 29833, 32244, 32879, 34030, 36646, 36899,
            37706, 20925, 21015, 21155, 27916, 28872, 35010,
            24265, 25986, 27566, 28610, 31806, 29557, 20196,
            20278, 22265, 63839, 23738, 23994, 24604, 29618,
            31533, 32666, 32718, 32838, 36894, 37428, 38646,
            38728, 38936, 40801, 20363, 28583, 31150, 37300,
            38583, 21214, 63840, 25736, 25796, 27347, 28510,
            28696, 29200, 30439, 32769, 34310, 34396, 36335,
            36613, 38706, 39791, 40442, 40565, 30860, 31103,
            32160, 33737, 37636, 40575, 40595, 35542, 22751,
            24324, 26407, 28711, 29903, 31840, 32894, 20769,
            28712, 29282, 30922, 36034, 36058, 36084, 38647,
            20102, 20698, 23534, 24278, 26009, 29134, 30274,
            30637, 32842, 34044, 36988, 39719, 40845, 22744,
            23105, 23650, 27155, 28122, 28431, 30267, 32047,
            32311, 34078, 35128, 37860, 38475, 21129, 26066,
            26611, 27060, 27969, 28316, 28687, 29705, 29792,
            30041, 30244, 30827, 35628, 39006, 20845, 25134,
            38520, 20374, 20523, 23833, 28138, 32184, 36650,
            24459, 24900, 26647, 63841, 38534, 21202, 32907,
            20956, 20940, 26974, 31260, 32190, 33777, 38517,
            20442, 21033, 21400, 21519, 21774, 23653, 24743,
            26446, 26792, 28012, 29313, 29432, 29702, 29827,
            63842, 30178, 31852, 32633, 32696, 33673, 35023,
            35041, 37324, 37328, 38626, 39881, 21533, 28542,
            29136, 29848, 34298, 36522, 38563, 40023, 40607,
            26519, 28107, 29747, 33256, 38678, 30764, 31435,
            31520, 31890, 25705, 29802, 30194, 30908, 30952,
            39340, 39764, 40635, 23518, 24149, 28448, 33180,
            33707, 37000, 19975, 21325, 23081, 24018, 24398,
            24930, 25405, 26217, 26364, 28415, 28459, 28771,
            30622, 33836, 34067, 34875, 36627, 39237, 39995,
            21788, 25273, 26411, 27819, 33545, 35178, 38778,
            20129, 22916, 24536, 24537, 26395, 32178, 32596,
            33426, 33579, 33725, 36638, 37017, 22475, 22969,
            23186, 23504, 26151, 26522, 26757, 27599, 29028,
            32629, 36023, 36067, 36993, 39749, 33032, 35978,
            38476, 39488, 40613, 23391, 27667, 29467, 30450,
            30431, 33804, 20906, 35219, 20813, 20885, 21193,
            26825, 27796, 30468, 30496, 32191, 32236, 38754,
            40629, 28357, 34065, 20901, 21517, 21629, 26126,
            26269, 26919, 28319, 30399, 30609, 33559, 33986,
            34719, 37225, 37528, 40180, 34946, 20398, 20882,
            21215, 22982, 24125, 24917, 25720, 25721, 26286,
            26576, 27169, 27597, 27611, 29279, 29281, 29761,
            30520, 30683, 32791, 33468, 33541, 35584, 35624,
            35980, 26408, 27792, 29287, 30446, 30566, 31302,
            40361, 27519, 27794, 22818, 26406, 33945, 21359,
            22675, 22937, 24287, 25551, 26164, 26483, 28218,
            29483, 31447, 33495, 37672, 21209, 24043, 25006,
            25035, 25098, 25287, 25771, 26080, 26969, 27494,
            27595, 28961, 29687, 30045, 32326, 33310, 33538,
            34154, 35491, 36031, 38695, 40289, 22696, 40664,
            20497, 21006, 21563, 21839, 25991, 27766, 32010,
            32011, 32862, 34442, 38272, 38639, 21247, 27797,
            29289, 21619, 23194, 23614, 23883, 24396, 24494,
            26410, 26806, 26979, 28220, 28228, 30473, 31859,
            32654, 34183, 35598, 36855, 38753, 40692, 23735,
            24758, 24845, 25003, 25935, 26107, 26108, 27665,
            27887, 29599, 29641, 32225, 38292, 23494, 34588,
            35600, 21085, 21338, 25293, 25615, 25778, 26420,
            27192, 27850, 29632, 29854, 31636, 31893, 32283,
            33162, 33334, 34180, 36843, 38649, 39361, 20276,
            21322, 21453, 21467, 25292, 25644, 25856, 26001,
            27075, 27886, 28504, 29677, 30036, 30242, 30436,
            30460, 30928, 30971, 31020, 32070, 33324, 34784,
            36820, 38930, 39151, 21187, 25300, 25765, 28196,
            28497, 30332, 36299, 37297, 37474, 39662, 39747,
            20515, 20621, 22346, 22952, 23592, 24135, 24439,
            25151, 25918, 26041, 26049, 26121, 26507, 27036,
            28354, 30917, 32033, 32938, 33152, 33323, 33459,
            33953, 34444, 35370, 35607, 37030, 38450, 40848,
            20493, 20467, 63843, 22521, 24472, 25308, 25490,
            26479, 28227, 28953, 30403, 32972, 32986, 35060,
            35061, 35097, 36064, 36649, 37197, 38506, 20271,
            20336, 24091, 26575, 26658, 30333, 30334, 39748,
            24161, 27146, 29033, 29140, 30058, 63844, 32321,
            34115, 34281, 39132, 20240, 31567, 32624, 38309,
            20961, 24070, 26805, 27710, 27726, 27867, 29359,
            31684, 33539, 27861, 29754, 20731, 21128, 22721,
            25816, 27287, 29863, 30294, 30887, 34327, 38370,
            38713, 63845, 21342, 24321, 35722, 36776, 36783,
            37002, 21029, 30629, 40009, 40712, 19993, 20482,
            20853, 23643, 24183, 26142, 26170, 26564, 26821,
            28851, 29953, 30149, 31177, 31453, 36647, 39200,
            39432, 20445, 22561, 22577, 23542, 26222, 27493,
            27921, 28282, 28541, 29668, 29995, 33769, 35036,
            35091, 35676, 36628, 20239, 20693, 21264, 21340,
            23443, 24489, 26381, 31119, 33145, 33583, 34068,
            35079, 35206, 36665, 36667, 39333, 39954, 26412,
            20086, 20472, 22857, 23553, 23791, 23792, 25447,
            26834, 28925, 29090, 29739, 32299, 34028, 34562,
            36898, 37586, 40179, 19981, 20184, 20463, 20613,
            21078, 21103, 21542, 21648, 22496, 22827, 23142,
            23386, 23413, 23500, 24220, 63846, 25206, 25975,
            26023, 28014, 28325, 29238, 31526, 31807, 32566,
            33104, 33105, 33178, 33344, 33433, 33705, 35331,
            36000, 36070, 36091, 36212, 36282, 37096, 37340,
            38428, 38468, 39385, 40167, 21271, 20998, 21545,
            22132, 22707, 22868, 22894, 24575, 24996, 25198,
            26128, 27774, 28954, 30406, 31881, 31966, 32027,
            33452, 36033, 38640, 63847, 20315, 24343, 24447,
            25282, 23849, 26379, 26842, 30844, 32323, 40300,
            19989, 20633, 21269, 21290, 21329, 22915, 23138,
            24199, 24754, 24970, 25161, 25209, 26000, 26503,
            27047, 27604, 27606, 27607, 27608, 27832, 63848,
            29749, 30202, 30738, 30865, 31189, 31192, 31875,
            32203, 32737, 32933, 33086, 33218, 33778, 34586,
            35048, 35513, 35692, 36027, 37145, 38750, 39131,
            40763, 22188, 23338, 24428, 25996, 27315, 27567,
            27996, 28657, 28693, 29277, 29613, 36007, 36051,
            38971, 24977, 27703, 32856, 39425, 20045, 20107,
            20123, 20181, 20282, 20284, 20351, 20447, 20735,
            21490, 21496, 21766, 21987, 22235, 22763, 22882,
            23057, 23531, 23546, 23556, 24051, 24107, 24473,
            24605, 25448, 26012, 26031, 26614, 26619, 26797,
            27515, 27801, 27863, 28195, 28681, 29509, 30722,
            31038, 31040, 31072, 31169, 31721, 32023, 32114,
            32902, 33293, 33678, 34001, 34503, 35039, 35408,
            35422, 35613, 36060, 36198, 36781, 37034, 39164,
            39391, 40605, 21066, 63849, 26388, 63850, 20632,
            21034, 23665, 25955, 27733, 29642, 29987, 30109,
            31639, 33948, 37240, 38704, 20087, 25746, 27578,
            29022, 34217, 19977, 63851, 26441, 26862, 28183,
            33439, 34072, 34923, 25591, 28545, 37394, 39087,
            19978, 20663, 20687, 20767, 21830, 21930, 22039,
            23360, 23577, 23776, 24120, 24202, 24224, 24258,
            24819, 26705, 27233, 28248, 29245, 29248, 29376,
            30456, 31077, 31665, 32724, 35059, 35316, 35443,
            35937, 36062, 38684, 22622, 29885, 36093, 21959,
            63852, 31329, 32034, 33394, 29298, 29983, 29989,
            63853, 31513, 22661, 22779, 23996, 24207, 24246,
            24464, 24661, 25234, 25471, 25933, 26257, 26329,
            26360, 26646, 26866, 29312, 29790, 31598, 32110,
            32214, 32626, 32997, 33298, 34223, 35199, 35475,
            36893, 37604, 40653, 40736, 22805, 22893, 24109,
            24796, 26132, 26227, 26512, 27728, 28101, 28511,
            30707, 30889, 33990, 37323, 37675, 20185, 20682,
            20808, 21892, 23307, 23459, 25159, 25982, 26059,
            28210, 29053, 29697, 29764, 29831, 29887, 30316,
            31146, 32218, 32341, 32680, 33146, 33203, 33337,
            34330, 34796, 35445, 36323, 36984, 37521, 37925,
            39245, 39854, 21352, 23633, 26964, 27844, 27945,
            28203, 33292, 34203, 35131, 35373, 35498, 38634,
            40807, 21089, 26297, 27570, 32406, 34814, 36109,
            38275, 38493, 25885, 28041, 29166, 63854, 22478,
            22995, 23468, 24615, 24826, 25104, 26143, 26207,
            29481, 29689, 30427, 30465, 31596, 32854, 32882,
            33125, 35488, 37266, 19990, 21218, 27506, 27927,
            31237, 31545, 32048, 63855, 36016, 21484, 22063,
            22609, 23477, 23567, 23569, 24034, 25152, 25475,
            25620, 26157, 26803, 27836, 28040, 28335, 28703,
            28836, 29138, 29990, 30095, 30094, 30233, 31505,
            31712, 31787, 32032, 32057, 34092, 34157, 34311,
            35380, 36877, 36961, 37045, 37559, 38902, 39479,
            20439, 23660, 26463, 28049, 31903, 32396, 35606,
            36118, 36895, 23403, 24061, 25613, 33984, 36956,
            39137, 29575, 23435, 24730, 26494, 28126, 35359,
            35494, 36865, 38924, 21047, 63856, 28753, 30862,
            37782, 34928, 37335, 20462, 21463, 22013, 22234,
            22402, 22781, 23234, 23432, 23723, 23744, 24101,
            24833, 25101, 25163, 25480, 25628, 25910, 25976,
            27193, 27530, 27700, 27929, 28465, 29159, 29417,
            29560, 29703, 29874, 30246, 30561, 31168, 31319,
            31466, 31929, 32143, 32172, 32353, 32670, 33065,
            33585, 33936, 34010, 34282, 34966, 35504, 35728,
            36664, 36930, 36995, 37228, 37526, 37561, 38539,
            38567, 38568, 38614, 38656, 38920, 39318, 39635,
            39706, 21460, 22654, 22809, 23408, 23487, 28113,
            28506, 29087, 29729, 29881, 32901, 33789, 24033,
            24455, 24490, 24642, 26092, 26642, 26991, 27219,
            27529, 27957, 28147, 29667, 30462, 30636, 31565,
            32020, 33059, 33308, 33600, 34036, 34147, 35426,
            35524, 37255, 37662, 38918, 39348, 25100, 34899,
            36848, 37477, 23815, 23847, 23913, 29791, 33181,
            34664, 28629, 25342, 32722, 35126, 35186, 19998,
            20056, 20711, 21213, 21319, 25215, 26119, 32361,
            34821, 38494, 20365, 21273, 22070, 22987, 23204,
            23608, 23630, 23629, 24066, 24337, 24643, 26045,
            26159, 26178, 26558, 26612, 29468, 30690, 31034,
            32709, 33940, 33997, 35222, 35430, 35433, 35553,
            35925, 35962, 22516, 23508, 24335, 24687, 25325,
            26893, 27542, 28252, 29060, 31698, 34645, 35672,
            36606, 39135, 39166, 20280, 20353, 20449, 21627,
            23072, 23480, 24892, 26032, 26216, 29180, 30003,
            31070, 32051, 33102, 33251, 33688, 34218, 34254,
            34563, 35338, 36523, 36763, 63857, 36805, 22833,
            23460, 23526, 24713, 23529, 23563, 24515, 27777,
            63858, 28145, 28683, 29978, 33455, 35574, 20160,
            21313, 63859, 38617, 27663, 20126, 20420, 20818,
            21854, 23077, 23784, 25105, 29273, 33469, 33706,
            34558, 34905, 35357, 38463, 38597, 39187, 40201,
            40285, 22538, 23731, 23997, 24132, 24801, 24853,
            25569, 27138, 28197, 37122, 37716, 38990, 39952,
            40823, 23433, 23736, 25353, 26191, 26696, 30524,
            38593, 38797, 38996, 39839, 26017, 35585, 36555,
            38332, 21813, 23721, 24022, 24245, 26263, 30284,
            33780, 38343, 22739, 25276, 29390, 40232, 20208,
            22830, 24591, 26171, 27523, 31207, 40230, 21395,
            21696, 22467, 23830, 24859, 26326, 28079, 30861,
            33406, 38552, 38724, 21380, 25212, 25494, 28082,
            32266, 33099, 38989, 27387, 32588, 40367, 40474,
            20063, 20539, 20918, 22812, 24825, 25590, 26928,
            29242, 32822, 63860, 37326, 24369, 63861, 63862,
            32004, 33509, 33903, 33979, 34277, 36493, 63863,
            20335, 63864, 63865, 22756, 23363, 24665, 25562,
            25880, 25965, 26264, 63866, 26954, 27171, 27915,
            28673, 29036, 30162, 30221, 31155, 31344, 63867,
            32650, 63868, 35140, 63869, 35731, 37312, 38525,
            63870, 39178, 22276, 24481, 26044, 28417, 30208,
            31142, 35486, 39341, 39770, 40812, 20740, 25014,
            25233, 27277, 33222, 20547, 22576, 24422, 28937,
            35328, 35578, 23420, 34326, 20474, 20796, 22196,
            22852, 25513, 28153, 23978, 26989, 20870, 20104,
            20313, 63871, 63872, 63873, 22914, 63874, 63875,
            27487, 27741, 63876, 29877, 30998, 63877, 33287,
            33349, 33593, 36671, 36701, 63878, 39192, 63879,
            63880, 63881, 20134, 63882, 22495, 24441, 26131,
            63883, 63884, 30123, 32377, 35695, 63885, 36870,
            39515, 22181, 22567, 23032, 23071, 23476, 63886,
            24310, 63887, 63888, 25424, 25403, 63889, 26941,
            27783, 27839, 28046, 28051, 28149, 28436, 63890,
            28895, 28982, 29017, 63891, 29123, 29141, 63892,
            30799, 30831, 63893, 31605, 32227, 63894, 32303,
            63895, 34893, 36575, 63896, 63897, 63898, 37467,
            63899, 40182, 63900, 63901, 63902, 24709, 28037,
            63903, 29105, 63904, 63905, 38321, 21421, 63906,
            63907, 63908, 26579, 63909, 28814, 28976, 29744,
            33398, 33490, 63910, 38331, 39653, 40573, 26308,
            63911, 29121, 33865, 63912, 63913, 22603, 63914,
            63915, 23992, 24433, 63916, 26144, 26254, 27001,
            27054, 27704, 27891, 28214, 28481, 28634, 28699,
            28719, 29008, 29151, 29552, 63917, 29787, 63918,
            29908, 30408, 31310, 32403, 63919, 63920, 33521,
            35424, 36814, 63921, 37704, 63922, 38681, 63923,
            63924, 20034, 20522, 63925, 21000, 21473, 26355,
            27757, 28618, 29450, 30591, 31330, 33454, 34269,
            34306, 63926, 35028, 35427, 35709, 35947, 63927,
            37555, 63928, 38675, 38928, 20116, 20237, 20425,
            20658, 21320, 21566, 21555, 21978, 22626, 22714,
            22887, 23067, 23524, 24735, 63929, 25034, 25942,
            26111, 26212, 26791, 27738, 28595, 28879, 29100,
            29522, 31613, 34568, 35492, 39986, 40711, 23627,
            27779, 29508, 29577, 37434, 28331, 29797, 30239,
            31337, 32277, 34314, 20800, 22725, 25793, 29934,
            29973, 30320, 32705, 37013, 38605, 39252, 28198,
            29926, 31401, 31402, 33253, 34521, 34680, 35355,
            23113, 23436, 23451, 26785, 26880, 28003, 29609,
            29715, 29740, 30871, 32233, 32747, 33048, 33109,
            33694, 35916, 38446, 38929, 26352, 24448, 26106,
            26505, 27754, 29579, 20525, 23043, 27498, 30702,
            22806, 23916, 24013, 29477, 30031, 63930, 63931,
            20709, 20985, 22575, 22829, 22934, 23002, 23525,
            63932, 63933, 23970, 25303, 25622, 25747, 25854,
            63934, 26332, 63935, 27208, 63936, 29183, 29796,
            63937, 31368, 31407, 32327, 32350, 32768, 33136,
            63938, 34799, 35201, 35616, 36953, 63939, 36992,
            39250, 24958, 27442, 28020, 32287, 35109, 36785,
            20433, 20653, 20887, 21191, 22471, 22665, 23481,
            24248, 24898, 27029, 28044, 28263, 28342, 29076,
            29794, 29992, 29996, 32883, 33592, 33993, 36362,
            37780, 37854, 63940, 20110, 20305, 20598, 20778,
            21448, 21451, 21491, 23431, 23507, 23588, 24858,
            24962, 26100, 29275, 29591, 29760, 30402, 31056,
            31121, 31161, 32006, 32701, 33419, 34261, 34398,
            36802, 36935, 37109, 37354, 38533, 38632, 38633,
            21206, 24423, 26093, 26161, 26671, 29020, 31286,
            37057, 38922, 20113, 63941, 27218, 27550, 28560,
            29065, 32792, 33464, 34131, 36939, 38549, 38642,
            38907, 34074, 39729, 20112, 29066, 38596, 20803,
            21407, 21729, 22291, 22290, 22435, 23195, 23236,
            23491, 24616, 24895, 25588, 27781, 27961, 28274,
            28304, 29232, 29503, 29783, 33489, 34945, 36677,
            36960, 63942, 38498, 39000, 40219, 26376, 36234,
            37470, 20301, 20553, 20702, 21361, 22285, 22996,
            23041, 23561, 24944, 26256, 28205, 29234, 29771,
            32239, 32963, 33806, 33894, 34111, 34655, 34907,
            35096, 35586, 36949, 38859, 39759, 20083, 20369,
            20754, 20842, 63943, 21807, 21929, 23418, 23461,
            24188, 24189, 24254, 24736, 24799, 24840, 24841,
            25540, 25912, 26377, 63944, 26580, 26586, 63945,
            26977, 26978, 27833, 27943, 63946, 28216, 63947,
            28641, 29494, 29495, 63948, 29788, 30001, 63949,
            30290, 63950, 63951, 32173, 33278, 33848, 35029,
            35480, 35547, 35565, 36400, 36418, 36938, 36926,
            36986, 37193, 37321, 37742, 63952, 63953, 22537,
            63954, 27603, 32905, 32946, 63955, 63956, 20801,
            22891, 23609, 63957, 63958, 28516, 29607, 32996,
            36103, 63959, 37399, 38287, 63960, 63961, 63962,
            63963, 32895, 25102, 28700, 32104, 34701, 63964,
            22432, 24681, 24903, 27575, 35518, 37504, 38577,
            20057, 21535, 28139, 34093, 38512, 38899, 39150,
            25558, 27875, 37009, 20957, 25033, 33210, 40441,
            20381, 20506, 20736, 23452, 24847, 25087, 25836,
            26885, 27589, 30097, 30691, 32681, 33380, 34191,
            34811, 34915, 35516, 35696, 37291, 20108, 20197,
            20234, 63965, 63966, 22839, 23016, 63967, 24050,
            24347, 24411, 24609, 63968, 63969, 63970, 63971,
            29246, 29669, 63972, 30064, 30157, 63973, 31227,
            63974, 32780, 32819, 32900, 33505, 33617, 63975,
            63976, 36029, 36019, 36999, 63977, 63978, 39156,
            39180, 63979, 63980, 28727, 30410, 32714, 32716,
            32764, 35610, 20154, 20161, 20995, 21360, 63981,
            21693, 22240, 23035, 23493, 24341, 24525, 28270,
            63982, 63983, 32106, 33589, 63984, 34451, 35469,
            63985, 38765, 38775, 63986, 63987, 19968, 20314,
            20350, 22777, 26085, 28322, 36920, 37808, 39353,
            20219, 22764, 22922, 23001, 24641, 63988, 63989,
            31252, 63990, 33615, 36035, 20837, 21316, 63991,
            63992, 63993, 20173, 21097, 23381, 33471, 20180,
            21050, 21672, 22985, 23039, 23376, 23383, 23388,
            24675, 24904, 28363, 28825, 29038, 29574, 29943,
            30133, 30913, 32043, 32773, 33258, 33576, 34071,
            34249, 35566, 36039, 38604, 20316, 21242, 22204,
            26027, 26152, 28796, 28856, 29237, 32189, 33421,
            37196, 38592, 40306, 23409, 26855, 27544, 28538,
            30430, 23697, 26283, 28507, 31668, 31786, 34870,
            38620, 19976, 20183, 21280, 22580, 22715, 22767,
            22892, 23559, 24115, 24196, 24373, 25484, 26290,
            26454, 27167, 27299, 27404, 28479, 29254, 63994,
            29520, 29835, 31456, 31911, 33144, 33247, 33255,
            33674, 33900, 34083, 34196, 34255, 35037, 36115,
            37292, 38263, 38556, 20877, 21705, 22312, 23472,
            25165, 26448, 26685, 26771, 28221, 28371, 28797,
            32289, 35009, 36001, 36617, 40779, 40782, 29229,
            31631, 35533, 37658, 20295, 20302, 20786, 21632,
            22992, 24213, 25269, 26485, 26990, 27159, 27822,
            28186, 29401, 29482, 30141, 31672, 32053, 33511,
            33785, 33879, 34295, 35419, 36015, 36487, 36889,
            37048, 38606, 40799, 21219, 21514, 23265, 23490,
            25688, 25973, 28404, 29380, 63995, 30340, 31309,
            31515, 31821, 32318, 32735, 33659, 35627, 36042,
            36196, 36321, 36447, 36842, 36857, 36969, 37841,
            20291, 20346, 20659, 20840, 20856, 21069, 21098,
            22625, 22652, 22880, 23560, 23637, 24283, 24731,
            25136, 26643, 27583, 27656, 28593, 29006, 29728,
            30000, 30008, 30033, 30322, 31564, 31627, 31661,
            31686, 32399, 35438, 36670, 36681, 37439, 37523,
            37666, 37931, 38651, 39002, 39019, 39198, 20999,
            25130, 25240, 27993, 30308, 31434, 31680, 32118,
            21344, 23742, 24215, 28472, 28857, 31896, 38673,
            39822, 40670, 25509, 25722, 34678, 19969, 20117,
            20141, 20572, 20597, 21576, 22979, 23450, 24128,
            24237, 24311, 24449, 24773, 25402, 25919, 25972,
            26060, 26230, 26232, 26622, 26984, 27273, 27491,
            27712, 28096, 28136, 28191, 28254, 28702, 28833,
            29582, 29693, 30010, 30555, 30855, 31118, 31243,
            31357, 31934, 32142, 33351, 35330, 35562, 35998,
            37165, 37194, 37336, 37478, 37580, 37664, 38662,
            38742, 38748, 38914, 40718, 21046, 21137, 21884,
            22564, 24093, 24351, 24716, 25552, 26799, 28639,
            31085, 31532, 33229, 34234, 35069, 35576, 36420,
            37261, 38500, 38555, 38717, 38988, 40778, 20430,
            20806, 20939, 21161, 22066, 24340, 24427, 25514,
            25805, 26089, 26177, 26362, 26361, 26397, 26781,
            26839, 27133, 28437, 28526, 29031, 29157, 29226,
            29866, 30522, 31062, 31066, 31199, 31264, 31381,
            31895, 31967, 32068, 32368, 32903, 34299, 34468,
            35412, 35519, 36249, 36481, 36896, 36973, 37347,
            38459, 38613, 40165, 26063, 31751, 36275, 37827,
            23384, 23562, 21330, 25305, 29469, 20519, 23447,
            24478, 24752, 24939, 26837, 28121, 29742, 31278,
            32066, 32156, 32305, 33131, 36394, 36405, 37758,
            37912, 20304, 22352, 24038, 24231, 25387, 32618,
            20027, 20303, 20367, 20570, 23005, 32964, 21610,
            21608, 22014, 22863, 23449, 24030, 24282, 26205,
            26417, 26609, 26666, 27880, 27954, 28234, 28557,
            28855, 29664, 30087, 31820, 32002, 32044, 32162,
            33311, 34523, 35387, 35461, 36208, 36490, 36659,
            36913, 37198, 37202, 37956, 39376, 31481, 31909,
            20426, 20737, 20934, 22472, 23535, 23803, 26201,
            27197, 27994, 28310, 28652, 28940, 30063, 31459,
            34850, 36897, 36981, 38603, 39423, 33537, 20013,
            20210, 34886, 37325, 21373, 27355, 26987, 27713,
            33914, 22686, 24974, 26366, 25327, 28893, 29969,
            30151, 32338, 33976, 35657, 36104, 20043, 21482,
            21675, 22320, 22336, 24535, 25345, 25351, 25711,
            25903, 26088, 26234, 26525, 26547, 27490, 27744,
            27802, 28460, 30693, 30757, 31049, 31063, 32025,
            32930, 33026, 33267, 33437, 33463, 34584, 35468,
            63996, 36100, 36286, 36978, 30452, 31257, 31287,
            32340, 32887, 21767, 21972, 22645, 25391, 25634,
            26185, 26187, 26733, 27035, 27524, 27941, 28337,
            29645, 29800, 29857, 30043, 30137, 30433, 30494,
            30603, 31206, 32265, 32285, 33275, 34095, 34967,
            35386, 36049, 36587, 36784, 36914, 37805, 38499,
            38515, 38663, 20356, 21489, 23018, 23241, 24089,
            26702, 29894, 30142, 31209, 31378, 33187, 34541,
            36074, 36300, 36845, 26015, 26389, 63997, 22519,
            28503, 32221, 36655, 37878, 38598, 24501, 25074,
            28548, 19988, 20376, 20511, 21449, 21983, 23919,
            24046, 27425, 27492, 30923, 31642, 63998, 36425,
            36554, 36974, 25417, 25662, 30528, 31364, 37679,
            38015, 40810, 25776, 28591, 29158, 29864, 29914,
            31428, 31762, 32386, 31922, 32408, 35738, 36106,
            38013, 39184, 39244, 21049, 23519, 25830, 26413,
            32046, 20717, 21443, 22649, 24920, 24921, 25082,
            26028, 31449, 35730, 35734, 20489, 20513, 21109,
            21809, 23100, 24288, 24432, 24884, 25950, 26124,
            26166, 26274, 27085, 28356, 28466, 29462, 30241,
            31379, 33081, 33369, 33750, 33980, 20661, 22512,
            23488, 23528, 24425, 25505, 30758, 32181, 33756,
            34081, 37319, 37365, 20874, 26613, 31574, 36012,
            20932, 22971, 24765, 34389, 20508, 63999, 21076,
            23610, 24957, 25114, 25299, 25842, 26021, 28364,
            30240, 33034, 36448, 38495, 38587, 20191, 21315,
            21912, 22825, 24029, 25797, 27849, 28154, 29588,
            31359, 33307, 34214, 36068, 36368, 36983, 37351,
            38369, 38433, 38854, 20984, 21746, 21894, 24505,
            25764, 28552, 32180, 36639, 36685, 37941, 20681,
            23574, 27838, 28155, 29979, 30651, 31805, 31844,
            35449, 35522, 22558, 22974, 24086, 25463, 29266,
            30090, 30571, 35548, 36028, 36626, 24307, 26228,
            28152, 32893, 33729, 35531, 38737, 39894, 64000,
            21059, 26367, 28053, 28399, 32224, 35558, 36910,
            36958, 39636, 21021, 21119, 21736, 24980, 25220,
            25307, 26786, 26898, 26970, 27189, 28818, 28966,
            30813, 30977, 30990, 31186, 31245, 32918, 33400,
            33493, 33609, 34121, 35970, 36229, 37218, 37259,
            37294, 20419, 22225, 29165, 30679, 34560, 35320,
            23544, 24534, 26449, 37032, 21474, 22618, 23541,
            24740, 24961, 25696, 32317, 32880, 34085, 37507,
            25774, 20652, 23828, 26368, 22684, 25277, 25512,
            26894, 27000, 27166, 28267, 30394, 31179, 33467,
            33833, 35535, 36264, 36861, 37138, 37195, 37276,
            37648, 37656, 37786, 38619, 39478, 39949, 19985,
            30044, 31069, 31482, 31569, 31689, 32302, 33988,
            36441, 36468, 36600, 36880, 26149, 26943, 29763,
            20986, 26414, 40668, 20805, 24544, 27798, 34802,
            34909, 34935, 24756, 33205, 33795, 36101, 21462,
            21561, 22068, 23094, 23601, 28810, 32736, 32858,
            33030, 33261, 36259, 37257, 39519, 40434, 20596,
            20164, 21408, 24827, 28204, 23652, 20360, 20516,
            21988, 23769, 24159, 24677, 26772, 27835, 28100,
            29118, 30164, 30196, 30305, 31258, 31305, 32199,
            32251, 32622, 33268, 34473, 36636, 38601, 39347,
            40786, 21063, 21189, 39149, 35242, 19971, 26578,
            28422, 20405, 23522, 26517, 27784, 28024, 29723,
            30759, 37341, 37756, 34756, 31204, 31281, 24555,
            20182, 21668, 21822, 22702, 22949, 24816, 25171,
            25302, 26422, 26965, 33333, 38464, 39345, 39389,
            20524, 21331, 21828, 22396, 64001, 25176, 64002,
            25826, 26219, 26589, 28609, 28655, 29730, 29752,
            35351, 37944, 21585, 22022, 22374, 24392, 24986,
            27470, 28760, 28845, 32187, 35477, 22890, 33067,
            25506, 30472, 32829, 36010, 22612, 25645, 27067,
            23445, 24081, 28271, 64003, 34153, 20812, 21488,
            22826, 24608, 24907, 27526, 27760, 27888, 31518,
            32974, 33492, 36294, 37040, 39089, 64004, 25799,
            28580, 25745, 25860, 20814, 21520, 22303, 35342,
            24927, 26742, 64005, 30171, 31570, 32113, 36890,
            22534, 27084, 33151, 35114, 36864, 38969, 20600,
            22871, 22956, 25237, 36879, 39722, 24925, 29305,
            38358, 22369, 23110, 24052, 25226, 25773, 25850,
            26487, 27874, 27966, 29228, 29750, 30772, 32631,
            33453, 36315, 38935, 21028, 22338, 26495, 29256,
            29923, 36009, 36774, 37393, 38442, 20843, 21485,
            25420, 20329, 21764, 24726, 25943, 27803, 28031,
            29260, 29437, 31255, 35207, 35997, 24429, 28558,
            28921, 33192, 24846, 20415, 20559, 25153, 29255,
            31687, 32232, 32745, 36941, 38829, 39449, 36022,
            22378, 24179, 26544, 33805, 35413, 21536, 23318,
            24163, 24290, 24330, 25987, 32954, 34109, 38281,
            38491, 20296, 21253, 21261, 21263, 21638, 21754,
            22275, 24067, 24598, 25243, 25265, 25429, 64006,
            27873, 28006, 30129, 30770, 32990, 33071, 33502,
            33889, 33970, 34957, 35090, 36875, 37610, 39165,
            39825, 24133, 26292, 26333, 28689, 29190, 64007,
            20469, 21117, 24426, 24915, 26451, 27161, 28418,
            29922, 31080, 34920, 35961, 39111, 39108, 39491,
            21697, 31263, 26963, 35575, 35914, 39080, 39342,
            24444, 25259, 30130, 30382, 34987, 36991, 38466,
            21305, 24380, 24517, 27852, 29644, 30050, 30091,
            31558, 33534, 39325, 20047, 36924, 19979, 20309,
            21414, 22799, 24264, 26160, 27827, 29781, 33655,
            34662, 36032, 36944, 38686, 39957, 22737, 23416,
            34384, 35604, 40372, 23506, 24680, 24717, 26097,
            27735, 28450, 28579, 28698, 32597, 32752, 38289,
            38290, 38480, 38867, 21106, 36676, 20989, 21547,
            21688, 21859, 21898, 27323, 28085, 32216, 33382,
            37532, 38519, 40569, 21512, 21704, 30418, 34532,
            38308, 38356, 38492, 20130, 20233, 23022, 23270,
            24055, 24658, 25239, 26477, 26689, 27782, 28207,
            32568, 32923, 33322, 64008, 64009, 38917, 20133,
            20565, 21683, 22419, 22874, 23401, 23475, 25032,
            26999, 28023, 28707, 34809, 35299, 35442, 35559,
            36994, 39405, 39608, 21182, 26680, 20502, 24184,
            26447, 33607, 34892, 20139, 21521, 22190, 29670,
            37141, 38911, 39177, 39255, 39321, 22099, 22687,
            34395, 35377, 25010, 27382, 29563, 36562, 27463,
            38570, 39511, 22869, 29184, 36203, 38761, 20436,
            23796, 24358, 25080, 26203, 27883, 28843, 29572,
            29625, 29694, 30505, 30541, 32067, 32098, 32291,
            33335, 34898, 64010, 36066, 37449, 39023, 23377,
            31348, 34880, 38913, 23244, 20448, 21332, 22846,
            23805, 25406, 28025, 29433, 33029, 33031, 33698,
            37583, 38960, 20136, 20804, 21009, 22411, 24418,
            27842, 28366, 28677, 28752, 28847, 29074, 29673,
            29801, 33610, 34722, 34913, 36872, 37026, 37795,
            39336, 20846, 24407, 24800, 24935, 26291, 34137,
            36426, 37295, 38795, 20046, 20114, 21628, 22741,
            22778, 22909, 23733, 24359, 25142, 25160, 26122,
            26215, 27627, 28009, 28111, 28246, 28408, 28564,
            28640, 28649, 28765, 29392, 29733, 29786, 29920,
            30355, 31068, 31946, 32286, 32993, 33446, 33899,
            33983, 34382, 34399, 34676, 35703, 35946, 37804,
            38912, 39013, 24785, 25110, 37239, 23130, 26127,
            28151, 28222, 29759, 39746, 24573, 24794, 31503,
            21700, 24344, 27742, 27859, 27946, 28888, 32005,
            34425, 35340, 40251, 21270, 21644, 23301, 27194,
            28779, 30069, 31117, 31166, 33457, 33775, 35441,
            35649, 36008, 38772, 64011, 25844, 25899, 30906,
            30907, 31339, 20024, 21914, 22864, 23462, 24187,
            24739, 25563, 27489, 26213, 26707, 28185, 29029,
            29872, 32008, 36996, 39529, 39973, 27963, 28369,
            29502, 35905, 38346, 20976, 24140, 24488, 24653,
            24822, 24880, 24908, 26179, 26180, 27045, 27841,
            28255, 28361, 28514, 29004, 29852, 30343, 31681,
            31783, 33618, 34647, 36945, 38541, 40643, 21295,
            22238, 24315, 24458, 24674, 24724, 25079, 26214,
            26371, 27292, 28142, 28590, 28784, 29546, 32362,
            33214, 33588, 34516, 35496, 36036, 21123, 29554,
            23446, 27243, 37892, 21742, 22150, 23389, 25928,
            25989, 26313, 26783, 28045, 28102, 29243, 32948,
            37237, 39501, 20399, 20505, 21402, 21518, 21564,
            21897, 21957, 24127, 24460, 26429, 29030, 29661,
            36869, 21211, 21235, 22628, 22734, 28932, 29071,
            29179, 34224, 35347, 26248, 34216, 21927, 26244,
            29002, 33841, 21321, 21913, 27585, 24409, 24509,
            25582, 26249, 28999, 35569, 36637, 40638, 20241,
            25658, 28875, 30054, 34407, 24676, 35662, 40440,
            20807, 20982, 21256, 27958, 33016, 40657, 26133,
            27427, 28824, 30165, 21507, 23673, 32007, 35350,
            27424, 27453, 27462, 21560, 24688, 27965, 32725,
            33288, 20694, 20958, 21916, 22123, 22221, 23020,
            23305, 24076, 24985, 24984, 25137, 26206, 26342,
            29081, 29113, 29114, 29351, 31143, 31232, 32690,
            35440
        ],
        "gb18030": [19970, 19972, 19973, 19974, 19983, 19986, 19991,
            19999, 20000, 20001, 20003, 20006, 20009, 20014,
            20015, 20017, 20019, 20021, 20023, 20028, 20032,
            20033, 20034, 20036, 20038, 20042, 20049, 20053,
            20055, 20058, 20059, 20066, 20067, 20068, 20069,
            20071, 20072, 20074, 20075, 20076, 20077, 20078,
            20079, 20082, 20084, 20085, 20086, 20087, 20088,
            20089, 20090, 20091, 20092, 20093, 20095, 20096,
            20097, 20098, 20099, 20100, 20101, 20103, 20106,
            20112, 20118, 20119, 20121, 20124, 20125, 20126,
            20131, 20138, 20143, 20144, 20145, 20148, 20150,
            20151, 20152, 20153, 20156, 20157, 20158, 20168,
            20172, 20175, 20176, 20178, 20186, 20187, 20188,
            20192, 20194, 20198, 20199, 20201, 20205, 20206,
            20207, 20209, 20212, 20216, 20217, 20218, 20220,
            20222, 20224, 20226, 20227, 20228, 20229, 20230,
            20231, 20232, 20235, 20236, 20242, 20243, 20244,
            20245, 20246, 20252, 20253, 20257, 20259, 20264,
            20265, 20268, 20269, 20270, 20273, 20275, 20277,
            20279, 20281, 20283, 20286, 20287, 20288, 20289,
            20290, 20292, 20293, 20295, 20296, 20297, 20298,
            20299, 20300, 20306, 20308, 20310, 20321, 20322,
            20326, 20328, 20330, 20331, 20333, 20334, 20337,
            20338, 20341, 20343, 20344, 20345, 20346, 20349,
            20352, 20353, 20354, 20357, 20358, 20359, 20362,
            20364, 20366, 20368, 20370, 20371, 20373, 20374,
            20376, 20377, 20378, 20380, 20382, 20383, 20385,
            20386, 20388, 20395, 20397, 20400, 20401, 20402,
            20403, 20404, 20406, 20407, 20408, 20409, 20410,
            20411, 20412, 20413, 20414, 20416, 20417, 20418,
            20422, 20423, 20424, 20425, 20427, 20428, 20429,
            20434, 20435, 20436, 20437, 20438, 20441, 20443,
            20448, 20450, 20452, 20453, 20455, 20459, 20460,
            20464, 20466, 20468, 20469, 20470, 20471, 20473,
            20475, 20476, 20477, 20479, 20480, 20481, 20482,
            20483, 20484, 20485, 20486, 20487, 20488, 20489,
            20490, 20491, 20494, 20496, 20497, 20499, 20501,
            20502, 20503, 20507, 20509, 20510, 20512, 20514,
            20515, 20516, 20519, 20523, 20527, 20528, 20529,
            20530, 20531, 20532, 20533, 20534, 20535, 20536,
            20537, 20539, 20541, 20543, 20544, 20545, 20546,
            20548, 20549, 20550, 20553, 20554, 20555, 20557,
            20560, 20561, 20562, 20563, 20564, 20566, 20567,
            20568, 20569, 20571, 20573, 20574, 20575, 20576,
            20577, 20578, 20579, 20580, 20582, 20583, 20584,
            20585, 20586, 20587, 20589, 20590, 20591, 20592,
            20593, 20594, 20595, 20596, 20597, 20600, 20601,
            20602, 20604, 20605, 20609, 20610, 20611, 20612,
            20614, 20615, 20617, 20618, 20619, 20620, 20622,
            20623, 20624, 20625, 20626, 20627, 20628, 20629,
            20630, 20631, 20632, 20633, 20634, 20635, 20636,
            20637, 20638, 20639, 20640, 20641, 20642, 20644,
            20646, 20650, 20651, 20653, 20654, 20655, 20656,
            20657, 20659, 20660, 20661, 20662, 20663, 20664,
            20665, 20668, 20669, 20670, 20671, 20672, 20673,
            20674, 20675, 20676, 20677, 20678, 20679, 20680,
            20681, 20682, 20683, 20684, 20685, 20686, 20688,
            20689, 20690, 20691, 20692, 20693, 20695, 20696,
            20697, 20699, 20700, 20701, 20702, 20703, 20704,
            20705, 20706, 20707, 20708, 20709, 20712, 20713,
            20714, 20715, 20719, 20720, 20721, 20722, 20724,
            20726, 20727, 20728, 20729, 20730, 20732, 20733,
            20734, 20735, 20736, 20737, 20738, 20739, 20740,
            20741, 20744, 20745, 20746, 20748, 20749, 20750,
            20751, 20752, 20753, 20755, 20756, 20757, 20758,
            20759, 20760, 20761, 20762, 20763, 20764, 20765,
            20766, 20767, 20768, 20770, 20771, 20772, 20773,
            20774, 20775, 20776, 20777, 20778, 20779, 20780,
            20781, 20782, 20783, 20784, 20785, 20786, 20787,
            20788, 20789, 20790, 20791, 20792, 20793, 20794,
            20795, 20796, 20797, 20798, 20802, 20807, 20810,
            20812, 20814, 20815, 20816, 20818, 20819, 20823,
            20824, 20825, 20827, 20829, 20830, 20831, 20832,
            20833, 20835, 20836, 20838, 20839, 20841, 20842,
            20847, 20850, 20858, 20862, 20863, 20867, 20868,
            20870, 20871, 20874, 20875, 20878, 20879, 20880,
            20881, 20883, 20884, 20888, 20890, 20893, 20894,
            20895, 20897, 20899, 20902, 20903, 20904, 20905,
            20906, 20909, 20910, 20916, 20920, 20921, 20922,
            20926, 20927, 20929, 20930, 20931, 20933, 20936,
            20938, 20941, 20942, 20944, 20946, 20947, 20948,
            20949, 20950, 20951, 20952, 20953, 20954, 20956,
            20958, 20959, 20962, 20963, 20965, 20966, 20967,
            20968, 20969, 20970, 20972, 20974, 20977, 20978,
            20980, 20983, 20990, 20996, 20997, 21001, 21003,
            21004, 21007, 21008, 21011, 21012, 21013, 21020,
            21022, 21023, 21025, 21026, 21027, 21029, 21030,
            21031, 21034, 21036, 21039, 21041, 21042, 21044,
            21045, 21052, 21054, 21060, 21061, 21062, 21063,
            21064, 21065, 21067, 21070, 21071, 21074, 21075,
            21077, 21079, 21080, 21081, 21082, 21083, 21085,
            21087, 21088, 21090, 21091, 21092, 21094, 21096,
            21099, 21100, 21101, 21102, 21104, 21105, 21107,
            21108, 21109, 21110, 21111, 21112, 21113, 21114,
            21115, 21116, 21118, 21120, 21123, 21124, 21125,
            21126, 21127, 21129, 21130, 21131, 21132, 21133,
            21134, 21135, 21137, 21138, 21140, 21141, 21142,
            21143, 21144, 21145, 21146, 21148, 21156, 21157,
            21158, 21159, 21166, 21167, 21168, 21172, 21173,
            21174, 21175, 21176, 21177, 21178, 21179, 21180,
            21181, 21184, 21185, 21186, 21188, 21189, 21190,
            21192, 21194, 21196, 21197, 21198, 21199, 21201,
            21203, 21204, 21205, 21207, 21209, 21210, 21211,
            21212, 21213, 21214, 21216, 21217, 21218, 21219,
            21221, 21222, 21223, 21224, 21225, 21226, 21227,
            21228, 21229, 21230, 21231, 21233, 21234, 21235,
            21236, 21237, 21238, 21239, 21240, 21243, 21244,
            21245, 21249, 21250, 21251, 21252, 21255, 21257,
            21258, 21259, 21260, 21262, 21265, 21266, 21267,
            21268, 21272, 21275, 21276, 21278, 21279, 21282,
            21284, 21285, 21287, 21288, 21289, 21291, 21292,
            21293, 21295, 21296, 21297, 21298, 21299, 21300,
            21301, 21302, 21303, 21304, 21308, 21309, 21312,
            21314, 21316, 21318, 21323, 21324, 21325, 21328,
            21332, 21336, 21337, 21339, 21341, 21349, 21352,
            21354, 21356, 21357, 21362, 21366, 21369, 21371,
            21372, 21373, 21374, 21376, 21377, 21379, 21383,
            21384, 21386, 21390, 21391, 21392, 21393, 21394,
            21395, 21396, 21398, 21399, 21401, 21403, 21404,
            21406, 21408, 21409, 21412, 21415, 21418, 21419,
            21420, 21421, 21423, 21424, 21425, 21426, 21427,
            21428, 21429, 21431, 21432, 21433, 21434, 21436,
            21437, 21438, 21440, 21443, 21444, 21445, 21446,
            21447, 21454, 21455, 21456, 21458, 21459, 21461,
            21466, 21468, 21469, 21470, 21473, 21474, 21479,
            21492, 21498, 21502, 21503, 21504, 21506, 21509,
            21511, 21515, 21524, 21528, 21529, 21530, 21532,
            21538, 21540, 21541, 21546, 21552, 21555, 21558,
            21559, 21562, 21565, 21567, 21569, 21570, 21572,
            21573, 21575, 21577, 21580, 21581, 21582, 21583,
            21585, 21594, 21597, 21598, 21599, 21600, 21601,
            21603, 21605, 21607, 21609, 21610, 21611, 21612,
            21613, 21614, 21615, 21616, 21620, 21625, 21626,
            21630, 21631, 21633, 21635, 21637, 21639, 21640,
            21641, 21642, 21645, 21649, 21651, 21655, 21656,
            21660, 21662, 21663, 21664, 21665, 21666, 21669,
            21678, 21680, 21682, 21685, 21686, 21687, 21689,
            21690, 21692, 21694, 21699, 21701, 21706, 21707,
            21718, 21720, 21723, 21728, 21729, 21730, 21731,
            21732, 21739, 21740, 21743, 21744, 21745, 21748,
            21749, 21750, 21751, 21752, 21753, 21755, 21758,
            21760, 21762, 21763, 21764, 21765, 21768, 21770,
            21771, 21772, 21773, 21774, 21778, 21779, 21781,
            21782, 21783, 21784, 21785, 21786, 21788, 21789,
            21790, 21791, 21793, 21797, 21798, 21800, 21801,
            21803, 21805, 21810, 21812, 21813, 21814, 21816,
            21817, 21818, 21819, 21821, 21824, 21826, 21829,
            21831, 21832, 21835, 21836, 21837, 21838, 21839,
            21841, 21842, 21843, 21844, 21847, 21848, 21849,
            21850, 21851, 21853, 21854, 21855, 21856, 21858,
            21859, 21864, 21865, 21867, 21871, 21872, 21873,
            21874, 21875, 21876, 21881, 21882, 21885, 21887,
            21893, 21894, 21900, 21901, 21902, 21904, 21906,
            21907, 21909, 21910, 21911, 21914, 21915, 21918,
            21920, 21921, 21922, 21923, 21924, 21925, 21926,
            21928, 21929, 21930, 21931, 21932, 21933, 21934,
            21935, 21936, 21938, 21940, 21942, 21944, 21946,
            21948, 21951, 21952, 21953, 21954, 21955, 21958,
            21959, 21960, 21962, 21963, 21966, 21967, 21968,
            21973, 21975, 21976, 21977, 21978, 21979, 21982,
            21984, 21986, 21991, 21993, 21997, 21998, 22000,
            22001, 22004, 22006, 22008, 22009, 22010, 22011,
            22012, 22015, 22018, 22019, 22020, 22021, 22022,
            22023, 22026, 22027, 22029, 22032, 22033, 22034,
            22035, 22036, 22037, 22038, 22039, 22041, 22042,
            22044, 22045, 22048, 22049, 22050, 22053, 22054,
            22056, 22057, 22058, 22059, 22062, 22063, 22064,
            22067, 22069, 22071, 22072, 22074, 22076, 22077,
            22078, 22080, 22081, 22082, 22083, 22084, 22085,
            22086, 22087, 22088, 22089, 22090, 22091, 22095,
            22096, 22097, 22098, 22099, 22101, 22102, 22106,
            22107, 22109, 22110, 22111, 22112, 22113, 22115,
            22117, 22118, 22119, 22125, 22126, 22127, 22128,
            22130, 22131, 22132, 22133, 22135, 22136, 22137,
            22138, 22141, 22142, 22143, 22144, 22145, 22146,
            22147, 22148, 22151, 22152, 22153, 22154, 22155,
            22156, 22157, 22160, 22161, 22162, 22164, 22165,
            22166, 22167, 22168, 22169, 22170, 22171, 22172,
            22173, 22174, 22175, 22176, 22177, 22178, 22180,
            22181, 22182, 22183, 22184, 22185, 22186, 22187,
            22188, 22189, 22190, 22192, 22193, 22194, 22195,
            22196, 22197, 22198, 22200, 22201, 22202, 22203,
            22205, 22206, 22207, 22208, 22209, 22210, 22211,
            22212, 22213, 22214, 22215, 22216, 22217, 22219,
            22220, 22221, 22222, 22223, 22224, 22225, 22226,
            22227, 22229, 22230, 22232, 22233, 22236, 22243,
            22245, 22246, 22247, 22248, 22249, 22250, 22252,
            22254, 22255, 22258, 22259, 22262, 22263, 22264,
            22267, 22268, 22272, 22273, 22274, 22277, 22279,
            22283, 22284, 22285, 22286, 22287, 22288, 22289,
            22290, 22291, 22292, 22293, 22294, 22295, 22296,
            22297, 22298, 22299, 22301, 22302, 22304, 22305,
            22306, 22308, 22309, 22310, 22311, 22315, 22321,
            22322, 22324, 22325, 22326, 22327, 22328, 22332,
            22333, 22335, 22337, 22339, 22340, 22341, 22342,
            22344, 22345, 22347, 22354, 22355, 22356, 22357,
            22358, 22360, 22361, 22370, 22371, 22373, 22375,
            22380, 22382, 22384, 22385, 22386, 22388, 22389,
            22392, 22393, 22394, 22397, 22398, 22399, 22400,
            22401, 22407, 22408, 22409, 22410, 22413, 22414,
            22415, 22416, 22417, 22420, 22421, 22422, 22423,
            22424, 22425, 22426, 22428, 22429, 22430, 22431,
            22437, 22440, 22442, 22444, 22447, 22448, 22449,
            22451, 22453, 22454, 22455, 22457, 22458, 22459,
            22460, 22461, 22462, 22463, 22464, 22465, 22468,
            22469, 22470, 22471, 22472, 22473, 22474, 22476,
            22477, 22480, 22481, 22483, 22486, 22487, 22491,
            22492, 22494, 22497, 22498, 22499, 22501, 22502,
            22503, 22504, 22505, 22506, 22507, 22508, 22510,
            22512, 22513, 22514, 22515, 22517, 22518, 22519,
            22523, 22524, 22526, 22527, 22529, 22531, 22532,
            22533, 22536, 22537, 22538, 22540, 22542, 22543,
            22544, 22546, 22547, 22548, 22550, 22551, 22552,
            22554, 22555, 22556, 22557, 22559, 22562, 22563,
            22565, 22566, 22567, 22568, 22569, 22571, 22572,
            22573, 22574, 22575, 22577, 22578, 22579, 22580,
            22582, 22583, 22584, 22585, 22586, 22587, 22588,
            22589, 22590, 22591, 22592, 22593, 22594, 22595,
            22597, 22598, 22599, 22600, 22601, 22602, 22603,
            22606, 22607, 22608, 22610, 22611, 22613, 22614,
            22615, 22617, 22618, 22619, 22620, 22621, 22623,
            22624, 22625, 22626, 22627, 22628, 22630, 22631,
            22632, 22633, 22634, 22637, 22638, 22639, 22640,
            22641, 22642, 22643, 22644, 22645, 22646, 22647,
            22648, 22649, 22650, 22651, 22652, 22653, 22655,
            22658, 22660, 22662, 22663, 22664, 22666, 22667,
            22668, 22669, 22670, 22671, 22672, 22673, 22676,
            22677, 22678, 22679, 22680, 22683, 22684, 22685,
            22688, 22689, 22690, 22691, 22692, 22693, 22694,
            22695, 22698, 22699, 22700, 22701, 22702, 22703,
            22704, 22705, 22706, 22707, 22708, 22709, 22710,
            22711, 22712, 22713, 22714, 22715, 22717, 22718,
            22719, 22720, 22722, 22723, 22724, 22726, 22727,
            22728, 22729, 22730, 22731, 22732, 22733, 22734,
            22735, 22736, 22738, 22739, 22740, 22742, 22743,
            22744, 22745, 22746, 22747, 22748, 22749, 22750,
            22751, 22752, 22753, 22754, 22755, 22757, 22758,
            22759, 22760, 22761, 22762, 22765, 22767, 22769,
            22770, 22772, 22773, 22775, 22776, 22778, 22779,
            22780, 22781, 22782, 22783, 22784, 22785, 22787,
            22789, 22790, 22792, 22793, 22794, 22795, 22796,
            22798, 22800, 22801, 22802, 22803, 22807, 22808,
            22811, 22813, 22814, 22816, 22817, 22818, 22819,
            22822, 22824, 22828, 22832, 22834, 22835, 22837,
            22838, 22843, 22845, 22846, 22847, 22848, 22851,
            22853, 22854, 22858, 22860, 22861, 22864, 22866,
            22867, 22873, 22875, 22876, 22877, 22878, 22879,
            22881, 22883, 22884, 22886, 22887, 22888, 22889,
            22890, 22891, 22892, 22893, 22894, 22895, 22896,
            22897, 22898, 22901, 22903, 22906, 22907, 22908,
            22910, 22911, 22912, 22917, 22921, 22923, 22924,
            22926, 22927, 22928, 22929, 22932, 22933, 22936,
            22938, 22939, 22940, 22941, 22943, 22944, 22945,
            22946, 22950, 22951, 22956, 22957, 22960, 22961,
            22963, 22964, 22965, 22966, 22967, 22968, 22970,
            22972, 22973, 22975, 22976, 22977, 22978, 22979,
            22980, 22981, 22983, 22984, 22985, 22988, 22989,
            22990, 22991, 22997, 22998, 23001, 23003, 23006,
            23007, 23008, 23009, 23010, 23012, 23014, 23015,
            23017, 23018, 23019, 23021, 23022, 23023, 23024,
            23025, 23026, 23027, 23028, 23029, 23030, 23031,
            23032, 23034, 23036, 23037, 23038, 23040, 23042,
            23050, 23051, 23053, 23054, 23055, 23056, 23058,
            23060, 23061, 23062, 23063, 23065, 23066, 23067,
            23069, 23070, 23073, 23074, 23076, 23078, 23079,
            23080, 23082, 23083, 23084, 23085, 23086, 23087,
            23088, 23091, 23093, 23095, 23096, 23097, 23098,
            23099, 23101, 23102, 23103, 23105, 23106, 23107,
            23108, 23109, 23111, 23112, 23115, 23116, 23117,
            23118, 23119, 23120, 23121, 23122, 23123, 23124,
            23126, 23127, 23128, 23129, 23131, 23132, 23133,
            23134, 23135, 23136, 23137, 23139, 23140, 23141,
            23142, 23144, 23145, 23147, 23148, 23149, 23150,
            23151, 23152, 23153, 23154, 23155, 23160, 23161,
            23163, 23164, 23165, 23166, 23168, 23169, 23170,
            23171, 23172, 23173, 23174, 23175, 23176, 23177,
            23178, 23179, 23180, 23181, 23182, 23183, 23184,
            23185, 23187, 23188, 23189, 23190, 23191, 23192,
            23193, 23196, 23197, 23198, 23199, 23200, 23201,
            23202, 23203, 23204, 23205, 23206, 23207, 23208,
            23209, 23211, 23212, 23213, 23214, 23215, 23216,
            23217, 23220, 23222, 23223, 23225, 23226, 23227,
            23228, 23229, 23231, 23232, 23235, 23236, 23237,
            23238, 23239, 23240, 23242, 23243, 23245, 23246,
            23247, 23248, 23249, 23251, 23253, 23255, 23257,
            23258, 23259, 23261, 23262, 23263, 23266, 23268,
            23269, 23271, 23272, 23274, 23276, 23277, 23278,
            23279, 23280, 23282, 23283, 23284, 23285, 23286,
            23287, 23288, 23289, 23290, 23291, 23292, 23293,
            23294, 23295, 23296, 23297, 23298, 23299, 23300,
            23301, 23302, 23303, 23304, 23306, 23307, 23308,
            23309, 23310, 23311, 23312, 23313, 23314, 23315,
            23316, 23317, 23320, 23321, 23322, 23323, 23324,
            23325, 23326, 23327, 23328, 23329, 23330, 23331,
            23332, 23333, 23334, 23335, 23336, 23337, 23338,
            23339, 23340, 23341, 23342, 23343, 23344, 23345,
            23347, 23349, 23350, 23352, 23353, 23354, 23355,
            23356, 23357, 23358, 23359, 23361, 23362, 23363,
            23364, 23365, 23366, 23367, 23368, 23369, 23370,
            23371, 23372, 23373, 23374, 23375, 23378, 23382,
            23390, 23392, 23393, 23399, 23400, 23403, 23405,
            23406, 23407, 23410, 23412, 23414, 23415, 23416,
            23417, 23419, 23420, 23422, 23423, 23426, 23430,
            23434, 23437, 23438, 23440, 23441, 23442, 23444,
            23446, 23455, 23463, 23464, 23465, 23468, 23469,
            23470, 23471, 23473, 23474, 23479, 23482, 23483,
            23484, 23488, 23489, 23491, 23496, 23497, 23498,
            23499, 23501, 23502, 23503, 23505, 23508, 23509,
            23510, 23511, 23512, 23513, 23514, 23515, 23516,
            23520, 23522, 23523, 23526, 23527, 23529, 23530,
            23531, 23532, 23533, 23535, 23537, 23538, 23539,
            23540, 23541, 23542, 23543, 23549, 23550, 23552,
            23554, 23555, 23557, 23559, 23560, 23563, 23564,
            23565, 23566, 23568, 23570, 23571, 23575, 23577,
            23579, 23582, 23583, 23584, 23585, 23587, 23590,
            23592, 23593, 23594, 23595, 23597, 23598, 23599,
            23600, 23602, 23603, 23605, 23606, 23607, 23619,
            23620, 23622, 23623, 23628, 23629, 23634, 23635,
            23636, 23638, 23639, 23640, 23642, 23643, 23644,
            23645, 23647, 23650, 23652, 23655, 23656, 23657,
            23658, 23659, 23660, 23661, 23664, 23666, 23667,
            23668, 23669, 23670, 23671, 23672, 23675, 23676,
            23677, 23678, 23680, 23683, 23684, 23685, 23686,
            23687, 23689, 23690, 23691, 23694, 23695, 23698,
            23699, 23701, 23709, 23710, 23711, 23712, 23713,
            23716, 23717, 23718, 23719, 23720, 23722, 23726,
            23727, 23728, 23730, 23732, 23734, 23737, 23738,
            23739, 23740, 23742, 23744, 23746, 23747, 23749,
            23750, 23751, 23752, 23753, 23754, 23756, 23757,
            23758, 23759, 23760, 23761, 23763, 23764, 23765,
            23766, 23767, 23768, 23770, 23771, 23772, 23773,
            23774, 23775, 23776, 23778, 23779, 23783, 23785,
            23787, 23788, 23790, 23791, 23793, 23794, 23795,
            23796, 23797, 23798, 23799, 23800, 23801, 23802,
            23804, 23805, 23806, 23807, 23808, 23809, 23812,
            23813, 23816, 23817, 23818, 23819, 23820, 23821,
            23823, 23824, 23825, 23826, 23827, 23829, 23831,
            23832, 23833, 23834, 23836, 23837, 23839, 23840,
            23841, 23842, 23843, 23845, 23848, 23850, 23851,
            23852, 23855, 23856, 23857, 23858, 23859, 23861,
            23862, 23863, 23864, 23865, 23866, 23867, 23868,
            23871, 23872, 23873, 23874, 23875, 23876, 23877,
            23878, 23880, 23881, 23885, 23886, 23887, 23888,
            23889, 23890, 23891, 23892, 23893, 23894, 23895,
            23897, 23898, 23900, 23902, 23903, 23904, 23905,
            23906, 23907, 23908, 23909, 23910, 23911, 23912,
            23914, 23917, 23918, 23920, 23921, 23922, 23923,
            23925, 23926, 23927, 23928, 23929, 23930, 23931,
            23932, 23933, 23934, 23935, 23936, 23937, 23939,
            23940, 23941, 23942, 23943, 23944, 23945, 23946,
            23947, 23948, 23949, 23950, 23951, 23952, 23953,
            23954, 23955, 23956, 23957, 23958, 23959, 23960,
            23962, 23963, 23964, 23966, 23967, 23968, 23969,
            23970, 23971, 23972, 23973, 23974, 23975, 23976,
            23977, 23978, 23979, 23980, 23981, 23982, 23983,
            23984, 23985, 23986, 23987, 23988, 23989, 23990,
            23992, 23993, 23994, 23995, 23996, 23997, 23998,
            23999, 24000, 24001, 24002, 24003, 24004, 24006,
            24007, 24008, 24009, 24010, 24011, 24012, 24014,
            24015, 24016, 24017, 24018, 24019, 24020, 24021,
            24022, 24023, 24024, 24025, 24026, 24028, 24031,
            24032, 24035, 24036, 24042, 24044, 24045, 24048,
            24053, 24054, 24056, 24057, 24058, 24059, 24060,
            24063, 24064, 24068, 24071, 24073, 24074, 24075,
            24077, 24078, 24082, 24083, 24087, 24094, 24095,
            24096, 24097, 24098, 24099, 24100, 24101, 24104,
            24105, 24106, 24107, 24108, 24111, 24112, 24114,
            24115, 24116, 24117, 24118, 24121, 24122, 24126,
            24127, 24128, 24129, 24131, 24134, 24135, 24136,
            24137, 24138, 24139, 24141, 24142, 24143, 24144,
            24145, 24146, 24147, 24150, 24151, 24152, 24153,
            24154, 24156, 24157, 24159, 24160, 24163, 24164,
            24165, 24166, 24167, 24168, 24169, 24170, 24171,
            24172, 24173, 24174, 24175, 24176, 24177, 24181,
            24183, 24185, 24190, 24193, 24194, 24195, 24197,
            24200, 24201, 24204, 24205, 24206, 24210, 24216,
            24219, 24221, 24225, 24226, 24227, 24228, 24232,
            24233, 24234, 24235, 24236, 24238, 24239, 24240,
            24241, 24242, 24244, 24250, 24251, 24252, 24253,
            24255, 24256, 24257, 24258, 24259, 24260, 24261,
            24262, 24263, 24264, 24267, 24268, 24269, 24270,
            24271, 24272, 24276, 24277, 24279, 24280, 24281,
            24282, 24284, 24285, 24286, 24287, 24288, 24289,
            24290, 24291, 24292, 24293, 24294, 24295, 24297,
            24299, 24300, 24301, 24302, 24303, 24304, 24305,
            24306, 24307, 24309, 24312, 24313, 24315, 24316,
            24317, 24325, 24326, 24327, 24329, 24332, 24333,
            24334, 24336, 24338, 24340, 24342, 24345, 24346,
            24348, 24349, 24350, 24353, 24354, 24355, 24356,
            24360, 24363, 24364, 24366, 24368, 24370, 24371,
            24372, 24373, 24374, 24375, 24376, 24379, 24381,
            24382, 24383, 24385, 24386, 24387, 24388, 24389,
            24390, 24391, 24392, 24393, 24394, 24395, 24396,
            24397, 24398, 24399, 24401, 24404, 24409, 24410,
            24411, 24412, 24414, 24415, 24416, 24419, 24421,
            24423, 24424, 24427, 24430, 24431, 24434, 24436,
            24437, 24438, 24440, 24442, 24445, 24446, 24447,
            24451, 24454, 24461, 24462, 24463, 24465, 24467,
            24468, 24470, 24474, 24475, 24477, 24478, 24479,
            24480, 24482, 24483, 24484, 24485, 24486, 24487,
            24489, 24491, 24492, 24495, 24496, 24497, 24498,
            24499, 24500, 24502, 24504, 24505, 24506, 24507,
            24510, 24511, 24512, 24513, 24514, 24519, 24520,
            24522, 24523, 24526, 24531, 24532, 24533, 24538,
            24539, 24540, 24542, 24543, 24546, 24547, 24549,
            24550, 24552, 24553, 24556, 24559, 24560, 24562,
            24563, 24564, 24566, 24567, 24569, 24570, 24572,
            24583, 24584, 24585, 24587, 24588, 24592, 24593,
            24595, 24599, 24600, 24602, 24606, 24607, 24610,
            24611, 24612, 24620, 24621, 24622, 24624, 24625,
            24626, 24627, 24628, 24630, 24631, 24632, 24633,
            24634, 24637, 24638, 24640, 24644, 24645, 24646,
            24647, 24648, 24649, 24650, 24652, 24654, 24655,
            24657, 24659, 24660, 24662, 24663, 24664, 24667,
            24668, 24670, 24671, 24672, 24673, 24677, 24678,
            24686, 24689, 24690, 24692, 24693, 24695, 24702,
            24704, 24705, 24706, 24709, 24710, 24711, 24712,
            24714, 24715, 24718, 24719, 24720, 24721, 24723,
            24725, 24727, 24728, 24729, 24732, 24734, 24737,
            24738, 24740, 24741, 24743, 24745, 24746, 24750,
            24752, 24755, 24757, 24758, 24759, 24761, 24762,
            24765, 24766, 24767, 24768, 24769, 24770, 24771,
            24772, 24775, 24776, 24777, 24780, 24781, 24782,
            24783, 24784, 24786, 24787, 24788, 24790, 24791,
            24793, 24795, 24798, 24801, 24802, 24803, 24804,
            24805, 24810, 24817, 24818, 24821, 24823, 24824,
            24827, 24828, 24829, 24830, 24831, 24834, 24835,
            24836, 24837, 24839, 24842, 24843, 24844, 24848,
            24849, 24850, 24851, 24852, 24854, 24855, 24856,
            24857, 24859, 24860, 24861, 24862, 24865, 24866,
            24869, 24872, 24873, 24874, 24876, 24877, 24878,
            24879, 24880, 24881, 24882, 24883, 24884, 24885,
            24886, 24887, 24888, 24889, 24890, 24891, 24892,
            24893, 24894, 24896, 24897, 24898, 24899, 24900,
            24901, 24902, 24903, 24905, 24907, 24909, 24911,
            24912, 24914, 24915, 24916, 24918, 24919, 24920,
            24921, 24922, 24923, 24924, 24926, 24927, 24928,
            24929, 24931, 24932, 24933, 24934, 24937, 24938,
            24939, 24940, 24941, 24942, 24943, 24945, 24946,
            24947, 24948, 24950, 24952, 24953, 24954, 24955,
            24956, 24957, 24958, 24959, 24960, 24961, 24962,
            24963, 24964, 24965, 24966, 24967, 24968, 24969,
            24970, 24972, 24973, 24975, 24976, 24977, 24978,
            24979, 24981, 24982, 24983, 24984, 24985, 24986,
            24987, 24988, 24990, 24991, 24992, 24993, 24994,
            24995, 24996, 24997, 24998, 25002, 25003, 25005,
            25006, 25007, 25008, 25009, 25010, 25011, 25012,
            25013, 25014, 25016, 25017, 25018, 25019, 25020,
            25021, 25023, 25024, 25025, 25027, 25028, 25029,
            25030, 25031, 25033, 25036, 25037, 25038, 25039,
            25040, 25043, 25045, 25046, 25047, 25048, 25049,
            25050, 25051, 25052, 25053, 25054, 25055, 25056,
            25057, 25058, 25059, 25060, 25061, 25063, 25064,
            25065, 25066, 25067, 25068, 25069, 25070, 25071,
            25072, 25073, 25074, 25075, 25076, 25078, 25079,
            25080, 25081, 25082, 25083, 25084, 25085, 25086,
            25088, 25089, 25090, 25091, 25092, 25093, 25095,
            25097, 25107, 25108, 25113, 25116, 25117, 25118,
            25120, 25123, 25126, 25127, 25128, 25129, 25131,
            25133, 25135, 25136, 25137, 25138, 25141, 25142,
            25144, 25145, 25146, 25147, 25148, 25154, 25156,
            25157, 25158, 25162, 25167, 25168, 25173, 25174,
            25175, 25177, 25178, 25180, 25181, 25182, 25183,
            25184, 25185, 25186, 25188, 25189, 25192, 25201,
            25202, 25204, 25205, 25207, 25208, 25210, 25211,
            25213, 25217, 25218, 25219, 25221, 25222, 25223,
            25224, 25227, 25228, 25229, 25230, 25231, 25232,
            25236, 25241, 25244, 25245, 25246, 25251, 25254,
            25255, 25257, 25258, 25261, 25262, 25263, 25264,
            25266, 25267, 25268, 25270, 25271, 25272, 25274,
            25278, 25280, 25281, 25283, 25291, 25295, 25297,
            25301, 25309, 25310, 25312, 25313, 25316, 25322,
            25323, 25328, 25330, 25333, 25336, 25337, 25338,
            25339, 25344, 25347, 25348, 25349, 25350, 25354,
            25355, 25356, 25357, 25359, 25360, 25362, 25363,
            25364, 25365, 25367, 25368, 25369, 25372, 25382,
            25383, 25385, 25388, 25389, 25390, 25392, 25393,
            25395, 25396, 25397, 25398, 25399, 25400, 25403,
            25404, 25406, 25407, 25408, 25409, 25412, 25415,
            25416, 25418, 25425, 25426, 25427, 25428, 25430,
            25431, 25432, 25433, 25434, 25435, 25436, 25437,
            25440, 25444, 25445, 25446, 25448, 25450, 25451,
            25452, 25455, 25456, 25458, 25459, 25460, 25461,
            25464, 25465, 25468, 25469, 25470, 25471, 25473,
            25475, 25476, 25477, 25478, 25483, 25485, 25489,
            25491, 25492, 25493, 25495, 25497, 25498, 25499,
            25500, 25501, 25502, 25503, 25505, 25508, 25510,
            25515, 25519, 25521, 25522, 25525, 25526, 25529,
            25531, 25533, 25535, 25536, 25537, 25538, 25539,
            25541, 25543, 25544, 25546, 25547, 25548, 25553,
            25555, 25556, 25557, 25559, 25560, 25561, 25562,
            25563, 25564, 25565, 25567, 25570, 25572, 25573,
            25574, 25575, 25576, 25579, 25580, 25582, 25583,
            25584, 25585, 25587, 25589, 25591, 25593, 25594,
            25595, 25596, 25598, 25603, 25604, 25606, 25607,
            25608, 25609, 25610, 25613, 25614, 25617, 25618,
            25621, 25622, 25623, 25624, 25625, 25626, 25629,
            25631, 25634, 25635, 25636, 25637, 25639, 25640,
            25641, 25643, 25646, 25647, 25648, 25649, 25650,
            25651, 25653, 25654, 25655, 25656, 25657, 25659,
            25660, 25662, 25664, 25666, 25667, 25673, 25675,
            25676, 25677, 25678, 25679, 25680, 25681, 25683,
            25685, 25686, 25687, 25689, 25690, 25691, 25692,
            25693, 25695, 25696, 25697, 25698, 25699, 25700,
            25701, 25702, 25704, 25706, 25707, 25708, 25710,
            25711, 25712, 25713, 25714, 25715, 25716, 25717,
            25718, 25719, 25723, 25724, 25725, 25726, 25727,
            25728, 25729, 25731, 25734, 25736, 25737, 25738,
            25739, 25740, 25741, 25742, 25743, 25744, 25747,
            25748, 25751, 25752, 25754, 25755, 25756, 25757,
            25759, 25760, 25761, 25762, 25763, 25765, 25766,
            25767, 25768, 25770, 25771, 25775, 25777, 25778,
            25779, 25780, 25782, 25785, 25787, 25789, 25790,
            25791, 25793, 25795, 25796, 25798, 25799, 25800,
            25801, 25802, 25803, 25804, 25807, 25809, 25811,
            25812, 25813, 25814, 25817, 25818, 25819, 25820,
            25821, 25823, 25824, 25825, 25827, 25829, 25831,
            25832, 25833, 25834, 25835, 25836, 25837, 25838,
            25839, 25840, 25841, 25842, 25843, 25844, 25845,
            25846, 25847, 25848, 25849, 25850, 25851, 25852,
            25853, 25854, 25855, 25857, 25858, 25859, 25860,
            25861, 25862, 25863, 25864, 25866, 25867, 25868,
            25869, 25870, 25871, 25872, 25873, 25875, 25876,
            25877, 25878, 25879, 25881, 25882, 25883, 25884,
            25885, 25886, 25887, 25888, 25889, 25890, 25891,
            25892, 25894, 25895, 25896, 25897, 25898, 25900,
            25901, 25904, 25905, 25906, 25907, 25911, 25914,
            25916, 25917, 25920, 25921, 25922, 25923, 25924,
            25926, 25927, 25930, 25931, 25933, 25934, 25936,
            25938, 25939, 25940, 25943, 25944, 25946, 25948,
            25951, 25952, 25953, 25956, 25957, 25959, 25960,
            25961, 25962, 25965, 25966, 25967, 25969, 25971,
            25973, 25974, 25976, 25977, 25978, 25979, 25980,
            25981, 25982, 25983, 25984, 25985, 25986, 25987,
            25988, 25989, 25990, 25992, 25993, 25994, 25997,
            25998, 25999, 26002, 26004, 26005, 26006, 26008,
            26010, 26013, 26014, 26016, 26018, 26019, 26022,
            26024, 26026, 26028, 26030, 26033, 26034, 26035,
            26036, 26037, 26038, 26039, 26040, 26042, 26043,
            26046, 26047, 26048, 26050, 26055, 26056, 26057,
            26058, 26061, 26064, 26065, 26067, 26068, 26069,
            26072, 26073, 26074, 26075, 26076, 26077, 26078,
            26079, 26081, 26083, 26084, 26090, 26091, 26098,
            26099, 26100, 26101, 26104, 26105, 26107, 26108,
            26109, 26110, 26111, 26113, 26116, 26117, 26119,
            26120, 26121, 26123, 26125, 26128, 26129, 26130,
            26134, 26135, 26136, 26138, 26139, 26140, 26142,
            26145, 26146, 26147, 26148, 26150, 26153, 26154,
            26155, 26156, 26158, 26160, 26162, 26163, 26167,
            26168, 26169, 26170, 26171, 26173, 26175, 26176,
            26178, 26180, 26181, 26182, 26183, 26184, 26185,
            26186, 26189, 26190, 26192, 26193, 26200, 26201,
            26203, 26204, 26205, 26206, 26208, 26210, 26211,
            26213, 26215, 26217, 26218, 26219, 26220, 26221,
            26225, 26226, 26227, 26229, 26232, 26233, 26235,
            26236, 26237, 26239, 26240, 26241, 26243, 26245,
            26246, 26248, 26249, 26250, 26251, 26253, 26254,
            26255, 26256, 26258, 26259, 26260, 26261, 26264,
            26265, 26266, 26267, 26268, 26270, 26271, 26272,
            26273, 26274, 26275, 26276, 26277, 26278, 26281,
            26282, 26283, 26284, 26285, 26287, 26288, 26289,
            26290, 26291, 26293, 26294, 26295, 26296, 26298,
            26299, 26300, 26301, 26303, 26304, 26305, 26306,
            26307, 26308, 26309, 26310, 26311, 26312, 26313,
            26314, 26315, 26316, 26317, 26318, 26319, 26320,
            26321, 26322, 26323, 26324, 26325, 26326, 26327,
            26328, 26330, 26334, 26335, 26336, 26337, 26338,
            26339, 26340, 26341, 26343, 26344, 26346, 26347,
            26348, 26349, 26350, 26351, 26353, 26357, 26358,
            26360, 26362, 26363, 26365, 26369, 26370, 26371,
            26372, 26373, 26374, 26375, 26380, 26382, 26383,
            26385, 26386, 26387, 26390, 26392, 26393, 26394,
            26396, 26398, 26400, 26401, 26402, 26403, 26404,
            26405, 26407, 26409, 26414, 26416, 26418, 26419,
            26422, 26423, 26424, 26425, 26427, 26428, 26430,
            26431, 26433, 26436, 26437, 26439, 26442, 26443,
            26445, 26450, 26452, 26453, 26455, 26456, 26457,
            26458, 26459, 26461, 26466, 26467, 26468, 26470,
            26471, 26475, 26476, 26478, 26481, 26484, 26486,
            26488, 26489, 26490, 26491, 26493, 26496, 26498,
            26499, 26501, 26502, 26504, 26506, 26508, 26509,
            26510, 26511, 26513, 26514, 26515, 26516, 26518,
            26521, 26523, 26527, 26528, 26529, 26532, 26534,
            26537, 26540, 26542, 26545, 26546, 26548, 26553,
            26554, 26555, 26556, 26557, 26558, 26559, 26560,
            26562, 26565, 26566, 26567, 26568, 26569, 26570,
            26571, 26572, 26573, 26574, 26581, 26582, 26583,
            26587, 26591, 26593, 26595, 26596, 26598, 26599,
            26600, 26602, 26603, 26605, 26606, 26610, 26613,
            26614, 26615, 26616, 26617, 26618, 26619, 26620,
            26622, 26625, 26626, 26627, 26628, 26630, 26637,
            26640, 26642, 26644, 26645, 26648, 26649, 26650,
            26651, 26652, 26654, 26655, 26656, 26658, 26659,
            26660, 26661, 26662, 26663, 26664, 26667, 26668,
            26669, 26670, 26671, 26672, 26673, 26676, 26677,
            26678, 26682, 26683, 26687, 26695, 26699, 26701,
            26703, 26706, 26710, 26711, 26712, 26713, 26714,
            26715, 26716, 26717, 26718, 26719, 26730, 26732,
            26733, 26734, 26735, 26736, 26737, 26738, 26739,
            26741, 26744, 26745, 26746, 26747, 26748, 26749,
            26750, 26751, 26752, 26754, 26756, 26759, 26760,
            26761, 26762, 26763, 26764, 26765, 26766, 26768,
            26769, 26770, 26772, 26773, 26774, 26776, 26777,
            26778, 26779, 26780, 26781, 26782, 26783, 26784,
            26785, 26787, 26788, 26789, 26793, 26794, 26795,
            26796, 26798, 26801, 26802, 26804, 26806, 26807,
            26808, 26809, 26810, 26811, 26812, 26813, 26814,
            26815, 26817, 26819, 26820, 26821, 26822, 26823,
            26824, 26826, 26828, 26830, 26831, 26832, 26833,
            26835, 26836, 26838, 26839, 26841, 26843, 26844,
            26845, 26846, 26847, 26849, 26850, 26852, 26853,
            26854, 26855, 26856, 26857, 26858, 26859, 26860,
            26861, 26863, 26866, 26867, 26868, 26870, 26871,
            26872, 26875, 26877, 26878, 26879, 26880, 26882,
            26883, 26884, 26886, 26887, 26888, 26889, 26890,
            26892, 26895, 26897, 26899, 26900, 26901, 26902,
            26903, 26904, 26905, 26906, 26907, 26908, 26909,
            26910, 26913, 26914, 26915, 26917, 26918, 26919,
            26920, 26921, 26922, 26923, 26924, 26926, 26927,
            26929, 26930, 26931, 26933, 26934, 26935, 26936,
            26938, 26939, 26940, 26942, 26944, 26945, 26947,
            26948, 26949, 26950, 26951, 26952, 26953, 26954,
            26955, 26956, 26957, 26958, 26959, 26960, 26961,
            26962, 26963, 26965, 26966, 26968, 26969, 26971,
            26972, 26975, 26977, 26978, 26980, 26981, 26983,
            26984, 26985, 26986, 26988, 26989, 26991, 26992,
            26994, 26995, 26996, 26997, 26998, 27002, 27003,
            27005, 27006, 27007, 27009, 27011, 27013, 27018,
            27019, 27020, 27022, 27023, 27024, 27025, 27026,
            27027, 27030, 27031, 27033, 27034, 27037, 27038,
            27039, 27040, 27041, 27042, 27043, 27044, 27045,
            27046, 27049, 27050, 27052, 27054, 27055, 27056,
            27058, 27059, 27061, 27062, 27064, 27065, 27066,
            27068, 27069, 27070, 27071, 27072, 27074, 27075,
            27076, 27077, 27078, 27079, 27080, 27081, 27083,
            27085, 27087, 27089, 27090, 27091, 27093, 27094,
            27095, 27096, 27097, 27098, 27100, 27101, 27102,
            27105, 27106, 27107, 27108, 27109, 27110, 27111,
            27112, 27113, 27114, 27115, 27116, 27118, 27119,
            27120, 27121, 27123, 27124, 27125, 27126, 27127,
            27128, 27129, 27130, 27131, 27132, 27134, 27136,
            27137, 27138, 27139, 27140, 27141, 27142, 27143,
            27144, 27145, 27147, 27148, 27149, 27150, 27151,
            27152, 27153, 27154, 27155, 27156, 27157, 27158,
            27161, 27162, 27163, 27164, 27165, 27166, 27168,
            27170, 27171, 27172, 27173, 27174, 27175, 27177,
            27179, 27180, 27181, 27182, 27184, 27186, 27187,
            27188, 27190, 27191, 27192, 27193, 27194, 27195,
            27196, 27199, 27200, 27201, 27202, 27203, 27205,
            27206, 27208, 27209, 27210, 27211, 27212, 27213,
            27214, 27215, 27217, 27218, 27219, 27220, 27221,
            27222, 27223, 27226, 27228, 27229, 27230, 27231,
            27232, 27234, 27235, 27236, 27238, 27239, 27240,
            27241, 27242, 27243, 27244, 27245, 27246, 27247,
            27248, 27250, 27251, 27252, 27253, 27254, 27255,
            27256, 27258, 27259, 27261, 27262, 27263, 27265,
            27266, 27267, 27269, 27270, 27271, 27272, 27273,
            27274, 27275, 27276, 27277, 27279, 27282, 27283,
            27284, 27285, 27286, 27288, 27289, 27290, 27291,
            27292, 27293, 27294, 27295, 27297, 27298, 27299,
            27300, 27301, 27302, 27303, 27304, 27306, 27309,
            27310, 27311, 27312, 27313, 27314, 27315, 27316,
            27317, 27318, 27319, 27320, 27321, 27322, 27323,
            27324, 27325, 27326, 27327, 27328, 27329, 27330,
            27331, 27332, 27333, 27334, 27335, 27336, 27337,
            27338, 27339, 27340, 27341, 27342, 27343, 27344,
            27345, 27346, 27347, 27348, 27349, 27350, 27351,
            27352, 27353, 27354, 27355, 27356, 27357, 27358,
            27359, 27360, 27361, 27362, 27363, 27364, 27365,
            27366, 27367, 27368, 27369, 27370, 27371, 27372,
            27373, 27374, 27375, 27376, 27377, 27378, 27379,
            27380, 27381, 27382, 27383, 27384, 27385, 27386,
            27387, 27388, 27389, 27390, 27391, 27392, 27393,
            27394, 27395, 27396, 27397, 27398, 27399, 27400,
            27401, 27402, 27403, 27404, 27405, 27406, 27407,
            27408, 27409, 27410, 27411, 27412, 27413, 27414,
            27415, 27416, 27417, 27418, 27419, 27420, 27421,
            27422, 27423, 27429, 27430, 27432, 27433, 27434,
            27435, 27436, 27437, 27438, 27439, 27440, 27441,
            27443, 27444, 27445, 27446, 27448, 27451, 27452,
            27453, 27455, 27456, 27457, 27458, 27460, 27461,
            27464, 27466, 27467, 27469, 27470, 27471, 27472,
            27473, 27474, 27475, 27476, 27477, 27478, 27479,
            27480, 27482, 27483, 27484, 27485, 27486, 27487,
            27488, 27489, 27496, 27497, 27499, 27500, 27501,
            27502, 27503, 27504, 27505, 27506, 27507, 27508,
            27509, 27510, 27511, 27512, 27514, 27517, 27518,
            27519, 27520, 27525, 27528, 27532, 27534, 27535,
            27536, 27537, 27540, 27541, 27543, 27544, 27545,
            27548, 27549, 27550, 27551, 27552, 27554, 27555,
            27556, 27557, 27558, 27559, 27560, 27561, 27563,
            27564, 27565, 27566, 27567, 27568, 27569, 27570,
            27574, 27576, 27577, 27578, 27579, 27580, 27581,
            27582, 27584, 27587, 27588, 27590, 27591, 27592,
            27593, 27594, 27596, 27598, 27600, 27601, 27608,
            27610, 27612, 27613, 27614, 27615, 27616, 27618,
            27619, 27620, 27621, 27622, 27623, 27624, 27625,
            27628, 27629, 27630, 27632, 27633, 27634, 27636,
            27638, 27639, 27640, 27642, 27643, 27644, 27646,
            27647, 27648, 27649, 27650, 27651, 27652, 27656,
            27657, 27658, 27659, 27660, 27662, 27666, 27671,
            27676, 27677, 27678, 27680, 27683, 27685, 27691,
            27692, 27693, 27697, 27699, 27702, 27703, 27705,
            27706, 27707, 27708, 27710, 27711, 27715, 27716,
            27717, 27720, 27723, 27724, 27725, 27726, 27727,
            27729, 27730, 27731, 27734, 27736, 27737, 27738,
            27746, 27747, 27749, 27750, 27751, 27755, 27756,
            27757, 27758, 27759, 27761, 27763, 27765, 27767,
            27768, 27770, 27771, 27772, 27775, 27776, 27780,
            27783, 27786, 27787, 27789, 27790, 27793, 27794,
            27797, 27798, 27799, 27800, 27802, 27804, 27805,
            27806, 27808, 27810, 27816, 27820, 27823, 27824,
            27828, 27829, 27830, 27831, 27834, 27840, 27841,
            27842, 27843, 27846, 27847, 27848, 27851, 27853,
            27854, 27855, 27857, 27858, 27864, 27865, 27866,
            27868, 27869, 27871, 27876, 27878, 27879, 27881,
            27884, 27885, 27890, 27892, 27897, 27903, 27904,
            27906, 27907, 27909, 27910, 27912, 27913, 27914,
            27917, 27919, 27920, 27921, 27923, 27924, 27925,
            27926, 27928, 27932, 27933, 27935, 27936, 27937,
            27938, 27939, 27940, 27942, 27944, 27945, 27948,
            27949, 27951, 27952, 27956, 27958, 27959, 27960,
            27962, 27967, 27968, 27970, 27972, 27977, 27980,
            27984, 27989, 27990, 27991, 27992, 27995, 27997,
            27999, 28001, 28002, 28004, 28005, 28007, 28008,
            28011, 28012, 28013, 28016, 28017, 28018, 28019,
            28021, 28022, 28025, 28026, 28027, 28029, 28030,
            28031, 28032, 28033, 28035, 28036, 28038, 28039,
            28042, 28043, 28045, 28047, 28048, 28050, 28054,
            28055, 28056, 28057, 28058, 28060, 28066, 28069,
            28076, 28077, 28080, 28081, 28083, 28084, 28086,
            28087, 28089, 28090, 28091, 28092, 28093, 28094,
            28097, 28098, 28099, 28104, 28105, 28106, 28109,
            28110, 28111, 28112, 28114, 28115, 28116, 28117,
            28119, 28122, 28123, 28124, 28127, 28130, 28131,
            28133, 28135, 28136, 28137, 28138, 28141, 28143,
            28144, 28146, 28148, 28149, 28150, 28152, 28154,
            28157, 28158, 28159, 28160, 28161, 28162, 28163,
            28164, 28166, 28167, 28168, 28169, 28171, 28175,
            28178, 28179, 28181, 28184, 28185, 28187, 28188,
            28190, 28191, 28194, 28198, 28199, 28200, 28202,
            28204, 28206, 28208, 28209, 28211, 28213, 28214,
            28215, 28217, 28219, 28220, 28221, 28222, 28223,
            28224, 28225, 28226, 28229, 28230, 28231, 28232,
            28233, 28234, 28235, 28236, 28239, 28240, 28241,
            28242, 28245, 28247, 28249, 28250, 28252, 28253,
            28254, 28256, 28257, 28258, 28259, 28260, 28261,
            28262, 28263, 28264, 28265, 28266, 28268, 28269,
            28271, 28272, 28273, 28274, 28275, 28276, 28277,
            28278, 28279, 28280, 28281, 28282, 28283, 28284,
            28285, 28288, 28289, 28290, 28292, 28295, 28296,
            28298, 28299, 28300, 28301, 28302, 28305, 28306,
            28307, 28308, 28309, 28310, 28311, 28313, 28314,
            28315, 28317, 28318, 28320, 28321, 28323, 28324,
            28326, 28328, 28329, 28331, 28332, 28333, 28334,
            28336, 28339, 28341, 28344, 28345, 28348, 28350,
            28351, 28352, 28355, 28356, 28357, 28358, 28360,
            28361, 28362, 28364, 28365, 28366, 28368, 28370,
            28374, 28376, 28377, 28379, 28380, 28381, 28387,
            28391, 28394, 28395, 28396, 28397, 28398, 28399,
            28400, 28401, 28402, 28403, 28405, 28406, 28407,
            28408, 28410, 28411, 28412, 28413, 28414, 28415,
            28416, 28417, 28419, 28420, 28421, 28423, 28424,
            28426, 28427, 28428, 28429, 28430, 28432, 28433,
            28434, 28438, 28439, 28440, 28441, 28442, 28443,
            28444, 28445, 28446, 28447, 28449, 28450, 28451,
            28453, 28454, 28455, 28456, 28460, 28462, 28464,
            28466, 28468, 28469, 28471, 28472, 28473, 28474,
            28475, 28476, 28477, 28479, 28480, 28481, 28482,
            28483, 28484, 28485, 28488, 28489, 28490, 28492,
            28494, 28495, 28496, 28497, 28498, 28499, 28500,
            28501, 28502, 28503, 28505, 28506, 28507, 28509,
            28511, 28512, 28513, 28515, 28516, 28517, 28519,
            28520, 28521, 28522, 28523, 28524, 28527, 28528,
            28529, 28531, 28533, 28534, 28535, 28537, 28539,
            28541, 28542, 28543, 28544, 28545, 28546, 28547,
            28549, 28550, 28551, 28554, 28555, 28559, 28560,
            28561, 28562, 28563, 28564, 28565, 28566, 28567,
            28568, 28569, 28570, 28571, 28573, 28574, 28575,
            28576, 28578, 28579, 28580, 28581, 28582, 28584,
            28585, 28586, 28587, 28588, 28589, 28590, 28591,
            28592, 28593, 28594, 28596, 28597, 28599, 28600,
            28602, 28603, 28604, 28605, 28606, 28607, 28609,
            28611, 28612, 28613, 28614, 28615, 28616, 28618,
            28619, 28620, 28621, 28622, 28623, 28624, 28627,
            28628, 28629, 28630, 28631, 28632, 28633, 28634,
            28635, 28636, 28637, 28639, 28642, 28643, 28644,
            28645, 28646, 28647, 28648, 28649, 28650, 28651,
            28652, 28653, 28656, 28657, 28658, 28659, 28660,
            28661, 28662, 28663, 28664, 28665, 28666, 28667,
            28668, 28669, 28670, 28671, 28672, 28673, 28674,
            28675, 28676, 28677, 28678, 28679, 28680, 28681,
            28682, 28683, 28684, 28685, 28686, 28687, 28688,
            28690, 28691, 28692, 28693, 28694, 28695, 28696,
            28697, 28700, 28701, 28702, 28703, 28704, 28705,
            28706, 28708, 28709, 28710, 28711, 28712, 28713,
            28714, 28715, 28716, 28717, 28718, 28719, 28720,
            28721, 28722, 28723, 28724, 28726, 28727, 28728,
            28730, 28731, 28732, 28733, 28734, 28735, 28736,
            28737, 28738, 28739, 28740, 28741, 28742, 28743,
            28744, 28745, 28746, 28747, 28749, 28750, 28752,
            28753, 28754, 28755, 28756, 28757, 28758, 28759,
            28760, 28761, 28762, 28763, 28764, 28765, 28767,
            28768, 28769, 28770, 28771, 28772, 28773, 28774,
            28775, 28776, 28777, 28778, 28782, 28785, 28786,
            28787, 28788, 28791, 28793, 28794, 28795, 28797,
            28801, 28802, 28803, 28804, 28806, 28807, 28808,
            28811, 28812, 28813, 28815, 28816, 28817, 28819,
            28823, 28824, 28826, 28827, 28830, 28831, 28832,
            28833, 28834, 28835, 28836, 28837, 28838, 28839,
            28840, 28841, 28842, 28848, 28850, 28852, 28853,
            28854, 28858, 28862, 28863, 28868, 28869, 28870,
            28871, 28873, 28875, 28876, 28877, 28878, 28879,
            28880, 28881, 28882, 28883, 28884, 28885, 28886,
            28887, 28890, 28892, 28893, 28894, 28896, 28897,
            28898, 28899, 28901, 28906, 28910, 28912, 28913,
            28914, 28915, 28916, 28917, 28918, 28920, 28922,
            28923, 28924, 28926, 28927, 28928, 28929, 28930,
            28931, 28932, 28933, 28934, 28935, 28936, 28939,
            28940, 28941, 28942, 28943, 28945, 28946, 28948,
            28951, 28955, 28956, 28957, 28958, 28959, 28960,
            28961, 28962, 28963, 28964, 28965, 28967, 28968,
            28969, 28970, 28971, 28972, 28973, 28974, 28978,
            28979, 28980, 28981, 28983, 28984, 28985, 28986,
            28987, 28988, 28989, 28990, 28991, 28992, 28993,
            28994, 28995, 28996, 28998, 28999, 29000, 29001,
            29003, 29005, 29007, 29008, 29009, 29010, 29011,
            29012, 29013, 29014, 29015, 29016, 29017, 29018,
            29019, 29021, 29023, 29024, 29025, 29026, 29027,
            29029, 29033, 29034, 29035, 29036, 29037, 29039,
            29040, 29041, 29044, 29045, 29046, 29047, 29049,
            29051, 29052, 29054, 29055, 29056, 29057, 29058,
            29059, 29061, 29062, 29063, 29064, 29065, 29067,
            29068, 29069, 29070, 29072, 29073, 29074, 29075,
            29077, 29078, 29079, 29082, 29083, 29084, 29085,
            29086, 29089, 29090, 29091, 29092, 29093, 29094,
            29095, 29097, 29098, 29099, 29101, 29102, 29103,
            29104, 29105, 29106, 29108, 29110, 29111, 29112,
            29114, 29115, 29116, 29117, 29118, 29119, 29120,
            29121, 29122, 29124, 29125, 29126, 29127, 29128,
            29129, 29130, 29131, 29132, 29133, 29135, 29136,
            29137, 29138, 29139, 29142, 29143, 29144, 29145,
            29146, 29147, 29148, 29149, 29150, 29151, 29153,
            29154, 29155, 29156, 29158, 29160, 29161, 29162,
            29163, 29164, 29165, 29167, 29168, 29169, 29170,
            29171, 29172, 29173, 29174, 29175, 29176, 29178,
            29179, 29180, 29181, 29182, 29183, 29184, 29185,
            29186, 29187, 29188, 29189, 29191, 29192, 29193,
            29194, 29195, 29196, 29197, 29198, 29199, 29200,
            29201, 29202, 29203, 29204, 29205, 29206, 29207,
            29208, 29209, 29210, 29211, 29212, 29214, 29215,
            29216, 29217, 29218, 29219, 29220, 29221, 29222,
            29223, 29225, 29227, 29229, 29230, 29231, 29234,
            29235, 29236, 29242, 29244, 29246, 29248, 29249,
            29250, 29251, 29252, 29253, 29254, 29257, 29258,
            29259, 29262, 29263, 29264, 29265, 29267, 29268,
            29269, 29271, 29272, 29274, 29276, 29278, 29280,
            29283, 29284, 29285, 29288, 29290, 29291, 29292,
            29293, 29296, 29297, 29299, 29300, 29302, 29303,
            29304, 29307, 29308, 29309, 29314, 29315, 29317,
            29318, 29319, 29320, 29321, 29324, 29326, 29328,
            29329, 29331, 29332, 29333, 29334, 29335, 29336,
            29337, 29338, 29339, 29340, 29341, 29342, 29344,
            29345, 29346, 29347, 29348, 29349, 29350, 29351,
            29352, 29353, 29354, 29355, 29358, 29361, 29362,
            29363, 29365, 29370, 29371, 29372, 29373, 29374,
            29375, 29376, 29381, 29382, 29383, 29385, 29386,
            29387, 29388, 29391, 29393, 29395, 29396, 29397,
            29398, 29400, 29402, 29403, 58566, 58567, 58568,
            58569, 58570, 58571, 58572, 58573, 58574, 58575,
            58576, 58577, 58578, 58579, 58580, 58581, 58582,
            58583, 58584, 58585, 58586, 58587, 58588, 58589,
            58590, 58591, 58592, 58593, 58594, 58595, 58596,
            58597, 58598, 58599, 58600, 58601, 58602, 58603,
            58604, 58605, 58606, 58607, 58608, 58609, 58610,
            58611, 58612, 58613, 58614, 58615, 58616, 58617,
            58618, 58619, 58620, 58621, 58622, 58623, 58624,
            58625, 58626, 58627, 58628, 58629, 58630, 58631,
            58632, 58633, 58634, 58635, 58636, 58637, 58638,
            58639, 58640, 58641, 58642, 58643, 58644, 58645,
            58646, 58647, 58648, 58649, 58650, 58651, 58652,
            58653, 58654, 58655, 58656, 58657, 58658, 58659,
            58660, 58661, 12288, 12289, 12290, 183, 713, 711,
            168, 12291, 12293, 8212, 65374, 8214, 8230, 8216,
            8217, 8220, 8221, 12308, 12309, 12296, 12297, 12298,
            12299, 12300, 12301, 12302, 12303, 12310, 12311,
            12304, 12305, 177, 215, 247, 8758, 8743, 8744, 8721,
            8719, 8746, 8745, 8712, 8759, 8730, 8869, 8741,
            8736, 8978, 8857, 8747, 8750, 8801, 8780, 8776,
            8765, 8733, 8800, 8814, 8815, 8804, 8805, 8734,
            8757, 8756, 9794, 9792, 176, 8242, 8243, 8451,
            65284, 164, 65504, 65505, 8240, 167, 8470, 9734,
            9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632,
            9651, 9650, 8251, 8594, 8592, 8593, 8595, 12307,
            58662, 58663, 58664, 58665, 58666, 58667, 58668,
            58669, 58670, 58671, 58672, 58673, 58674, 58675,
            58676, 58677, 58678, 58679, 58680, 58681, 58682,
            58683, 58684, 58685, 58686, 58687, 58688, 58689,
            58690, 58691, 58692, 58693, 58694, 58695, 58696,
            58697, 58698, 58699, 58700, 58701, 58702, 58703,
            58704, 58705, 58706, 58707, 58708, 58709, 58710,
            58711, 58712, 58713, 58714, 58715, 58716, 58717,
            58718, 58719, 58720, 58721, 58722, 58723, 58724,
            58725, 58726, 58727, 58728, 58729, 58730, 58731,
            58732, 58733, 58734, 58735, 58736, 58737, 58738,
            58739, 58740, 58741, 58742, 58743, 58744, 58745,
            58746, 58747, 58748, 58749, 58750, 58751, 58752,
            58753, 58754, 58755, 58756, 58757, 8560, 8561, 8562,
            8563, 8564, 8565, 8566, 8567, 8568, 8569, 59238,
            59239, 59240, 59241, 59242, 59243, 9352, 9353, 9354,
            9355, 9356, 9357, 9358, 9359, 9360, 9361, 9362,
            9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370,
            9371, 9332, 9333, 9334, 9335, 9336, 9337, 9338,
            9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346,
            9347, 9348, 9349, 9350, 9351, 9312, 9313, 9314,
            9315, 9316, 9317, 9318, 9319, 9320, 9321, 8364,
            59245, 12832, 12833, 12834, 12835, 12836, 12837,
            12838, 12839, 12840, 12841, 59246, 59247, 8544,
            8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552,
            8553, 8554, 8555, 59248, 59249, 58758, 58759, 58760,
            58761, 58762, 58763, 58764, 58765, 58766, 58767,
            58768, 58769, 58770, 58771, 58772, 58773, 58774,
            58775, 58776, 58777, 58778, 58779, 58780, 58781,
            58782, 58783, 58784, 58785, 58786, 58787, 58788,
            58789, 58790, 58791, 58792, 58793, 58794, 58795,
            58796, 58797, 58798, 58799, 58800, 58801, 58802,
            58803, 58804, 58805, 58806, 58807, 58808, 58809,
            58810, 58811, 58812, 58813, 58814, 58815, 58816,
            58817, 58818, 58819, 58820, 58821, 58822, 58823,
            58824, 58825, 58826, 58827, 58828, 58829, 58830,
            58831, 58832, 58833, 58834, 58835, 58836, 58837,
            58838, 58839, 58840, 58841, 58842, 58843, 58844,
            58845, 58846, 58847, 58848, 58849, 58850, 58851,
            58852, 12288, 65281, 65282, 65283, 65509, 65285,
            65286, 65287, 65288, 65289, 65290, 65291, 65292,
            65293, 65294, 65295, 65296, 65297, 65298, 65299,
            65300, 65301, 65302, 65303, 65304, 65305, 65306,
            65307, 65308, 65309, 65310, 65311, 65312, 65313,
            65314, 65315, 65316, 65317, 65318, 65319, 65320,
            65321, 65322, 65323, 65324, 65325, 65326, 65327,
            65328, 65329, 65330, 65331, 65332, 65333, 65334,
            65335, 65336, 65337, 65338, 65339, 65340, 65341,
            65342, 65343, 65344, 65345, 65346, 65347, 65348,
            65349, 65350, 65351, 65352, 65353, 65354, 65355,
            65356, 65357, 65358, 65359, 65360, 65361, 65362,
            65363, 65364, 65365, 65366, 65367, 65368, 65369,
            65370, 65371, 65372, 65373, 65507, 58854, 58855,
            58856, 58857, 58858, 58859, 58860, 58861, 58862,
            58863, 58864, 58865, 58866, 58867, 58868, 58869,
            58870, 58871, 58872, 58873, 58874, 58875, 58876,
            58877, 58878, 58879, 58880, 58881, 58882, 58883,
            58884, 58885, 58886, 58887, 58888, 58889, 58890,
            58891, 58892, 58893, 58894, 58895, 58896, 58897,
            58898, 58899, 58900, 58901, 58902, 58903, 58904,
            58905, 58906, 58907, 58908, 58909, 58910, 58911,
            58912, 58913, 58914, 58915, 58916, 58917, 58918,
            58919, 58920, 58921, 58922, 58923, 58924, 58925,
            58926, 58927, 58928, 58929, 58930, 58931, 58932,
            58933, 58934, 58935, 58936, 58937, 58938, 58939,
            58940, 58941, 58942, 58943, 58944, 58945, 58946,
            58947, 58948, 58949, 12353, 12354, 12355, 12356,
            12357, 12358, 12359, 12360, 12361, 12362, 12363,
            12364, 12365, 12366, 12367, 12368, 12369, 12370,
            12371, 12372, 12373, 12374, 12375, 12376, 12377,
            12378, 12379, 12380, 12381, 12382, 12383, 12384,
            12385, 12386, 12387, 12388, 12389, 12390, 12391,
            12392, 12393, 12394, 12395, 12396, 12397, 12398,
            12399, 12400, 12401, 12402, 12403, 12404, 12405,
            12406, 12407, 12408, 12409, 12410, 12411, 12412,
            12413, 12414, 12415, 12416, 12417, 12418, 12419,
            12420, 12421, 12422, 12423, 12424, 12425, 12426,
            12427, 12428, 12429, 12430, 12431, 12432, 12433,
            12434, 12435, 59250, 59251, 59252, 59253, 59254,
            59255, 59256, 59257, 59258, 59259, 59260, 58950,
            58951, 58952, 58953, 58954, 58955, 58956, 58957,
            58958, 58959, 58960, 58961, 58962, 58963, 58964,
            58965, 58966, 58967, 58968, 58969, 58970, 58971,
            58972, 58973, 58974, 58975, 58976, 58977, 58978,
            58979, 58980, 58981, 58982, 58983, 58984, 58985,
            58986, 58987, 58988, 58989, 58990, 58991, 58992,
            58993, 58994, 58995, 58996, 58997, 58998, 58999,
            59000, 59001, 59002, 59003, 59004, 59005, 59006,
            59007, 59008, 59009, 59010, 59011, 59012, 59013,
            59014, 59015, 59016, 59017, 59018, 59019, 59020,
            59021, 59022, 59023, 59024, 59025, 59026, 59027,
            59028, 59029, 59030, 59031, 59032, 59033, 59034,
            59035, 59036, 59037, 59038, 59039, 59040, 59041,
            59042, 59043, 59044, 59045, 12449, 12450, 12451,
            12452, 12453, 12454, 12455, 12456, 12457, 12458,
            12459, 12460, 12461, 12462, 12463, 12464, 12465,
            12466, 12467, 12468, 12469, 12470, 12471, 12472,
            12473, 12474, 12475, 12476, 12477, 12478, 12479,
            12480, 12481, 12482, 12483, 12484, 12485, 12486,
            12487, 12488, 12489, 12490, 12491, 12492, 12493,
            12494, 12495, 12496, 12497, 12498, 12499, 12500,
            12501, 12502, 12503, 12504, 12505, 12506, 12507,
            12508, 12509, 12510, 12511, 12512, 12513, 12514,
            12515, 12516, 12517, 12518, 12519, 12520, 12521,
            12522, 12523, 12524, 12525, 12526, 12527, 12528,
            12529, 12530, 12531, 12532, 12533, 12534, 59261,
            59262, 59263, 59264, 59265, 59266, 59267, 59268,
            59046, 59047, 59048, 59049, 59050, 59051, 59052,
            59053, 59054, 59055, 59056, 59057, 59058, 59059,
            59060, 59061, 59062, 59063, 59064, 59065, 59066,
            59067, 59068, 59069, 59070, 59071, 59072, 59073,
            59074, 59075, 59076, 59077, 59078, 59079, 59080,
            59081, 59082, 59083, 59084, 59085, 59086, 59087,
            59088, 59089, 59090, 59091, 59092, 59093, 59094,
            59095, 59096, 59097, 59098, 59099, 59100, 59101,
            59102, 59103, 59104, 59105, 59106, 59107, 59108,
            59109, 59110, 59111, 59112, 59113, 59114, 59115,
            59116, 59117, 59118, 59119, 59120, 59121, 59122,
            59123, 59124, 59125, 59126, 59127, 59128, 59129,
            59130, 59131, 59132, 59133, 59134, 59135, 59136,
            59137, 59138, 59139, 59140, 59141, 913, 914, 915,
            916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
            926, 927, 928, 929, 931, 932, 933, 934, 935, 936,
            937, 59269, 59270, 59271, 59272, 59273, 59274,
            59275, 59276, 945, 946, 947, 948, 949, 950, 951,
            952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
            963, 964, 965, 966, 967, 968, 969, 59277, 59278,
            59279, 59280, 59281, 59282, 59283, 65077, 65078,
            65081, 65082, 65087, 65088, 65085, 65086, 65089,
            65090, 65091, 65092, 59284, 59285, 65083, 65084,
            65079, 65080, 65073, 59286, 65075, 65076, 59287,
            59288, 59289, 59290, 59291, 59292, 59293, 59294,
            59295, 59142, 59143, 59144, 59145, 59146, 59147,
            59148, 59149, 59150, 59151, 59152, 59153, 59154,
            59155, 59156, 59157, 59158, 59159, 59160, 59161,
            59162, 59163, 59164, 59165, 59166, 59167, 59168,
            59169, 59170, 59171, 59172, 59173, 59174, 59175,
            59176, 59177, 59178, 59179, 59180, 59181, 59182,
            59183, 59184, 59185, 59186, 59187, 59188, 59189,
            59190, 59191, 59192, 59193, 59194, 59195, 59196,
            59197, 59198, 59199, 59200, 59201, 59202, 59203,
            59204, 59205, 59206, 59207, 59208, 59209, 59210,
            59211, 59212, 59213, 59214, 59215, 59216, 59217,
            59218, 59219, 59220, 59221, 59222, 59223, 59224,
            59225, 59226, 59227, 59228, 59229, 59230, 59231,
            59232, 59233, 59234, 59235, 59236, 59237, 1040,
            1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047,
            1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
            1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
            1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
            59296, 59297, 59298, 59299, 59300, 59301, 59302,
            59303, 59304, 59305, 59306, 59307, 59308, 59309,
            59310, 1072, 1073, 1074, 1075, 1076, 1077, 1105,
            1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
            1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
            1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
            1102, 1103, 59311, 59312, 59313, 59314, 59315,
            59316, 59317, 59318, 59319, 59320, 59321, 59322,
            59323, 714, 715, 729, 8211, 8213, 8229, 8245, 8453,
            8457, 8598, 8599, 8600, 8601, 8725, 8735, 8739,
            8786, 8806, 8807, 8895, 9552, 9553, 9554, 9555,
            9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563,
            9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571,
            9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579,
            9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587,
            9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608,
            9609, 9610, 9611, 9612, 9613, 9614, 9615, 9619,
            9620, 9621, 9660, 9661, 9698, 9699, 9700, 9701,
            9737, 8853, 12306, 12317, 12318, 59324, 59325,
            59326, 59327, 59328, 59329, 59330, 59331, 59332,
            59333, 59334, 257, 225, 462, 224, 275, 233, 283,
            232, 299, 237, 464, 236, 333, 243, 466, 242, 363,
            250, 468, 249, 470, 472, 474, 476, 252, 234, 593,
            59335, 324, 328, 505, 609, 59337, 59338, 59339,
            59340, 12549, 12550, 12551, 12552, 12553, 12554,
            12555, 12556, 12557, 12558, 12559, 12560, 12561,
            12562, 12563, 12564, 12565, 12566, 12567, 12568,
            12569, 12570, 12571, 12572, 12573, 12574, 12575,
            12576, 12577, 12578, 12579, 12580, 12581, 12582,
            12583, 12584, 12585, 59341, 59342, 59343, 59344,
            59345, 59346, 59347, 59348, 59349, 59350, 59351,
            59352, 59353, 59354, 59355, 59356, 59357, 59358,
            59359, 59360, 59361, 12321, 12322, 12323, 12324,
            12325, 12326, 12327, 12328, 12329, 12963, 13198,
            13199, 13212, 13213, 13214, 13217, 13252, 13262,
            13265, 13266, 13269, 65072, 65506, 65508, 59362,
            8481, 12849, 59363, 8208, 59364, 59365, 59366,
            12540, 12443, 12444, 12541, 12542, 12294, 12445,
            12446, 65097, 65098, 65099, 65100, 65101, 65102,
            65103, 65104, 65105, 65106, 65108, 65109, 65110,
            65111, 65113, 65114, 65115, 65116, 65117, 65118,
            65119, 65120, 65121, 65122, 65123, 65124, 65125,
            65126, 65128, 65129, 65130, 65131, 12350, 12272,
            12273, 12274, 12275, 12276, 12277, 12278, 12279,
            12280, 12281, 12282, 12283, 12295, 59380, 59381,
            59382, 59383, 59384, 59385, 59386, 59387, 59388,
            59389, 59390, 59391, 59392, 9472, 9473, 9474, 9475,
            9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483,
            9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491,
            9492, 9493, 9494, 9495, 9496, 9497, 9498, 9499,
            9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507,
            9508, 9509, 9510, 9511, 9512, 9513, 9514, 9515,
            9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523,
            9524, 9525, 9526, 9527, 9528, 9529, 9530, 9531,
            9532, 9533, 9534, 9535, 9536, 9537, 9538, 9539,
            9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547,
            59393, 59394, 59395, 59396, 59397, 59398, 59399,
            59400, 59401, 59402, 59403, 59404, 59405, 59406,
            59407, 29404, 29405, 29407, 29410, 29411, 29412,
            29413, 29414, 29415, 29418, 29419, 29429, 29430,
            29433, 29437, 29438, 29439, 29440, 29442, 29444,
            29445, 29446, 29447, 29448, 29449, 29451, 29452,
            29453, 29455, 29456, 29457, 29458, 29460, 29464,
            29465, 29466, 29471, 29472, 29475, 29476, 29478,
            29479, 29480, 29485, 29487, 29488, 29490, 29491,
            29493, 29494, 29498, 29499, 29500, 29501, 29504,
            29505, 29506, 29507, 29508, 29509, 29510, 29511,
            29512, 29513, 29514, 29515, 29516, 29518, 29519,
            29521, 29523, 29524, 29525, 29526, 29528, 29529,
            29530, 29531, 29532, 29533, 29534, 29535, 29537,
            29538, 29539, 29540, 29541, 29542, 29543, 29544,
            29545, 29546, 29547, 29550, 29552, 29553, 57344,
            57345, 57346, 57347, 57348, 57349, 57350, 57351,
            57352, 57353, 57354, 57355, 57356, 57357, 57358,
            57359, 57360, 57361, 57362, 57363, 57364, 57365,
            57366, 57367, 57368, 57369, 57370, 57371, 57372,
            57373, 57374, 57375, 57376, 57377, 57378, 57379,
            57380, 57381, 57382, 57383, 57384, 57385, 57386,
            57387, 57388, 57389, 57390, 57391, 57392, 57393,
            57394, 57395, 57396, 57397, 57398, 57399, 57400,
            57401, 57402, 57403, 57404, 57405, 57406, 57407,
            57408, 57409, 57410, 57411, 57412, 57413, 57414,
            57415, 57416, 57417, 57418, 57419, 57420, 57421,
            57422, 57423, 57424, 57425, 57426, 57427, 57428,
            57429, 57430, 57431, 57432, 57433, 57434, 57435,
            57436, 57437, 29554, 29555, 29556, 29557, 29558,
            29559, 29560, 29561, 29562, 29563, 29564, 29565,
            29567, 29568, 29569, 29570, 29571, 29573, 29574,
            29576, 29578, 29580, 29581, 29583, 29584, 29586,
            29587, 29588, 29589, 29591, 29592, 29593, 29594,
            29596, 29597, 29598, 29600, 29601, 29603, 29604,
            29605, 29606, 29607, 29608, 29610, 29612, 29613,
            29617, 29620, 29621, 29622, 29624, 29625, 29628,
            29629, 29630, 29631, 29633, 29635, 29636, 29637,
            29638, 29639, 29643, 29644, 29646, 29650, 29651,
            29652, 29653, 29654, 29655, 29656, 29658, 29659,
            29660, 29661, 29663, 29665, 29666, 29667, 29668,
            29670, 29672, 29674, 29675, 29676, 29678, 29679,
            29680, 29681, 29683, 29684, 29685, 29686, 29687,
            57438, 57439, 57440, 57441, 57442, 57443, 57444,
            57445, 57446, 57447, 57448, 57449, 57450, 57451,
            57452, 57453, 57454, 57455, 57456, 57457, 57458,
            57459, 57460, 57461, 57462, 57463, 57464, 57465,
            57466, 57467, 57468, 57469, 57470, 57471, 57472,
            57473, 57474, 57475, 57476, 57477, 57478, 57479,
            57480, 57481, 57482, 57483, 57484, 57485, 57486,
            57487, 57488, 57489, 57490, 57491, 57492, 57493,
            57494, 57495, 57496, 57497, 57498, 57499, 57500,
            57501, 57502, 57503, 57504, 57505, 57506, 57507,
            57508, 57509, 57510, 57511, 57512, 57513, 57514,
            57515, 57516, 57517, 57518, 57519, 57520, 57521,
            57522, 57523, 57524, 57525, 57526, 57527, 57528,
            57529, 57530, 57531, 29688, 29689, 29690, 29691,
            29692, 29693, 29694, 29695, 29696, 29697, 29698,
            29700, 29703, 29704, 29707, 29708, 29709, 29710,
            29713, 29714, 29715, 29716, 29717, 29718, 29719,
            29720, 29721, 29724, 29725, 29726, 29727, 29728,
            29729, 29731, 29732, 29735, 29737, 29739, 29741,
            29743, 29745, 29746, 29751, 29752, 29753, 29754,
            29755, 29757, 29758, 29759, 29760, 29762, 29763,
            29764, 29765, 29766, 29767, 29768, 29769, 29770,
            29771, 29772, 29773, 29774, 29775, 29776, 29777,
            29778, 29779, 29780, 29782, 29784, 29789, 29792,
            29793, 29794, 29795, 29796, 29797, 29798, 29799,
            29800, 29801, 29802, 29803, 29804, 29806, 29807,
            29809, 29810, 29811, 29812, 29813, 29816, 29817,
            29818, 57532, 57533, 57534, 57535, 57536, 57537,
            57538, 57539, 57540, 57541, 57542, 57543, 57544,
            57545, 57546, 57547, 57548, 57549, 57550, 57551,
            57552, 57553, 57554, 57555, 57556, 57557, 57558,
            57559, 57560, 57561, 57562, 57563, 57564, 57565,
            57566, 57567, 57568, 57569, 57570, 57571, 57572,
            57573, 57574, 57575, 57576, 57577, 57578, 57579,
            57580, 57581, 57582, 57583, 57584, 57585, 57586,
            57587, 57588, 57589, 57590, 57591, 57592, 57593,
            57594, 57595, 57596, 57597, 57598, 57599, 57600,
            57601, 57602, 57603, 57604, 57605, 57606, 57607,
            57608, 57609, 57610, 57611, 57612, 57613, 57614,
            57615, 57616, 57617, 57618, 57619, 57620, 57621,
            57622, 57623, 57624, 57625, 29819, 29820, 29821,
            29823, 29826, 29828, 29829, 29830, 29832, 29833,
            29834, 29836, 29837, 29839, 29841, 29842, 29843,
            29844, 29845, 29846, 29847, 29848, 29849, 29850,
            29851, 29853, 29855, 29856, 29857, 29858, 29859,
            29860, 29861, 29862, 29866, 29867, 29868, 29869,
            29870, 29871, 29872, 29873, 29874, 29875, 29876,
            29877, 29878, 29879, 29880, 29881, 29883, 29884,
            29885, 29886, 29887, 29888, 29889, 29890, 29891,
            29892, 29893, 29894, 29895, 29896, 29897, 29898,
            29899, 29900, 29901, 29902, 29903, 29904, 29905,
            29907, 29908, 29909, 29910, 29911, 29912, 29913,
            29914, 29915, 29917, 29919, 29921, 29925, 29927,
            29928, 29929, 29930, 29931, 29932, 29933, 29936,
            29937, 29938, 57626, 57627, 57628, 57629, 57630,
            57631, 57632, 57633, 57634, 57635, 57636, 57637,
            57638, 57639, 57640, 57641, 57642, 57643, 57644,
            57645, 57646, 57647, 57648, 57649, 57650, 57651,
            57652, 57653, 57654, 57655, 57656, 57657, 57658,
            57659, 57660, 57661, 57662, 57663, 57664, 57665,
            57666, 57667, 57668, 57669, 57670, 57671, 57672,
            57673, 57674, 57675, 57676, 57677, 57678, 57679,
            57680, 57681, 57682, 57683, 57684, 57685, 57686,
            57687, 57688, 57689, 57690, 57691, 57692, 57693,
            57694, 57695, 57696, 57697, 57698, 57699, 57700,
            57701, 57702, 57703, 57704, 57705, 57706, 57707,
            57708, 57709, 57710, 57711, 57712, 57713, 57714,
            57715, 57716, 57717, 57718, 57719, 29939, 29941,
            29944, 29945, 29946, 29947, 29948, 29949, 29950,
            29952, 29953, 29954, 29955, 29957, 29958, 29959,
            29960, 29961, 29962, 29963, 29964, 29966, 29968,
            29970, 29972, 29973, 29974, 29975, 29979, 29981,
            29982, 29984, 29985, 29986, 29987, 29988, 29990,
            29991, 29994, 29998, 30004, 30006, 30009, 30012,
            30013, 30015, 30017, 30018, 30019, 30020, 30022,
            30023, 30025, 30026, 30029, 30032, 30033, 30034,
            30035, 30037, 30038, 30039, 30040, 30045, 30046,
            30047, 30048, 30049, 30050, 30051, 30052, 30055,
            30056, 30057, 30059, 30060, 30061, 30062, 30063,
            30064, 30065, 30067, 30069, 30070, 30071, 30074,
            30075, 30076, 30077, 30078, 30080, 30081, 30082,
            30084, 30085, 30087, 57720, 57721, 57722, 57723,
            57724, 57725, 57726, 57727, 57728, 57729, 57730,
            57731, 57732, 57733, 57734, 57735, 57736, 57737,
            57738, 57739, 57740, 57741, 57742, 57743, 57744,
            57745, 57746, 57747, 57748, 57749, 57750, 57751,
            57752, 57753, 57754, 57755, 57756, 57757, 57758,
            57759, 57760, 57761, 57762, 57763, 57764, 57765,
            57766, 57767, 57768, 57769, 57770, 57771, 57772,
            57773, 57774, 57775, 57776, 57777, 57778, 57779,
            57780, 57781, 57782, 57783, 57784, 57785, 57786,
            57787, 57788, 57789, 57790, 57791, 57792, 57793,
            57794, 57795, 57796, 57797, 57798, 57799, 57800,
            57801, 57802, 57803, 57804, 57805, 57806, 57807,
            57808, 57809, 57810, 57811, 57812, 57813, 30088,
            30089, 30090, 30092, 30093, 30094, 30096, 30099,
            30101, 30104, 30107, 30108, 30110, 30114, 30118,
            30119, 30120, 30121, 30122, 30125, 30134, 30135,
            30138, 30139, 30143, 30144, 30145, 30150, 30155,
            30156, 30158, 30159, 30160, 30161, 30163, 30167,
            30169, 30170, 30172, 30173, 30175, 30176, 30177,
            30181, 30185, 30188, 30189, 30190, 30191, 30194,
            30195, 30197, 30198, 30199, 30200, 30202, 30203,
            30205, 30206, 30210, 30212, 30214, 30215, 30216,
            30217, 30219, 30221, 30222, 30223, 30225, 30226,
            30227, 30228, 30230, 30234, 30236, 30237, 30238,
            30241, 30243, 30247, 30248, 30252, 30254, 30255,
            30257, 30258, 30262, 30263, 30265, 30266, 30267,
            30269, 30273, 30274, 30276, 57814, 57815, 57816,
            57817, 57818, 57819, 57820, 57821, 57822, 57823,
            57824, 57825, 57826, 57827, 57828, 57829, 57830,
            57831, 57832, 57833, 57834, 57835, 57836, 57837,
            57838, 57839, 57840, 57841, 57842, 57843, 57844,
            57845, 57846, 57847, 57848, 57849, 57850, 57851,
            57852, 57853, 57854, 57855, 57856, 57857, 57858,
            57859, 57860, 57861, 57862, 57863, 57864, 57865,
            57866, 57867, 57868, 57869, 57870, 57871, 57872,
            57873, 57874, 57875, 57876, 57877, 57878, 57879,
            57880, 57881, 57882, 57883, 57884, 57885, 57886,
            57887, 57888, 57889, 57890, 57891, 57892, 57893,
            57894, 57895, 57896, 57897, 57898, 57899, 57900,
            57901, 57902, 57903, 57904, 57905, 57906, 57907,
            30277, 30278, 30279, 30280, 30281, 30282, 30283,
            30286, 30287, 30288, 30289, 30290, 30291, 30293,
            30295, 30296, 30297, 30298, 30299, 30301, 30303,
            30304, 30305, 30306, 30308, 30309, 30310, 30311,
            30312, 30313, 30314, 30316, 30317, 30318, 30320,
            30321, 30322, 30323, 30324, 30325, 30326, 30327,
            30329, 30330, 30332, 30335, 30336, 30337, 30339,
            30341, 30345, 30346, 30348, 30349, 30351, 30352,
            30354, 30356, 30357, 30359, 30360, 30362, 30363,
            30364, 30365, 30366, 30367, 30368, 30369, 30370,
            30371, 30373, 30374, 30375, 30376, 30377, 30378,
            30379, 30380, 30381, 30383, 30384, 30387, 30389,
            30390, 30391, 30392, 30393, 30394, 30395, 30396,
            30397, 30398, 30400, 30401, 30403, 21834, 38463,
            22467, 25384, 21710, 21769, 21696, 30353, 30284,
            34108, 30702, 33406, 30861, 29233, 38552, 38797,
            27688, 23433, 20474, 25353, 26263, 23736, 33018,
            26696, 32942, 26114, 30414, 20985, 25942, 29100,
            32753, 34948, 20658, 22885, 25034, 28595, 33453,
            25420, 25170, 21485, 21543, 31494, 20843, 30116,
            24052, 25300, 36299, 38774, 25226, 32793, 22365,
            38712, 32610, 29240, 30333, 26575, 30334, 25670,
            20336, 36133, 25308, 31255, 26001, 29677, 25644,
            25203, 33324, 39041, 26495, 29256, 25198, 25292,
            20276, 29923, 21322, 21150, 32458, 37030, 24110,
            26758, 27036, 33152, 32465, 26834, 30917, 34444,
            38225, 20621, 35876, 33502, 32990, 21253, 35090,
            21093, 30404, 30407, 30409, 30411, 30412, 30419,
            30421, 30425, 30426, 30428, 30429, 30430, 30432,
            30433, 30434, 30435, 30436, 30438, 30439, 30440,
            30441, 30442, 30443, 30444, 30445, 30448, 30451,
            30453, 30454, 30455, 30458, 30459, 30461, 30463,
            30464, 30466, 30467, 30469, 30470, 30474, 30476,
            30478, 30479, 30480, 30481, 30482, 30483, 30484,
            30485, 30486, 30487, 30488, 30491, 30492, 30493,
            30494, 30497, 30499, 30500, 30501, 30503, 30506,
            30507, 30508, 30510, 30512, 30513, 30514, 30515,
            30516, 30521, 30523, 30525, 30526, 30527, 30530,
            30532, 30533, 30534, 30536, 30537, 30538, 30539,
            30540, 30541, 30542, 30543, 30546, 30547, 30548,
            30549, 30550, 30551, 30552, 30553, 30556, 34180,
            38649, 20445, 22561, 39281, 23453, 25265, 25253,
            26292, 35961, 40077, 29190, 26479, 30865, 24754,
            21329, 21271, 36744, 32972, 36125, 38049, 20493,
            29384, 22791, 24811, 28953, 34987, 22868, 33519,
            26412, 31528, 23849, 32503, 29997, 27893, 36454,
            36856, 36924, 40763, 27604, 37145, 31508, 24444,
            30887, 34006, 34109, 27605, 27609, 27606, 24065,
            24199, 30201, 38381, 25949, 24330, 24517, 36767,
            22721, 33218, 36991, 38491, 38829, 36793, 32534,
            36140, 25153, 20415, 21464, 21342, 36776, 36777,
            36779, 36941, 26631, 24426, 33176, 34920, 40150,
            24971, 21035, 30250, 24428, 25996, 28626, 28392,
            23486, 25672, 20853, 20912, 26564, 19993, 31177,
            39292, 28851, 30557, 30558, 30559, 30560, 30564,
            30567, 30569, 30570, 30573, 30574, 30575, 30576,
            30577, 30578, 30579, 30580, 30581, 30582, 30583,
            30584, 30586, 30587, 30588, 30593, 30594, 30595,
            30598, 30599, 30600, 30601, 30602, 30603, 30607,
            30608, 30611, 30612, 30613, 30614, 30615, 30616,
            30617, 30618, 30619, 30620, 30621, 30622, 30625,
            30627, 30628, 30630, 30632, 30635, 30637, 30638,
            30639, 30641, 30642, 30644, 30646, 30647, 30648,
            30649, 30650, 30652, 30654, 30656, 30657, 30658,
            30659, 30660, 30661, 30662, 30663, 30664, 30665,
            30666, 30667, 30668, 30670, 30671, 30672, 30673,
            30674, 30675, 30676, 30677, 30678, 30680, 30681,
            30682, 30685, 30686, 30687, 30688, 30689, 30692,
            30149, 24182, 29627, 33760, 25773, 25320, 38069,
            27874, 21338, 21187, 25615, 38082, 31636, 20271,
            24091, 33334, 33046, 33162, 28196, 27850, 39539,
            25429, 21340, 21754, 34917, 22496, 19981, 24067,
            27493, 31807, 37096, 24598, 25830, 29468, 35009,
            26448, 25165, 36130, 30572, 36393, 37319, 24425,
            33756, 34081, 39184, 21442, 34453, 27531, 24813,
            24808, 28799, 33485, 33329, 20179, 27815, 34255,
            25805, 31961, 27133, 26361, 33609, 21397, 31574,
            20391, 20876, 27979, 23618, 36461, 25554, 21449,
            33580, 33590, 26597, 30900, 25661, 23519, 23700,
            24046, 35815, 25286, 26612, 35962, 25600, 25530,
            34633, 39307, 35863, 32544, 38130, 20135, 38416,
            39076, 26124, 29462, 30694, 30696, 30698, 30703,
            30704, 30705, 30706, 30708, 30709, 30711, 30713,
            30714, 30715, 30716, 30723, 30724, 30725, 30726,
            30727, 30728, 30730, 30731, 30734, 30735, 30736,
            30739, 30741, 30745, 30747, 30750, 30752, 30753,
            30754, 30756, 30760, 30762, 30763, 30766, 30767,
            30769, 30770, 30771, 30773, 30774, 30781, 30783,
            30785, 30786, 30787, 30788, 30790, 30792, 30793,
            30794, 30795, 30797, 30799, 30801, 30803, 30804,
            30808, 30809, 30810, 30811, 30812, 30814, 30815,
            30816, 30817, 30818, 30819, 30820, 30821, 30822,
            30823, 30824, 30825, 30831, 30832, 30833, 30834,
            30835, 30836, 30837, 30838, 30840, 30841, 30842,
            30843, 30845, 30846, 30847, 30848, 30849, 30850,
            30851, 22330, 23581, 24120, 38271, 20607, 32928,
            21378, 25950, 30021, 21809, 20513, 36229, 25220,
            38046, 26397, 22066, 28526, 24034, 21557, 28818,
            36710, 25199, 25764, 25507, 24443, 28552, 37108,
            33251, 36784, 23576, 26216, 24561, 27785, 38472,
            36225, 34924, 25745, 31216, 22478, 27225, 25104,
            21576, 20056, 31243, 24809, 28548, 35802, 25215,
            36894, 39563, 31204, 21507, 30196, 25345, 21273,
            27744, 36831, 24347, 39536, 32827, 40831, 20360,
            23610, 36196, 32709, 26021, 28861, 20805, 20914,
            34411, 23815, 23456, 25277, 37228, 30068, 36364,
            31264, 24833, 31609, 20167, 32504, 30597, 19985,
            33261, 21021, 20986, 27249, 21416, 36487, 38148,
            38607, 28353, 38500, 26970, 30852, 30853, 30854,
            30856, 30858, 30859, 30863, 30864, 30866, 30868,
            30869, 30870, 30873, 30877, 30878, 30880, 30882,
            30884, 30886, 30888, 30889, 30890, 30891, 30892,
            30893, 30894, 30895, 30901, 30902, 30903, 30904,
            30906, 30907, 30908, 30909, 30911, 30912, 30914,
            30915, 30916, 30918, 30919, 30920, 30924, 30925,
            30926, 30927, 30929, 30930, 30931, 30934, 30935,
            30936, 30938, 30939, 30940, 30941, 30942, 30943,
            30944, 30945, 30946, 30947, 30948, 30949, 30950,
            30951, 30953, 30954, 30955, 30957, 30958, 30959,
            30960, 30961, 30963, 30965, 30966, 30968, 30969,
            30971, 30972, 30973, 30974, 30975, 30976, 30978,
            30979, 30980, 30982, 30983, 30984, 30985, 30986,
            30987, 30988, 30784, 20648, 30679, 25616, 35302,
            22788, 25571, 24029, 31359, 26941, 20256, 33337,
            21912, 20018, 30126, 31383, 24162, 24202, 38383,
            21019, 21561, 28810, 25462, 38180, 22402, 26149,
            26943, 37255, 21767, 28147, 32431, 34850, 25139,
            32496, 30133, 33576, 30913, 38604, 36766, 24904,
            29943, 35789, 27492, 21050, 36176, 27425, 32874,
            33905, 22257, 21254, 20174, 19995, 20945, 31895,
            37259, 31751, 20419, 36479, 31713, 31388, 25703,
            23828, 20652, 33030, 30209, 31929, 28140, 32736,
            26449, 23384, 23544, 30923, 25774, 25619, 25514,
            25387, 38169, 25645, 36798, 31572, 30249, 25171,
            22823, 21574, 27513, 20643, 25140, 24102, 27526,
            20195, 36151, 34955, 24453, 36910, 30989, 30990,
            30991, 30992, 30993, 30994, 30996, 30997, 30998,
            30999, 31000, 31001, 31002, 31003, 31004, 31005,
            31007, 31008, 31009, 31010, 31011, 31013, 31014,
            31015, 31016, 31017, 31018, 31019, 31020, 31021,
            31022, 31023, 31024, 31025, 31026, 31027, 31029,
            31030, 31031, 31032, 31033, 31037, 31039, 31042,
            31043, 31044, 31045, 31047, 31050, 31051, 31052,
            31053, 31054, 31055, 31056, 31057, 31058, 31060,
            31061, 31064, 31065, 31073, 31075, 31076, 31078,
            31081, 31082, 31083, 31084, 31086, 31088, 31089,
            31090, 31091, 31092, 31093, 31094, 31097, 31099,
            31100, 31101, 31102, 31103, 31106, 31107, 31110,
            31111, 31112, 31113, 31115, 31116, 31117, 31118,
            31120, 31121, 31122, 24608, 32829, 25285, 20025,
            21333, 37112, 25528, 32966, 26086, 27694, 20294,
            24814, 28129, 35806, 24377, 34507, 24403, 25377,
            20826, 33633, 26723, 20992, 25443, 36424, 20498,
            23707, 31095, 23548, 21040, 31291, 24764, 36947,
            30423, 24503, 24471, 30340, 36460, 28783, 30331,
            31561, 30634, 20979, 37011, 22564, 20302, 28404,
            36842, 25932, 31515, 29380, 28068, 32735, 23265,
            25269, 24213, 22320, 33922, 31532, 24093, 24351,
            36882, 32532, 39072, 25474, 28359, 30872, 28857,
            20856, 38747, 22443, 30005, 20291, 30008, 24215,
            24806, 22880, 28096, 27583, 30857, 21500, 38613,
            20939, 20993, 25481, 21514, 38035, 35843, 36300,
            29241, 30879, 34678, 36845, 35853, 21472, 31123,
            31124, 31125, 31126, 31127, 31128, 31129, 31131,
            31132, 31133, 31134, 31135, 31136, 31137, 31138,
            31139, 31140, 31141, 31142, 31144, 31145, 31146,
            31147, 31148, 31149, 31150, 31151, 31152, 31153,
            31154, 31156, 31157, 31158, 31159, 31160, 31164,
            31167, 31170, 31172, 31173, 31175, 31176, 31178,
            31180, 31182, 31183, 31184, 31187, 31188, 31190,
            31191, 31193, 31194, 31195, 31196, 31197, 31198,
            31200, 31201, 31202, 31205, 31208, 31210, 31212,
            31214, 31217, 31218, 31219, 31220, 31221, 31222,
            31223, 31225, 31226, 31228, 31230, 31231, 31233,
            31236, 31237, 31239, 31240, 31241, 31242, 31244,
            31247, 31248, 31249, 31250, 31251, 31253, 31254,
            31256, 31257, 31259, 31260, 19969, 30447, 21486,
            38025, 39030, 40718, 38189, 23450, 35746, 20002,
            19996, 20908, 33891, 25026, 21160, 26635, 20375,
            24683, 20923, 27934, 20828, 25238, 26007, 38497,
            35910, 36887, 30168, 37117, 30563, 27602, 29322,
            29420, 35835, 22581, 30585, 36172, 26460, 38208,
            32922, 24230, 28193, 22930, 31471, 30701, 38203,
            27573, 26029, 32526, 22534, 20817, 38431, 23545,
            22697, 21544, 36466, 25958, 39039, 22244, 38045,
            30462, 36929, 25479, 21702, 22810, 22842, 22427,
            36530, 26421, 36346, 33333, 21057, 24816, 22549,
            34558, 23784, 40517, 20420, 39069, 35769, 23077,
            24694, 21380, 25212, 36943, 37122, 39295, 24681,
            32780, 20799, 32819, 23572, 39285, 27953, 20108,
            31261, 31263, 31265, 31266, 31268, 31269, 31270,
            31271, 31272, 31273, 31274, 31275, 31276, 31277,
            31278, 31279, 31280, 31281, 31282, 31284, 31285,
            31286, 31288, 31290, 31294, 31296, 31297, 31298,
            31299, 31300, 31301, 31303, 31304, 31305, 31306,
            31307, 31308, 31309, 31310, 31311, 31312, 31314,
            31315, 31316, 31317, 31318, 31320, 31321, 31322,
            31323, 31324, 31325, 31326, 31327, 31328, 31329,
            31330, 31331, 31332, 31333, 31334, 31335, 31336,
            31337, 31338, 31339, 31340, 31341, 31342, 31343,
            31345, 31346, 31347, 31349, 31355, 31356, 31357,
            31358, 31362, 31365, 31367, 31369, 31370, 31371,
            31372, 31374, 31375, 31376, 31379, 31380, 31385,
            31386, 31387, 31390, 31393, 31394, 36144, 21457,
            32602, 31567, 20240, 20047, 38400, 27861, 29648,
            34281, 24070, 30058, 32763, 27146, 30718, 38034,
            32321, 20961, 28902, 21453, 36820, 33539, 36137,
            29359, 39277, 27867, 22346, 33459, 26041, 32938,
            25151, 38450, 22952, 20223, 35775, 32442, 25918,
            33778, 38750, 21857, 39134, 32933, 21290, 35837,
            21536, 32954, 24223, 27832, 36153, 33452, 37210,
            21545, 27675, 20998, 32439, 22367, 28954, 27774,
            31881, 22859, 20221, 24575, 24868, 31914, 20016,
            23553, 26539, 34562, 23792, 38155, 39118, 30127,
            28925, 36898, 20911, 32541, 35773, 22857, 20964,
            20315, 21542, 22827, 25975, 32932, 23413, 25206,
            25282, 36752, 24133, 27679, 31526, 20239, 20440,
            26381, 31395, 31396, 31399, 31401, 31402, 31403,
            31406, 31407, 31408, 31409, 31410, 31412, 31413,
            31414, 31415, 31416, 31417, 31418, 31419, 31420,
            31421, 31422, 31424, 31425, 31426, 31427, 31428,
            31429, 31430, 31431, 31432, 31433, 31434, 31436,
            31437, 31438, 31439, 31440, 31441, 31442, 31443,
            31444, 31445, 31447, 31448, 31450, 31451, 31452,
            31453, 31457, 31458, 31460, 31463, 31464, 31465,
            31466, 31467, 31468, 31470, 31472, 31473, 31474,
            31475, 31476, 31477, 31478, 31479, 31480, 31483,
            31484, 31486, 31488, 31489, 31490, 31493, 31495,
            31497, 31500, 31501, 31502, 31504, 31506, 31507,
            31510, 31511, 31512, 31514, 31516, 31517, 31519,
            31521, 31522, 31523, 31527, 31529, 31533, 28014,
            28074, 31119, 34993, 24343, 29995, 25242, 36741,
            20463, 37340, 26023, 33071, 33105, 24220, 33104,
            36212, 21103, 35206, 36171, 22797, 20613, 20184,
            38428, 29238, 33145, 36127, 23500, 35747, 38468,
            22919, 32538, 21648, 22134, 22030, 35813, 25913,
            27010, 38041, 30422, 28297, 24178, 29976, 26438,
            26577, 31487, 32925, 36214, 24863, 31174, 25954,
            36195, 20872, 21018, 38050, 32568, 32923, 32434,
            23703, 28207, 26464, 31705, 30347, 39640, 33167,
            32660, 31957, 25630, 38224, 31295, 21578, 21733,
            27468, 25601, 25096, 40509, 33011, 30105, 21106,
            38761, 33883, 26684, 34532, 38401, 38548, 38124,
            20010, 21508, 32473, 26681, 36319, 32789, 26356,
            24218, 32697, 31535, 31536, 31538, 31540, 31541,
            31542, 31543, 31545, 31547, 31549, 31551, 31552,
            31553, 31554, 31555, 31556, 31558, 31560, 31562,
            31565, 31566, 31571, 31573, 31575, 31577, 31580,
            31582, 31583, 31585, 31587, 31588, 31589, 31590,
            31591, 31592, 31593, 31594, 31595, 31596, 31597,
            31599, 31600, 31603, 31604, 31606, 31608, 31610,
            31612, 31613, 31615, 31617, 31618, 31619, 31620,
            31622, 31623, 31624, 31625, 31626, 31627, 31628,
            31630, 31631, 31633, 31634, 31635, 31638, 31640,
            31641, 31642, 31643, 31646, 31647, 31648, 31651,
            31652, 31653, 31662, 31663, 31664, 31666, 31667,
            31669, 31670, 31671, 31673, 31674, 31675, 31676,
            31677, 31678, 31679, 31680, 31682, 31683, 31684,
            22466, 32831, 26775, 24037, 25915, 21151, 24685,
            40858, 20379, 36524, 20844, 23467, 24339, 24041,
            27742, 25329, 36129, 20849, 38057, 21246, 27807,
            33503, 29399, 22434, 26500, 36141, 22815, 36764,
            33735, 21653, 31629, 20272, 27837, 23396, 22993,
            40723, 21476, 34506, 39592, 35895, 32929, 25925,
            39038, 22266, 38599, 21038, 29916, 21072, 23521,
            25346, 35074, 20054, 25296, 24618, 26874, 20851,
            23448, 20896, 35266, 31649, 39302, 32592, 24815,
            28748, 36143, 20809, 24191, 36891, 29808, 35268,
            22317, 30789, 24402, 40863, 38394, 36712, 39740,
            35809, 30328, 26690, 26588, 36330, 36149, 21053,
            36746, 28378, 26829, 38149, 37101, 22269, 26524,
            35065, 36807, 21704, 31685, 31688, 31689, 31690,
            31691, 31693, 31694, 31695, 31696, 31698, 31700,
            31701, 31702, 31703, 31704, 31707, 31708, 31710,
            31711, 31712, 31714, 31715, 31716, 31719, 31720,
            31721, 31723, 31724, 31725, 31727, 31728, 31730,
            31731, 31732, 31733, 31734, 31736, 31737, 31738,
            31739, 31741, 31743, 31744, 31745, 31746, 31747,
            31748, 31749, 31750, 31752, 31753, 31754, 31757,
            31758, 31760, 31761, 31762, 31763, 31764, 31765,
            31767, 31768, 31769, 31770, 31771, 31772, 31773,
            31774, 31776, 31777, 31778, 31779, 31780, 31781,
            31784, 31785, 31787, 31788, 31789, 31790, 31791,
            31792, 31793, 31794, 31795, 31796, 31797, 31798,
            31799, 31801, 31802, 31803, 31804, 31805, 31806,
            31810, 39608, 23401, 28023, 27686, 20133, 23475,
            39559, 37219, 25000, 37039, 38889, 21547, 28085,
            23506, 20989, 21898, 32597, 32752, 25788, 25421,
            26097, 25022, 24717, 28938, 27735, 27721, 22831,
            26477, 33322, 22741, 22158, 35946, 27627, 37085,
            22909, 32791, 21495, 28009, 21621, 21917, 33655,
            33743, 26680, 31166, 21644, 20309, 21512, 30418,
            35977, 38402, 27827, 28088, 36203, 35088, 40548,
            36154, 22079, 40657, 30165, 24456, 29408, 24680,
            21756, 20136, 27178, 34913, 24658, 36720, 21700,
            28888, 34425, 40511, 27946, 23439, 24344, 32418,
            21897, 20399, 29492, 21564, 21402, 20505, 21518,
            21628, 20046, 24573, 29786, 22774, 33899, 32993,
            34676, 29392, 31946, 28246, 31811, 31812, 31813,
            31814, 31815, 31816, 31817, 31818, 31819, 31820,
            31822, 31823, 31824, 31825, 31826, 31827, 31828,
            31829, 31830, 31831, 31832, 31833, 31834, 31835,
            31836, 31837, 31838, 31839, 31840, 31841, 31842,
            31843, 31844, 31845, 31846, 31847, 31848, 31849,
            31850, 31851, 31852, 31853, 31854, 31855, 31856,
            31857, 31858, 31861, 31862, 31863, 31864, 31865,
            31866, 31870, 31871, 31872, 31873, 31874, 31875,
            31876, 31877, 31878, 31879, 31880, 31882, 31883,
            31884, 31885, 31886, 31887, 31888, 31891, 31892,
            31894, 31897, 31898, 31899, 31904, 31905, 31907,
            31910, 31911, 31912, 31913, 31915, 31916, 31917,
            31919, 31920, 31924, 31925, 31926, 31927, 31928,
            31930, 31931, 24359, 34382, 21804, 25252, 20114,
            27818, 25143, 33457, 21719, 21326, 29502, 28369,
            30011, 21010, 21270, 35805, 27088, 24458, 24576,
            28142, 22351, 27426, 29615, 26707, 36824, 32531,
            25442, 24739, 21796, 30186, 35938, 28949, 28067,
            23462, 24187, 33618, 24908, 40644, 30970, 34647,
            31783, 30343, 20976, 24822, 29004, 26179, 24140,
            24653, 35854, 28784, 25381, 36745, 24509, 24674,
            34516, 22238, 27585, 24724, 24935, 21321, 24800,
            26214, 36159, 31229, 20250, 28905, 27719, 35763,
            35826, 32472, 33636, 26127, 23130, 39746, 27985,
            28151, 35905, 27963, 20249, 28779, 33719, 25110,
            24785, 38669, 36135, 31096, 20987, 22334, 22522,
            26426, 30072, 31293, 31215, 31637, 31935, 31936,
            31938, 31939, 31940, 31942, 31945, 31947, 31950,
            31951, 31952, 31953, 31954, 31955, 31956, 31960,
            31962, 31963, 31965, 31966, 31969, 31970, 31971,
            31972, 31973, 31974, 31975, 31977, 31978, 31979,
            31980, 31981, 31982, 31984, 31985, 31986, 31987,
            31988, 31989, 31990, 31991, 31993, 31994, 31996,
            31997, 31998, 31999, 32000, 32001, 32002, 32003,
            32004, 32005, 32006, 32007, 32008, 32009, 32011,
            32012, 32013, 32014, 32015, 32016, 32017, 32018,
            32019, 32020, 32021, 32022, 32023, 32024, 32025,
            32026, 32027, 32028, 32029, 32030, 32031, 32033,
            32035, 32036, 32037, 32038, 32040, 32041, 32042,
            32044, 32045, 32046, 32048, 32049, 32050, 32051,
            32052, 32053, 32054, 32908, 39269, 36857, 28608,
            35749, 40481, 23020, 32489, 32521, 21513, 26497,
            26840, 36753, 31821, 38598, 21450, 24613, 30142,
            27762, 21363, 23241, 32423, 25380, 20960, 33034,
            24049, 34015, 25216, 20864, 23395, 20238, 31085,
            21058, 24760, 27982, 23492, 23490, 35745, 35760,
            26082, 24524, 38469, 22931, 32487, 32426, 22025,
            26551, 22841, 20339, 23478, 21152, 33626, 39050,
            36158, 30002, 38078, 20551, 31292, 20215, 26550,
            39550, 23233, 27516, 30417, 22362, 23574, 31546,
            38388, 29006, 20860, 32937, 33392, 22904, 32516,
            33575, 26816, 26604, 30897, 30839, 25315, 25441,
            31616, 20461, 21098, 20943, 33616, 27099, 37492,
            36341, 36145, 35265, 38190, 31661, 20214, 32055,
            32056, 32057, 32058, 32059, 32060, 32061, 32062,
            32063, 32064, 32065, 32066, 32067, 32068, 32069,
            32070, 32071, 32072, 32073, 32074, 32075, 32076,
            32077, 32078, 32079, 32080, 32081, 32082, 32083,
            32084, 32085, 32086, 32087, 32088, 32089, 32090,
            32091, 32092, 32093, 32094, 32095, 32096, 32097,
            32098, 32099, 32100, 32101, 32102, 32103, 32104,
            32105, 32106, 32107, 32108, 32109, 32111, 32112,
            32113, 32114, 32115, 32116, 32117, 32118, 32120,
            32121, 32122, 32123, 32124, 32125, 32126, 32127,
            32128, 32129, 32130, 32131, 32132, 32133, 32134,
            32135, 32136, 32137, 32138, 32139, 32140, 32141,
            32142, 32143, 32144, 32145, 32146, 32147, 32148,
            32149, 32150, 32151, 32152, 20581, 33328, 21073,
            39279, 28176, 28293, 28071, 24314, 20725, 23004,
            23558, 27974, 27743, 30086, 33931, 26728, 22870,
            35762, 21280, 37233, 38477, 34121, 26898, 30977,
            28966, 33014, 20132, 37066, 27975, 39556, 23047,
            22204, 25605, 38128, 30699, 20389, 33050, 29409,
            35282, 39290, 32564, 32478, 21119, 25945, 37237,
            36735, 36739, 21483, 31382, 25581, 25509, 30342,
            31224, 34903, 38454, 25130, 21163, 33410, 26708,
            26480, 25463, 30571, 31469, 27905, 32467, 35299,
            22992, 25106, 34249, 33445, 30028, 20511, 20171,
            30117, 35819, 23626, 24062, 31563, 26020, 37329,
            20170, 27941, 35167, 32039, 38182, 20165, 35880,
            36827, 38771, 26187, 31105, 36817, 28908, 28024,
            32153, 32154, 32155, 32156, 32157, 32158, 32159,
            32160, 32161, 32162, 32163, 32164, 32165, 32167,
            32168, 32169, 32170, 32171, 32172, 32173, 32175,
            32176, 32177, 32178, 32179, 32180, 32181, 32182,
            32183, 32184, 32185, 32186, 32187, 32188, 32189,
            32190, 32191, 32192, 32193, 32194, 32195, 32196,
            32197, 32198, 32199, 32200, 32201, 32202, 32203,
            32204, 32205, 32206, 32207, 32208, 32209, 32210,
            32211, 32212, 32213, 32214, 32215, 32216, 32217,
            32218, 32219, 32220, 32221, 32222, 32223, 32224,
            32225, 32226, 32227, 32228, 32229, 32230, 32231,
            32232, 32233, 32234, 32235, 32236, 32237, 32238,
            32239, 32240, 32241, 32242, 32243, 32244, 32245,
            32246, 32247, 32248, 32249, 32250, 23613, 21170,
            33606, 20834, 33550, 30555, 26230, 40120, 20140,
            24778, 31934, 31923, 32463, 20117, 35686, 26223,
            39048, 38745, 22659, 25964, 38236, 24452, 30153,
            38742, 31455, 31454, 20928, 28847, 31384, 25578,
            31350, 32416, 29590, 38893, 20037, 28792, 20061,
            37202, 21417, 25937, 26087, 33276, 33285, 21646,
            23601, 30106, 38816, 25304, 29401, 30141, 23621,
            39545, 33738, 23616, 21632, 30697, 20030, 27822,
            32858, 25298, 25454, 24040, 20855, 36317, 36382,
            38191, 20465, 21477, 24807, 28844, 21095, 25424,
            40515, 23071, 20518, 30519, 21367, 32482, 25733,
            25899, 25225, 25496, 20500, 29237, 35273, 20915,
            35776, 32477, 22343, 33740, 38055, 20891, 21531,
            23803, 32251, 32252, 32253, 32254, 32255, 32256,
            32257, 32258, 32259, 32260, 32261, 32262, 32263,
            32264, 32265, 32266, 32267, 32268, 32269, 32270,
            32271, 32272, 32273, 32274, 32275, 32276, 32277,
            32278, 32279, 32280, 32281, 32282, 32283, 32284,
            32285, 32286, 32287, 32288, 32289, 32290, 32291,
            32292, 32293, 32294, 32295, 32296, 32297, 32298,
            32299, 32300, 32301, 32302, 32303, 32304, 32305,
            32306, 32307, 32308, 32309, 32310, 32311, 32312,
            32313, 32314, 32316, 32317, 32318, 32319, 32320,
            32322, 32323, 32324, 32325, 32326, 32328, 32329,
            32330, 32331, 32332, 32333, 32334, 32335, 32336,
            32337, 32338, 32339, 32340, 32341, 32342, 32343,
            32344, 32345, 32346, 32347, 32348, 32349, 20426,
            31459, 27994, 37089, 39567, 21888, 21654, 21345,
            21679, 24320, 25577, 26999, 20975, 24936, 21002,
            22570, 21208, 22350, 30733, 30475, 24247, 24951,
            31968, 25179, 25239, 20130, 28821, 32771, 25335,
            28900, 38752, 22391, 33499, 26607, 26869, 30933,
            39063, 31185, 22771, 21683, 21487, 28212, 20811,
            21051, 23458, 35838, 32943, 21827, 22438, 24691,
            22353, 21549, 31354, 24656, 23380, 25511, 25248,
            21475, 25187, 23495, 26543, 21741, 31391, 33510,
            37239, 24211, 35044, 22840, 22446, 25358, 36328,
            33007, 22359, 31607, 20393, 24555, 23485, 27454,
            21281, 31568, 29378, 26694, 30719, 30518, 26103,
            20917, 20111, 30420, 23743, 31397, 33909, 22862,
            39745, 20608, 32350, 32351, 32352, 32353, 32354,
            32355, 32356, 32357, 32358, 32359, 32360, 32361,
            32362, 32363, 32364, 32365, 32366, 32367, 32368,
            32369, 32370, 32371, 32372, 32373, 32374, 32375,
            32376, 32377, 32378, 32379, 32380, 32381, 32382,
            32383, 32384, 32385, 32387, 32388, 32389, 32390,
            32391, 32392, 32393, 32394, 32395, 32396, 32397,
            32398, 32399, 32400, 32401, 32402, 32403, 32404,
            32405, 32406, 32407, 32408, 32409, 32410, 32412,
            32413, 32414, 32430, 32436, 32443, 32444, 32470,
            32484, 32492, 32505, 32522, 32528, 32542, 32567,
            32569, 32571, 32572, 32573, 32574, 32575, 32576,
            32577, 32579, 32582, 32583, 32584, 32585, 32586,
            32587, 32588, 32589, 32590, 32591, 32594, 32595,
            39304, 24871, 28291, 22372, 26118, 25414, 22256,
            25324, 25193, 24275, 38420, 22403, 25289, 21895,
            34593, 33098, 36771, 21862, 33713, 26469, 36182,
            34013, 23146, 26639, 25318, 31726, 38417, 20848,
            28572, 35888, 25597, 35272, 25042, 32518, 28866,
            28389, 29701, 27028, 29436, 24266, 37070, 26391,
            28010, 25438, 21171, 29282, 32769, 20332, 23013,
            37226, 28889, 28061, 21202, 20048, 38647, 38253,
            34174, 30922, 32047, 20769, 22418, 25794, 32907,
            31867, 27882, 26865, 26974, 20919, 21400, 26792,
            29313, 40654, 31729, 29432, 31163, 28435, 29702,
            26446, 37324, 40100, 31036, 33673, 33620, 21519,
            26647, 20029, 21385, 21169, 30782, 21382, 21033,
            20616, 20363, 20432, 32598, 32601, 32603, 32604,
            32605, 32606, 32608, 32611, 32612, 32613, 32614,
            32615, 32619, 32620, 32621, 32623, 32624, 32627,
            32629, 32630, 32631, 32632, 32634, 32635, 32636,
            32637, 32639, 32640, 32642, 32643, 32644, 32645,
            32646, 32647, 32648, 32649, 32651, 32653, 32655,
            32656, 32657, 32658, 32659, 32661, 32662, 32663,
            32664, 32665, 32667, 32668, 32672, 32674, 32675,
            32677, 32678, 32680, 32681, 32682, 32683, 32684,
            32685, 32686, 32689, 32691, 32692, 32693, 32694,
            32695, 32698, 32699, 32702, 32704, 32706, 32707,
            32708, 32710, 32711, 32712, 32713, 32715, 32717,
            32719, 32720, 32721, 32722, 32723, 32726, 32727,
            32729, 32730, 32731, 32732, 32733, 32734, 32738,
            32739, 30178, 31435, 31890, 27813, 38582, 21147,
            29827, 21737, 20457, 32852, 33714, 36830, 38256,
            24265, 24604, 28063, 24088, 25947, 33080, 38142,
            24651, 28860, 32451, 31918, 20937, 26753, 31921,
            33391, 20004, 36742, 37327, 26238, 20142, 35845,
            25769, 32842, 20698, 30103, 29134, 23525, 36797,
            28518, 20102, 25730, 38243, 24278, 26009, 21015,
            35010, 28872, 21155, 29454, 29747, 26519, 30967,
            38678, 20020, 37051, 40158, 28107, 20955, 36161,
            21533, 25294, 29618, 33777, 38646, 40836, 38083,
            20278, 32666, 20940, 28789, 38517, 23725, 39046,
            21478, 20196, 28316, 29705, 27060, 30827, 39311,
            30041, 21016, 30244, 27969, 26611, 20845, 40857,
            32843, 21657, 31548, 31423, 32740, 32743, 32744,
            32746, 32747, 32748, 32749, 32751, 32754, 32756,
            32757, 32758, 32759, 32760, 32761, 32762, 32765,
            32766, 32767, 32770, 32775, 32776, 32777, 32778,
            32782, 32783, 32785, 32787, 32794, 32795, 32797,
            32798, 32799, 32801, 32803, 32804, 32811, 32812,
            32813, 32814, 32815, 32816, 32818, 32820, 32825,
            32826, 32828, 32830, 32832, 32833, 32836, 32837,
            32839, 32840, 32841, 32846, 32847, 32848, 32849,
            32851, 32853, 32854, 32855, 32857, 32859, 32860,
            32861, 32862, 32863, 32864, 32865, 32866, 32867,
            32868, 32869, 32870, 32871, 32872, 32875, 32876,
            32877, 32878, 32879, 32880, 32882, 32883, 32884,
            32885, 32886, 32887, 32888, 32889, 32890, 32891,
            32892, 32893, 38534, 22404, 25314, 38471, 27004,
            23044, 25602, 31699, 28431, 38475, 33446, 21346,
            39045, 24208, 28809, 25523, 21348, 34383, 40065,
            40595, 30860, 38706, 36335, 36162, 40575, 28510,
            31108, 24405, 38470, 25134, 39540, 21525, 38109,
            20387, 26053, 23653, 23649, 32533, 34385, 27695,
            24459, 29575, 28388, 32511, 23782, 25371, 23402,
            28390, 21365, 20081, 25504, 30053, 25249, 36718,
            20262, 20177, 27814, 32438, 35770, 33821, 34746,
            32599, 36923, 38179, 31657, 39585, 35064, 33853,
            27931, 39558, 32476, 22920, 40635, 29595, 30721,
            34434, 39532, 39554, 22043, 21527, 22475, 20080,
            40614, 21334, 36808, 33033, 30610, 39314, 34542,
            28385, 34067, 26364, 24930, 28459, 32894, 32897,
            32898, 32901, 32904, 32906, 32909, 32910, 32911,
            32912, 32913, 32914, 32916, 32917, 32919, 32921,
            32926, 32931, 32934, 32935, 32936, 32940, 32944,
            32947, 32949, 32950, 32952, 32953, 32955, 32965,
            32967, 32968, 32969, 32970, 32971, 32975, 32976,
            32977, 32978, 32979, 32980, 32981, 32984, 32991,
            32992, 32994, 32995, 32998, 33006, 33013, 33015,
            33017, 33019, 33022, 33023, 33024, 33025, 33027,
            33028, 33029, 33031, 33032, 33035, 33036, 33045,
            33047, 33049, 33051, 33052, 33053, 33055, 33056,
            33057, 33058, 33059, 33060, 33061, 33062, 33063,
            33064, 33065, 33066, 33067, 33069, 33070, 33072,
            33075, 33076, 33077, 33079, 33081, 33082, 33083,
            33084, 33085, 33087, 35881, 33426, 33579, 30450,
            27667, 24537, 33725, 29483, 33541, 38170, 27611,
            30683, 38086, 21359, 33538, 20882, 24125, 35980,
            36152, 20040, 29611, 26522, 26757, 37238, 38665,
            29028, 27809, 30473, 23186, 38209, 27599, 32654,
            26151, 23504, 22969, 23194, 38376, 38391, 20204,
            33804, 33945, 27308, 30431, 38192, 29467, 26790,
            23391, 30511, 37274, 38753, 31964, 36855, 35868,
            24357, 31859, 31192, 35269, 27852, 34588, 23494,
            24130, 26825, 30496, 32501, 20885, 20813, 21193,
            23081, 32517, 38754, 33495, 25551, 30596, 34256,
            31186, 28218, 24217, 22937, 34065, 28781, 27665,
            25279, 30399, 25935, 24751, 38397, 26126, 34719,
            40483, 38125, 21517, 21629, 35884, 25720, 33088,
            33089, 33090, 33091, 33092, 33093, 33095, 33097,
            33101, 33102, 33103, 33106, 33110, 33111, 33112,
            33115, 33116, 33117, 33118, 33119, 33121, 33122,
            33123, 33124, 33126, 33128, 33130, 33131, 33132,
            33135, 33138, 33139, 33141, 33142, 33143, 33144,
            33153, 33155, 33156, 33157, 33158, 33159, 33161,
            33163, 33164, 33165, 33166, 33168, 33170, 33171,
            33172, 33173, 33174, 33175, 33177, 33178, 33182,
            33183, 33184, 33185, 33186, 33188, 33189, 33191,
            33193, 33195, 33196, 33197, 33198, 33199, 33200,
            33201, 33202, 33204, 33205, 33206, 33207, 33208,
            33209, 33212, 33213, 33214, 33215, 33220, 33221,
            33223, 33224, 33225, 33227, 33229, 33230, 33231,
            33232, 33233, 33234, 33235, 25721, 34321, 27169,
            33180, 30952, 25705, 39764, 25273, 26411, 33707,
            22696, 40664, 27819, 28448, 23518, 38476, 35851,
            29279, 26576, 25287, 29281, 20137, 22982, 27597,
            22675, 26286, 24149, 21215, 24917, 26408, 30446,
            30566, 29287, 31302, 25343, 21738, 21584, 38048,
            37027, 23068, 32435, 27670, 20035, 22902, 32784,
            22856, 21335, 30007, 38590, 22218, 25376, 33041,
            24700, 38393, 28118, 21602, 39297, 20869, 23273,
            33021, 22958, 38675, 20522, 27877, 23612, 25311,
            20320, 21311, 33147, 36870, 28346, 34091, 25288,
            24180, 30910, 25781, 25467, 24565, 23064, 37247,
            40479, 23615, 25423, 32834, 23421, 21870, 38218,
            38221, 28037, 24744, 26592, 29406, 20957, 23425,
            33236, 33237, 33238, 33239, 33240, 33241, 33242,
            33243, 33244, 33245, 33246, 33247, 33248, 33249,
            33250, 33252, 33253, 33254, 33256, 33257, 33259,
            33262, 33263, 33264, 33265, 33266, 33269, 33270,
            33271, 33272, 33273, 33274, 33277, 33279, 33283,
            33287, 33288, 33289, 33290, 33291, 33294, 33295,
            33297, 33299, 33301, 33302, 33303, 33304, 33305,
            33306, 33309, 33312, 33316, 33317, 33318, 33319,
            33321, 33326, 33330, 33338, 33340, 33341, 33343,
            33344, 33345, 33346, 33347, 33349, 33350, 33352,
            33354, 33356, 33357, 33358, 33360, 33361, 33362,
            33363, 33364, 33365, 33366, 33367, 33369, 33371,
            33372, 33373, 33374, 33376, 33377, 33378, 33379,
            33380, 33381, 33382, 33383, 33385, 25319, 27870,
            29275, 25197, 38062, 32445, 33043, 27987, 20892,
            24324, 22900, 21162, 24594, 22899, 26262, 34384,
            30111, 25386, 25062, 31983, 35834, 21734, 27431,
            40485, 27572, 34261, 21589, 20598, 27812, 21866,
            36276, 29228, 24085, 24597, 29750, 25293, 25490,
            29260, 24472, 28227, 27966, 25856, 28504, 30424,
            30928, 30460, 30036, 21028, 21467, 20051, 24222,
            26049, 32810, 32982, 25243, 21638, 21032, 28846,
            34957, 36305, 27873, 21624, 32986, 22521, 35060,
            36180, 38506, 37197, 20329, 27803, 21943, 30406,
            30768, 25256, 28921, 28558, 24429, 34028, 26842,
            30844, 31735, 33192, 26379, 40527, 25447, 30896,
            22383, 30738, 38713, 25209, 25259, 21128, 29749,
            27607, 33386, 33387, 33388, 33389, 33393, 33397,
            33398, 33399, 33400, 33403, 33404, 33408, 33409,
            33411, 33413, 33414, 33415, 33417, 33420, 33424,
            33427, 33428, 33429, 33430, 33434, 33435, 33438,
            33440, 33442, 33443, 33447, 33458, 33461, 33462,
            33466, 33467, 33468, 33471, 33472, 33474, 33475,
            33477, 33478, 33481, 33488, 33494, 33497, 33498,
            33501, 33506, 33511, 33512, 33513, 33514, 33516,
            33517, 33518, 33520, 33522, 33523, 33525, 33526,
            33528, 33530, 33532, 33533, 33534, 33535, 33536,
            33546, 33547, 33549, 33552, 33554, 33555, 33558,
            33560, 33561, 33565, 33566, 33567, 33568, 33569,
            33570, 33571, 33572, 33573, 33574, 33577, 33578,
            33582, 33584, 33586, 33591, 33595, 33597, 21860,
            33086, 30130, 30382, 21305, 30174, 20731, 23617,
            35692, 31687, 20559, 29255, 39575, 39128, 28418,
            29922, 31080, 25735, 30629, 25340, 39057, 36139,
            21697, 32856, 20050, 22378, 33529, 33805, 24179,
            20973, 29942, 35780, 23631, 22369, 27900, 39047,
            23110, 30772, 39748, 36843, 31893, 21078, 25169,
            38138, 20166, 33670, 33889, 33769, 33970, 22484,
            26420, 22275, 26222, 28006, 35889, 26333, 28689,
            26399, 27450, 26646, 25114, 22971, 19971, 20932,
            28422, 26578, 27791, 20854, 26827, 22855, 27495,
            30054, 23822, 33040, 40784, 26071, 31048, 31041,
            39569, 36215, 23682, 20062, 20225, 21551, 22865,
            30732, 22120, 27668, 36804, 24323, 27773, 27875,
            35755, 25488, 33598, 33599, 33601, 33602, 33604,
            33605, 33608, 33610, 33611, 33612, 33613, 33614,
            33619, 33621, 33622, 33623, 33624, 33625, 33629,
            33634, 33648, 33649, 33650, 33651, 33652, 33653,
            33654, 33657, 33658, 33662, 33663, 33664, 33665,
            33666, 33667, 33668, 33671, 33672, 33674, 33675,
            33676, 33677, 33679, 33680, 33681, 33684, 33685,
            33686, 33687, 33689, 33690, 33693, 33695, 33697,
            33698, 33699, 33700, 33701, 33702, 33703, 33708,
            33709, 33710, 33711, 33717, 33723, 33726, 33727,
            33730, 33731, 33732, 33734, 33736, 33737, 33739,
            33741, 33742, 33744, 33745, 33746, 33747, 33749,
            33751, 33753, 33754, 33755, 33758, 33762, 33763,
            33764, 33766, 33767, 33768, 33771, 33772, 33773,
            24688, 27965, 29301, 25190, 38030, 38085, 21315,
            36801, 31614, 20191, 35878, 20094, 40660, 38065,
            38067, 21069, 28508, 36963, 27973, 35892, 22545,
            23884, 27424, 27465, 26538, 21595, 33108, 32652,
            22681, 34103, 24378, 25250, 27207, 38201, 25970,
            24708, 26725, 30631, 20052, 20392, 24039, 38808,
            25772, 32728, 23789, 20431, 31373, 20999, 33540,
            19988, 24623, 31363, 38054, 20405, 20146, 31206,
            29748, 21220, 33465, 25810, 31165, 23517, 27777,
            38738, 36731, 27682, 20542, 21375, 28165, 25806,
            26228, 27696, 24773, 39031, 35831, 24198, 29756,
            31351, 31179, 19992, 37041, 29699, 27714, 22234,
            37195, 27845, 36235, 21306, 34502, 26354, 36527,
            23624, 39537, 28192, 33774, 33775, 33779, 33780,
            33781, 33782, 33783, 33786, 33787, 33788, 33790,
            33791, 33792, 33794, 33797, 33799, 33800, 33801,
            33802, 33808, 33810, 33811, 33812, 33813, 33814,
            33815, 33817, 33818, 33819, 33822, 33823, 33824,
            33825, 33826, 33827, 33833, 33834, 33835, 33836,
            33837, 33838, 33839, 33840, 33842, 33843, 33844,
            33845, 33846, 33847, 33849, 33850, 33851, 33854,
            33855, 33856, 33857, 33858, 33859, 33860, 33861,
            33863, 33864, 33865, 33866, 33867, 33868, 33869,
            33870, 33871, 33872, 33874, 33875, 33876, 33877,
            33878, 33880, 33885, 33886, 33887, 33888, 33890,
            33892, 33893, 33894, 33895, 33896, 33898, 33902,
            33903, 33904, 33906, 33908, 33911, 33913, 33915,
            33916, 21462, 23094, 40843, 36259, 21435, 22280,
            39079, 26435, 37275, 27849, 20840, 30154, 25331,
            29356, 21048, 21149, 32570, 28820, 30264, 21364,
            40522, 27063, 30830, 38592, 35033, 32676, 28982,
            29123, 20873, 26579, 29924, 22756, 25880, 22199,
            35753, 39286, 25200, 32469, 24825, 28909, 22764,
            20161, 20154, 24525, 38887, 20219, 35748, 20995,
            22922, 32427, 25172, 20173, 26085, 25102, 33592,
            33993, 33635, 34701, 29076, 28342, 23481, 32466,
            20887, 25545, 26580, 32905, 33593, 34837, 20754,
            23418, 22914, 36785, 20083, 27741, 20837, 35109,
            36719, 38446, 34122, 29790, 38160, 38384, 28070,
            33509, 24369, 25746, 27922, 33832, 33134, 40131,
            22622, 36187, 19977, 21441, 33917, 33918, 33919,
            33920, 33921, 33923, 33924, 33925, 33926, 33930,
            33933, 33935, 33936, 33937, 33938, 33939, 33940,
            33941, 33942, 33944, 33946, 33947, 33949, 33950,
            33951, 33952, 33954, 33955, 33956, 33957, 33958,
            33959, 33960, 33961, 33962, 33963, 33964, 33965,
            33966, 33968, 33969, 33971, 33973, 33974, 33975,
            33979, 33980, 33982, 33984, 33986, 33987, 33989,
            33990, 33991, 33992, 33995, 33996, 33998, 33999,
            34002, 34004, 34005, 34007, 34008, 34009, 34010,
            34011, 34012, 34014, 34017, 34018, 34020, 34023,
            34024, 34025, 34026, 34027, 34029, 34030, 34031,
            34033, 34034, 34035, 34036, 34037, 34038, 34039,
            34040, 34041, 34042, 34043, 34045, 34046, 34048,
            34049, 34050, 20254, 25955, 26705, 21971, 20007,
            25620, 39578, 25195, 23234, 29791, 33394, 28073,
            26862, 20711, 33678, 30722, 26432, 21049, 27801,
            32433, 20667, 21861, 29022, 31579, 26194, 29642,
            33515, 26441, 23665, 21024, 29053, 34923, 38378,
            38485, 25797, 36193, 33203, 21892, 27733, 25159,
            32558, 22674, 20260, 21830, 36175, 26188, 19978,
            23578, 35059, 26786, 25422, 31245, 28903, 33421,
            21242, 38902, 23569, 21736, 37045, 32461, 22882,
            36170, 34503, 33292, 33293, 36198, 25668, 23556,
            24913, 28041, 31038, 35774, 30775, 30003, 21627,
            20280, 36523, 28145, 23072, 32453, 31070, 27784,
            23457, 23158, 29978, 32958, 24910, 28183, 22768,
            29983, 29989, 29298, 21319, 32499, 34051, 34052,
            34053, 34054, 34055, 34056, 34057, 34058, 34059,
            34061, 34062, 34063, 34064, 34066, 34068, 34069,
            34070, 34072, 34073, 34075, 34076, 34077, 34078,
            34080, 34082, 34083, 34084, 34085, 34086, 34087,
            34088, 34089, 34090, 34093, 34094, 34095, 34096,
            34097, 34098, 34099, 34100, 34101, 34102, 34110,
            34111, 34112, 34113, 34114, 34116, 34117, 34118,
            34119, 34123, 34124, 34125, 34126, 34127, 34128,
            34129, 34130, 34131, 34132, 34133, 34135, 34136,
            34138, 34139, 34140, 34141, 34143, 34144, 34145,
            34146, 34147, 34149, 34150, 34151, 34153, 34154,
            34155, 34156, 34157, 34158, 34159, 34160, 34161,
            34163, 34165, 34166, 34167, 34168, 34172, 34173,
            34175, 34176, 34177, 30465, 30427, 21097, 32988,
            22307, 24072, 22833, 29422, 26045, 28287, 35799,
            23608, 34417, 21313, 30707, 25342, 26102, 20160,
            39135, 34432, 23454, 35782, 21490, 30690, 20351,
            23630, 39542, 22987, 24335, 31034, 22763, 19990,
            26623, 20107, 25325, 35475, 36893, 21183, 26159,
            21980, 22124, 36866, 20181, 20365, 37322, 39280,
            27663, 24066, 24643, 23460, 35270, 35797, 25910,
            25163, 39318, 23432, 23551, 25480, 21806, 21463,
            30246, 20861, 34092, 26530, 26803, 27530, 25234,
            36755, 21460, 33298, 28113, 30095, 20070, 36174,
            23408, 29087, 34223, 26257, 26329, 32626, 34560,
            40653, 40736, 23646, 26415, 36848, 26641, 26463,
            25101, 31446, 22661, 24246, 25968, 28465, 34178,
            34179, 34182, 34184, 34185, 34186, 34187, 34188,
            34189, 34190, 34192, 34193, 34194, 34195, 34196,
            34197, 34198, 34199, 34200, 34201, 34202, 34205,
            34206, 34207, 34208, 34209, 34210, 34211, 34213,
            34214, 34215, 34217, 34219, 34220, 34221, 34225,
            34226, 34227, 34228, 34229, 34230, 34232, 34234,
            34235, 34236, 34237, 34238, 34239, 34240, 34242,
            34243, 34244, 34245, 34246, 34247, 34248, 34250,
            34251, 34252, 34253, 34254, 34257, 34258, 34260,
            34262, 34263, 34264, 34265, 34266, 34267, 34269,
            34270, 34271, 34272, 34273, 34274, 34275, 34277,
            34278, 34279, 34280, 34282, 34283, 34284, 34285,
            34286, 34287, 34288, 34289, 34290, 34291, 34292,
            34293, 34294, 34295, 34296, 24661, 21047, 32781,
            25684, 34928, 29993, 24069, 26643, 25332, 38684,
            21452, 29245, 35841, 27700, 30561, 31246, 21550,
            30636, 39034, 33308, 35828, 30805, 26388, 28865,
            26031, 25749, 22070, 24605, 31169, 21496, 19997,
            27515, 32902, 23546, 21987, 22235, 20282, 20284,
            39282, 24051, 26494, 32824, 24578, 39042, 36865,
            23435, 35772, 35829, 25628, 33368, 25822, 22013,
            33487, 37221, 20439, 32032, 36895, 31903, 20723,
            22609, 28335, 23487, 35785, 32899, 37240, 33948,
            31639, 34429, 38539, 38543, 32485, 39635, 30862,
            23681, 31319, 36930, 38567, 31071, 23385, 25439,
            31499, 34001, 26797, 21766, 32553, 29712, 32034,
            38145, 25152, 22604, 20182, 23427, 22905, 22612,
            34297, 34298, 34300, 34301, 34302, 34304, 34305,
            34306, 34307, 34308, 34310, 34311, 34312, 34313,
            34314, 34315, 34316, 34317, 34318, 34319, 34320,
            34322, 34323, 34324, 34325, 34327, 34328, 34329,
            34330, 34331, 34332, 34333, 34334, 34335, 34336,
            34337, 34338, 34339, 34340, 34341, 34342, 34344,
            34346, 34347, 34348, 34349, 34350, 34351, 34352,
            34353, 34354, 34355, 34356, 34357, 34358, 34359,
            34361, 34362, 34363, 34365, 34366, 34367, 34368,
            34369, 34370, 34371, 34372, 34373, 34374, 34375,
            34376, 34377, 34378, 34379, 34380, 34386, 34387,
            34389, 34390, 34391, 34392, 34393, 34395, 34396,
            34397, 34399, 34400, 34401, 34403, 34404, 34405,
            34406, 34407, 34408, 34409, 34410, 29549, 25374,
            36427, 36367, 32974, 33492, 25260, 21488, 27888,
            37214, 22826, 24577, 27760, 22349, 25674, 36138,
            30251, 28393, 22363, 27264, 30192, 28525, 35885,
            35848, 22374, 27631, 34962, 30899, 25506, 21497,
            28845, 27748, 22616, 25642, 22530, 26848, 33179,
            21776, 31958, 20504, 36538, 28108, 36255, 28907,
            25487, 28059, 28372, 32486, 33796, 26691, 36867,
            28120, 38518, 35752, 22871, 29305, 34276, 33150,
            30140, 35466, 26799, 21076, 36386, 38161, 25552,
            39064, 36420, 21884, 20307, 26367, 22159, 24789,
            28053, 21059, 23625, 22825, 28155, 22635, 30000,
            29980, 24684, 33300, 33094, 25361, 26465, 36834,
            30522, 36339, 36148, 38081, 24086, 21381, 21548,
            28867, 34413, 34415, 34416, 34418, 34419, 34420,
            34421, 34422, 34423, 34424, 34435, 34436, 34437,
            34438, 34439, 34440, 34441, 34446, 34447, 34448,
            34449, 34450, 34452, 34454, 34455, 34456, 34457,
            34458, 34459, 34462, 34463, 34464, 34465, 34466,
            34469, 34470, 34475, 34477, 34478, 34482, 34483,
            34487, 34488, 34489, 34491, 34492, 34493, 34494,
            34495, 34497, 34498, 34499, 34501, 34504, 34508,
            34509, 34514, 34515, 34517, 34518, 34519, 34522,
            34524, 34525, 34528, 34529, 34530, 34531, 34533,
            34534, 34535, 34536, 34538, 34539, 34540, 34543,
            34549, 34550, 34551, 34554, 34555, 34556, 34557,
            34559, 34561, 34564, 34565, 34566, 34571, 34572,
            34574, 34575, 34576, 34577, 34580, 34582, 27712,
            24311, 20572, 20141, 24237, 25402, 33351, 36890,
            26704, 37230, 30643, 21516, 38108, 24420, 31461,
            26742, 25413, 31570, 32479, 30171, 20599, 25237,
            22836, 36879, 20984, 31171, 31361, 22270, 24466,
            36884, 28034, 23648, 22303, 21520, 20820, 28237,
            22242, 25512, 39059, 33151, 34581, 35114, 36864,
            21534, 23663, 33216, 25302, 25176, 33073, 40501,
            38464, 39534, 39548, 26925, 22949, 25299, 21822,
            25366, 21703, 34521, 27964, 23043, 29926, 34972,
            27498, 22806, 35916, 24367, 28286, 29609, 39037,
            20024, 28919, 23436, 30871, 25405, 26202, 30358,
            24779, 23451, 23113, 19975, 33109, 27754, 29579,
            20129, 26505, 32593, 24448, 26106, 26395, 24536,
            22916, 23041, 34585, 34587, 34589, 34591, 34592,
            34596, 34598, 34599, 34600, 34602, 34603, 34604,
            34605, 34607, 34608, 34610, 34611, 34613, 34614,
            34616, 34617, 34618, 34620, 34621, 34624, 34625,
            34626, 34627, 34628, 34629, 34630, 34634, 34635,
            34637, 34639, 34640, 34641, 34642, 34644, 34645,
            34646, 34648, 34650, 34651, 34652, 34653, 34654,
            34655, 34657, 34658, 34662, 34663, 34664, 34665,
            34666, 34667, 34668, 34669, 34671, 34673, 34674,
            34675, 34677, 34679, 34680, 34681, 34682, 34687,
            34688, 34689, 34692, 34694, 34695, 34697, 34698,
            34700, 34702, 34703, 34704, 34705, 34706, 34708,
            34709, 34710, 34712, 34713, 34714, 34715, 34716,
            34717, 34718, 34720, 34721, 34722, 34723, 34724,
            24013, 24494, 21361, 38886, 36829, 26693, 22260,
            21807, 24799, 20026, 28493, 32500, 33479, 33806,
            22996, 20255, 20266, 23614, 32428, 26410, 34074,
            21619, 30031, 32963, 21890, 39759, 20301, 28205,
            35859, 23561, 24944, 21355, 30239, 28201, 34442,
            25991, 38395, 32441, 21563, 31283, 32010, 38382,
            21985, 32705, 29934, 25373, 34583, 28065, 31389,
            25105, 26017, 21351, 25569, 27779, 24043, 21596,
            38056, 20044, 27745, 35820, 23627, 26080, 33436,
            26791, 21566, 21556, 27595, 27494, 20116, 25410,
            21320, 33310, 20237, 20398, 22366, 25098, 38654,
            26212, 29289, 21247, 21153, 24735, 35823, 26132,
            29081, 26512, 35199, 30802, 30717, 26224, 22075,
            21560, 38177, 29306, 34725, 34726, 34727, 34729,
            34730, 34734, 34736, 34737, 34738, 34740, 34742,
            34743, 34744, 34745, 34747, 34748, 34750, 34751,
            34753, 34754, 34755, 34756, 34757, 34759, 34760,
            34761, 34764, 34765, 34766, 34767, 34768, 34772,
            34773, 34774, 34775, 34776, 34777, 34778, 34780,
            34781, 34782, 34783, 34785, 34786, 34787, 34788,
            34790, 34791, 34792, 34793, 34795, 34796, 34797,
            34799, 34800, 34801, 34802, 34803, 34804, 34805,
            34806, 34807, 34808, 34810, 34811, 34812, 34813,
            34815, 34816, 34817, 34818, 34820, 34821, 34822,
            34823, 34824, 34825, 34827, 34828, 34829, 34830,
            34831, 34832, 34833, 34834, 34836, 34839, 34840,
            34841, 34842, 34844, 34845, 34846, 34847, 34848,
            34851, 31232, 24687, 24076, 24713, 33181, 22805,
            24796, 29060, 28911, 28330, 27728, 29312, 27268,
            34989, 24109, 20064, 23219, 21916, 38115, 27927,
            31995, 38553, 25103, 32454, 30606, 34430, 21283,
            38686, 36758, 26247, 23777, 20384, 29421, 19979,
            21414, 22799, 21523, 25472, 38184, 20808, 20185,
            40092, 32420, 21688, 36132, 34900, 33335, 38386,
            28046, 24358, 23244, 26174, 38505, 29616, 29486,
            21439, 33146, 39301, 32673, 23466, 38519, 38480,
            32447, 30456, 21410, 38262, 39321, 31665, 35140,
            28248, 20065, 32724, 31077, 35814, 24819, 21709,
            20139, 39033, 24055, 27233, 20687, 21521, 35937,
            33831, 30813, 38660, 21066, 21742, 22179, 38144,
            28040, 23477, 28102, 26195, 34852, 34853, 34854,
            34855, 34856, 34857, 34858, 34859, 34860, 34861,
            34862, 34863, 34864, 34865, 34867, 34868, 34869,
            34870, 34871, 34872, 34874, 34875, 34877, 34878,
            34879, 34881, 34882, 34883, 34886, 34887, 34888,
            34889, 34890, 34891, 34894, 34895, 34896, 34897,
            34898, 34899, 34901, 34902, 34904, 34906, 34907,
            34908, 34909, 34910, 34911, 34912, 34918, 34919,
            34922, 34925, 34927, 34929, 34931, 34932, 34933,
            34934, 34936, 34937, 34938, 34939, 34940, 34944,
            34947, 34950, 34951, 34953, 34954, 34956, 34958,
            34959, 34960, 34961, 34963, 34964, 34965, 34967,
            34968, 34969, 34970, 34971, 34973, 34974, 34975,
            34976, 34977, 34979, 34981, 34982, 34983, 34984,
            34985, 34986, 23567, 23389, 26657, 32918, 21880,
            31505, 25928, 26964, 20123, 27463, 34638, 38795,
            21327, 25375, 25658, 37034, 26012, 32961, 35856,
            20889, 26800, 21368, 34809, 25032, 27844, 27899,
            35874, 23633, 34218, 33455, 38156, 27427, 36763,
            26032, 24571, 24515, 20449, 34885, 26143, 33125,
            29481, 24826, 20852, 21009, 22411, 24418, 37026,
            34892, 37266, 24184, 26447, 24615, 22995, 20804,
            20982, 33016, 21256, 27769, 38596, 29066, 20241,
            20462, 32670, 26429, 21957, 38152, 31168, 34966,
            32483, 22687, 25100, 38656, 34394, 22040, 39035,
            24464, 35768, 33988, 37207, 21465, 26093, 24207,
            30044, 24676, 32110, 23167, 32490, 32493, 36713,
            21927, 23459, 24748, 26059, 29572, 34988, 34990,
            34991, 34992, 34994, 34995, 34996, 34997, 34998,
            35000, 35001, 35002, 35003, 35005, 35006, 35007,
            35008, 35011, 35012, 35015, 35016, 35018, 35019,
            35020, 35021, 35023, 35024, 35025, 35027, 35030,
            35031, 35034, 35035, 35036, 35037, 35038, 35040,
            35041, 35046, 35047, 35049, 35050, 35051, 35052,
            35053, 35054, 35055, 35058, 35061, 35062, 35063,
            35066, 35067, 35069, 35071, 35072, 35073, 35075,
            35076, 35077, 35078, 35079, 35080, 35081, 35083,
            35084, 35085, 35086, 35087, 35089, 35092, 35093,
            35094, 35095, 35096, 35100, 35101, 35102, 35103,
            35104, 35106, 35107, 35108, 35110, 35111, 35112,
            35113, 35116, 35117, 35118, 35119, 35121, 35122,
            35123, 35125, 35127, 36873, 30307, 30505, 32474,
            38772, 34203, 23398, 31348, 38634, 34880, 21195,
            29071, 24490, 26092, 35810, 23547, 39535, 24033,
            27529, 27739, 35757, 35759, 36874, 36805, 21387,
            25276, 40486, 40493, 21568, 20011, 33469, 29273,
            34460, 23830, 34905, 28079, 38597, 21713, 20122,
            35766, 28937, 21693, 38409, 28895, 28153, 30416,
            20005, 30740, 34578, 23721, 24310, 35328, 39068,
            38414, 28814, 27839, 22852, 25513, 30524, 34893,
            28436, 33395, 22576, 29141, 21388, 30746, 38593,
            21761, 24422, 28976, 23476, 35866, 39564, 27523,
            22830, 40495, 31207, 26472, 25196, 20335, 30113,
            32650, 27915, 38451, 27687, 20208, 30162, 20859,
            26679, 28478, 36992, 33136, 22934, 29814, 35128,
            35129, 35130, 35131, 35132, 35133, 35134, 35135,
            35136, 35138, 35139, 35141, 35142, 35143, 35144,
            35145, 35146, 35147, 35148, 35149, 35150, 35151,
            35152, 35153, 35154, 35155, 35156, 35157, 35158,
            35159, 35160, 35161, 35162, 35163, 35164, 35165,
            35168, 35169, 35170, 35171, 35172, 35173, 35175,
            35176, 35177, 35178, 35179, 35180, 35181, 35182,
            35183, 35184, 35185, 35186, 35187, 35188, 35189,
            35190, 35191, 35192, 35193, 35194, 35196, 35197,
            35198, 35200, 35202, 35204, 35205, 35207, 35208,
            35209, 35210, 35211, 35212, 35213, 35214, 35215,
            35216, 35217, 35218, 35219, 35220, 35221, 35222,
            35223, 35224, 35225, 35226, 35227, 35228, 35229,
            35230, 35231, 35232, 35233, 25671, 23591, 36965,
            31377, 35875, 23002, 21676, 33280, 33647, 35201,
            32768, 26928, 22094, 32822, 29239, 37326, 20918,
            20063, 39029, 25494, 19994, 21494, 26355, 33099,
            22812, 28082, 19968, 22777, 21307, 25558, 38129,
            20381, 20234, 34915, 39056, 22839, 36951, 31227,
            20202, 33008, 30097, 27778, 23452, 23016, 24413,
            26885, 34433, 20506, 24050, 20057, 30691, 20197,
            33402, 25233, 26131, 37009, 23673, 20159, 24441,
            33222, 36920, 32900, 30123, 20134, 35028, 24847,
            27589, 24518, 20041, 30410, 28322, 35811, 35758,
            35850, 35793, 24322, 32764, 32716, 32462, 33589,
            33643, 22240, 27575, 38899, 38452, 23035, 21535,
            38134, 28139, 23493, 39278, 23609, 24341, 38544,
            35234, 35235, 35236, 35237, 35238, 35239, 35240,
            35241, 35242, 35243, 35244, 35245, 35246, 35247,
            35248, 35249, 35250, 35251, 35252, 35253, 35254,
            35255, 35256, 35257, 35258, 35259, 35260, 35261,
            35262, 35263, 35264, 35267, 35277, 35283, 35284,
            35285, 35287, 35288, 35289, 35291, 35293, 35295,
            35296, 35297, 35298, 35300, 35303, 35304, 35305,
            35306, 35308, 35309, 35310, 35312, 35313, 35314,
            35316, 35317, 35318, 35319, 35320, 35321, 35322,
            35323, 35324, 35325, 35326, 35327, 35329, 35330,
            35331, 35332, 35333, 35334, 35336, 35337, 35338,
            35339, 35340, 35341, 35342, 35343, 35344, 35345,
            35346, 35347, 35348, 35349, 35350, 35351, 35352,
            35353, 35354, 35355, 35356, 35357, 21360, 33521,
            27185, 23156, 40560, 24212, 32552, 33721, 33828,
            33829, 33639, 34631, 36814, 36194, 30408, 24433,
            39062, 30828, 26144, 21727, 25317, 20323, 33219,
            30152, 24248, 38605, 36362, 34553, 21647, 27891,
            28044, 27704, 24703, 21191, 29992, 24189, 20248,
            24736, 24551, 23588, 30001, 37038, 38080, 29369,
            27833, 28216, 37193, 26377, 21451, 21491, 20305,
            37321, 35825, 21448, 24188, 36802, 28132, 20110,
            30402, 27014, 34398, 24858, 33286, 20313, 20446,
            36926, 40060, 24841, 28189, 28180, 38533, 20104,
            23089, 38632, 19982, 23679, 31161, 23431, 35821,
            32701, 29577, 22495, 33419, 37057, 21505, 36935,
            21947, 23786, 24481, 24840, 27442, 29425, 32946,
            35465, 35358, 35359, 35360, 35361, 35362, 35363,
            35364, 35365, 35366, 35367, 35368, 35369, 35370,
            35371, 35372, 35373, 35374, 35375, 35376, 35377,
            35378, 35379, 35380, 35381, 35382, 35383, 35384,
            35385, 35386, 35387, 35388, 35389, 35391, 35392,
            35393, 35394, 35395, 35396, 35397, 35398, 35399,
            35401, 35402, 35403, 35404, 35405, 35406, 35407,
            35408, 35409, 35410, 35411, 35412, 35413, 35414,
            35415, 35416, 35417, 35418, 35419, 35420, 35421,
            35422, 35423, 35424, 35425, 35426, 35427, 35428,
            35429, 35430, 35431, 35432, 35433, 35434, 35435,
            35436, 35437, 35438, 35439, 35440, 35441, 35442,
            35443, 35444, 35445, 35446, 35447, 35448, 35450,
            35451, 35452, 35453, 35454, 35455, 35456, 28020,
            23507, 35029, 39044, 35947, 39533, 40499, 28170,
            20900, 20803, 22435, 34945, 21407, 25588, 36757,
            22253, 21592, 22278, 29503, 28304, 32536, 36828,
            33489, 24895, 24616, 38498, 26352, 32422, 36234,
            36291, 38053, 23731, 31908, 26376, 24742, 38405,
            32792, 20113, 37095, 21248, 38504, 20801, 36816,
            34164, 37213, 26197, 38901, 23381, 21277, 30776,
            26434, 26685, 21705, 28798, 23472, 36733, 20877,
            22312, 21681, 25874, 26242, 36190, 36163, 33039,
            33900, 36973, 31967, 20991, 34299, 26531, 26089,
            28577, 34468, 36481, 22122, 36896, 30338, 28790,
            29157, 36131, 25321, 21017, 27901, 36156, 24590,
            22686, 24974, 26366, 36192, 25166, 21939, 28195,
            26413, 36711, 35457, 35458, 35459, 35460, 35461,
            35462, 35463, 35464, 35467, 35468, 35469, 35470,
            35471, 35472, 35473, 35474, 35476, 35477, 35478,
            35479, 35480, 35481, 35482, 35483, 35484, 35485,
            35486, 35487, 35488, 35489, 35490, 35491, 35492,
            35493, 35494, 35495, 35496, 35497, 35498, 35499,
            35500, 35501, 35502, 35503, 35504, 35505, 35506,
            35507, 35508, 35509, 35510, 35511, 35512, 35513,
            35514, 35515, 35516, 35517, 35518, 35519, 35520,
            35521, 35522, 35523, 35524, 35525, 35526, 35527,
            35528, 35529, 35530, 35531, 35532, 35533, 35534,
            35535, 35536, 35537, 35538, 35539, 35540, 35541,
            35542, 35543, 35544, 35545, 35546, 35547, 35548,
            35549, 35550, 35551, 35552, 35553, 35554, 35555,
            38113, 38392, 30504, 26629, 27048, 21643, 20045,
            28856, 35784, 25688, 25995, 23429, 31364, 20538,
            23528, 30651, 27617, 35449, 31896, 27838, 30415,
            26025, 36759, 23853, 23637, 34360, 26632, 21344,
            25112, 31449, 28251, 32509, 27167, 31456, 24432,
            28467, 24352, 25484, 28072, 26454, 19976, 24080,
            36134, 20183, 32960, 30260, 38556, 25307, 26157,
            25214, 27836, 36213, 29031, 32617, 20806, 32903,
            21484, 36974, 25240, 21746, 34544, 36761, 32773,
            38167, 34071, 36825, 27993, 29645, 26015, 30495,
            29956, 30759, 33275, 36126, 38024, 20390, 26517,
            30137, 35786, 38663, 25391, 38215, 38453, 33976,
            25379, 30529, 24449, 29424, 20105, 24596, 25972,
            25327, 27491, 25919, 35556, 35557, 35558, 35559,
            35560, 35561, 35562, 35563, 35564, 35565, 35566,
            35567, 35568, 35569, 35570, 35571, 35572, 35573,
            35574, 35575, 35576, 35577, 35578, 35579, 35580,
            35581, 35582, 35583, 35584, 35585, 35586, 35587,
            35588, 35589, 35590, 35592, 35593, 35594, 35595,
            35596, 35597, 35598, 35599, 35600, 35601, 35602,
            35603, 35604, 35605, 35606, 35607, 35608, 35609,
            35610, 35611, 35612, 35613, 35614, 35615, 35616,
            35617, 35618, 35619, 35620, 35621, 35623, 35624,
            35625, 35626, 35627, 35628, 35629, 35630, 35631,
            35632, 35633, 35634, 35635, 35636, 35637, 35638,
            35639, 35640, 35641, 35642, 35643, 35644, 35645,
            35646, 35647, 35648, 35649, 35650, 35651, 35652,
            35653, 24103, 30151, 37073, 35777, 33437, 26525,
            25903, 21553, 34584, 30693, 32930, 33026, 27713,
            20043, 32455, 32844, 30452, 26893, 27542, 25191,
            20540, 20356, 22336, 25351, 27490, 36286, 21482,
            26088, 32440, 24535, 25370, 25527, 33267, 33268,
            32622, 24092, 23769, 21046, 26234, 31209, 31258,
            36136, 28825, 30164, 28382, 27835, 31378, 20013,
            30405, 24544, 38047, 34935, 32456, 31181, 32959,
            37325, 20210, 20247, 33311, 21608, 24030, 27954,
            35788, 31909, 36724, 32920, 24090, 21650, 30385,
            23449, 26172, 39588, 29664, 26666, 34523, 26417,
            29482, 35832, 35803, 36880, 31481, 28891, 29038,
            25284, 30633, 22065, 20027, 33879, 26609, 21161,
            34496, 36142, 38136, 31569, 35654, 35655, 35656,
            35657, 35658, 35659, 35660, 35661, 35662, 35663,
            35664, 35665, 35666, 35667, 35668, 35669, 35670,
            35671, 35672, 35673, 35674, 35675, 35676, 35677,
            35678, 35679, 35680, 35681, 35682, 35683, 35684,
            35685, 35687, 35688, 35689, 35690, 35691, 35693,
            35694, 35695, 35696, 35697, 35698, 35699, 35700,
            35701, 35702, 35703, 35704, 35705, 35706, 35707,
            35708, 35709, 35710, 35711, 35712, 35713, 35714,
            35715, 35716, 35717, 35718, 35719, 35720, 35721,
            35722, 35723, 35724, 35725, 35726, 35727, 35728,
            35729, 35730, 35731, 35732, 35733, 35734, 35735,
            35736, 35737, 35738, 35739, 35740, 35741, 35742,
            35743, 35756, 35761, 35771, 35783, 35792, 35818,
            35849, 35870, 20303, 27880, 31069, 39547, 25235,
            29226, 25341, 19987, 30742, 36716, 25776, 36186,
            31686, 26729, 24196, 35013, 22918, 25758, 22766,
            29366, 26894, 38181, 36861, 36184, 22368, 32512,
            35846, 20934, 25417, 25305, 21331, 26700, 29730,
            33537, 37196, 21828, 30528, 28796, 27978, 20857,
            21672, 36164, 23039, 28363, 28100, 23388, 32043,
            20180, 31869, 28371, 23376, 33258, 28173, 23383,
            39683, 26837, 36394, 23447, 32508, 24635, 32437,
            37049, 36208, 22863, 25549, 31199, 36275, 21330,
            26063, 31062, 35781, 38459, 32452, 38075, 32386,
            22068, 37257, 26368, 32618, 23562, 36981, 26152,
            24038, 20304, 26590, 20570, 20316, 22352, 24231,
            59408, 59409, 59410, 59411, 59412, 35896, 35897,
            35898, 35899, 35900, 35901, 35902, 35903, 35904,
            35906, 35907, 35908, 35909, 35912, 35914, 35915,
            35917, 35918, 35919, 35920, 35921, 35922, 35923,
            35924, 35926, 35927, 35928, 35929, 35931, 35932,
            35933, 35934, 35935, 35936, 35939, 35940, 35941,
            35942, 35943, 35944, 35945, 35948, 35949, 35950,
            35951, 35952, 35953, 35954, 35956, 35957, 35958,
            35959, 35963, 35964, 35965, 35966, 35967, 35968,
            35969, 35971, 35972, 35974, 35975, 35976, 35979,
            35981, 35982, 35983, 35984, 35985, 35986, 35987,
            35989, 35990, 35991, 35993, 35994, 35995, 35996,
            35997, 35998, 35999, 36000, 36001, 36002, 36003,
            36004, 36005, 36006, 36007, 36008, 36009, 36010,
            36011, 36012, 36013, 20109, 19980, 20800, 19984,
            24319, 21317, 19989, 20120, 19998, 39730, 23404,
            22121, 20008, 31162, 20031, 21269, 20039, 22829,
            29243, 21358, 27664, 22239, 32996, 39319, 27603,
            30590, 40727, 20022, 20127, 40720, 20060, 20073,
            20115, 33416, 23387, 21868, 22031, 20164, 21389,
            21405, 21411, 21413, 21422, 38757, 36189, 21274,
            21493, 21286, 21294, 21310, 36188, 21350, 21347,
            20994, 21000, 21006, 21037, 21043, 21055, 21056,
            21068, 21086, 21089, 21084, 33967, 21117, 21122,
            21121, 21136, 21139, 20866, 32596, 20155, 20163,
            20169, 20162, 20200, 20193, 20203, 20190, 20251,
            20211, 20258, 20324, 20213, 20261, 20263, 20233,
            20267, 20318, 20327, 25912, 20314, 20317, 36014,
            36015, 36016, 36017, 36018, 36019, 36020, 36021,
            36022, 36023, 36024, 36025, 36026, 36027, 36028,
            36029, 36030, 36031, 36032, 36033, 36034, 36035,
            36036, 36037, 36038, 36039, 36040, 36041, 36042,
            36043, 36044, 36045, 36046, 36047, 36048, 36049,
            36050, 36051, 36052, 36053, 36054, 36055, 36056,
            36057, 36058, 36059, 36060, 36061, 36062, 36063,
            36064, 36065, 36066, 36067, 36068, 36069, 36070,
            36071, 36072, 36073, 36074, 36075, 36076, 36077,
            36078, 36079, 36080, 36081, 36082, 36083, 36084,
            36085, 36086, 36087, 36088, 36089, 36090, 36091,
            36092, 36093, 36094, 36095, 36096, 36097, 36098,
            36099, 36100, 36101, 36102, 36103, 36104, 36105,
            36106, 36107, 36108, 36109, 20319, 20311, 20274,
            20285, 20342, 20340, 20369, 20361, 20355, 20367,
            20350, 20347, 20394, 20348, 20396, 20372, 20454,
            20456, 20458, 20421, 20442, 20451, 20444, 20433,
            20447, 20472, 20521, 20556, 20467, 20524, 20495,
            20526, 20525, 20478, 20508, 20492, 20517, 20520,
            20606, 20547, 20565, 20552, 20558, 20588, 20603,
            20645, 20647, 20649, 20666, 20694, 20742, 20717,
            20716, 20710, 20718, 20743, 20747, 20189, 27709,
            20312, 20325, 20430, 40864, 27718, 31860, 20846,
            24061, 40649, 39320, 20865, 22804, 21241, 21261,
            35335, 21264, 20971, 22809, 20821, 20128, 20822,
            20147, 34926, 34980, 20149, 33044, 35026, 31104,
            23348, 34819, 32696, 20907, 20913, 20925, 20924,
            36110, 36111, 36112, 36113, 36114, 36115, 36116,
            36117, 36118, 36119, 36120, 36121, 36122, 36123,
            36124, 36128, 36177, 36178, 36183, 36191, 36197,
            36200, 36201, 36202, 36204, 36206, 36207, 36209,
            36210, 36216, 36217, 36218, 36219, 36220, 36221,
            36222, 36223, 36224, 36226, 36227, 36230, 36231,
            36232, 36233, 36236, 36237, 36238, 36239, 36240,
            36242, 36243, 36245, 36246, 36247, 36248, 36249,
            36250, 36251, 36252, 36253, 36254, 36256, 36257,
            36258, 36260, 36261, 36262, 36263, 36264, 36265,
            36266, 36267, 36268, 36269, 36270, 36271, 36272,
            36274, 36278, 36279, 36281, 36283, 36285, 36288,
            36289, 36290, 36293, 36295, 36296, 36297, 36298,
            36301, 36304, 36306, 36307, 36308, 20935, 20886,
            20898, 20901, 35744, 35750, 35751, 35754, 35764,
            35765, 35767, 35778, 35779, 35787, 35791, 35790,
            35794, 35795, 35796, 35798, 35800, 35801, 35804,
            35807, 35808, 35812, 35816, 35817, 35822, 35824,
            35827, 35830, 35833, 35836, 35839, 35840, 35842,
            35844, 35847, 35852, 35855, 35857, 35858, 35860,
            35861, 35862, 35865, 35867, 35864, 35869, 35871,
            35872, 35873, 35877, 35879, 35882, 35883, 35886,
            35887, 35890, 35891, 35893, 35894, 21353, 21370,
            38429, 38434, 38433, 38449, 38442, 38461, 38460,
            38466, 38473, 38484, 38495, 38503, 38508, 38514,
            38516, 38536, 38541, 38551, 38576, 37015, 37019,
            37021, 37017, 37036, 37025, 37044, 37043, 37046,
            37050, 36309, 36312, 36313, 36316, 36320, 36321,
            36322, 36325, 36326, 36327, 36329, 36333, 36334,
            36336, 36337, 36338, 36340, 36342, 36348, 36350,
            36351, 36352, 36353, 36354, 36355, 36356, 36358,
            36359, 36360, 36363, 36365, 36366, 36368, 36369,
            36370, 36371, 36373, 36374, 36375, 36376, 36377,
            36378, 36379, 36380, 36384, 36385, 36388, 36389,
            36390, 36391, 36392, 36395, 36397, 36400, 36402,
            36403, 36404, 36406, 36407, 36408, 36411, 36412,
            36414, 36415, 36419, 36421, 36422, 36428, 36429,
            36430, 36431, 36432, 36435, 36436, 36437, 36438,
            36439, 36440, 36442, 36443, 36444, 36445, 36446,
            36447, 36448, 36449, 36450, 36451, 36452, 36453,
            36455, 36456, 36458, 36459, 36462, 36465, 37048,
            37040, 37071, 37061, 37054, 37072, 37060, 37063,
            37075, 37094, 37090, 37084, 37079, 37083, 37099,
            37103, 37118, 37124, 37154, 37150, 37155, 37169,
            37167, 37177, 37187, 37190, 21005, 22850, 21154,
            21164, 21165, 21182, 21759, 21200, 21206, 21232,
            21471, 29166, 30669, 24308, 20981, 20988, 39727,
            21430, 24321, 30042, 24047, 22348, 22441, 22433,
            22654, 22716, 22725, 22737, 22313, 22316, 22314,
            22323, 22329, 22318, 22319, 22364, 22331, 22338,
            22377, 22405, 22379, 22406, 22396, 22395, 22376,
            22381, 22390, 22387, 22445, 22436, 22412, 22450,
            22479, 22439, 22452, 22419, 22432, 22485, 22488,
            22490, 22489, 22482, 22456, 22516, 22511, 22520,
            22500, 22493, 36467, 36469, 36471, 36472, 36473,
            36474, 36475, 36477, 36478, 36480, 36482, 36483,
            36484, 36486, 36488, 36489, 36490, 36491, 36492,
            36493, 36494, 36497, 36498, 36499, 36501, 36502,
            36503, 36504, 36505, 36506, 36507, 36509, 36511,
            36512, 36513, 36514, 36515, 36516, 36517, 36518,
            36519, 36520, 36521, 36522, 36525, 36526, 36528,
            36529, 36531, 36532, 36533, 36534, 36535, 36536,
            36537, 36539, 36540, 36541, 36542, 36543, 36544,
            36545, 36546, 36547, 36548, 36549, 36550, 36551,
            36552, 36553, 36554, 36555, 36556, 36557, 36559,
            36560, 36561, 36562, 36563, 36564, 36565, 36566,
            36567, 36568, 36569, 36570, 36571, 36572, 36573,
            36574, 36575, 36576, 36577, 36578, 36579, 36580,
            22539, 22541, 22525, 22509, 22528, 22558, 22553,
            22596, 22560, 22629, 22636, 22657, 22665, 22682,
            22656, 39336, 40729, 25087, 33401, 33405, 33407,
            33423, 33418, 33448, 33412, 33422, 33425, 33431,
            33433, 33451, 33464, 33470, 33456, 33480, 33482,
            33507, 33432, 33463, 33454, 33483, 33484, 33473,
            33449, 33460, 33441, 33450, 33439, 33476, 33486,
            33444, 33505, 33545, 33527, 33508, 33551, 33543,
            33500, 33524, 33490, 33496, 33548, 33531, 33491,
            33553, 33562, 33542, 33556, 33557, 33504, 33493,
            33564, 33617, 33627, 33628, 33544, 33682, 33596,
            33588, 33585, 33691, 33630, 33583, 33615, 33607,
            33603, 33631, 33600, 33559, 33632, 33581, 33594,
            33587, 33638, 33637, 36581, 36582, 36583, 36584,
            36585, 36586, 36587, 36588, 36589, 36590, 36591,
            36592, 36593, 36594, 36595, 36596, 36597, 36598,
            36599, 36600, 36601, 36602, 36603, 36604, 36605,
            36606, 36607, 36608, 36609, 36610, 36611, 36612,
            36613, 36614, 36615, 36616, 36617, 36618, 36619,
            36620, 36621, 36622, 36623, 36624, 36625, 36626,
            36627, 36628, 36629, 36630, 36631, 36632, 36633,
            36634, 36635, 36636, 36637, 36638, 36639, 36640,
            36641, 36642, 36643, 36644, 36645, 36646, 36647,
            36648, 36649, 36650, 36651, 36652, 36653, 36654,
            36655, 36656, 36657, 36658, 36659, 36660, 36661,
            36662, 36663, 36664, 36665, 36666, 36667, 36668,
            36669, 36670, 36671, 36672, 36673, 36674, 36675,
            36676, 33640, 33563, 33641, 33644, 33642, 33645,
            33646, 33712, 33656, 33715, 33716, 33696, 33706,
            33683, 33692, 33669, 33660, 33718, 33705, 33661,
            33720, 33659, 33688, 33694, 33704, 33722, 33724,
            33729, 33793, 33765, 33752, 22535, 33816, 33803,
            33757, 33789, 33750, 33820, 33848, 33809, 33798,
            33748, 33759, 33807, 33795, 33784, 33785, 33770,
            33733, 33728, 33830, 33776, 33761, 33884, 33873,
            33882, 33881, 33907, 33927, 33928, 33914, 33929,
            33912, 33852, 33862, 33897, 33910, 33932, 33934,
            33841, 33901, 33985, 33997, 34000, 34022, 33981,
            34003, 33994, 33983, 33978, 34016, 33953, 33977,
            33972, 33943, 34021, 34019, 34060, 29965, 34104,
            34032, 34105, 34079, 34106, 36677, 36678, 36679,
            36680, 36681, 36682, 36683, 36684, 36685, 36686,
            36687, 36688, 36689, 36690, 36691, 36692, 36693,
            36694, 36695, 36696, 36697, 36698, 36699, 36700,
            36701, 36702, 36703, 36704, 36705, 36706, 36707,
            36708, 36709, 36714, 36736, 36748, 36754, 36765,
            36768, 36769, 36770, 36772, 36773, 36774, 36775,
            36778, 36780, 36781, 36782, 36783, 36786, 36787,
            36788, 36789, 36791, 36792, 36794, 36795, 36796,
            36799, 36800, 36803, 36806, 36809, 36810, 36811,
            36812, 36813, 36815, 36818, 36822, 36823, 36826,
            36832, 36833, 36835, 36839, 36844, 36847, 36849,
            36850, 36852, 36853, 36854, 36858, 36859, 36860,
            36862, 36863, 36871, 36872, 36876, 36878, 36883,
            36885, 36888, 34134, 34107, 34047, 34044, 34137,
            34120, 34152, 34148, 34142, 34170, 30626, 34115,
            34162, 34171, 34212, 34216, 34183, 34191, 34169,
            34222, 34204, 34181, 34233, 34231, 34224, 34259,
            34241, 34268, 34303, 34343, 34309, 34345, 34326,
            34364, 24318, 24328, 22844, 22849, 32823, 22869,
            22874, 22872, 21263, 23586, 23589, 23596, 23604,
            25164, 25194, 25247, 25275, 25290, 25306, 25303,
            25326, 25378, 25334, 25401, 25419, 25411, 25517,
            25590, 25457, 25466, 25486, 25524, 25453, 25516,
            25482, 25449, 25518, 25532, 25586, 25592, 25568,
            25599, 25540, 25566, 25550, 25682, 25542, 25534,
            25669, 25665, 25611, 25627, 25632, 25612, 25638,
            25633, 25694, 25732, 25709, 25750, 36889, 36892,
            36899, 36900, 36901, 36903, 36904, 36905, 36906,
            36907, 36908, 36912, 36913, 36914, 36915, 36916,
            36919, 36921, 36922, 36925, 36927, 36928, 36931,
            36933, 36934, 36936, 36937, 36938, 36939, 36940,
            36942, 36948, 36949, 36950, 36953, 36954, 36956,
            36957, 36958, 36959, 36960, 36961, 36964, 36966,
            36967, 36969, 36970, 36971, 36972, 36975, 36976,
            36977, 36978, 36979, 36982, 36983, 36984, 36985,
            36986, 36987, 36988, 36990, 36993, 36996, 36997,
            36998, 36999, 37001, 37002, 37004, 37005, 37006,
            37007, 37008, 37010, 37012, 37014, 37016, 37018,
            37020, 37022, 37023, 37024, 37028, 37029, 37031,
            37032, 37033, 37035, 37037, 37042, 37047, 37052,
            37053, 37055, 37056, 25722, 25783, 25784, 25753,
            25786, 25792, 25808, 25815, 25828, 25826, 25865,
            25893, 25902, 24331, 24530, 29977, 24337, 21343,
            21489, 21501, 21481, 21480, 21499, 21522, 21526,
            21510, 21579, 21586, 21587, 21588, 21590, 21571,
            21537, 21591, 21593, 21539, 21554, 21634, 21652,
            21623, 21617, 21604, 21658, 21659, 21636, 21622,
            21606, 21661, 21712, 21677, 21698, 21684, 21714,
            21671, 21670, 21715, 21716, 21618, 21667, 21717,
            21691, 21695, 21708, 21721, 21722, 21724, 21673,
            21674, 21668, 21725, 21711, 21726, 21787, 21735,
            21792, 21757, 21780, 21747, 21794, 21795, 21775,
            21777, 21799, 21802, 21863, 21903, 21941, 21833,
            21869, 21825, 21845, 21823, 21840, 21820, 37058,
            37059, 37062, 37064, 37065, 37067, 37068, 37069,
            37074, 37076, 37077, 37078, 37080, 37081, 37082,
            37086, 37087, 37088, 37091, 37092, 37093, 37097,
            37098, 37100, 37102, 37104, 37105, 37106, 37107,
            37109, 37110, 37111, 37113, 37114, 37115, 37116,
            37119, 37120, 37121, 37123, 37125, 37126, 37127,
            37128, 37129, 37130, 37131, 37132, 37133, 37134,
            37135, 37136, 37137, 37138, 37139, 37140, 37141,
            37142, 37143, 37144, 37146, 37147, 37148, 37149,
            37151, 37152, 37153, 37156, 37157, 37158, 37159,
            37160, 37161, 37162, 37163, 37164, 37165, 37166,
            37168, 37170, 37171, 37172, 37173, 37174, 37175,
            37176, 37178, 37179, 37180, 37181, 37182, 37183,
            37184, 37185, 37186, 37188, 21815, 21846, 21877,
            21878, 21879, 21811, 21808, 21852, 21899, 21970,
            21891, 21937, 21945, 21896, 21889, 21919, 21886,
            21974, 21905, 21883, 21983, 21949, 21950, 21908,
            21913, 21994, 22007, 21961, 22047, 21969, 21995,
            21996, 21972, 21990, 21981, 21956, 21999, 21989,
            22002, 22003, 21964, 21965, 21992, 22005, 21988,
            36756, 22046, 22024, 22028, 22017, 22052, 22051,
            22014, 22016, 22055, 22061, 22104, 22073, 22103,
            22060, 22093, 22114, 22105, 22108, 22092, 22100,
            22150, 22116, 22129, 22123, 22139, 22140, 22149,
            22163, 22191, 22228, 22231, 22237, 22241, 22261,
            22251, 22265, 22271, 22276, 22282, 22281, 22300,
            24079, 24089, 24084, 24081, 24113, 24123, 24124,
            37189, 37191, 37192, 37201, 37203, 37204, 37205,
            37206, 37208, 37209, 37211, 37212, 37215, 37216,
            37222, 37223, 37224, 37227, 37229, 37235, 37242,
            37243, 37244, 37248, 37249, 37250, 37251, 37252,
            37254, 37256, 37258, 37262, 37263, 37267, 37268,
            37269, 37270, 37271, 37272, 37273, 37276, 37277,
            37278, 37279, 37280, 37281, 37284, 37285, 37286,
            37287, 37288, 37289, 37291, 37292, 37296, 37297,
            37298, 37299, 37302, 37303, 37304, 37305, 37307,
            37308, 37309, 37310, 37311, 37312, 37313, 37314,
            37315, 37316, 37317, 37318, 37320, 37323, 37328,
            37330, 37331, 37332, 37333, 37334, 37335, 37336,
            37337, 37338, 37339, 37341, 37342, 37343, 37344,
            37345, 37346, 37347, 37348, 37349, 24119, 24132,
            24148, 24155, 24158, 24161, 23692, 23674, 23693,
            23696, 23702, 23688, 23704, 23705, 23697, 23706,
            23708, 23733, 23714, 23741, 23724, 23723, 23729,
            23715, 23745, 23735, 23748, 23762, 23780, 23755,
            23781, 23810, 23811, 23847, 23846, 23854, 23844,
            23838, 23814, 23835, 23896, 23870, 23860, 23869,
            23916, 23899, 23919, 23901, 23915, 23883, 23882,
            23913, 23924, 23938, 23961, 23965, 35955, 23991,
            24005, 24435, 24439, 24450, 24455, 24457, 24460,
            24469, 24473, 24476, 24488, 24493, 24501, 24508,
            34914, 24417, 29357, 29360, 29364, 29367, 29368,
            29379, 29377, 29390, 29389, 29394, 29416, 29423,
            29417, 29426, 29428, 29431, 29441, 29427, 29443,
            29434, 37350, 37351, 37352, 37353, 37354, 37355,
            37356, 37357, 37358, 37359, 37360, 37361, 37362,
            37363, 37364, 37365, 37366, 37367, 37368, 37369,
            37370, 37371, 37372, 37373, 37374, 37375, 37376,
            37377, 37378, 37379, 37380, 37381, 37382, 37383,
            37384, 37385, 37386, 37387, 37388, 37389, 37390,
            37391, 37392, 37393, 37394, 37395, 37396, 37397,
            37398, 37399, 37400, 37401, 37402, 37403, 37404,
            37405, 37406, 37407, 37408, 37409, 37410, 37411,
            37412, 37413, 37414, 37415, 37416, 37417, 37418,
            37419, 37420, 37421, 37422, 37423, 37424, 37425,
            37426, 37427, 37428, 37429, 37430, 37431, 37432,
            37433, 37434, 37435, 37436, 37437, 37438, 37439,
            37440, 37441, 37442, 37443, 37444, 37445, 29435,
            29463, 29459, 29473, 29450, 29470, 29469, 29461,
            29474, 29497, 29477, 29484, 29496, 29489, 29520,
            29517, 29527, 29536, 29548, 29551, 29566, 33307,
            22821, 39143, 22820, 22786, 39267, 39271, 39272,
            39273, 39274, 39275, 39276, 39284, 39287, 39293,
            39296, 39300, 39303, 39306, 39309, 39312, 39313,
            39315, 39316, 39317, 24192, 24209, 24203, 24214,
            24229, 24224, 24249, 24245, 24254, 24243, 36179,
            24274, 24273, 24283, 24296, 24298, 33210, 24516,
            24521, 24534, 24527, 24579, 24558, 24580, 24545,
            24548, 24574, 24581, 24582, 24554, 24557, 24568,
            24601, 24629, 24614, 24603, 24591, 24589, 24617,
            24619, 24586, 24639, 24609, 24696, 24697, 24699,
            24698, 24642, 37446, 37447, 37448, 37449, 37450,
            37451, 37452, 37453, 37454, 37455, 37456, 37457,
            37458, 37459, 37460, 37461, 37462, 37463, 37464,
            37465, 37466, 37467, 37468, 37469, 37470, 37471,
            37472, 37473, 37474, 37475, 37476, 37477, 37478,
            37479, 37480, 37481, 37482, 37483, 37484, 37485,
            37486, 37487, 37488, 37489, 37490, 37491, 37493,
            37494, 37495, 37496, 37497, 37498, 37499, 37500,
            37501, 37502, 37503, 37504, 37505, 37506, 37507,
            37508, 37509, 37510, 37511, 37512, 37513, 37514,
            37515, 37516, 37517, 37519, 37520, 37521, 37522,
            37523, 37524, 37525, 37526, 37527, 37528, 37529,
            37530, 37531, 37532, 37533, 37534, 37535, 37536,
            37537, 37538, 37539, 37540, 37541, 37542, 37543,
            24682, 24701, 24726, 24730, 24749, 24733, 24707,
            24722, 24716, 24731, 24812, 24763, 24753, 24797,
            24792, 24774, 24794, 24756, 24864, 24870, 24853,
            24867, 24820, 24832, 24846, 24875, 24906, 24949,
            25004, 24980, 24999, 25015, 25044, 25077, 24541,
            38579, 38377, 38379, 38385, 38387, 38389, 38390,
            38396, 38398, 38403, 38404, 38406, 38408, 38410,
            38411, 38412, 38413, 38415, 38418, 38421, 38422,
            38423, 38425, 38426, 20012, 29247, 25109, 27701,
            27732, 27740, 27722, 27811, 27781, 27792, 27796,
            27788, 27752, 27753, 27764, 27766, 27782, 27817,
            27856, 27860, 27821, 27895, 27896, 27889, 27863,
            27826, 27872, 27862, 27898, 27883, 27886, 27825,
            27859, 27887, 27902, 37544, 37545, 37546, 37547,
            37548, 37549, 37551, 37552, 37553, 37554, 37555,
            37556, 37557, 37558, 37559, 37560, 37561, 37562,
            37563, 37564, 37565, 37566, 37567, 37568, 37569,
            37570, 37571, 37572, 37573, 37574, 37575, 37577,
            37578, 37579, 37580, 37581, 37582, 37583, 37584,
            37585, 37586, 37587, 37588, 37589, 37590, 37591,
            37592, 37593, 37594, 37595, 37596, 37597, 37598,
            37599, 37600, 37601, 37602, 37603, 37604, 37605,
            37606, 37607, 37608, 37609, 37610, 37611, 37612,
            37613, 37614, 37615, 37616, 37617, 37618, 37619,
            37620, 37621, 37622, 37623, 37624, 37625, 37626,
            37627, 37628, 37629, 37630, 37631, 37632, 37633,
            37634, 37635, 37636, 37637, 37638, 37639, 37640,
            37641, 27961, 27943, 27916, 27971, 27976, 27911,
            27908, 27929, 27918, 27947, 27981, 27950, 27957,
            27930, 27983, 27986, 27988, 27955, 28049, 28015,
            28062, 28064, 27998, 28051, 28052, 27996, 28000,
            28028, 28003, 28186, 28103, 28101, 28126, 28174,
            28095, 28128, 28177, 28134, 28125, 28121, 28182,
            28075, 28172, 28078, 28203, 28270, 28238, 28267,
            28338, 28255, 28294, 28243, 28244, 28210, 28197,
            28228, 28383, 28337, 28312, 28384, 28461, 28386,
            28325, 28327, 28349, 28347, 28343, 28375, 28340,
            28367, 28303, 28354, 28319, 28514, 28486, 28487,
            28452, 28437, 28409, 28463, 28470, 28491, 28532,
            28458, 28425, 28457, 28553, 28557, 28556, 28536,
            28530, 28540, 28538, 28625, 37642, 37643, 37644,
            37645, 37646, 37647, 37648, 37649, 37650, 37651,
            37652, 37653, 37654, 37655, 37656, 37657, 37658,
            37659, 37660, 37661, 37662, 37663, 37664, 37665,
            37666, 37667, 37668, 37669, 37670, 37671, 37672,
            37673, 37674, 37675, 37676, 37677, 37678, 37679,
            37680, 37681, 37682, 37683, 37684, 37685, 37686,
            37687, 37688, 37689, 37690, 37691, 37692, 37693,
            37695, 37696, 37697, 37698, 37699, 37700, 37701,
            37702, 37703, 37704, 37705, 37706, 37707, 37708,
            37709, 37710, 37711, 37712, 37713, 37714, 37715,
            37716, 37717, 37718, 37719, 37720, 37721, 37722,
            37723, 37724, 37725, 37726, 37727, 37728, 37729,
            37730, 37731, 37732, 37733, 37734, 37735, 37736,
            37737, 37739, 28617, 28583, 28601, 28598, 28610,
            28641, 28654, 28638, 28640, 28655, 28698, 28707,
            28699, 28729, 28725, 28751, 28766, 23424, 23428,
            23445, 23443, 23461, 23480, 29999, 39582, 25652,
            23524, 23534, 35120, 23536, 36423, 35591, 36790,
            36819, 36821, 36837, 36846, 36836, 36841, 36838,
            36851, 36840, 36869, 36868, 36875, 36902, 36881,
            36877, 36886, 36897, 36917, 36918, 36909, 36911,
            36932, 36945, 36946, 36944, 36968, 36952, 36962,
            36955, 26297, 36980, 36989, 36994, 37000, 36995,
            37003, 24400, 24407, 24406, 24408, 23611, 21675,
            23632, 23641, 23409, 23651, 23654, 32700, 24362,
            24361, 24365, 33396, 24380, 39739, 23662, 22913,
            22915, 22925, 22953, 22954, 22947, 37740, 37741,
            37742, 37743, 37744, 37745, 37746, 37747, 37748,
            37749, 37750, 37751, 37752, 37753, 37754, 37755,
            37756, 37757, 37758, 37759, 37760, 37761, 37762,
            37763, 37764, 37765, 37766, 37767, 37768, 37769,
            37770, 37771, 37772, 37773, 37774, 37776, 37777,
            37778, 37779, 37780, 37781, 37782, 37783, 37784,
            37785, 37786, 37787, 37788, 37789, 37790, 37791,
            37792, 37793, 37794, 37795, 37796, 37797, 37798,
            37799, 37800, 37801, 37802, 37803, 37804, 37805,
            37806, 37807, 37808, 37809, 37810, 37811, 37812,
            37813, 37814, 37815, 37816, 37817, 37818, 37819,
            37820, 37821, 37822, 37823, 37824, 37825, 37826,
            37827, 37828, 37829, 37830, 37831, 37832, 37833,
            37835, 37836, 37837, 22935, 22986, 22955, 22942,
            22948, 22994, 22962, 22959, 22999, 22974, 23045,
            23046, 23005, 23048, 23011, 23000, 23033, 23052,
            23049, 23090, 23092, 23057, 23075, 23059, 23104,
            23143, 23114, 23125, 23100, 23138, 23157, 33004,
            23210, 23195, 23159, 23162, 23230, 23275, 23218,
            23250, 23252, 23224, 23264, 23267, 23281, 23254,
            23270, 23256, 23260, 23305, 23319, 23318, 23346,
            23351, 23360, 23573, 23580, 23386, 23397, 23411,
            23377, 23379, 23394, 39541, 39543, 39544, 39546,
            39551, 39549, 39552, 39553, 39557, 39560, 39562,
            39568, 39570, 39571, 39574, 39576, 39579, 39580,
            39581, 39583, 39584, 39586, 39587, 39589, 39591,
            32415, 32417, 32419, 32421, 32424, 32425, 37838,
            37839, 37840, 37841, 37842, 37843, 37844, 37845,
            37847, 37848, 37849, 37850, 37851, 37852, 37853,
            37854, 37855, 37856, 37857, 37858, 37859, 37860,
            37861, 37862, 37863, 37864, 37865, 37866, 37867,
            37868, 37869, 37870, 37871, 37872, 37873, 37874,
            37875, 37876, 37877, 37878, 37879, 37880, 37881,
            37882, 37883, 37884, 37885, 37886, 37887, 37888,
            37889, 37890, 37891, 37892, 37893, 37894, 37895,
            37896, 37897, 37898, 37899, 37900, 37901, 37902,
            37903, 37904, 37905, 37906, 37907, 37908, 37909,
            37910, 37911, 37912, 37913, 37914, 37915, 37916,
            37917, 37918, 37919, 37920, 37921, 37922, 37923,
            37924, 37925, 37926, 37927, 37928, 37929, 37930,
            37931, 37932, 37933, 37934, 32429, 32432, 32446,
            32448, 32449, 32450, 32457, 32459, 32460, 32464,
            32468, 32471, 32475, 32480, 32481, 32488, 32491,
            32494, 32495, 32497, 32498, 32525, 32502, 32506,
            32507, 32510, 32513, 32514, 32515, 32519, 32520,
            32523, 32524, 32527, 32529, 32530, 32535, 32537,
            32540, 32539, 32543, 32545, 32546, 32547, 32548,
            32549, 32550, 32551, 32554, 32555, 32556, 32557,
            32559, 32560, 32561, 32562, 32563, 32565, 24186,
            30079, 24027, 30014, 37013, 29582, 29585, 29614,
            29602, 29599, 29647, 29634, 29649, 29623, 29619,
            29632, 29641, 29640, 29669, 29657, 39036, 29706,
            29673, 29671, 29662, 29626, 29682, 29711, 29738,
            29787, 29734, 29733, 29736, 29744, 29742, 29740,
            37935, 37936, 37937, 37938, 37939, 37940, 37941,
            37942, 37943, 37944, 37945, 37946, 37947, 37948,
            37949, 37951, 37952, 37953, 37954, 37955, 37956,
            37957, 37958, 37959, 37960, 37961, 37962, 37963,
            37964, 37965, 37966, 37967, 37968, 37969, 37970,
            37971, 37972, 37973, 37974, 37975, 37976, 37977,
            37978, 37979, 37980, 37981, 37982, 37983, 37984,
            37985, 37986, 37987, 37988, 37989, 37990, 37991,
            37992, 37993, 37994, 37996, 37997, 37998, 37999,
            38000, 38001, 38002, 38003, 38004, 38005, 38006,
            38007, 38008, 38009, 38010, 38011, 38012, 38013,
            38014, 38015, 38016, 38017, 38018, 38019, 38020,
            38033, 38038, 38040, 38087, 38095, 38099, 38100,
            38106, 38118, 38139, 38172, 38176, 29723, 29722,
            29761, 29788, 29783, 29781, 29785, 29815, 29805,
            29822, 29852, 29838, 29824, 29825, 29831, 29835,
            29854, 29864, 29865, 29840, 29863, 29906, 29882,
            38890, 38891, 38892, 26444, 26451, 26462, 26440,
            26473, 26533, 26503, 26474, 26483, 26520, 26535,
            26485, 26536, 26526, 26541, 26507, 26487, 26492,
            26608, 26633, 26584, 26634, 26601, 26544, 26636,
            26585, 26549, 26586, 26547, 26589, 26624, 26563,
            26552, 26594, 26638, 26561, 26621, 26674, 26675,
            26720, 26721, 26702, 26722, 26692, 26724, 26755,
            26653, 26709, 26726, 26689, 26727, 26688, 26686,
            26698, 26697, 26665, 26805, 26767, 26740, 26743,
            26771, 26731, 26818, 26990, 26876, 26911, 26912,
            26873, 38183, 38195, 38205, 38211, 38216, 38219,
            38229, 38234, 38240, 38254, 38260, 38261, 38263,
            38264, 38265, 38266, 38267, 38268, 38269, 38270,
            38272, 38273, 38274, 38275, 38276, 38277, 38278,
            38279, 38280, 38281, 38282, 38283, 38284, 38285,
            38286, 38287, 38288, 38289, 38290, 38291, 38292,
            38293, 38294, 38295, 38296, 38297, 38298, 38299,
            38300, 38301, 38302, 38303, 38304, 38305, 38306,
            38307, 38308, 38309, 38310, 38311, 38312, 38313,
            38314, 38315, 38316, 38317, 38318, 38319, 38320,
            38321, 38322, 38323, 38324, 38325, 38326, 38327,
            38328, 38329, 38330, 38331, 38332, 38333, 38334,
            38335, 38336, 38337, 38338, 38339, 38340, 38341,
            38342, 38343, 38344, 38345, 38346, 38347, 26916,
            26864, 26891, 26881, 26967, 26851, 26896, 26993,
            26937, 26976, 26946, 26973, 27012, 26987, 27008,
            27032, 27000, 26932, 27084, 27015, 27016, 27086,
            27017, 26982, 26979, 27001, 27035, 27047, 27067,
            27051, 27053, 27092, 27057, 27073, 27082, 27103,
            27029, 27104, 27021, 27135, 27183, 27117, 27159,
            27160, 27237, 27122, 27204, 27198, 27296, 27216,
            27227, 27189, 27278, 27257, 27197, 27176, 27224,
            27260, 27281, 27280, 27305, 27287, 27307, 29495,
            29522, 27521, 27522, 27527, 27524, 27538, 27539,
            27533, 27546, 27547, 27553, 27562, 36715, 36717,
            36721, 36722, 36723, 36725, 36726, 36728, 36727,
            36729, 36730, 36732, 36734, 36737, 36738, 36740,
            36743, 36747, 38348, 38349, 38350, 38351, 38352,
            38353, 38354, 38355, 38356, 38357, 38358, 38359,
            38360, 38361, 38362, 38363, 38364, 38365, 38366,
            38367, 38368, 38369, 38370, 38371, 38372, 38373,
            38374, 38375, 38380, 38399, 38407, 38419, 38424,
            38427, 38430, 38432, 38435, 38436, 38437, 38438,
            38439, 38440, 38441, 38443, 38444, 38445, 38447,
            38448, 38455, 38456, 38457, 38458, 38462, 38465,
            38467, 38474, 38478, 38479, 38481, 38482, 38483,
            38486, 38487, 38488, 38489, 38490, 38492, 38493,
            38494, 38496, 38499, 38501, 38502, 38507, 38509,
            38510, 38511, 38512, 38513, 38515, 38520, 38521,
            38522, 38523, 38524, 38525, 38526, 38527, 38528,
            38529, 38530, 38531, 38532, 38535, 38537, 38538,
            36749, 36750, 36751, 36760, 36762, 36558, 25099,
            25111, 25115, 25119, 25122, 25121, 25125, 25124,
            25132, 33255, 29935, 29940, 29951, 29967, 29969,
            29971, 25908, 26094, 26095, 26096, 26122, 26137,
            26482, 26115, 26133, 26112, 28805, 26359, 26141,
            26164, 26161, 26166, 26165, 32774, 26207, 26196,
            26177, 26191, 26198, 26209, 26199, 26231, 26244,
            26252, 26279, 26269, 26302, 26331, 26332, 26342,
            26345, 36146, 36147, 36150, 36155, 36157, 36160,
            36165, 36166, 36168, 36169, 36167, 36173, 36181,
            36185, 35271, 35274, 35275, 35276, 35278, 35279,
            35280, 35281, 29294, 29343, 29277, 29286, 29295,
            29310, 29311, 29316, 29323, 29325, 29327, 29330,
            25352, 25394, 25520, 38540, 38542, 38545, 38546,
            38547, 38549, 38550, 38554, 38555, 38557, 38558,
            38559, 38560, 38561, 38562, 38563, 38564, 38565,
            38566, 38568, 38569, 38570, 38571, 38572, 38573,
            38574, 38575, 38577, 38578, 38580, 38581, 38583,
            38584, 38586, 38587, 38591, 38594, 38595, 38600,
            38602, 38603, 38608, 38609, 38611, 38612, 38614,
            38615, 38616, 38617, 38618, 38619, 38620, 38621,
            38622, 38623, 38625, 38626, 38627, 38628, 38629,
            38630, 38631, 38635, 38636, 38637, 38638, 38640,
            38641, 38642, 38644, 38645, 38648, 38650, 38651,
            38652, 38653, 38655, 38658, 38659, 38661, 38666,
            38667, 38668, 38672, 38673, 38674, 38676, 38677,
            38679, 38680, 38681, 38682, 38683, 38685, 38687,
            38688, 25663, 25816, 32772, 27626, 27635, 27645,
            27637, 27641, 27653, 27655, 27654, 27661, 27669,
            27672, 27673, 27674, 27681, 27689, 27684, 27690,
            27698, 25909, 25941, 25963, 29261, 29266, 29270,
            29232, 34402, 21014, 32927, 32924, 32915, 32956,
            26378, 32957, 32945, 32939, 32941, 32948, 32951,
            32999, 33000, 33001, 33002, 32987, 32962, 32964,
            32985, 32973, 32983, 26384, 32989, 33003, 33009,
            33012, 33005, 33037, 33038, 33010, 33020, 26389,
            33042, 35930, 33078, 33054, 33068, 33048, 33074,
            33096, 33100, 33107, 33140, 33113, 33114, 33137,
            33120, 33129, 33148, 33149, 33133, 33127, 22605,
            23221, 33160, 33154, 33169, 28373, 33187, 33194,
            33228, 26406, 33226, 33211, 38689, 38690, 38691,
            38692, 38693, 38694, 38695, 38696, 38697, 38699,
            38700, 38702, 38703, 38705, 38707, 38708, 38709,
            38710, 38711, 38714, 38715, 38716, 38717, 38719,
            38720, 38721, 38722, 38723, 38724, 38725, 38726,
            38727, 38728, 38729, 38730, 38731, 38732, 38733,
            38734, 38735, 38736, 38737, 38740, 38741, 38743,
            38744, 38746, 38748, 38749, 38751, 38755, 38756,
            38758, 38759, 38760, 38762, 38763, 38764, 38765,
            38766, 38767, 38768, 38769, 38770, 38773, 38775,
            38776, 38777, 38778, 38779, 38781, 38782, 38783,
            38784, 38785, 38786, 38787, 38788, 38790, 38791,
            38792, 38793, 38794, 38796, 38798, 38799, 38800,
            38803, 38805, 38806, 38807, 38809, 38810, 38811,
            38812, 38813, 33217, 33190, 27428, 27447, 27449,
            27459, 27462, 27481, 39121, 39122, 39123, 39125,
            39129, 39130, 27571, 24384, 27586, 35315, 26000,
            40785, 26003, 26044, 26054, 26052, 26051, 26060,
            26062, 26066, 26070, 28800, 28828, 28822, 28829,
            28859, 28864, 28855, 28843, 28849, 28904, 28874,
            28944, 28947, 28950, 28975, 28977, 29043, 29020,
            29032, 28997, 29042, 29002, 29048, 29050, 29080,
            29107, 29109, 29096, 29088, 29152, 29140, 29159,
            29177, 29213, 29224, 28780, 28952, 29030, 29113,
            25150, 25149, 25155, 25160, 25161, 31035, 31040,
            31046, 31049, 31067, 31068, 31059, 31066, 31074,
            31063, 31072, 31087, 31079, 31098, 31109, 31114,
            31130, 31143, 31155, 24529, 24528, 38814, 38815,
            38817, 38818, 38820, 38821, 38822, 38823, 38824,
            38825, 38826, 38828, 38830, 38832, 38833, 38835,
            38837, 38838, 38839, 38840, 38841, 38842, 38843,
            38844, 38845, 38846, 38847, 38848, 38849, 38850,
            38851, 38852, 38853, 38854, 38855, 38856, 38857,
            38858, 38859, 38860, 38861, 38862, 38863, 38864,
            38865, 38866, 38867, 38868, 38869, 38870, 38871,
            38872, 38873, 38874, 38875, 38876, 38877, 38878,
            38879, 38880, 38881, 38882, 38883, 38884, 38885,
            38888, 38894, 38895, 38896, 38897, 38898, 38900,
            38903, 38904, 38905, 38906, 38907, 38908, 38909,
            38910, 38911, 38912, 38913, 38914, 38915, 38916,
            38917, 38918, 38919, 38920, 38921, 38922, 38923,
            38924, 38925, 38926, 24636, 24669, 24666, 24679,
            24641, 24665, 24675, 24747, 24838, 24845, 24925,
            25001, 24989, 25035, 25041, 25094, 32896, 32895,
            27795, 27894, 28156, 30710, 30712, 30720, 30729,
            30743, 30744, 30737, 26027, 30765, 30748, 30749,
            30777, 30778, 30779, 30751, 30780, 30757, 30764,
            30755, 30761, 30798, 30829, 30806, 30807, 30758,
            30800, 30791, 30796, 30826, 30875, 30867, 30874,
            30855, 30876, 30881, 30883, 30898, 30905, 30885,
            30932, 30937, 30921, 30956, 30962, 30981, 30964,
            30995, 31012, 31006, 31028, 40859, 40697, 40699,
            40700, 30449, 30468, 30477, 30457, 30471, 30472,
            30490, 30498, 30489, 30509, 30502, 30517, 30520,
            30544, 30545, 30535, 30531, 30554, 30568, 38927,
            38928, 38929, 38930, 38931, 38932, 38933, 38934,
            38935, 38936, 38937, 38938, 38939, 38940, 38941,
            38942, 38943, 38944, 38945, 38946, 38947, 38948,
            38949, 38950, 38951, 38952, 38953, 38954, 38955,
            38956, 38957, 38958, 38959, 38960, 38961, 38962,
            38963, 38964, 38965, 38966, 38967, 38968, 38969,
            38970, 38971, 38972, 38973, 38974, 38975, 38976,
            38977, 38978, 38979, 38980, 38981, 38982, 38983,
            38984, 38985, 38986, 38987, 38988, 38989, 38990,
            38991, 38992, 38993, 38994, 38995, 38996, 38997,
            38998, 38999, 39000, 39001, 39002, 39003, 39004,
            39005, 39006, 39007, 39008, 39009, 39010, 39011,
            39012, 39013, 39014, 39015, 39016, 39017, 39018,
            39019, 39020, 39021, 39022, 30562, 30565, 30591,
            30605, 30589, 30592, 30604, 30609, 30623, 30624,
            30640, 30645, 30653, 30010, 30016, 30030, 30027,
            30024, 30043, 30066, 30073, 30083, 32600, 32609,
            32607, 35400, 32616, 32628, 32625, 32633, 32641,
            32638, 30413, 30437, 34866, 38021, 38022, 38023,
            38027, 38026, 38028, 38029, 38031, 38032, 38036,
            38039, 38037, 38042, 38043, 38044, 38051, 38052,
            38059, 38058, 38061, 38060, 38063, 38064, 38066,
            38068, 38070, 38071, 38072, 38073, 38074, 38076,
            38077, 38079, 38084, 38088, 38089, 38090, 38091,
            38092, 38093, 38094, 38096, 38097, 38098, 38101,
            38102, 38103, 38105, 38104, 38107, 38110, 38111,
            38112, 38114, 38116, 38117, 38119, 38120, 38122,
            39023, 39024, 39025, 39026, 39027, 39028, 39051,
            39054, 39058, 39061, 39065, 39075, 39080, 39081,
            39082, 39083, 39084, 39085, 39086, 39087, 39088,
            39089, 39090, 39091, 39092, 39093, 39094, 39095,
            39096, 39097, 39098, 39099, 39100, 39101, 39102,
            39103, 39104, 39105, 39106, 39107, 39108, 39109,
            39110, 39111, 39112, 39113, 39114, 39115, 39116,
            39117, 39119, 39120, 39124, 39126, 39127, 39131,
            39132, 39133, 39136, 39137, 39138, 39139, 39140,
            39141, 39142, 39145, 39146, 39147, 39148, 39149,
            39150, 39151, 39152, 39153, 39154, 39155, 39156,
            39157, 39158, 39159, 39160, 39161, 39162, 39163,
            39164, 39165, 39166, 39167, 39168, 39169, 39170,
            39171, 39172, 39173, 39174, 39175, 38121, 38123,
            38126, 38127, 38131, 38132, 38133, 38135, 38137,
            38140, 38141, 38143, 38147, 38146, 38150, 38151,
            38153, 38154, 38157, 38158, 38159, 38162, 38163,
            38164, 38165, 38166, 38168, 38171, 38173, 38174,
            38175, 38178, 38186, 38187, 38185, 38188, 38193,
            38194, 38196, 38198, 38199, 38200, 38204, 38206,
            38207, 38210, 38197, 38212, 38213, 38214, 38217,
            38220, 38222, 38223, 38226, 38227, 38228, 38230,
            38231, 38232, 38233, 38235, 38238, 38239, 38237,
            38241, 38242, 38244, 38245, 38246, 38247, 38248,
            38249, 38250, 38251, 38252, 38255, 38257, 38258,
            38259, 38202, 30695, 30700, 38601, 31189, 31213,
            31203, 31211, 31238, 23879, 31235, 31234, 31262,
            31252, 39176, 39177, 39178, 39179, 39180, 39182,
            39183, 39185, 39186, 39187, 39188, 39189, 39190,
            39191, 39192, 39193, 39194, 39195, 39196, 39197,
            39198, 39199, 39200, 39201, 39202, 39203, 39204,
            39205, 39206, 39207, 39208, 39209, 39210, 39211,
            39212, 39213, 39215, 39216, 39217, 39218, 39219,
            39220, 39221, 39222, 39223, 39224, 39225, 39226,
            39227, 39228, 39229, 39230, 39231, 39232, 39233,
            39234, 39235, 39236, 39237, 39238, 39239, 39240,
            39241, 39242, 39243, 39244, 39245, 39246, 39247,
            39248, 39249, 39250, 39251, 39254, 39255, 39256,
            39257, 39258, 39259, 39260, 39261, 39262, 39263,
            39264, 39265, 39266, 39268, 39270, 39283, 39288,
            39289, 39291, 39294, 39298, 39299, 39305, 31289,
            31287, 31313, 40655, 39333, 31344, 30344, 30350,
            30355, 30361, 30372, 29918, 29920, 29996, 40480,
            40482, 40488, 40489, 40490, 40491, 40492, 40498,
            40497, 40502, 40504, 40503, 40505, 40506, 40510,
            40513, 40514, 40516, 40518, 40519, 40520, 40521,
            40523, 40524, 40526, 40529, 40533, 40535, 40538,
            40539, 40540, 40542, 40547, 40550, 40551, 40552,
            40553, 40554, 40555, 40556, 40561, 40557, 40563,
            30098, 30100, 30102, 30112, 30109, 30124, 30115,
            30131, 30132, 30136, 30148, 30129, 30128, 30147,
            30146, 30166, 30157, 30179, 30184, 30182, 30180,
            30187, 30183, 30211, 30193, 30204, 30207, 30224,
            30208, 30213, 30220, 30231, 30218, 30245, 30232,
            30229, 30233, 39308, 39310, 39322, 39323, 39324,
            39325, 39326, 39327, 39328, 39329, 39330, 39331,
            39332, 39334, 39335, 39337, 39338, 39339, 39340,
            39341, 39342, 39343, 39344, 39345, 39346, 39347,
            39348, 39349, 39350, 39351, 39352, 39353, 39354,
            39355, 39356, 39357, 39358, 39359, 39360, 39361,
            39362, 39363, 39364, 39365, 39366, 39367, 39368,
            39369, 39370, 39371, 39372, 39373, 39374, 39375,
            39376, 39377, 39378, 39379, 39380, 39381, 39382,
            39383, 39384, 39385, 39386, 39387, 39388, 39389,
            39390, 39391, 39392, 39393, 39394, 39395, 39396,
            39397, 39398, 39399, 39400, 39401, 39402, 39403,
            39404, 39405, 39406, 39407, 39408, 39409, 39410,
            39411, 39412, 39413, 39414, 39415, 39416, 39417,
            30235, 30268, 30242, 30240, 30272, 30253, 30256,
            30271, 30261, 30275, 30270, 30259, 30285, 30302,
            30292, 30300, 30294, 30315, 30319, 32714, 31462,
            31352, 31353, 31360, 31366, 31368, 31381, 31398,
            31392, 31404, 31400, 31405, 31411, 34916, 34921,
            34930, 34941, 34943, 34946, 34978, 35014, 34999,
            35004, 35017, 35042, 35022, 35043, 35045, 35057,
            35098, 35068, 35048, 35070, 35056, 35105, 35097,
            35091, 35099, 35082, 35124, 35115, 35126, 35137,
            35174, 35195, 30091, 32997, 30386, 30388, 30684,
            32786, 32788, 32790, 32796, 32800, 32802, 32805,
            32806, 32807, 32809, 32808, 32817, 32779, 32821,
            32835, 32838, 32845, 32850, 32873, 32881, 35203,
            39032, 39040, 39043, 39418, 39419, 39420, 39421,
            39422, 39423, 39424, 39425, 39426, 39427, 39428,
            39429, 39430, 39431, 39432, 39433, 39434, 39435,
            39436, 39437, 39438, 39439, 39440, 39441, 39442,
            39443, 39444, 39445, 39446, 39447, 39448, 39449,
            39450, 39451, 39452, 39453, 39454, 39455, 39456,
            39457, 39458, 39459, 39460, 39461, 39462, 39463,
            39464, 39465, 39466, 39467, 39468, 39469, 39470,
            39471, 39472, 39473, 39474, 39475, 39476, 39477,
            39478, 39479, 39480, 39481, 39482, 39483, 39484,
            39485, 39486, 39487, 39488, 39489, 39490, 39491,
            39492, 39493, 39494, 39495, 39496, 39497, 39498,
            39499, 39500, 39501, 39502, 39503, 39504, 39505,
            39506, 39507, 39508, 39509, 39510, 39511, 39512,
            39513, 39049, 39052, 39053, 39055, 39060, 39066,
            39067, 39070, 39071, 39073, 39074, 39077, 39078,
            34381, 34388, 34412, 34414, 34431, 34426, 34428,
            34427, 34472, 34445, 34443, 34476, 34461, 34471,
            34467, 34474, 34451, 34473, 34486, 34500, 34485,
            34510, 34480, 34490, 34481, 34479, 34505, 34511,
            34484, 34537, 34545, 34546, 34541, 34547, 34512,
            34579, 34526, 34548, 34527, 34520, 34513, 34563,
            34567, 34552, 34568, 34570, 34573, 34569, 34595,
            34619, 34590, 34597, 34606, 34586, 34622, 34632,
            34612, 34609, 34601, 34615, 34623, 34690, 34594,
            34685, 34686, 34683, 34656, 34672, 34636, 34670,
            34699, 34643, 34659, 34684, 34660, 34649, 34661,
            34707, 34735, 34728, 34770, 39514, 39515, 39516,
            39517, 39518, 39519, 39520, 39521, 39522, 39523,
            39524, 39525, 39526, 39527, 39528, 39529, 39530,
            39531, 39538, 39555, 39561, 39565, 39566, 39572,
            39573, 39577, 39590, 39593, 39594, 39595, 39596,
            39597, 39598, 39599, 39602, 39603, 39604, 39605,
            39609, 39611, 39613, 39614, 39615, 39619, 39620,
            39622, 39623, 39624, 39625, 39626, 39629, 39630,
            39631, 39632, 39634, 39636, 39637, 39638, 39639,
            39641, 39642, 39643, 39644, 39645, 39646, 39648,
            39650, 39651, 39652, 39653, 39655, 39656, 39657,
            39658, 39660, 39662, 39664, 39665, 39666, 39667,
            39668, 39669, 39670, 39671, 39672, 39674, 39676,
            39677, 39678, 39679, 39680, 39681, 39682, 39684,
            39685, 39686, 34758, 34696, 34693, 34733, 34711,
            34691, 34731, 34789, 34732, 34741, 34739, 34763,
            34771, 34749, 34769, 34752, 34762, 34779, 34794,
            34784, 34798, 34838, 34835, 34814, 34826, 34843,
            34849, 34873, 34876, 32566, 32578, 32580, 32581,
            33296, 31482, 31485, 31496, 31491, 31492, 31509,
            31498, 31531, 31503, 31559, 31544, 31530, 31513,
            31534, 31537, 31520, 31525, 31524, 31539, 31550,
            31518, 31576, 31578, 31557, 31605, 31564, 31581,
            31584, 31598, 31611, 31586, 31602, 31601, 31632,
            31654, 31655, 31672, 31660, 31645, 31656, 31621,
            31658, 31644, 31650, 31659, 31668, 31697, 31681,
            31692, 31709, 31706, 31717, 31718, 31722, 31756,
            31742, 31740, 31759, 31766, 31755, 39687, 39689,
            39690, 39691, 39692, 39693, 39694, 39696, 39697,
            39698, 39700, 39701, 39702, 39703, 39704, 39705,
            39706, 39707, 39708, 39709, 39710, 39712, 39713,
            39714, 39716, 39717, 39718, 39719, 39720, 39721,
            39722, 39723, 39724, 39725, 39726, 39728, 39729,
            39731, 39732, 39733, 39734, 39735, 39736, 39737,
            39738, 39741, 39742, 39743, 39744, 39750, 39754,
            39755, 39756, 39758, 39760, 39762, 39763, 39765,
            39766, 39767, 39768, 39769, 39770, 39771, 39772,
            39773, 39774, 39775, 39776, 39777, 39778, 39779,
            39780, 39781, 39782, 39783, 39784, 39785, 39786,
            39787, 39788, 39789, 39790, 39791, 39792, 39793,
            39794, 39795, 39796, 39797, 39798, 39799, 39800,
            39801, 39802, 39803, 31775, 31786, 31782, 31800,
            31809, 31808, 33278, 33281, 33282, 33284, 33260,
            34884, 33313, 33314, 33315, 33325, 33327, 33320,
            33323, 33336, 33339, 33331, 33332, 33342, 33348,
            33353, 33355, 33359, 33370, 33375, 33384, 34942,
            34949, 34952, 35032, 35039, 35166, 32669, 32671,
            32679, 32687, 32688, 32690, 31868, 25929, 31889,
            31901, 31900, 31902, 31906, 31922, 31932, 31933,
            31937, 31943, 31948, 31949, 31944, 31941, 31959,
            31976, 33390, 26280, 32703, 32718, 32725, 32741,
            32737, 32742, 32745, 32750, 32755, 31992, 32119,
            32166, 32174, 32327, 32411, 40632, 40628, 36211,
            36228, 36244, 36241, 36273, 36199, 36205, 35911,
            35913, 37194, 37200, 37198, 37199, 37220, 39804,
            39805, 39806, 39807, 39808, 39809, 39810, 39811,
            39812, 39813, 39814, 39815, 39816, 39817, 39818,
            39819, 39820, 39821, 39822, 39823, 39824, 39825,
            39826, 39827, 39828, 39829, 39830, 39831, 39832,
            39833, 39834, 39835, 39836, 39837, 39838, 39839,
            39840, 39841, 39842, 39843, 39844, 39845, 39846,
            39847, 39848, 39849, 39850, 39851, 39852, 39853,
            39854, 39855, 39856, 39857, 39858, 39859, 39860,
            39861, 39862, 39863, 39864, 39865, 39866, 39867,
            39868, 39869, 39870, 39871, 39872, 39873, 39874,
            39875, 39876, 39877, 39878, 39879, 39880, 39881,
            39882, 39883, 39884, 39885, 39886, 39887, 39888,
            39889, 39890, 39891, 39892, 39893, 39894, 39895,
            39896, 39897, 39898, 39899, 37218, 37217, 37232,
            37225, 37231, 37245, 37246, 37234, 37236, 37241,
            37260, 37253, 37264, 37261, 37265, 37282, 37283,
            37290, 37293, 37294, 37295, 37301, 37300, 37306,
            35925, 40574, 36280, 36331, 36357, 36441, 36457,
            36277, 36287, 36284, 36282, 36292, 36310, 36311,
            36314, 36318, 36302, 36303, 36315, 36294, 36332,
            36343, 36344, 36323, 36345, 36347, 36324, 36361,
            36349, 36372, 36381, 36383, 36396, 36398, 36387,
            36399, 36410, 36416, 36409, 36405, 36413, 36401,
            36425, 36417, 36418, 36433, 36434, 36426, 36464,
            36470, 36476, 36463, 36468, 36485, 36495, 36500,
            36496, 36508, 36510, 35960, 35970, 35978, 35973,
            35992, 35988, 26011, 35286, 35294, 35290, 35292,
            39900, 39901, 39902, 39903, 39904, 39905, 39906,
            39907, 39908, 39909, 39910, 39911, 39912, 39913,
            39914, 39915, 39916, 39917, 39918, 39919, 39920,
            39921, 39922, 39923, 39924, 39925, 39926, 39927,
            39928, 39929, 39930, 39931, 39932, 39933, 39934,
            39935, 39936, 39937, 39938, 39939, 39940, 39941,
            39942, 39943, 39944, 39945, 39946, 39947, 39948,
            39949, 39950, 39951, 39952, 39953, 39954, 39955,
            39956, 39957, 39958, 39959, 39960, 39961, 39962,
            39963, 39964, 39965, 39966, 39967, 39968, 39969,
            39970, 39971, 39972, 39973, 39974, 39975, 39976,
            39977, 39978, 39979, 39980, 39981, 39982, 39983,
            39984, 39985, 39986, 39987, 39988, 39989, 39990,
            39991, 39992, 39993, 39994, 39995, 35301, 35307,
            35311, 35390, 35622, 38739, 38633, 38643, 38639,
            38662, 38657, 38664, 38671, 38670, 38698, 38701,
            38704, 38718, 40832, 40835, 40837, 40838, 40839,
            40840, 40841, 40842, 40844, 40702, 40715, 40717,
            38585, 38588, 38589, 38606, 38610, 30655, 38624,
            37518, 37550, 37576, 37694, 37738, 37834, 37775,
            37950, 37995, 40063, 40066, 40069, 40070, 40071,
            40072, 31267, 40075, 40078, 40080, 40081, 40082,
            40084, 40085, 40090, 40091, 40094, 40095, 40096,
            40097, 40098, 40099, 40101, 40102, 40103, 40104,
            40105, 40107, 40109, 40110, 40112, 40113, 40114,
            40115, 40116, 40117, 40118, 40119, 40122, 40123,
            40124, 40125, 40132, 40133, 40134, 40135, 40138,
            40139, 39996, 39997, 39998, 39999, 40000, 40001,
            40002, 40003, 40004, 40005, 40006, 40007, 40008,
            40009, 40010, 40011, 40012, 40013, 40014, 40015,
            40016, 40017, 40018, 40019, 40020, 40021, 40022,
            40023, 40024, 40025, 40026, 40027, 40028, 40029,
            40030, 40031, 40032, 40033, 40034, 40035, 40036,
            40037, 40038, 40039, 40040, 40041, 40042, 40043,
            40044, 40045, 40046, 40047, 40048, 40049, 40050,
            40051, 40052, 40053, 40054, 40055, 40056, 40057,
            40058, 40059, 40061, 40062, 40064, 40067, 40068,
            40073, 40074, 40076, 40079, 40083, 40086, 40087,
            40088, 40089, 40093, 40106, 40108, 40111, 40121,
            40126, 40127, 40128, 40129, 40130, 40136, 40137,
            40145, 40146, 40154, 40155, 40160, 40161, 40140,
            40141, 40142, 40143, 40144, 40147, 40148, 40149,
            40151, 40152, 40153, 40156, 40157, 40159, 40162,
            38780, 38789, 38801, 38802, 38804, 38831, 38827,
            38819, 38834, 38836, 39601, 39600, 39607, 40536,
            39606, 39610, 39612, 39617, 39616, 39621, 39618,
            39627, 39628, 39633, 39749, 39747, 39751, 39753,
            39752, 39757, 39761, 39144, 39181, 39214, 39253,
            39252, 39647, 39649, 39654, 39663, 39659, 39675,
            39661, 39673, 39688, 39695, 39699, 39711, 39715,
            40637, 40638, 32315, 40578, 40583, 40584, 40587,
            40594, 37846, 40605, 40607, 40667, 40668, 40669,
            40672, 40671, 40674, 40681, 40679, 40677, 40682,
            40687, 40738, 40748, 40751, 40761, 40759, 40765,
            40766, 40772, 40163, 40164, 40165, 40166, 40167,
            40168, 40169, 40170, 40171, 40172, 40173, 40174,
            40175, 40176, 40177, 40178, 40179, 40180, 40181,
            40182, 40183, 40184, 40185, 40186, 40187, 40188,
            40189, 40190, 40191, 40192, 40193, 40194, 40195,
            40196, 40197, 40198, 40199, 40200, 40201, 40202,
            40203, 40204, 40205, 40206, 40207, 40208, 40209,
            40210, 40211, 40212, 40213, 40214, 40215, 40216,
            40217, 40218, 40219, 40220, 40221, 40222, 40223,
            40224, 40225, 40226, 40227, 40228, 40229, 40230,
            40231, 40232, 40233, 40234, 40235, 40236, 40237,
            40238, 40239, 40240, 40241, 40242, 40243, 40244,
            40245, 40246, 40247, 40248, 40249, 40250, 40251,
            40252, 40253, 40254, 40255, 40256, 40257, 40258,
            57908, 57909, 57910, 57911, 57912, 57913, 57914,
            57915, 57916, 57917, 57918, 57919, 57920, 57921,
            57922, 57923, 57924, 57925, 57926, 57927, 57928,
            57929, 57930, 57931, 57932, 57933, 57934, 57935,
            57936, 57937, 57938, 57939, 57940, 57941, 57942,
            57943, 57944, 57945, 57946, 57947, 57948, 57949,
            57950, 57951, 57952, 57953, 57954, 57955, 57956,
            57957, 57958, 57959, 57960, 57961, 57962, 57963,
            57964, 57965, 57966, 57967, 57968, 57969, 57970,
            57971, 57972, 57973, 57974, 57975, 57976, 57977,
            57978, 57979, 57980, 57981, 57982, 57983, 57984,
            57985, 57986, 57987, 57988, 57989, 57990, 57991,
            57992, 57993, 57994, 57995, 57996, 57997, 57998,
            57999, 58000, 58001, 40259, 40260, 40261, 40262,
            40263, 40264, 40265, 40266, 40267, 40268, 40269,
            40270, 40271, 40272, 40273, 40274, 40275, 40276,
            40277, 40278, 40279, 40280, 40281, 40282, 40283,
            40284, 40285, 40286, 40287, 40288, 40289, 40290,
            40291, 40292, 40293, 40294, 40295, 40296, 40297,
            40298, 40299, 40300, 40301, 40302, 40303, 40304,
            40305, 40306, 40307, 40308, 40309, 40310, 40311,
            40312, 40313, 40314, 40315, 40316, 40317, 40318,
            40319, 40320, 40321, 40322, 40323, 40324, 40325,
            40326, 40327, 40328, 40329, 40330, 40331, 40332,
            40333, 40334, 40335, 40336, 40337, 40338, 40339,
            40340, 40341, 40342, 40343, 40344, 40345, 40346,
            40347, 40348, 40349, 40350, 40351, 40352, 40353,
            40354, 58002, 58003, 58004, 58005, 58006, 58007,
            58008, 58009, 58010, 58011, 58012, 58013, 58014,
            58015, 58016, 58017, 58018, 58019, 58020, 58021,
            58022, 58023, 58024, 58025, 58026, 58027, 58028,
            58029, 58030, 58031, 58032, 58033, 58034, 58035,
            58036, 58037, 58038, 58039, 58040, 58041, 58042,
            58043, 58044, 58045, 58046, 58047, 58048, 58049,
            58050, 58051, 58052, 58053, 58054, 58055, 58056,
            58057, 58058, 58059, 58060, 58061, 58062, 58063,
            58064, 58065, 58066, 58067, 58068, 58069, 58070,
            58071, 58072, 58073, 58074, 58075, 58076, 58077,
            58078, 58079, 58080, 58081, 58082, 58083, 58084,
            58085, 58086, 58087, 58088, 58089, 58090, 58091,
            58092, 58093, 58094, 58095, 40355, 40356, 40357,
            40358, 40359, 40360, 40361, 40362, 40363, 40364,
            40365, 40366, 40367, 40368, 40369, 40370, 40371,
            40372, 40373, 40374, 40375, 40376, 40377, 40378,
            40379, 40380, 40381, 40382, 40383, 40384, 40385,
            40386, 40387, 40388, 40389, 40390, 40391, 40392,
            40393, 40394, 40395, 40396, 40397, 40398, 40399,
            40400, 40401, 40402, 40403, 40404, 40405, 40406,
            40407, 40408, 40409, 40410, 40411, 40412, 40413,
            40414, 40415, 40416, 40417, 40418, 40419, 40420,
            40421, 40422, 40423, 40424, 40425, 40426, 40427,
            40428, 40429, 40430, 40431, 40432, 40433, 40434,
            40435, 40436, 40437, 40438, 40439, 40440, 40441,
            40442, 40443, 40444, 40445, 40446, 40447, 40448,
            40449, 40450, 58096, 58097, 58098, 58099, 58100,
            58101, 58102, 58103, 58104, 58105, 58106, 58107,
            58108, 58109, 58110, 58111, 58112, 58113, 58114,
            58115, 58116, 58117, 58118, 58119, 58120, 58121,
            58122, 58123, 58124, 58125, 58126, 58127, 58128,
            58129, 58130, 58131, 58132, 58133, 58134, 58135,
            58136, 58137, 58138, 58139, 58140, 58141, 58142,
            58143, 58144, 58145, 58146, 58147, 58148, 58149,
            58150, 58151, 58152, 58153, 58154, 58155, 58156,
            58157, 58158, 58159, 58160, 58161, 58162, 58163,
            58164, 58165, 58166, 58167, 58168, 58169, 58170,
            58171, 58172, 58173, 58174, 58175, 58176, 58177,
            58178, 58179, 58180, 58181, 58182, 58183, 58184,
            58185, 58186, 58187, 58188, 58189, 40451, 40452,
            40453, 40454, 40455, 40456, 40457, 40458, 40459,
            40460, 40461, 40462, 40463, 40464, 40465, 40466,
            40467, 40468, 40469, 40470, 40471, 40472, 40473,
            40474, 40475, 40476, 40477, 40478, 40484, 40487,
            40494, 40496, 40500, 40507, 40508, 40512, 40525,
            40528, 40530, 40531, 40532, 40534, 40537, 40541,
            40543, 40544, 40545, 40546, 40549, 40558, 40559,
            40562, 40564, 40565, 40566, 40567, 40568, 40569,
            40570, 40571, 40572, 40573, 40576, 40577, 40579,
            40580, 40581, 40582, 40585, 40586, 40588, 40589,
            40590, 40591, 40592, 40593, 40596, 40597, 40598,
            40599, 40600, 40601, 40602, 40603, 40604, 40606,
            40608, 40609, 40610, 40611, 40612, 40613, 40615,
            40616, 40617, 40618, 58190, 58191, 58192, 58193,
            58194, 58195, 58196, 58197, 58198, 58199, 58200,
            58201, 58202, 58203, 58204, 58205, 58206, 58207,
            58208, 58209, 58210, 58211, 58212, 58213, 58214,
            58215, 58216, 58217, 58218, 58219, 58220, 58221,
            58222, 58223, 58224, 58225, 58226, 58227, 58228,
            58229, 58230, 58231, 58232, 58233, 58234, 58235,
            58236, 58237, 58238, 58239, 58240, 58241, 58242,
            58243, 58244, 58245, 58246, 58247, 58248, 58249,
            58250, 58251, 58252, 58253, 58254, 58255, 58256,
            58257, 58258, 58259, 58260, 58261, 58262, 58263,
            58264, 58265, 58266, 58267, 58268, 58269, 58270,
            58271, 58272, 58273, 58274, 58275, 58276, 58277,
            58278, 58279, 58280, 58281, 58282, 58283, 40619,
            40620, 40621, 40622, 40623, 40624, 40625, 40626,
            40627, 40629, 40630, 40631, 40633, 40634, 40636,
            40639, 40640, 40641, 40642, 40643, 40645, 40646,
            40647, 40648, 40650, 40651, 40652, 40656, 40658,
            40659, 40661, 40662, 40663, 40665, 40666, 40670,
            40673, 40675, 40676, 40678, 40680, 40683, 40684,
            40685, 40686, 40688, 40689, 40690, 40691, 40692,
            40693, 40694, 40695, 40696, 40698, 40701, 40703,
            40704, 40705, 40706, 40707, 40708, 40709, 40710,
            40711, 40712, 40713, 40714, 40716, 40719, 40721,
            40722, 40724, 40725, 40726, 40728, 40730, 40731,
            40732, 40733, 40734, 40735, 40737, 40739, 40740,
            40741, 40742, 40743, 40744, 40745, 40746, 40747,
            40749, 40750, 40752, 40753, 58284, 58285, 58286,
            58287, 58288, 58289, 58290, 58291, 58292, 58293,
            58294, 58295, 58296, 58297, 58298, 58299, 58300,
            58301, 58302, 58303, 58304, 58305, 58306, 58307,
            58308, 58309, 58310, 58311, 58312, 58313, 58314,
            58315, 58316, 58317, 58318, 58319, 58320, 58321,
            58322, 58323, 58324, 58325, 58326, 58327, 58328,
            58329, 58330, 58331, 58332, 58333, 58334, 58335,
            58336, 58337, 58338, 58339, 58340, 58341, 58342,
            58343, 58344, 58345, 58346, 58347, 58348, 58349,
            58350, 58351, 58352, 58353, 58354, 58355, 58356,
            58357, 58358, 58359, 58360, 58361, 58362, 58363,
            58364, 58365, 58366, 58367, 58368, 58369, 58370,
            58371, 58372, 58373, 58374, 58375, 58376, 58377,
            40754, 40755, 40756, 40757, 40758, 40760, 40762,
            40764, 40767, 40768, 40769, 40770, 40771, 40773,
            40774, 40775, 40776, 40777, 40778, 40779, 40780,
            40781, 40782, 40783, 40786, 40787, 40788, 40789,
            40790, 40791, 40792, 40793, 40794, 40795, 40796,
            40797, 40798, 40799, 40800, 40801, 40802, 40803,
            40804, 40805, 40806, 40807, 40808, 40809, 40810,
            40811, 40812, 40813, 40814, 40815, 40816, 40817,
            40818, 40819, 40820, 40821, 40822, 40823, 40824,
            40825, 40826, 40827, 40828, 40829, 40830, 40833,
            40834, 40845, 40846, 40847, 40848, 40849, 40850,
            40851, 40852, 40853, 40854, 40855, 40856, 40860,
            40861, 40862, 40865, 40866, 40867, 40868, 40869,
            63788, 63865, 63893, 63975, 63985, 58378, 58379,
            58380, 58381, 58382, 58383, 58384, 58385, 58386,
            58387, 58388, 58389, 58390, 58391, 58392, 58393,
            58394, 58395, 58396, 58397, 58398, 58399, 58400,
            58401, 58402, 58403, 58404, 58405, 58406, 58407,
            58408, 58409, 58410, 58411, 58412, 58413, 58414,
            58415, 58416, 58417, 58418, 58419, 58420, 58421,
            58422, 58423, 58424, 58425, 58426, 58427, 58428,
            58429, 58430, 58431, 58432, 58433, 58434, 58435,
            58436, 58437, 58438, 58439, 58440, 58441, 58442,
            58443, 58444, 58445, 58446, 58447, 58448, 58449,
            58450, 58451, 58452, 58453, 58454, 58455, 58456,
            58457, 58458, 58459, 58460, 58461, 58462, 58463,
            58464, 58465, 58466, 58467, 58468, 58469, 58470,
            58471, 64012, 64013, 64014, 64015, 64017, 64019,
            64020, 64024, 64031, 64032, 64033, 64035, 64036,
            64039, 64040, 64041, 11905, 59414, 59415, 59416,
            11908, 13427, 13383, 11912, 11915, 59422, 13726,
            13850, 13838, 11916, 11927, 14702, 14616, 59430,
            14799, 14815, 14963, 14800, 59435, 59436, 15182,
            15470, 15584, 11943, 59441, 59442, 11946, 16470,
            16735, 11950, 17207, 11955, 11958, 11959, 59451,
            17329, 17324, 11963, 17373, 17622, 18017, 17996,
            59459, 18211, 18217, 18300, 18317, 11978, 18759,
            18810, 18813, 18818, 18819, 18821, 18822, 18847,
            18843, 18871, 18870, 59476, 59477, 19619, 19615,
            19616, 19617, 19575, 19618, 19731, 19732, 19733,
            19734, 19735, 19736, 19737, 19886, 59492, 58472,
            58473, 58474, 58475, 58476, 58477, 58478, 58479,
            58480, 58481, 58482, 58483, 58484, 58485, 58486,
            58487, 58488, 58489, 58490, 58491, 58492, 58493,
            58494, 58495, 58496, 58497, 58498, 58499, 58500,
            58501, 58502, 58503, 58504, 58505, 58506, 58507,
            58508, 58509, 58510, 58511, 58512, 58513, 58514,
            58515, 58516, 58517, 58518, 58519, 58520, 58521,
            58522, 58523, 58524, 58525, 58526, 58527, 58528,
            58529, 58530, 58531, 58532, 58533, 58534, 58535,
            58536, 58537, 58538, 58539, 58540, 58541, 58542,
            58543, 58544, 58545, 58546, 58547, 58548, 58549,
            58550, 58551, 58552, 58553, 58554, 58555, 58556,
            58557, 58558, 58559, 58560, 58561, 58562, 58563,
            58564, 58565
        ],
        "gb18030-ranges": [
            [0, 128],
            [36, 165],
            [38, 169],
            [45, 178],
            [50, 184],
            [81, 216],
            [89, 226],
            [95, 235],
            [96, 238],
            [100, 244],
            [103, 248],
            [104, 251],
            [105, 253],
            [109, 258],
            [126, 276],
            [133, 284],
            [148, 300],
            [172, 325],
            [175, 329],
            [179, 334],
            [208, 364],
            [306, 463],
            [307, 465],
            [308, 467],
            [309, 469],
            [310, 471],
            [311, 473],
            [312, 475],
            [313, 477],
            [341, 506],
            [428, 594],
            [443, 610],
            [544, 712],
            [545, 716],
            [558, 730],
            [741, 930],
            [742, 938],
            [749, 962],
            [750, 970],
            [805, 1026],
            [819, 1104],
            [820, 1106],
            [7922, 8209],
            [7924, 8215],
            [7925, 8218],
            [7927, 8222],
            [7934, 8231],
            [7943, 8241],
            [7944, 8244],
            [7945, 8246],
            [7950, 8252],
            [8062, 8365],
            [8148, 8452],
            [8149, 8454],
            [8152, 8458],
            [8164, 8471],
            [8174, 8482],
            [8236, 8556],
            [8240, 8570],
            [8262, 8596],
            [8264, 8602],
            [8374, 8713],
            [8380, 8720],
            [8381, 8722],
            [8384, 8726],
            [8388, 8731],
            [8390, 8737],
            [8392, 8740],
            [8393, 8742],
            [8394, 8748],
            [8396, 8751],
            [8401, 8760],
            [8406, 8766],
            [8416, 8777],
            [8419, 8781],
            [8424, 8787],
            [8437, 8802],
            [8439, 8808],
            [8445, 8816],
            [8482, 8854],
            [8485, 8858],
            [8496, 8870],
            [8521, 8896],
            [8603, 8979],
            [8936, 9322],
            [8946, 9372],
            [9046, 9548],
            [9050, 9588],
            [9063, 9616],
            [9066, 9622],
            [9076, 9634],
            [9092, 9652],
            [9100, 9662],
            [9108, 9672],
            [9111, 9676],
            [9113, 9680],
            [9131, 9702],
            [9162, 9735],
            [9164, 9738],
            [9218, 9793],
            [9219, 9795],
            [11329, 11906],
            [11331, 11909],
            [11334, 11913],
            [11336, 11917],
            [11346, 11928],
            [11361, 11944],
            [11363, 11947],
            [11366, 11951],
            [11370, 11956],
            [11372, 11960],
            [11375, 11964],
            [11389, 11979],
            [11682, 12284],
            [11686, 12292],
            [11687, 12312],
            [11692, 12319],
            [11694, 12330],
            [11714, 12351],
            [11716, 12436],
            [11723, 12447],
            [11725, 12535],
            [11730, 12543],
            [11736, 12586],
            [11982, 12842],
            [11989, 12850],
            [12102, 12964],
            [12336, 13200],
            [12348, 13215],
            [12350, 13218],
            [12384, 13253],
            [12393, 13263],
            [12395, 13267],
            [12397, 13270],
            [12510, 13384],
            [12553, 13428],
            [12851, 13727],
            [12962, 13839],
            [12973, 13851],
            [13738, 14617],
            [13823, 14703],
            [13919, 14801],
            [13933, 14816],
            [14080, 14964],
            [14298, 15183],
            [14585, 15471],
            [14698, 15585],
            [15583, 16471],
            [15847, 16736],
            [16318, 17208],
            [16434, 17325],
            [16438, 17330],
            [16481, 17374],
            [16729, 17623],
            [17102, 17997],
            [17122, 18018],
            [17315, 18212],
            [17320, 18218],
            [17402, 18301],
            [17418, 18318],
            [17859, 18760],
            [17909, 18811],
            [17911, 18814],
            [17915, 18820],
            [17916, 18823],
            [17936, 18844],
            [17939, 18848],
            [17961, 18872],
            [18664, 19576],
            [18703, 19620],
            [18814, 19738],
            [18962, 19887],
            [19043, 40870],
            [33469, 59244],
            [33470, 59336],
            [33471, 59367],
            [33484, 59413],
            [33485, 59417],
            [33490, 59423],
            [33497, 59431],
            [33501, 59437],
            [33505, 59443],
            [33513, 59452],
            [33520, 59460],
            [33536, 59478],
            [33550, 59493],
            [37845, 63789],
            [37921, 63866],
            [37948, 63894],
            [38029, 63976],
            [38038, 63986],
            [38064, 64016],
            [38065, 64018],
            [38066, 64021],
            [38069, 64025],
            [38075, 64034],
            [38076, 64037],
            [38078, 64042],
            [39108, 65074],
            [39109, 65093],
            [39113, 65107],
            [39114, 65112],
            [39115, 65127],
            [39116, 65132],
            [39265, 65375],
            [39394, 65510],
            [189000, 65536]
        ],
        "jis0208": [12288, 12289, 12290, 65292, 65294, 12539, 65306,
            65307, 65311, 65281, 12443, 12444, 180, 65344, 168,
            65342, 65507, 65343, 12541, 12542, 12445, 12446,
            12291, 20189, 12293, 12294, 12295, 12540, 8213,
            8208, 65295, 65340, 65374, 8741, 65372, 8230, 8229,
            8216, 8217, 8220, 8221, 65288, 65289, 12308, 12309,
            65339, 65341, 65371, 65373, 12296, 12297, 12298,
            12299, 12300, 12301, 12302, 12303, 12304, 12305,
            65291, 65293, 177, 215, 247, 65309, 8800, 65308,
            65310, 8806, 8807, 8734, 8756, 9794, 9792, 176,
            8242, 8243, 8451, 65509, 65284, 65504, 65505, 65285,
            65283, 65286, 65290, 65312, 167, 9734, 9733, 9675,
            9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650,
            9661, 9660, 8251, 12306, 8594, 8592, 8593, 8595,
            12307, null, null, null, null, null, null, null,
            null, null, null, null, 8712, 8715, 8838, 8839,
            8834, 8835, 8746, 8745, null, null, null, null,
            null, null, null, null, 8743, 8744, 65506, 8658,
            8660, 8704, 8707, null, null, null, null, null,
            null, null, null, null, null, null, 8736, 8869,
            8978, 8706, 8711, 8801, 8786, 8810, 8811, 8730,
            8765, 8733, 8757, 8747, 8748, null, null, null,
            null, null, null, null, 8491, 8240, 9839, 9837,
            9834, 8224, 8225, 182, null, null, null, null, 9711,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 65296,
            65297, 65298, 65299, 65300, 65301, 65302, 65303,
            65304, 65305, null, null, null, null, null, null,
            null, 65313, 65314, 65315, 65316, 65317, 65318,
            65319, 65320, 65321, 65322, 65323, 65324, 65325,
            65326, 65327, 65328, 65329, 65330, 65331, 65332,
            65333, 65334, 65335, 65336, 65337, 65338, null,
            null, null, null, null, null, 65345, 65346, 65347,
            65348, 65349, 65350, 65351, 65352, 65353, 65354,
            65355, 65356, 65357, 65358, 65359, 65360, 65361,
            65362, 65363, 65364, 65365, 65366, 65367, 65368,
            65369, 65370, null, null, null, null, 12353, 12354,
            12355, 12356, 12357, 12358, 12359, 12360, 12361,
            12362, 12363, 12364, 12365, 12366, 12367, 12368,
            12369, 12370, 12371, 12372, 12373, 12374, 12375,
            12376, 12377, 12378, 12379, 12380, 12381, 12382,
            12383, 12384, 12385, 12386, 12387, 12388, 12389,
            12390, 12391, 12392, 12393, 12394, 12395, 12396,
            12397, 12398, 12399, 12400, 12401, 12402, 12403,
            12404, 12405, 12406, 12407, 12408, 12409, 12410,
            12411, 12412, 12413, 12414, 12415, 12416, 12417,
            12418, 12419, 12420, 12421, 12422, 12423, 12424,
            12425, 12426, 12427, 12428, 12429, 12430, 12431,
            12432, 12433, 12434, 12435, null, null, null, null,
            null, null, null, null, null, null, null, 12449,
            12450, 12451, 12452, 12453, 12454, 12455, 12456,
            12457, 12458, 12459, 12460, 12461, 12462, 12463,
            12464, 12465, 12466, 12467, 12468, 12469, 12470,
            12471, 12472, 12473, 12474, 12475, 12476, 12477,
            12478, 12479, 12480, 12481, 12482, 12483, 12484,
            12485, 12486, 12487, 12488, 12489, 12490, 12491,
            12492, 12493, 12494, 12495, 12496, 12497, 12498,
            12499, 12500, 12501, 12502, 12503, 12504, 12505,
            12506, 12507, 12508, 12509, 12510, 12511, 12512,
            12513, 12514, 12515, 12516, 12517, 12518, 12519,
            12520, 12521, 12522, 12523, 12524, 12525, 12526,
            12527, 12528, 12529, 12530, 12531, 12532, 12533,
            12534, null, null, null, null, null, null, null,
            null, 913, 914, 915, 916, 917, 918, 919, 920, 921,
            922, 923, 924, 925, 926, 927, 928, 929, 931, 932,
            933, 934, 935, 936, 937, null, null, null, null,
            null, null, null, null, 945, 946, 947, 948, 949,
            950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
            960, 961, 963, 964, 965, 966, 967, 968, 969, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 1040, 1041, 1042,
            1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049,
            1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
            1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
            1066, 1067, 1068, 1069, 1070, 1071, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 1072, 1073, 1074,
            1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081,
            1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
            1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
            1098, 1099, 1100, 1101, 1102, 1103, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 9472, 9474, 9484, 9488, 9496,
            9492, 9500, 9516, 9508, 9524, 9532, 9473, 9475,
            9487, 9491, 9499, 9495, 9507, 9523, 9515, 9531,
            9547, 9504, 9519, 9512, 9527, 9535, 9501, 9520,
            9509, 9528, 9538, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
            9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326,
            9327, 9328, 9329, 9330, 9331, 8544, 8545, 8546,
            8547, 8548, 8549, 8550, 8551, 8552, 8553, null,
            13129, 13076, 13090, 13133, 13080, 13095, 13059,
            13110, 13137, 13143, 13069, 13094, 13091, 13099,
            13130, 13115, 13212, 13213, 13214, 13198, 13199,
            13252, 13217, null, null, null, null, null, null,
            null, null, 13179, 12317, 12319, 8470, 13261, 8481,
            12964, 12965, 12966, 12967, 12968, 12849, 12850,
            12857, 13182, 13181, 13180, 8786, 8801, 8747, 8750,
            8721, 8730, 8869, 8736, 8735, 8895, 8757, 8745,
            8746, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 20124,
            21782, 23043, 38463, 21696, 24859, 25384, 23030,
            36898, 33909, 33564, 31312, 24746, 25569, 28197,
            26093, 33894, 33446, 39925, 26771, 22311, 26017,
            25201, 23451, 22992, 34427, 39156, 32098, 32190,
            39822, 25110, 31903, 34999, 23433, 24245, 25353,
            26263, 26696, 38343, 38797, 26447, 20197, 20234,
            20301, 20381, 20553, 22258, 22839, 22996, 23041,
            23561, 24799, 24847, 24944, 26131, 26885, 28858,
            30031, 30064, 31227, 32173, 32239, 32963, 33806,
            34915, 35586, 36949, 36986, 21307, 20117, 20133,
            22495, 32946, 37057, 30959, 19968, 22769, 28322,
            36920, 31282, 33576, 33419, 39983, 20801, 21360,
            21693, 21729, 22240, 23035, 24341, 39154, 28139,
            32996, 34093, 38498, 38512, 38560, 38907, 21515,
            21491, 23431, 28879, 32701, 36802, 38632, 21359,
            40284, 31418, 19985, 30867, 33276, 28198, 22040,
            21764, 27421, 34074, 39995, 23013, 21417, 28006,
            29916, 38287, 22082, 20113, 36939, 38642, 33615,
            39180, 21473, 21942, 23344, 24433, 26144, 26355,
            26628, 27704, 27891, 27945, 29787, 30408, 31310,
            38964, 33521, 34907, 35424, 37613, 28082, 30123,
            30410, 39365, 24742, 35585, 36234, 38322, 27022,
            21421, 20870, 22290, 22576, 22852, 23476, 24310,
            24616, 25513, 25588, 27839, 28436, 28814, 28948,
            29017, 29141, 29503, 32257, 33398, 33489, 34199,
            36960, 37467, 40219, 22633, 26044, 27738, 29989,
            20985, 22830, 22885, 24448, 24540, 25276, 26106,
            27178, 27431, 27572, 29579, 32705, 35158, 40236,
            40206, 40644, 23713, 27798, 33659, 20740, 23627,
            25014, 33222, 26742, 29281, 20057, 20474, 21368,
            24681, 28201, 31311, 38899, 19979, 21270, 20206,
            20309, 20285, 20385, 20339, 21152, 21487, 22025,
            22799, 23233, 23478, 23521, 31185, 26247, 26524,
            26550, 27468, 27827, 28779, 29634, 31117, 31166,
            31292, 31623, 33457, 33499, 33540, 33655, 33775,
            33747, 34662, 35506, 22057, 36008, 36838, 36942,
            38686, 34442, 20420, 23784, 25105, 29273, 30011,
            33253, 33469, 34558, 36032, 38597, 39187, 39381,
            20171, 20250, 35299, 22238, 22602, 22730, 24315,
            24555, 24618, 24724, 24674, 25040, 25106, 25296,
            25913, 39745, 26214, 26800, 28023, 28784, 30028,
            30342, 32117, 33445, 34809, 38283, 38542, 35997,
            20977, 21182, 22806, 21683, 23475, 23830, 24936,
            27010, 28079, 30861, 33995, 34903, 35442, 37799,
            39608, 28012, 39336, 34521, 22435, 26623, 34510,
            37390, 21123, 22151, 21508, 24275, 25313, 25785,
            26684, 26680, 27579, 29554, 30906, 31339, 35226,
            35282, 36203, 36611, 37101, 38307, 38548, 38761,
            23398, 23731, 27005, 38989, 38990, 25499, 31520,
            27179, 27263, 26806, 39949, 28511, 21106, 21917,
            24688, 25324, 27963, 28167, 28369, 33883, 35088,
            36676, 19988, 39993, 21494, 26907, 27194, 38788,
            26666, 20828, 31427, 33970, 37340, 37772, 22107,
            40232, 26658, 33541, 33841, 31909, 21000, 33477,
            29926, 20094, 20355, 20896, 23506, 21002, 21208,
            21223, 24059, 21914, 22570, 23014, 23436, 23448,
            23515, 24178, 24185, 24739, 24863, 24931, 25022,
            25563, 25954, 26577, 26707, 26874, 27454, 27475,
            27735, 28450, 28567, 28485, 29872, 29976, 30435,
            30475, 31487, 31649, 31777, 32233, 32566, 32752,
            32925, 33382, 33694, 35251, 35532, 36011, 36996,
            37969, 38291, 38289, 38306, 38501, 38867, 39208,
            33304, 20024, 21547, 23736, 24012, 29609, 30284,
            30524, 23721, 32747, 36107, 38593, 38929, 38996,
            39000, 20225, 20238, 21361, 21916, 22120, 22522,
            22855, 23305, 23492, 23696, 24076, 24190, 24524,
            25582, 26426, 26071, 26082, 26399, 26827, 26820,
            27231, 24112, 27589, 27671, 27773, 30079, 31048,
            23395, 31232, 32000, 24509, 35215, 35352, 36020,
            36215, 36556, 36637, 39138, 39438, 39740, 20096,
            20605, 20736, 22931, 23452, 25135, 25216, 25836,
            27450, 29344, 30097, 31047, 32681, 34811, 35516,
            35696, 25516, 33738, 38816, 21513, 21507, 21931,
            26708, 27224, 35440, 30759, 26485, 40653, 21364,
            23458, 33050, 34384, 36870, 19992, 20037, 20167,
            20241, 21450, 21560, 23470, 24339, 24613, 25937,
            26429, 27714, 27762, 27875, 28792, 29699, 31350,
            31406, 31496, 32026, 31998, 32102, 26087, 29275,
            21435, 23621, 24040, 25298, 25312, 25369, 28192,
            34394, 35377, 36317, 37624, 28417, 31142, 39770,
            20136, 20139, 20140, 20379, 20384, 20689, 20807,
            31478, 20849, 20982, 21332, 21281, 21375, 21483,
            21932, 22659, 23777, 24375, 24394, 24623, 24656,
            24685, 25375, 25945, 27211, 27841, 29378, 29421,
            30703, 33016, 33029, 33288, 34126, 37111, 37857,
            38911, 39255, 39514, 20208, 20957, 23597, 26241,
            26989, 23616, 26354, 26997, 29577, 26704, 31873,
            20677, 21220, 22343, 24062, 37670, 26020, 27427,
            27453, 29748, 31105, 31165, 31563, 32202, 33465,
            33740, 34943, 35167, 35641, 36817, 37329, 21535,
            37504, 20061, 20534, 21477, 21306, 29399, 29590,
            30697, 33510, 36527, 39366, 39368, 39378, 20855,
            24858, 34398, 21936, 31354, 20598, 23507, 36935,
            38533, 20018, 27355, 37351, 23633, 23624, 25496,
            31391, 27795, 38772, 36705, 31402, 29066, 38536,
            31874, 26647, 32368, 26705, 37740, 21234, 21531,
            34219, 35347, 32676, 36557, 37089, 21350, 34952,
            31041, 20418, 20670, 21009, 20804, 21843, 22317,
            29674, 22411, 22865, 24418, 24452, 24693, 24950,
            24935, 25001, 25522, 25658, 25964, 26223, 26690,
            28179, 30054, 31293, 31995, 32076, 32153, 32331,
            32619, 33550, 33610, 34509, 35336, 35427, 35686,
            36605, 38938, 40335, 33464, 36814, 39912, 21127,
            25119, 25731, 28608, 38553, 26689, 20625, 27424,
            27770, 28500, 31348, 32080, 34880, 35363, 26376,
            20214, 20537, 20518, 20581, 20860, 21048, 21091,
            21927, 22287, 22533, 23244, 24314, 25010, 25080,
            25331, 25458, 26908, 27177, 29309, 29356, 29486,
            30740, 30831, 32121, 30476, 32937, 35211, 35609,
            36066, 36562, 36963, 37749, 38522, 38997, 39443,
            40568, 20803, 21407, 21427, 24187, 24358, 28187,
            28304, 29572, 29694, 32067, 33335, 35328, 35578,
            38480, 20046, 20491, 21476, 21628, 22266, 22993,
            23396, 24049, 24235, 24359, 25144, 25925, 26543,
            28246, 29392, 31946, 34996, 32929, 32993, 33776,
            34382, 35463, 36328, 37431, 38599, 39015, 40723,
            20116, 20114, 20237, 21320, 21577, 21566, 23087,
            24460, 24481, 24735, 26791, 27278, 29786, 30849,
            35486, 35492, 35703, 37264, 20062, 39881, 20132,
            20348, 20399, 20505, 20502, 20809, 20844, 21151,
            21177, 21246, 21402, 21475, 21521, 21518, 21897,
            22353, 22434, 22909, 23380, 23389, 23439, 24037,
            24039, 24055, 24184, 24195, 24218, 24247, 24344,
            24658, 24908, 25239, 25304, 25511, 25915, 26114,
            26179, 26356, 26477, 26657, 26775, 27083, 27743,
            27946, 28009, 28207, 28317, 30002, 30343, 30828,
            31295, 31968, 32005, 32024, 32094, 32177, 32789,
            32771, 32943, 32945, 33108, 33167, 33322, 33618,
            34892, 34913, 35611, 36002, 36092, 37066, 37237,
            37489, 30783, 37628, 38308, 38477, 38917, 39321,
            39640, 40251, 21083, 21163, 21495, 21512, 22741,
            25335, 28640, 35946, 36703, 40633, 20811, 21051,
            21578, 22269, 31296, 37239, 40288, 40658, 29508,
            28425, 33136, 29969, 24573, 24794, 39592, 29403,
            36796, 27492, 38915, 20170, 22256, 22372, 22718,
            23130, 24680, 25031, 26127, 26118, 26681, 26801,
            28151, 30165, 32058, 33390, 39746, 20123, 20304,
            21449, 21766, 23919, 24038, 24046, 26619, 27801,
            29811, 30722, 35408, 37782, 35039, 22352, 24231,
            25387, 20661, 20652, 20877, 26368, 21705, 22622,
            22971, 23472, 24425, 25165, 25505, 26685, 27507,
            28168, 28797, 37319, 29312, 30741, 30758, 31085,
            25998, 32048, 33756, 35009, 36617, 38555, 21092,
            22312, 26448, 32618, 36001, 20916, 22338, 38442,
            22586, 27018, 32948, 21682, 23822, 22524, 30869,
            40442, 20316, 21066, 21643, 25662, 26152, 26388,
            26613, 31364, 31574, 32034, 37679, 26716, 39853,
            31545, 21273, 20874, 21047, 23519, 25334, 25774,
            25830, 26413, 27578, 34217, 38609, 30352, 39894,
            25420, 37638, 39851, 30399, 26194, 19977, 20632,
            21442, 23665, 24808, 25746, 25955, 26719, 29158,
            29642, 29987, 31639, 32386, 34453, 35715, 36059,
            37240, 39184, 26028, 26283, 27531, 20181, 20180,
            20282, 20351, 21050, 21496, 21490, 21987, 22235,
            22763, 22987, 22985, 23039, 23376, 23629, 24066,
            24107, 24535, 24605, 25351, 25903, 23388, 26031,
            26045, 26088, 26525, 27490, 27515, 27663, 29509,
            31049, 31169, 31992, 32025, 32043, 32930, 33026,
            33267, 35222, 35422, 35433, 35430, 35468, 35566,
            36039, 36060, 38604, 39164, 27503, 20107, 20284,
            20365, 20816, 23383, 23546, 24904, 25345, 26178,
            27425, 28363, 27835, 29246, 29885, 30164, 30913,
            31034, 32780, 32819, 33258, 33940, 36766, 27728,
            40575, 24335, 35672, 40235, 31482, 36600, 23437,
            38635, 19971, 21489, 22519, 22833, 23241, 23460,
            24713, 28287, 28422, 30142, 36074, 23455, 34048,
            31712, 20594, 26612, 33437, 23649, 34122, 32286,
            33294, 20889, 23556, 25448, 36198, 26012, 29038,
            31038, 32023, 32773, 35613, 36554, 36974, 34503,
            37034, 20511, 21242, 23610, 26451, 28796, 29237,
            37196, 37320, 37675, 33509, 23490, 24369, 24825,
            20027, 21462, 23432, 25163, 26417, 27530, 29417,
            29664, 31278, 33131, 36259, 37202, 39318, 20754,
            21463, 21610, 23551, 25480, 27193, 32172, 38656,
            22234, 21454, 21608, 23447, 23601, 24030, 20462,
            24833, 25342, 27954, 31168, 31179, 32066, 32333,
            32722, 33261, 33311, 33936, 34886, 35186, 35728,
            36468, 36655, 36913, 37195, 37228, 38598, 37276,
            20160, 20303, 20805, 21313, 24467, 25102, 26580,
            27713, 28171, 29539, 32294, 37325, 37507, 21460,
            22809, 23487, 28113, 31069, 32302, 31899, 22654,
            29087, 20986, 34899, 36848, 20426, 23803, 26149,
            30636, 31459, 33308, 39423, 20934, 24490, 26092,
            26991, 27529, 28147, 28310, 28516, 30462, 32020,
            24033, 36981, 37255, 38918, 20966, 21021, 25152,
            26257, 26329, 28186, 24246, 32210, 32626, 26360,
            34223, 34295, 35576, 21161, 21465, 22899, 24207,
            24464, 24661, 37604, 38500, 20663, 20767, 21213,
            21280, 21319, 21484, 21736, 21830, 21809, 22039,
            22888, 22974, 23100, 23477, 23558, 23567, 23569,
            23578, 24196, 24202, 24288, 24432, 25215, 25220,
            25307, 25484, 25463, 26119, 26124, 26157, 26230,
            26494, 26786, 27167, 27189, 27836, 28040, 28169,
            28248, 28988, 28966, 29031, 30151, 30465, 30813,
            30977, 31077, 31216, 31456, 31505, 31911, 32057,
            32918, 33750, 33931, 34121, 34909, 35059, 35359,
            35388, 35412, 35443, 35937, 36062, 37284, 37478,
            37758, 37912, 38556, 38808, 19978, 19976, 19998,
            20055, 20887, 21104, 22478, 22580, 22732, 23330,
            24120, 24773, 25854, 26465, 26454, 27972, 29366,
            30067, 31331, 33976, 35698, 37304, 37664, 22065,
            22516, 39166, 25325, 26893, 27542, 29165, 32340,
            32887, 33394, 35302, 39135, 34645, 36785, 23611,
            20280, 20449, 20405, 21767, 23072, 23517, 23529,
            24515, 24910, 25391, 26032, 26187, 26862, 27035,
            28024, 28145, 30003, 30137, 30495, 31070, 31206,
            32051, 33251, 33455, 34218, 35242, 35386, 36523,
            36763, 36914, 37341, 38663, 20154, 20161, 20995,
            22645, 22764, 23563, 29978, 23613, 33102, 35338,
            36805, 38499, 38765, 31525, 35535, 38920, 37218,
            22259, 21416, 36887, 21561, 22402, 24101, 25512,
            27700, 28810, 30561, 31883, 32736, 34928, 36930,
            37204, 37648, 37656, 38543, 29790, 39620, 23815,
            23913, 25968, 26530, 36264, 38619, 25454, 26441,
            26905, 33733, 38935, 38592, 35070, 28548, 25722,
            23544, 19990, 28716, 30045, 26159, 20932, 21046,
            21218, 22995, 24449, 24615, 25104, 25919, 25972,
            26143, 26228, 26866, 26646, 27491, 28165, 29298,
            29983, 30427, 31934, 32854, 22768, 35069, 35199,
            35488, 35475, 35531, 36893, 37266, 38738, 38745,
            25993, 31246, 33030, 38587, 24109, 24796, 25114,
            26021, 26132, 26512, 30707, 31309, 31821, 32318,
            33034, 36012, 36196, 36321, 36447, 30889, 20999,
            25305, 25509, 25666, 25240, 35373, 31363, 31680,
            35500, 38634, 32118, 33292, 34633, 20185, 20808,
            21315, 21344, 23459, 23554, 23574, 24029, 25126,
            25159, 25776, 26643, 26676, 27849, 27973, 27927,
            26579, 28508, 29006, 29053, 26059, 31359, 31661,
            32218, 32330, 32680, 33146, 33307, 33337, 34214,
            35438, 36046, 36341, 36984, 36983, 37549, 37521,
            38275, 39854, 21069, 21892, 28472, 28982, 20840,
            31109, 32341, 33203, 31950, 22092, 22609, 23720,
            25514, 26366, 26365, 26970, 29401, 30095, 30094,
            30990, 31062, 31199, 31895, 32032, 32068, 34311,
            35380, 38459, 36961, 40736, 20711, 21109, 21452,
            21474, 20489, 21930, 22766, 22863, 29245, 23435,
            23652, 21277, 24803, 24819, 25436, 25475, 25407,
            25531, 25805, 26089, 26361, 24035, 27085, 27133,
            28437, 29157, 20105, 30185, 30456, 31379, 31967,
            32207, 32156, 32865, 33609, 33624, 33900, 33980,
            34299, 35013, 36208, 36865, 36973, 37783, 38684,
            39442, 20687, 22679, 24974, 33235, 34101, 36104,
            36896, 20419, 20596, 21063, 21363, 24687, 25417,
            26463, 28204, 36275, 36895, 20439, 23646, 36042,
            26063, 32154, 21330, 34966, 20854, 25539, 23384,
            23403, 23562, 25613, 26449, 36956, 20182, 22810,
            22826, 27760, 35409, 21822, 22549, 22949, 24816,
            25171, 26561, 33333, 26965, 38464, 39364, 39464,
            20307, 22534, 23550, 32784, 23729, 24111, 24453,
            24608, 24907, 25140, 26367, 27888, 28382, 32974,
            33151, 33492, 34955, 36024, 36864, 36910, 38538,
            40667, 39899, 20195, 21488, 22823, 31532, 37261,
            38988, 40441, 28381, 28711, 21331, 21828, 23429,
            25176, 25246, 25299, 27810, 28655, 29730, 35351,
            37944, 28609, 35582, 33592, 20967, 34552, 21482,
            21481, 20294, 36948, 36784, 22890, 33073, 24061,
            31466, 36799, 26842, 35895, 29432, 40008, 27197,
            35504, 20025, 21336, 22022, 22374, 25285, 25506,
            26086, 27470, 28129, 28251, 28845, 30701, 31471,
            31658, 32187, 32829, 32966, 34507, 35477, 37723,
            22243, 22727, 24382, 26029, 26262, 27264, 27573,
            30007, 35527, 20516, 30693, 22320, 24347, 24677,
            26234, 27744, 30196, 31258, 32622, 33268, 34584,
            36933, 39347, 31689, 30044, 31481, 31569, 33988,
            36880, 31209, 31378, 33590, 23265, 30528, 20013,
            20210, 23449, 24544, 25277, 26172, 26609, 27880,
            34411, 34935, 35387, 37198, 37619, 39376, 27159,
            28710, 29482, 33511, 33879, 36015, 19969, 20806,
            20939, 21899, 23541, 24086, 24115, 24193, 24340,
            24373, 24427, 24500, 25074, 25361, 26274, 26397,
            28526, 29266, 30010, 30522, 32884, 33081, 33144,
            34678, 35519, 35548, 36229, 36339, 37530, 38263,
            38914, 40165, 21189, 25431, 30452, 26389, 27784,
            29645, 36035, 37806, 38515, 27941, 22684, 26894,
            27084, 36861, 37786, 30171, 36890, 22618, 26626,
            25524, 27131, 20291, 28460, 26584, 36795, 34086,
            32180, 37716, 26943, 28528, 22378, 22775, 23340,
            32044, 29226, 21514, 37347, 40372, 20141, 20302,
            20572, 20597, 21059, 35998, 21576, 22564, 23450,
            24093, 24213, 24237, 24311, 24351, 24716, 25269,
            25402, 25552, 26799, 27712, 30855, 31118, 31243,
            32224, 33351, 35330, 35558, 36420, 36883, 37048,
            37165, 37336, 40718, 27877, 25688, 25826, 25973,
            28404, 30340, 31515, 36969, 37841, 28346, 21746,
            24505, 25764, 36685, 36845, 37444, 20856, 22635,
            22825, 23637, 24215, 28155, 32399, 29980, 36028,
            36578, 39003, 28857, 20253, 27583, 28593, 30000,
            38651, 20814, 21520, 22581, 22615, 22956, 23648,
            24466, 26007, 26460, 28193, 30331, 33759, 36077,
            36884, 37117, 37709, 30757, 30778, 21162, 24230,
            22303, 22900, 24594, 20498, 20826, 20908, 20941,
            20992, 21776, 22612, 22616, 22871, 23445, 23798,
            23947, 24764, 25237, 25645, 26481, 26691, 26812,
            26847, 30423, 28120, 28271, 28059, 28783, 29128,
            24403, 30168, 31095, 31561, 31572, 31570, 31958,
            32113, 21040, 33891, 34153, 34276, 35342, 35588,
            35910, 36367, 36867, 36879, 37913, 38518, 38957,
            39472, 38360, 20685, 21205, 21516, 22530, 23566,
            24999, 25758, 27934, 30643, 31461, 33012, 33796,
            36947, 37509, 23776, 40199, 21311, 24471, 24499,
            28060, 29305, 30563, 31167, 31716, 27602, 29420,
            35501, 26627, 27233, 20984, 31361, 26932, 23626,
            40182, 33515, 23493, 37193, 28702, 22136, 23663,
            24775, 25958, 27788, 35930, 36929, 38931, 21585,
            26311, 37389, 22856, 37027, 20869, 20045, 20970,
            34201, 35598, 28760, 25466, 37707, 26978, 39348,
            32260, 30071, 21335, 26976, 36575, 38627, 27741,
            20108, 23612, 24336, 36841, 21250, 36049, 32905,
            34425, 24319, 26085, 20083, 20837, 22914, 23615,
            38894, 20219, 22922, 24525, 35469, 28641, 31152,
            31074, 23527, 33905, 29483, 29105, 24180, 24565,
            25467, 25754, 29123, 31896, 20035, 24316, 20043,
            22492, 22178, 24745, 28611, 32013, 33021, 33075,
            33215, 36786, 35223, 34468, 24052, 25226, 25773,
            35207, 26487, 27874, 27966, 29750, 30772, 23110,
            32629, 33453, 39340, 20467, 24259, 25309, 25490,
            25943, 26479, 30403, 29260, 32972, 32954, 36649,
            37197, 20493, 22521, 23186, 26757, 26995, 29028,
            29437, 36023, 22770, 36064, 38506, 36889, 34687,
            31204, 30695, 33833, 20271, 21093, 21338, 25293,
            26575, 27850, 30333, 31636, 31893, 33334, 34180,
            36843, 26333, 28448, 29190, 32283, 33707, 39361,
            40614, 20989, 31665, 30834, 31672, 32903, 31560,
            27368, 24161, 32908, 30033, 30048, 20843, 37474,
            28300, 30330, 37271, 39658, 20240, 32624, 25244,
            31567, 38309, 40169, 22138, 22617, 34532, 38588,
            20276, 21028, 21322, 21453, 21467, 24070, 25644,
            26001, 26495, 27710, 27726, 29256, 29359, 29677,
            30036, 32321, 33324, 34281, 36009, 31684, 37318,
            29033, 38930, 39151, 25405, 26217, 30058, 30436,
            30928, 34115, 34542, 21290, 21329, 21542, 22915,
            24199, 24444, 24754, 25161, 25209, 25259, 26000,
            27604, 27852, 30130, 30382, 30865, 31192, 32203,
            32631, 32933, 34987, 35513, 36027, 36991, 38750,
            39131, 27147, 31800, 20633, 23614, 24494, 26503,
            27608, 29749, 30473, 32654, 40763, 26570, 31255,
            21305, 30091, 39661, 24422, 33181, 33777, 32920,
            24380, 24517, 30050, 31558, 36924, 26727, 23019,
            23195, 32016, 30334, 35628, 20469, 24426, 27161,
            27703, 28418, 29922, 31080, 34920, 35413, 35961,
            24287, 25551, 30149, 31186, 33495, 37672, 37618,
            33948, 34541, 39981, 21697, 24428, 25996, 27996,
            28693, 36007, 36051, 38971, 25935, 29942, 19981,
            20184, 22496, 22827, 23142, 23500, 20904, 24067,
            24220, 24598, 25206, 25975, 26023, 26222, 28014,
            29238, 31526, 33104, 33178, 33433, 35676, 36000,
            36070, 36212, 38428, 38468, 20398, 25771, 27494,
            33310, 33889, 34154, 37096, 23553, 26963, 39080,
            33914, 34135, 20239, 21103, 24489, 24133, 26381,
            31119, 33145, 35079, 35206, 28149, 24343, 25173,
            27832, 20175, 29289, 39826, 20998, 21563, 22132,
            22707, 24996, 25198, 28954, 22894, 31881, 31966,
            32027, 38640, 25991, 32862, 19993, 20341, 20853,
            22592, 24163, 24179, 24330, 26564, 20006, 34109,
            38281, 38491, 31859, 38913, 20731, 22721, 30294,
            30887, 21029, 30629, 34065, 31622, 20559, 22793,
            29255, 31687, 32232, 36794, 36820, 36941, 20415,
            21193, 23081, 24321, 38829, 20445, 33303, 37610,
            22275, 25429, 27497, 29995, 35036, 36628, 31298,
            21215, 22675, 24917, 25098, 26286, 27597, 31807,
            33769, 20515, 20472, 21253, 21574, 22577, 22857,
            23453, 23792, 23791, 23849, 24214, 25265, 25447,
            25918, 26041, 26379, 27861, 27873, 28921, 30770,
            32299, 32990, 33459, 33804, 34028, 34562, 35090,
            35370, 35914, 37030, 37586, 39165, 40179, 40300,
            20047, 20129, 20621, 21078, 22346, 22952, 24125,
            24536, 24537, 25151, 26292, 26395, 26576, 26834,
            20882, 32033, 32938, 33192, 35584, 35980, 36031,
            37502, 38450, 21536, 38956, 21271, 20693, 21340,
            22696, 25778, 26420, 29287, 30566, 31302, 37350,
            21187, 27809, 27526, 22528, 24140, 22868, 26412,
            32763, 20961, 30406, 25705, 30952, 39764, 40635,
            22475, 22969, 26151, 26522, 27598, 21737, 27097,
            24149, 33180, 26517, 39850, 26622, 40018, 26717,
            20134, 20451, 21448, 25273, 26411, 27819, 36804,
            20397, 32365, 40639, 19975, 24930, 28288, 28459,
            34067, 21619, 26410, 39749, 24051, 31637, 23724,
            23494, 34588, 28234, 34001, 31252, 33032, 22937,
            31885, 27665, 30496, 21209, 22818, 28961, 29279,
            30683, 38695, 40289, 26891, 23167, 23064, 20901,
            21517, 21629, 26126, 30431, 36855, 37528, 40180,
            23018, 29277, 28357, 20813, 26825, 32191, 32236,
            38754, 40634, 25720, 27169, 33538, 22916, 23391,
            27611, 29467, 30450, 32178, 32791, 33945, 20786,
            26408, 40665, 30446, 26466, 21247, 39173, 23588,
            25147, 31870, 36016, 21839, 24758, 32011, 38272,
            21249, 20063, 20918, 22812, 29242, 32822, 37326,
            24357, 30690, 21380, 24441, 32004, 34220, 35379,
            36493, 38742, 26611, 34222, 37971, 24841, 24840,
            27833, 30290, 35565, 36664, 21807, 20305, 20778,
            21191, 21451, 23461, 24189, 24736, 24962, 25558,
            26377, 26586, 28263, 28044, 29494, 29495, 30001,
            31056, 35029, 35480, 36938, 37009, 37109, 38596,
            34701, 22805, 20104, 20313, 19982, 35465, 36671,
            38928, 20653, 24188, 22934, 23481, 24248, 25562,
            25594, 25793, 26332, 26954, 27096, 27915, 28342,
            29076, 29992, 31407, 32650, 32768, 33865, 33993,
            35201, 35617, 36362, 36965, 38525, 39178, 24958,
            25233, 27442, 27779, 28020, 32716, 32764, 28096,
            32645, 34746, 35064, 26469, 33713, 38972, 38647,
            27931, 32097, 33853, 37226, 20081, 21365, 23888,
            27396, 28651, 34253, 34349, 35239, 21033, 21519,
            23653, 26446, 26792, 29702, 29827, 30178, 35023,
            35041, 37324, 38626, 38520, 24459, 29575, 31435,
            33870, 25504, 30053, 21129, 27969, 28316, 29705,
            30041, 30827, 31890, 38534, 31452, 40845, 20406,
            24942, 26053, 34396, 20102, 20142, 20698, 20001,
            20940, 23534, 26009, 26753, 28092, 29471, 30274,
            30637, 31260, 31975, 33391, 35538, 36988, 37327,
            38517, 38936, 21147, 32209, 20523, 21400, 26519,
            28107, 29136, 29747, 33256, 36650, 38563, 40023,
            40607, 29792, 22593, 28057, 32047, 39006, 20196,
            20278, 20363, 20919, 21169, 23994, 24604, 29618,
            31036, 33491, 37428, 38583, 38646, 38666, 40599,
            40802, 26278, 27508, 21015, 21155, 28872, 35010,
            24265, 24651, 24976, 28451, 29001, 31806, 32244,
            32879, 34030, 36899, 37676, 21570, 39791, 27347,
            28809, 36034, 36335, 38706, 21172, 23105, 24266,
            24324, 26391, 27004, 27028, 28010, 28431, 29282,
            29436, 31725, 32769, 32894, 34635, 37070, 20845,
            40595, 31108, 32907, 37682, 35542, 20525, 21644,
            35441, 27498, 36036, 33031, 24785, 26528, 40434,
            20121, 20120, 39952, 35435, 34241, 34152, 26880,
            28286, 30871, 33109, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 24332, 19984,
            19989, 20010, 20017, 20022, 20028, 20031, 20034,
            20054, 20056, 20098, 20101, 35947, 20106, 33298,
            24333, 20110, 20126, 20127, 20128, 20130, 20144,
            20147, 20150, 20174, 20173, 20164, 20166, 20162,
            20183, 20190, 20205, 20191, 20215, 20233, 20314,
            20272, 20315, 20317, 20311, 20295, 20342, 20360,
            20367, 20376, 20347, 20329, 20336, 20369, 20335,
            20358, 20374, 20760, 20436, 20447, 20430, 20440,
            20443, 20433, 20442, 20432, 20452, 20453, 20506,
            20520, 20500, 20522, 20517, 20485, 20252, 20470,
            20513, 20521, 20524, 20478, 20463, 20497, 20486,
            20547, 20551, 26371, 20565, 20560, 20552, 20570,
            20566, 20588, 20600, 20608, 20634, 20613, 20660,
            20658, 20681, 20682, 20659, 20674, 20694, 20702,
            20709, 20717, 20707, 20718, 20729, 20725, 20745,
            20737, 20738, 20758, 20757, 20756, 20762, 20769,
            20794, 20791, 20796, 20795, 20799, 20800, 20818,
            20812, 20820, 20834, 31480, 20841, 20842, 20846,
            20864, 20866, 22232, 20876, 20873, 20879, 20881,
            20883, 20885, 20886, 20900, 20902, 20898, 20905,
            20906, 20907, 20915, 20913, 20914, 20912, 20917,
            20925, 20933, 20937, 20955, 20960, 34389, 20969,
            20973, 20976, 20981, 20990, 20996, 21003, 21012,
            21006, 21031, 21034, 21038, 21043, 21049, 21071,
            21060, 21067, 21068, 21086, 21076, 21098, 21108,
            21097, 21107, 21119, 21117, 21133, 21140, 21138,
            21105, 21128, 21137, 36776, 36775, 21164, 21165,
            21180, 21173, 21185, 21197, 21207, 21214, 21219,
            21222, 39149, 21216, 21235, 21237, 21240, 21241,
            21254, 21256, 30008, 21261, 21264, 21263, 21269,
            21274, 21283, 21295, 21297, 21299, 21304, 21312,
            21318, 21317, 19991, 21321, 21325, 20950, 21342,
            21353, 21358, 22808, 21371, 21367, 21378, 21398,
            21408, 21414, 21413, 21422, 21424, 21430, 21443,
            31762, 38617, 21471, 26364, 29166, 21486, 21480,
            21485, 21498, 21505, 21565, 21568, 21548, 21549,
            21564, 21550, 21558, 21545, 21533, 21582, 21647,
            21621, 21646, 21599, 21617, 21623, 21616, 21650,
            21627, 21632, 21622, 21636, 21648, 21638, 21703,
            21666, 21688, 21669, 21676, 21700, 21704, 21672,
            21675, 21698, 21668, 21694, 21692, 21720, 21733,
            21734, 21775, 21780, 21757, 21742, 21741, 21754,
            21730, 21817, 21824, 21859, 21836, 21806, 21852,
            21829, 21846, 21847, 21816, 21811, 21853, 21913,
            21888, 21679, 21898, 21919, 21883, 21886, 21912,
            21918, 21934, 21884, 21891, 21929, 21895, 21928,
            21978, 21957, 21983, 21956, 21980, 21988, 21972,
            22036, 22007, 22038, 22014, 22013, 22043, 22009,
            22094, 22096, 29151, 22068, 22070, 22066, 22072,
            22123, 22116, 22063, 22124, 22122, 22150, 22144,
            22154, 22176, 22164, 22159, 22181, 22190, 22198,
            22196, 22210, 22204, 22209, 22211, 22208, 22216,
            22222, 22225, 22227, 22231, 22254, 22265, 22272,
            22271, 22276, 22281, 22280, 22283, 22285, 22291,
            22296, 22294, 21959, 22300, 22310, 22327, 22328,
            22350, 22331, 22336, 22351, 22377, 22464, 22408,
            22369, 22399, 22409, 22419, 22432, 22451, 22436,
            22442, 22448, 22467, 22470, 22484, 22482, 22483,
            22538, 22486, 22499, 22539, 22553, 22557, 22642,
            22561, 22626, 22603, 22640, 27584, 22610, 22589,
            22649, 22661, 22713, 22687, 22699, 22714, 22750,
            22715, 22712, 22702, 22725, 22739, 22737, 22743,
            22745, 22744, 22757, 22748, 22756, 22751, 22767,
            22778, 22777, 22779, 22780, 22781, 22786, 22794,
            22800, 22811, 26790, 22821, 22828, 22829, 22834,
            22840, 22846, 31442, 22869, 22864, 22862, 22874,
            22872, 22882, 22880, 22887, 22892, 22889, 22904,
            22913, 22941, 20318, 20395, 22947, 22962, 22982,
            23016, 23004, 22925, 23001, 23002, 23077, 23071,
            23057, 23068, 23049, 23066, 23104, 23148, 23113,
            23093, 23094, 23138, 23146, 23194, 23228, 23230,
            23243, 23234, 23229, 23267, 23255, 23270, 23273,
            23254, 23290, 23291, 23308, 23307, 23318, 23346,
            23248, 23338, 23350, 23358, 23363, 23365, 23360,
            23377, 23381, 23386, 23387, 23397, 23401, 23408,
            23411, 23413, 23416, 25992, 23418, 23424, 23427,
            23462, 23480, 23491, 23495, 23497, 23508, 23504,
            23524, 23526, 23522, 23518, 23525, 23531, 23536,
            23542, 23539, 23557, 23559, 23560, 23565, 23571,
            23584, 23586, 23592, 23608, 23609, 23617, 23622,
            23630, 23635, 23632, 23631, 23409, 23660, 23662,
            20066, 23670, 23673, 23692, 23697, 23700, 22939,
            23723, 23739, 23734, 23740, 23735, 23749, 23742,
            23751, 23769, 23785, 23805, 23802, 23789, 23948,
            23786, 23819, 23829, 23831, 23900, 23839, 23835,
            23825, 23828, 23842, 23834, 23833, 23832, 23884,
            23890, 23886, 23883, 23916, 23923, 23926, 23943,
            23940, 23938, 23970, 23965, 23980, 23982, 23997,
            23952, 23991, 23996, 24009, 24013, 24019, 24018,
            24022, 24027, 24043, 24050, 24053, 24075, 24090,
            24089, 24081, 24091, 24118, 24119, 24132, 24131,
            24128, 24142, 24151, 24148, 24159, 24162, 24164,
            24135, 24181, 24182, 24186, 40636, 24191, 24224,
            24257, 24258, 24264, 24272, 24271, 24278, 24291,
            24285, 24282, 24283, 24290, 24289, 24296, 24297,
            24300, 24305, 24307, 24304, 24308, 24312, 24318,
            24323, 24329, 24413, 24412, 24331, 24337, 24342,
            24361, 24365, 24376, 24385, 24392, 24396, 24398,
            24367, 24401, 24406, 24407, 24409, 24417, 24429,
            24435, 24439, 24451, 24450, 24447, 24458, 24456,
            24465, 24455, 24478, 24473, 24472, 24480, 24488,
            24493, 24508, 24534, 24571, 24548, 24568, 24561,
            24541, 24755, 24575, 24609, 24672, 24601, 24592,
            24617, 24590, 24625, 24603, 24597, 24619, 24614,
            24591, 24634, 24666, 24641, 24682, 24695, 24671,
            24650, 24646, 24653, 24675, 24643, 24676, 24642,
            24684, 24683, 24665, 24705, 24717, 24807, 24707,
            24730, 24708, 24731, 24726, 24727, 24722, 24743,
            24715, 24801, 24760, 24800, 24787, 24756, 24560,
            24765, 24774, 24757, 24792, 24909, 24853, 24838,
            24822, 24823, 24832, 24820, 24826, 24835, 24865,
            24827, 24817, 24845, 24846, 24903, 24894, 24872,
            24871, 24906, 24895, 24892, 24876, 24884, 24893,
            24898, 24900, 24947, 24951, 24920, 24921, 24922,
            24939, 24948, 24943, 24933, 24945, 24927, 24925,
            24915, 24949, 24985, 24982, 24967, 25004, 24980,
            24986, 24970, 24977, 25003, 25006, 25036, 25034,
            25033, 25079, 25032, 25027, 25030, 25018, 25035,
            32633, 25037, 25062, 25059, 25078, 25082, 25076,
            25087, 25085, 25084, 25086, 25088, 25096, 25097,
            25101, 25100, 25108, 25115, 25118, 25121, 25130,
            25134, 25136, 25138, 25139, 25153, 25166, 25182,
            25187, 25179, 25184, 25192, 25212, 25218, 25225,
            25214, 25234, 25235, 25238, 25300, 25219, 25236,
            25303, 25297, 25275, 25295, 25343, 25286, 25812,
            25288, 25308, 25292, 25290, 25282, 25287, 25243,
            25289, 25356, 25326, 25329, 25383, 25346, 25352,
            25327, 25333, 25424, 25406, 25421, 25628, 25423,
            25494, 25486, 25472, 25515, 25462, 25507, 25487,
            25481, 25503, 25525, 25451, 25449, 25534, 25577,
            25536, 25542, 25571, 25545, 25554, 25590, 25540,
            25622, 25652, 25606, 25619, 25638, 25654, 25885,
            25623, 25640, 25615, 25703, 25711, 25718, 25678,
            25898, 25749, 25747, 25765, 25769, 25736, 25788,
            25818, 25810, 25797, 25799, 25787, 25816, 25794,
            25841, 25831, 33289, 25824, 25825, 25260, 25827,
            25839, 25900, 25846, 25844, 25842, 25850, 25856,
            25853, 25880, 25884, 25861, 25892, 25891, 25899,
            25908, 25909, 25911, 25910, 25912, 30027, 25928,
            25942, 25941, 25933, 25944, 25950, 25949, 25970,
            25976, 25986, 25987, 35722, 26011, 26015, 26027,
            26039, 26051, 26054, 26049, 26052, 26060, 26066,
            26075, 26073, 26080, 26081, 26097, 26482, 26122,
            26115, 26107, 26483, 26165, 26166, 26164, 26140,
            26191, 26180, 26185, 26177, 26206, 26205, 26212,
            26215, 26216, 26207, 26210, 26224, 26243, 26248,
            26254, 26249, 26244, 26264, 26269, 26305, 26297,
            26313, 26302, 26300, 26308, 26296, 26326, 26330,
            26336, 26175, 26342, 26345, 26352, 26357, 26359,
            26383, 26390, 26398, 26406, 26407, 38712, 26414,
            26431, 26422, 26433, 26424, 26423, 26438, 26462,
            26464, 26457, 26467, 26468, 26505, 26480, 26537,
            26492, 26474, 26508, 26507, 26534, 26529, 26501,
            26551, 26607, 26548, 26604, 26547, 26601, 26552,
            26596, 26590, 26589, 26594, 26606, 26553, 26574,
            26566, 26599, 27292, 26654, 26694, 26665, 26688,
            26701, 26674, 26702, 26803, 26667, 26713, 26723,
            26743, 26751, 26783, 26767, 26797, 26772, 26781,
            26779, 26755, 27310, 26809, 26740, 26805, 26784,
            26810, 26895, 26765, 26750, 26881, 26826, 26888,
            26840, 26914, 26918, 26849, 26892, 26829, 26836,
            26855, 26837, 26934, 26898, 26884, 26839, 26851,
            26917, 26873, 26848, 26863, 26920, 26922, 26906,
            26915, 26913, 26822, 27001, 26999, 26972, 27000,
            26987, 26964, 27006, 26990, 26937, 26996, 26941,
            26969, 26928, 26977, 26974, 26973, 27009, 26986,
            27058, 27054, 27088, 27071, 27073, 27091, 27070,
            27086, 23528, 27082, 27101, 27067, 27075, 27047,
            27182, 27025, 27040, 27036, 27029, 27060, 27102,
            27112, 27138, 27163, 27135, 27402, 27129, 27122,
            27111, 27141, 27057, 27166, 27117, 27156, 27115,
            27146, 27154, 27329, 27171, 27155, 27204, 27148,
            27250, 27190, 27256, 27207, 27234, 27225, 27238,
            27208, 27192, 27170, 27280, 27277, 27296, 27268,
            27298, 27299, 27287, 34327, 27323, 27331, 27330,
            27320, 27315, 27308, 27358, 27345, 27359, 27306,
            27354, 27370, 27387, 27397, 34326, 27386, 27410,
            27414, 39729, 27423, 27448, 27447, 30428, 27449,
            39150, 27463, 27459, 27465, 27472, 27481, 27476,
            27483, 27487, 27489, 27512, 27513, 27519, 27520,
            27524, 27523, 27533, 27544, 27541, 27550, 27556,
            27562, 27563, 27567, 27570, 27569, 27571, 27575,
            27580, 27590, 27595, 27603, 27615, 27628, 27627,
            27635, 27631, 40638, 27656, 27667, 27668, 27675,
            27684, 27683, 27742, 27733, 27746, 27754, 27778,
            27789, 27802, 27777, 27803, 27774, 27752, 27763,
            27794, 27792, 27844, 27889, 27859, 27837, 27863,
            27845, 27869, 27822, 27825, 27838, 27834, 27867,
            27887, 27865, 27882, 27935, 34893, 27958, 27947,
            27965, 27960, 27929, 27957, 27955, 27922, 27916,
            28003, 28051, 28004, 27994, 28025, 27993, 28046,
            28053, 28644, 28037, 28153, 28181, 28170, 28085,
            28103, 28134, 28088, 28102, 28140, 28126, 28108,
            28136, 28114, 28101, 28154, 28121, 28132, 28117,
            28138, 28142, 28205, 28270, 28206, 28185, 28274,
            28255, 28222, 28195, 28267, 28203, 28278, 28237,
            28191, 28227, 28218, 28238, 28196, 28415, 28189,
            28216, 28290, 28330, 28312, 28361, 28343, 28371,
            28349, 28335, 28356, 28338, 28372, 28373, 28303,
            28325, 28354, 28319, 28481, 28433, 28748, 28396,
            28408, 28414, 28479, 28402, 28465, 28399, 28466,
            28364, 28478, 28435, 28407, 28550, 28538, 28536,
            28545, 28544, 28527, 28507, 28659, 28525, 28546,
            28540, 28504, 28558, 28561, 28610, 28518, 28595,
            28579, 28577, 28580, 28601, 28614, 28586, 28639,
            28629, 28652, 28628, 28632, 28657, 28654, 28635,
            28681, 28683, 28666, 28689, 28673, 28687, 28670,
            28699, 28698, 28532, 28701, 28696, 28703, 28720,
            28734, 28722, 28753, 28771, 28825, 28818, 28847,
            28913, 28844, 28856, 28851, 28846, 28895, 28875,
            28893, 28889, 28937, 28925, 28956, 28953, 29029,
            29013, 29064, 29030, 29026, 29004, 29014, 29036,
            29071, 29179, 29060, 29077, 29096, 29100, 29143,
            29113, 29118, 29138, 29129, 29140, 29134, 29152,
            29164, 29159, 29173, 29180, 29177, 29183, 29197,
            29200, 29211, 29224, 29229, 29228, 29232, 29234,
            29243, 29244, 29247, 29248, 29254, 29259, 29272,
            29300, 29310, 29314, 29313, 29319, 29330, 29334,
            29346, 29351, 29369, 29362, 29379, 29382, 29380,
            29390, 29394, 29410, 29408, 29409, 29433, 29431,
            20495, 29463, 29450, 29468, 29462, 29469, 29492,
            29487, 29481, 29477, 29502, 29518, 29519, 40664,
            29527, 29546, 29544, 29552, 29560, 29557, 29563,
            29562, 29640, 29619, 29646, 29627, 29632, 29669,
            29678, 29662, 29858, 29701, 29807, 29733, 29688,
            29746, 29754, 29781, 29759, 29791, 29785, 29761,
            29788, 29801, 29808, 29795, 29802, 29814, 29822,
            29835, 29854, 29863, 29898, 29903, 29908, 29681,
            29920, 29923, 29927, 29929, 29934, 29938, 29936,
            29937, 29944, 29943, 29956, 29955, 29957, 29964,
            29966, 29965, 29973, 29971, 29982, 29990, 29996,
            30012, 30020, 30029, 30026, 30025, 30043, 30022,
            30042, 30057, 30052, 30055, 30059, 30061, 30072,
            30070, 30086, 30087, 30068, 30090, 30089, 30082,
            30100, 30106, 30109, 30117, 30115, 30146, 30131,
            30147, 30133, 30141, 30136, 30140, 30129, 30157,
            30154, 30162, 30169, 30179, 30174, 30206, 30207,
            30204, 30209, 30192, 30202, 30194, 30195, 30219,
            30221, 30217, 30239, 30247, 30240, 30241, 30242,
            30244, 30260, 30256, 30267, 30279, 30280, 30278,
            30300, 30296, 30305, 30306, 30312, 30313, 30314,
            30311, 30316, 30320, 30322, 30326, 30328, 30332,
            30336, 30339, 30344, 30347, 30350, 30358, 30355,
            30361, 30362, 30384, 30388, 30392, 30393, 30394,
            30402, 30413, 30422, 30418, 30430, 30433, 30437,
            30439, 30442, 34351, 30459, 30472, 30471, 30468,
            30505, 30500, 30494, 30501, 30502, 30491, 30519,
            30520, 30535, 30554, 30568, 30571, 30555, 30565,
            30591, 30590, 30585, 30606, 30603, 30609, 30624,
            30622, 30640, 30646, 30649, 30655, 30652, 30653,
            30651, 30663, 30669, 30679, 30682, 30684, 30691,
            30702, 30716, 30732, 30738, 31014, 30752, 31018,
            30789, 30862, 30836, 30854, 30844, 30874, 30860,
            30883, 30901, 30890, 30895, 30929, 30918, 30923,
            30932, 30910, 30908, 30917, 30922, 30956, 30951,
            30938, 30973, 30964, 30983, 30994, 30993, 31001,
            31020, 31019, 31040, 31072, 31063, 31071, 31066,
            31061, 31059, 31098, 31103, 31114, 31133, 31143,
            40779, 31146, 31150, 31155, 31161, 31162, 31177,
            31189, 31207, 31212, 31201, 31203, 31240, 31245,
            31256, 31257, 31264, 31263, 31104, 31281, 31291,
            31294, 31287, 31299, 31319, 31305, 31329, 31330,
            31337, 40861, 31344, 31353, 31357, 31368, 31383,
            31381, 31384, 31382, 31401, 31432, 31408, 31414,
            31429, 31428, 31423, 36995, 31431, 31434, 31437,
            31439, 31445, 31443, 31449, 31450, 31453, 31457,
            31458, 31462, 31469, 31472, 31490, 31503, 31498,
            31494, 31539, 31512, 31513, 31518, 31541, 31528,
            31542, 31568, 31610, 31492, 31565, 31499, 31564,
            31557, 31605, 31589, 31604, 31591, 31600, 31601,
            31596, 31598, 31645, 31640, 31647, 31629, 31644,
            31642, 31627, 31634, 31631, 31581, 31641, 31691,
            31681, 31692, 31695, 31668, 31686, 31709, 31721,
            31761, 31764, 31718, 31717, 31840, 31744, 31751,
            31763, 31731, 31735, 31767, 31757, 31734, 31779,
            31783, 31786, 31775, 31799, 31787, 31805, 31820,
            31811, 31828, 31823, 31808, 31824, 31832, 31839,
            31844, 31830, 31845, 31852, 31861, 31875, 31888,
            31908, 31917, 31906, 31915, 31905, 31912, 31923,
            31922, 31921, 31918, 31929, 31933, 31936, 31941,
            31938, 31960, 31954, 31964, 31970, 39739, 31983,
            31986, 31988, 31990, 31994, 32006, 32002, 32028,
            32021, 32010, 32069, 32075, 32046, 32050, 32063,
            32053, 32070, 32115, 32086, 32078, 32114, 32104,
            32110, 32079, 32099, 32147, 32137, 32091, 32143,
            32125, 32155, 32186, 32174, 32163, 32181, 32199,
            32189, 32171, 32317, 32162, 32175, 32220, 32184,
            32159, 32176, 32216, 32221, 32228, 32222, 32251,
            32242, 32225, 32261, 32266, 32291, 32289, 32274,
            32305, 32287, 32265, 32267, 32290, 32326, 32358,
            32315, 32309, 32313, 32323, 32311, 32306, 32314,
            32359, 32349, 32342, 32350, 32345, 32346, 32377,
            32362, 32361, 32380, 32379, 32387, 32213, 32381,
            36782, 32383, 32392, 32393, 32396, 32402, 32400,
            32403, 32404, 32406, 32398, 32411, 32412, 32568,
            32570, 32581, 32588, 32589, 32590, 32592, 32593,
            32597, 32596, 32600, 32607, 32608, 32616, 32617,
            32615, 32632, 32642, 32646, 32643, 32648, 32647,
            32652, 32660, 32670, 32669, 32666, 32675, 32687,
            32690, 32697, 32686, 32694, 32696, 35697, 32709,
            32710, 32714, 32725, 32724, 32737, 32742, 32745,
            32755, 32761, 39132, 32774, 32772, 32779, 32786,
            32792, 32793, 32796, 32801, 32808, 32831, 32827,
            32842, 32838, 32850, 32856, 32858, 32863, 32866,
            32872, 32883, 32882, 32880, 32886, 32889, 32893,
            32895, 32900, 32902, 32901, 32923, 32915, 32922,
            32941, 20880, 32940, 32987, 32997, 32985, 32989,
            32964, 32986, 32982, 33033, 33007, 33009, 33051,
            33065, 33059, 33071, 33099, 38539, 33094, 33086,
            33107, 33105, 33020, 33137, 33134, 33125, 33126,
            33140, 33155, 33160, 33162, 33152, 33154, 33184,
            33173, 33188, 33187, 33119, 33171, 33193, 33200,
            33205, 33214, 33208, 33213, 33216, 33218, 33210,
            33225, 33229, 33233, 33241, 33240, 33224, 33242,
            33247, 33248, 33255, 33274, 33275, 33278, 33281,
            33282, 33285, 33287, 33290, 33293, 33296, 33302,
            33321, 33323, 33336, 33331, 33344, 33369, 33368,
            33373, 33370, 33375, 33380, 33378, 33384, 33386,
            33387, 33326, 33393, 33399, 33400, 33406, 33421,
            33426, 33451, 33439, 33467, 33452, 33505, 33507,
            33503, 33490, 33524, 33523, 33530, 33683, 33539,
            33531, 33529, 33502, 33542, 33500, 33545, 33497,
            33589, 33588, 33558, 33586, 33585, 33600, 33593,
            33616, 33605, 33583, 33579, 33559, 33560, 33669,
            33690, 33706, 33695, 33698, 33686, 33571, 33678,
            33671, 33674, 33660, 33717, 33651, 33653, 33696,
            33673, 33704, 33780, 33811, 33771, 33742, 33789,
            33795, 33752, 33803, 33729, 33783, 33799, 33760,
            33778, 33805, 33826, 33824, 33725, 33848, 34054,
            33787, 33901, 33834, 33852, 34138, 33924, 33911,
            33899, 33965, 33902, 33922, 33897, 33862, 33836,
            33903, 33913, 33845, 33994, 33890, 33977, 33983,
            33951, 34009, 33997, 33979, 34010, 34000, 33985,
            33990, 34006, 33953, 34081, 34047, 34036, 34071,
            34072, 34092, 34079, 34069, 34068, 34044, 34112,
            34147, 34136, 34120, 34113, 34306, 34123, 34133,
            34176, 34212, 34184, 34193, 34186, 34216, 34157,
            34196, 34203, 34282, 34183, 34204, 34167, 34174,
            34192, 34249, 34234, 34255, 34233, 34256, 34261,
            34269, 34277, 34268, 34297, 34314, 34323, 34315,
            34302, 34298, 34310, 34338, 34330, 34352, 34367,
            34381, 20053, 34388, 34399, 34407, 34417, 34451,
            34467, 34473, 34474, 34443, 34444, 34486, 34479,
            34500, 34502, 34480, 34505, 34851, 34475, 34516,
            34526, 34537, 34540, 34527, 34523, 34543, 34578,
            34566, 34568, 34560, 34563, 34555, 34577, 34569,
            34573, 34553, 34570, 34612, 34623, 34615, 34619,
            34597, 34601, 34586, 34656, 34655, 34680, 34636,
            34638, 34676, 34647, 34664, 34670, 34649, 34643,
            34659, 34666, 34821, 34722, 34719, 34690, 34735,
            34763, 34749, 34752, 34768, 38614, 34731, 34756,
            34739, 34759, 34758, 34747, 34799, 34802, 34784,
            34831, 34829, 34814, 34806, 34807, 34830, 34770,
            34833, 34838, 34837, 34850, 34849, 34865, 34870,
            34873, 34855, 34875, 34884, 34882, 34898, 34905,
            34910, 34914, 34923, 34945, 34942, 34974, 34933,
            34941, 34997, 34930, 34946, 34967, 34962, 34990,
            34969, 34978, 34957, 34980, 34992, 35007, 34993,
            35011, 35012, 35028, 35032, 35033, 35037, 35065,
            35074, 35068, 35060, 35048, 35058, 35076, 35084,
            35082, 35091, 35139, 35102, 35109, 35114, 35115,
            35137, 35140, 35131, 35126, 35128, 35148, 35101,
            35168, 35166, 35174, 35172, 35181, 35178, 35183,
            35188, 35191, 35198, 35203, 35208, 35210, 35219,
            35224, 35233, 35241, 35238, 35244, 35247, 35250,
            35258, 35261, 35263, 35264, 35290, 35292, 35293,
            35303, 35316, 35320, 35331, 35350, 35344, 35340,
            35355, 35357, 35365, 35382, 35393, 35419, 35410,
            35398, 35400, 35452, 35437, 35436, 35426, 35461,
            35458, 35460, 35496, 35489, 35473, 35493, 35494,
            35482, 35491, 35524, 35533, 35522, 35546, 35563,
            35571, 35559, 35556, 35569, 35604, 35552, 35554,
            35575, 35550, 35547, 35596, 35591, 35610, 35553,
            35606, 35600, 35607, 35616, 35635, 38827, 35622,
            35627, 35646, 35624, 35649, 35660, 35663, 35662,
            35657, 35670, 35675, 35674, 35691, 35679, 35692,
            35695, 35700, 35709, 35712, 35724, 35726, 35730,
            35731, 35734, 35737, 35738, 35898, 35905, 35903,
            35912, 35916, 35918, 35920, 35925, 35938, 35948,
            35960, 35962, 35970, 35977, 35973, 35978, 35981,
            35982, 35988, 35964, 35992, 25117, 36013, 36010,
            36029, 36018, 36019, 36014, 36022, 36040, 36033,
            36068, 36067, 36058, 36093, 36090, 36091, 36100,
            36101, 36106, 36103, 36111, 36109, 36112, 40782,
            36115, 36045, 36116, 36118, 36199, 36205, 36209,
            36211, 36225, 36249, 36290, 36286, 36282, 36303,
            36314, 36310, 36300, 36315, 36299, 36330, 36331,
            36319, 36323, 36348, 36360, 36361, 36351, 36381,
            36382, 36368, 36383, 36418, 36405, 36400, 36404,
            36426, 36423, 36425, 36428, 36432, 36424, 36441,
            36452, 36448, 36394, 36451, 36437, 36470, 36466,
            36476, 36481, 36487, 36485, 36484, 36491, 36490,
            36499, 36497, 36500, 36505, 36522, 36513, 36524,
            36528, 36550, 36529, 36542, 36549, 36552, 36555,
            36571, 36579, 36604, 36603, 36587, 36606, 36618,
            36613, 36629, 36626, 36633, 36627, 36636, 36639,
            36635, 36620, 36646, 36659, 36667, 36665, 36677,
            36674, 36670, 36684, 36681, 36678, 36686, 36695,
            36700, 36706, 36707, 36708, 36764, 36767, 36771,
            36781, 36783, 36791, 36826, 36837, 36834, 36842,
            36847, 36999, 36852, 36869, 36857, 36858, 36881,
            36885, 36897, 36877, 36894, 36886, 36875, 36903,
            36918, 36917, 36921, 36856, 36943, 36944, 36945,
            36946, 36878, 36937, 36926, 36950, 36952, 36958,
            36968, 36975, 36982, 38568, 36978, 36994, 36989,
            36993, 36992, 37002, 37001, 37007, 37032, 37039,
            37041, 37045, 37090, 37092, 25160, 37083, 37122,
            37138, 37145, 37170, 37168, 37194, 37206, 37208,
            37219, 37221, 37225, 37235, 37234, 37259, 37257,
            37250, 37282, 37291, 37295, 37290, 37301, 37300,
            37306, 37312, 37313, 37321, 37323, 37328, 37334,
            37343, 37345, 37339, 37372, 37365, 37366, 37406,
            37375, 37396, 37420, 37397, 37393, 37470, 37463,
            37445, 37449, 37476, 37448, 37525, 37439, 37451,
            37456, 37532, 37526, 37523, 37531, 37466, 37583,
            37561, 37559, 37609, 37647, 37626, 37700, 37678,
            37657, 37666, 37658, 37667, 37690, 37685, 37691,
            37724, 37728, 37756, 37742, 37718, 37808, 37804,
            37805, 37780, 37817, 37846, 37847, 37864, 37861,
            37848, 37827, 37853, 37840, 37832, 37860, 37914,
            37908, 37907, 37891, 37895, 37904, 37942, 37931,
            37941, 37921, 37946, 37953, 37970, 37956, 37979,
            37984, 37986, 37982, 37994, 37417, 38000, 38005,
            38007, 38013, 37978, 38012, 38014, 38017, 38015,
            38274, 38279, 38282, 38292, 38294, 38296, 38297,
            38304, 38312, 38311, 38317, 38332, 38331, 38329,
            38334, 38346, 28662, 38339, 38349, 38348, 38357,
            38356, 38358, 38364, 38369, 38373, 38370, 38433,
            38440, 38446, 38447, 38466, 38476, 38479, 38475,
            38519, 38492, 38494, 38493, 38495, 38502, 38514,
            38508, 38541, 38552, 38549, 38551, 38570, 38567,
            38577, 38578, 38576, 38580, 38582, 38584, 38585,
            38606, 38603, 38601, 38605, 35149, 38620, 38669,
            38613, 38649, 38660, 38662, 38664, 38675, 38670,
            38673, 38671, 38678, 38681, 38692, 38698, 38704,
            38713, 38717, 38718, 38724, 38726, 38728, 38722,
            38729, 38748, 38752, 38756, 38758, 38760, 21202,
            38763, 38769, 38777, 38789, 38780, 38785, 38778,
            38790, 38795, 38799, 38800, 38812, 38824, 38822,
            38819, 38835, 38836, 38851, 38854, 38856, 38859,
            38876, 38893, 40783, 38898, 31455, 38902, 38901,
            38927, 38924, 38968, 38948, 38945, 38967, 38973,
            38982, 38991, 38987, 39019, 39023, 39024, 39025,
            39028, 39027, 39082, 39087, 39089, 39094, 39108,
            39107, 39110, 39145, 39147, 39171, 39177, 39186,
            39188, 39192, 39201, 39197, 39198, 39204, 39200,
            39212, 39214, 39229, 39230, 39234, 39241, 39237,
            39248, 39243, 39249, 39250, 39244, 39253, 39319,
            39320, 39333, 39341, 39342, 39356, 39391, 39387,
            39389, 39384, 39377, 39405, 39406, 39409, 39410,
            39419, 39416, 39425, 39439, 39429, 39394, 39449,
            39467, 39479, 39493, 39490, 39488, 39491, 39486,
            39509, 39501, 39515, 39511, 39519, 39522, 39525,
            39524, 39529, 39531, 39530, 39597, 39600, 39612,
            39616, 39631, 39633, 39635, 39636, 39646, 39647,
            39650, 39651, 39654, 39663, 39659, 39662, 39668,
            39665, 39671, 39675, 39686, 39704, 39706, 39711,
            39714, 39715, 39717, 39719, 39720, 39721, 39722,
            39726, 39727, 39730, 39748, 39747, 39759, 39757,
            39758, 39761, 39768, 39796, 39827, 39811, 39825,
            39830, 39831, 39839, 39840, 39848, 39860, 39872,
            39882, 39865, 39878, 39887, 39889, 39890, 39907,
            39906, 39908, 39892, 39905, 39994, 39922, 39921,
            39920, 39957, 39956, 39945, 39955, 39948, 39942,
            39944, 39954, 39946, 39940, 39982, 39963, 39973,
            39972, 39969, 39984, 40007, 39986, 40006, 39998,
            40026, 40032, 40039, 40054, 40056, 40167, 40172,
            40176, 40201, 40200, 40171, 40195, 40198, 40234,
            40230, 40367, 40227, 40223, 40260, 40213, 40210,
            40257, 40255, 40254, 40262, 40264, 40285, 40286,
            40292, 40273, 40272, 40281, 40306, 40329, 40327,
            40363, 40303, 40314, 40346, 40356, 40361, 40370,
            40388, 40385, 40379, 40376, 40378, 40390, 40399,
            40386, 40409, 40403, 40440, 40422, 40429, 40431,
            40445, 40474, 40475, 40478, 40565, 40569, 40573,
            40577, 40584, 40587, 40588, 40594, 40597, 40593,
            40605, 40613, 40617, 40632, 40618, 40621, 38753,
            40652, 40654, 40655, 40656, 40660, 40668, 40670,
            40669, 40672, 40677, 40680, 40687, 40692, 40694,
            40695, 40697, 40699, 40700, 40701, 40711, 40712,
            30391, 40725, 40737, 40748, 40766, 40778, 40786,
            40788, 40803, 40799, 40800, 40801, 40806, 40807,
            40812, 40810, 40823, 40818, 40822, 40853, 40860,
            40864, 22575, 27079, 36953, 29796, 20956, 29081,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            32394, 35100, 37704, 37512, 34012, 20425, 28859,
            26161, 26824, 37625, 26363, 24389, 20008, 20193,
            20220, 20224, 20227, 20281, 20310, 20370, 20362,
            20378, 20372, 20429, 20544, 20514, 20479, 20510,
            20550, 20592, 20546, 20628, 20724, 20696, 20810,
            20836, 20893, 20926, 20972, 21013, 21148, 21158,
            21184, 21211, 21248, 21255, 21284, 21362, 21395,
            21426, 21469, 64014, 21660, 21642, 21673, 21759,
            21894, 22361, 22373, 22444, 22472, 22471, 64015,
            64016, 22686, 22706, 22795, 22867, 22875, 22877,
            22883, 22948, 22970, 23382, 23488, 29999, 23512,
            23532, 23582, 23718, 23738, 23797, 23847, 23891,
            64017, 23874, 23917, 23992, 23993, 24016, 24353,
            24372, 24423, 24503, 24542, 24669, 24709, 24714,
            24798, 24789, 24864, 24818, 24849, 24887, 24880,
            24984, 25107, 25254, 25589, 25696, 25757, 25806,
            25934, 26112, 26133, 26171, 26121, 26158, 26142,
            26148, 26213, 26199, 26201, 64018, 26227, 26265,
            26272, 26290, 26303, 26362, 26382, 63785, 26470,
            26555, 26706, 26560, 26625, 26692, 26831, 64019,
            26984, 64020, 27032, 27106, 27184, 27243, 27206,
            27251, 27262, 27362, 27364, 27606, 27711, 27740,
            27782, 27759, 27866, 27908, 28039, 28015, 28054,
            28076, 28111, 28152, 28146, 28156, 28217, 28252,
            28199, 28220, 28351, 28552, 28597, 28661, 28677,
            28679, 28712, 28805, 28843, 28943, 28932, 29020,
            28998, 28999, 64021, 29121, 29182, 29361, 29374,
            29476, 64022, 29559, 29629, 29641, 29654, 29667,
            29650, 29703, 29685, 29734, 29738, 29737, 29742,
            29794, 29833, 29855, 29953, 30063, 30338, 30364,
            30366, 30363, 30374, 64023, 30534, 21167, 30753,
            30798, 30820, 30842, 31024, 64024, 64025, 64026,
            31124, 64027, 31131, 31441, 31463, 64028, 31467,
            31646, 64029, 32072, 32092, 32183, 32160, 32214,
            32338, 32583, 32673, 64030, 33537, 33634, 33663,
            33735, 33782, 33864, 33972, 34131, 34137, 34155,
            64031, 34224, 64032, 64033, 34823, 35061, 35346,
            35383, 35449, 35495, 35518, 35551, 64034, 35574,
            35667, 35711, 36080, 36084, 36114, 36214, 64035,
            36559, 64036, 64037, 36967, 37086, 64038, 37141,
            37159, 37338, 37335, 37342, 37357, 37358, 37348,
            37349, 37382, 37392, 37386, 37434, 37440, 37436,
            37454, 37465, 37457, 37433, 37479, 37543, 37495,
            37496, 37607, 37591, 37593, 37584, 64039, 37589,
            37600, 37587, 37669, 37665, 37627, 64040, 37662,
            37631, 37661, 37634, 37744, 37719, 37796, 37830,
            37854, 37880, 37937, 37957, 37960, 38290, 63964,
            64041, 38557, 38575, 38707, 38715, 38723, 38733,
            38735, 38737, 38741, 38999, 39013, 64042, 64043,
            39207, 64044, 39326, 39502, 39641, 39644, 39797,
            39794, 39823, 39857, 39867, 39936, 40304, 40299,
            64045, 40473, 40657, null, null, 8560, 8561, 8562,
            8563, 8564, 8565, 8566, 8567, 8568, 8569, 65506,
            65508, 65287, 65282, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 8560,
            8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568,
            8569, 8544, 8545, 8546, 8547, 8548, 8549, 8550,
            8551, 8552, 8553, 65506, 65508, 65287, 65282, 12849,
            8470, 8481, 8757, 32394, 35100, 37704, 37512, 34012,
            20425, 28859, 26161, 26824, 37625, 26363, 24389,
            20008, 20193, 20220, 20224, 20227, 20281, 20310,
            20370, 20362, 20378, 20372, 20429, 20544, 20514,
            20479, 20510, 20550, 20592, 20546, 20628, 20724,
            20696, 20810, 20836, 20893, 20926, 20972, 21013,
            21148, 21158, 21184, 21211, 21248, 21255, 21284,
            21362, 21395, 21426, 21469, 64014, 21660, 21642,
            21673, 21759, 21894, 22361, 22373, 22444, 22472,
            22471, 64015, 64016, 22686, 22706, 22795, 22867,
            22875, 22877, 22883, 22948, 22970, 23382, 23488,
            29999, 23512, 23532, 23582, 23718, 23738, 23797,
            23847, 23891, 64017, 23874, 23917, 23992, 23993,
            24016, 24353, 24372, 24423, 24503, 24542, 24669,
            24709, 24714, 24798, 24789, 24864, 24818, 24849,
            24887, 24880, 24984, 25107, 25254, 25589, 25696,
            25757, 25806, 25934, 26112, 26133, 26171, 26121,
            26158, 26142, 26148, 26213, 26199, 26201, 64018,
            26227, 26265, 26272, 26290, 26303, 26362, 26382,
            63785, 26470, 26555, 26706, 26560, 26625, 26692,
            26831, 64019, 26984, 64020, 27032, 27106, 27184,
            27243, 27206, 27251, 27262, 27362, 27364, 27606,
            27711, 27740, 27782, 27759, 27866, 27908, 28039,
            28015, 28054, 28076, 28111, 28152, 28146, 28156,
            28217, 28252, 28199, 28220, 28351, 28552, 28597,
            28661, 28677, 28679, 28712, 28805, 28843, 28943,
            28932, 29020, 28998, 28999, 64021, 29121, 29182,
            29361, 29374, 29476, 64022, 29559, 29629, 29641,
            29654, 29667, 29650, 29703, 29685, 29734, 29738,
            29737, 29742, 29794, 29833, 29855, 29953, 30063,
            30338, 30364, 30366, 30363, 30374, 64023, 30534,
            21167, 30753, 30798, 30820, 30842, 31024, 64024,
            64025, 64026, 31124, 64027, 31131, 31441, 31463,
            64028, 31467, 31646, 64029, 32072, 32092, 32183,
            32160, 32214, 32338, 32583, 32673, 64030, 33537,
            33634, 33663, 33735, 33782, 33864, 33972, 34131,
            34137, 34155, 64031, 34224, 64032, 64033, 34823,
            35061, 35346, 35383, 35449, 35495, 35518, 35551,
            64034, 35574, 35667, 35711, 36080, 36084, 36114,
            36214, 64035, 36559, 64036, 64037, 36967, 37086,
            64038, 37141, 37159, 37338, 37335, 37342, 37357,
            37358, 37348, 37349, 37382, 37392, 37386, 37434,
            37440, 37436, 37454, 37465, 37457, 37433, 37479,
            37543, 37495, 37496, 37607, 37591, 37593, 37584,
            64039, 37589, 37600, 37587, 37669, 37665, 37627,
            64040, 37662, 37631, 37661, 37634, 37744, 37719,
            37796, 37830, 37854, 37880, 37937, 37957, 37960,
            38290, 63964, 64041, 38557, 38575, 38707, 38715,
            38723, 38733, 38735, 38737, 38741, 38999, 39013,
            64042, 64043, 39207, 64044, 39326, 39502, 39641,
            39644, 39797, 39794, 39823, 39857, 39867, 39936,
            40304, 40299, 64045, 40473, 40657, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null
        ],
        "jis0212": [null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 728, 711, 184, 729, 733,
            175, 731, 730, 65374, 900, 901, null, null, null,
            null, null, null, null, null, 161, 166, 191, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 186, 170, 169, 174,
            8482, 164, 8470, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, 902, 904, 905, 906, 938, null, 908, null, 910,
            939, null, 911, null, null, null, null, 940, 941,
            942, 943, 970, 912, 972, 962, 973, 971, 944, 974,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 1026, 1027, 1028, 1029, 1030,
            1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 1106, 1107, 1108, 1109, 1110,
            1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 198, 272, null,
            294, null, 306, null, 321, 319, null, 330, 216, 338,
            null, 358, 222, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, 230, 273, 240, 295, 305, 307, 312, 322,
            320, 329, 331, 248, 339, 223, 359, 254, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 193, 192, 196, 194, 258,
            461, 256, 260, 197, 195, 262, 264, 268, 199, 266,
            270, 201, 200, 203, 202, 282, 278, 274, 280, null,
            284, 286, 290, 288, 292, 205, 204, 207, 206, 463,
            304, 298, 302, 296, 308, 310, 313, 317, 315, 323,
            327, 325, 209, 211, 210, 214, 212, 465, 336, 332,
            213, 340, 344, 342, 346, 348, 352, 350, 356, 354,
            218, 217, 220, 219, 364, 467, 368, 362, 370, 366,
            360, 471, 475, 473, 469, 372, 221, 376, 374, 377,
            381, 379, null, null, null, null, null, null, null,
            225, 224, 228, 226, 259, 462, 257, 261, 229, 227,
            263, 265, 269, 231, 267, 271, 233, 232, 235, 234,
            283, 279, 275, 281, 501, 285, 287, null, 289, 293,
            237, 236, 239, 238, 464, null, 299, 303, 297, 309,
            311, 314, 318, 316, 324, 328, 326, 241, 243, 242,
            246, 244, 466, 337, 333, 245, 341, 345, 343, 347,
            349, 353, 351, 357, 355, 250, 249, 252, 251, 365,
            468, 369, 363, 371, 367, 361, 472, 476, 474, 470,
            373, 253, 255, 375, 378, 382, 380, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 19970, 19972, 19973, 19980,
            19986, 19999, 20003, 20004, 20008, 20011, 20014,
            20015, 20016, 20021, 20032, 20033, 20036, 20039,
            20049, 20058, 20060, 20067, 20072, 20073, 20084,
            20085, 20089, 20095, 20109, 20118, 20119, 20125,
            20143, 20153, 20163, 20176, 20186, 20187, 20192,
            20193, 20194, 20200, 20207, 20209, 20211, 20213,
            20221, 20222, 20223, 20224, 20226, 20227, 20232,
            20235, 20236, 20242, 20245, 20246, 20247, 20249,
            20270, 20273, 20320, 20275, 20277, 20279, 20281,
            20283, 20286, 20288, 20290, 20296, 20297, 20299,
            20300, 20306, 20308, 20310, 20312, 20319, 20323,
            20330, 20332, 20334, 20337, 20343, 20344, 20345,
            20346, 20349, 20350, 20353, 20354, 20356, 20357,
            20361, 20362, 20364, 20366, 20368, 20370, 20371,
            20372, 20375, 20377, 20378, 20382, 20383, 20402,
            20407, 20409, 20411, 20412, 20413, 20414, 20416,
            20417, 20421, 20422, 20424, 20425, 20427, 20428,
            20429, 20431, 20434, 20444, 20448, 20450, 20464,
            20466, 20476, 20477, 20479, 20480, 20481, 20484,
            20487, 20490, 20492, 20494, 20496, 20499, 20503,
            20504, 20507, 20508, 20509, 20510, 20514, 20519,
            20526, 20528, 20530, 20531, 20533, 20544, 20545,
            20546, 20549, 20550, 20554, 20556, 20558, 20561,
            20562, 20563, 20567, 20569, 20575, 20576, 20578,
            20579, 20582, 20583, 20586, 20589, 20592, 20593,
            20539, 20609, 20611, 20612, 20614, 20618, 20622,
            20623, 20624, 20626, 20627, 20628, 20630, 20635,
            20636, 20638, 20639, 20640, 20641, 20642, 20650,
            20655, 20656, 20665, 20666, 20669, 20672, 20675,
            20676, 20679, 20684, 20686, 20688, 20691, 20692,
            20696, 20700, 20701, 20703, 20706, 20708, 20710,
            20712, 20713, 20719, 20721, 20726, 20730, 20734,
            20739, 20742, 20743, 20744, 20747, 20748, 20749,
            20750, 20722, 20752, 20759, 20761, 20763, 20764,
            20765, 20766, 20771, 20775, 20776, 20780, 20781,
            20783, 20785, 20787, 20788, 20789, 20792, 20793,
            20802, 20810, 20815, 20819, 20821, 20823, 20824,
            20831, 20836, 20838, 20862, 20867, 20868, 20875,
            20878, 20888, 20893, 20897, 20899, 20909, 20920,
            20922, 20924, 20926, 20927, 20930, 20936, 20943,
            20945, 20946, 20947, 20949, 20952, 20958, 20962,
            20965, 20974, 20978, 20979, 20980, 20983, 20993,
            20994, 20997, 21010, 21011, 21013, 21014, 21016,
            21026, 21032, 21041, 21042, 21045, 21052, 21061,
            21065, 21077, 21079, 21080, 21082, 21084, 21087,
            21088, 21089, 21094, 21102, 21111, 21112, 21113,
            21120, 21122, 21125, 21130, 21132, 21139, 21141,
            21142, 21143, 21144, 21146, 21148, 21156, 21157,
            21158, 21159, 21167, 21168, 21174, 21175, 21176,
            21178, 21179, 21181, 21184, 21188, 21190, 21192,
            21196, 21199, 21201, 21204, 21206, 21211, 21212,
            21217, 21221, 21224, 21225, 21226, 21228, 21232,
            21233, 21236, 21238, 21239, 21248, 21251, 21258,
            21259, 21260, 21265, 21267, 21272, 21275, 21276,
            21278, 21279, 21285, 21287, 21288, 21289, 21291,
            21292, 21293, 21296, 21298, 21301, 21308, 21309,
            21310, 21314, 21324, 21323, 21337, 21339, 21345,
            21347, 21349, 21356, 21357, 21362, 21369, 21374,
            21379, 21383, 21384, 21390, 21395, 21396, 21401,
            21405, 21409, 21412, 21418, 21419, 21423, 21426,
            21428, 21429, 21431, 21432, 21434, 21437, 21440,
            21445, 21455, 21458, 21459, 21461, 21466, 21469,
            21470, 21472, 21478, 21479, 21493, 21506, 21523,
            21530, 21537, 21543, 21544, 21546, 21551, 21553,
            21556, 21557, 21571, 21572, 21575, 21581, 21583,
            21598, 21602, 21604, 21606, 21607, 21609, 21611,
            21613, 21614, 21620, 21631, 21633, 21635, 21637,
            21640, 21641, 21645, 21649, 21653, 21654, 21660,
            21663, 21665, 21670, 21671, 21673, 21674, 21677,
            21678, 21681, 21687, 21689, 21690, 21691, 21695,
            21702, 21706, 21709, 21710, 21728, 21738, 21740,
            21743, 21750, 21756, 21758, 21759, 21760, 21761,
            21765, 21768, 21769, 21772, 21773, 21774, 21781,
            21802, 21803, 21810, 21813, 21814, 21819, 21820,
            21821, 21825, 21831, 21833, 21834, 21837, 21840,
            21841, 21848, 21850, 21851, 21854, 21856, 21857,
            21860, 21862, 21887, 21889, 21890, 21894, 21896,
            21902, 21903, 21905, 21906, 21907, 21908, 21911,
            21923, 21924, 21933, 21938, 21951, 21953, 21955,
            21958, 21961, 21963, 21964, 21966, 21969, 21970,
            21971, 21975, 21976, 21979, 21982, 21986, 21993,
            22006, 22015, 22021, 22024, 22026, 22029, 22030,
            22031, 22032, 22033, 22034, 22041, 22060, 22064,
            22067, 22069, 22071, 22073, 22075, 22076, 22077,
            22079, 22080, 22081, 22083, 22084, 22086, 22089,
            22091, 22093, 22095, 22100, 22110, 22112, 22113,
            22114, 22115, 22118, 22121, 22125, 22127, 22129,
            22130, 22133, 22148, 22149, 22152, 22155, 22156,
            22165, 22169, 22170, 22173, 22174, 22175, 22182,
            22183, 22184, 22185, 22187, 22188, 22189, 22193,
            22195, 22199, 22206, 22213, 22217, 22218, 22219,
            22223, 22224, 22220, 22221, 22233, 22236, 22237,
            22239, 22241, 22244, 22245, 22246, 22247, 22248,
            22257, 22251, 22253, 22262, 22263, 22273, 22274,
            22279, 22282, 22284, 22289, 22293, 22298, 22299,
            22301, 22304, 22306, 22307, 22308, 22309, 22313,
            22314, 22316, 22318, 22319, 22323, 22324, 22333,
            22334, 22335, 22341, 22342, 22348, 22349, 22354,
            22370, 22373, 22375, 22376, 22379, 22381, 22382,
            22383, 22384, 22385, 22387, 22388, 22389, 22391,
            22393, 22394, 22395, 22396, 22398, 22401, 22403,
            22412, 22420, 22423, 22425, 22426, 22428, 22429,
            22430, 22431, 22433, 22421, 22439, 22440, 22441,
            22444, 22456, 22461, 22471, 22472, 22476, 22479,
            22485, 22493, 22494, 22500, 22502, 22503, 22505,
            22509, 22512, 22517, 22518, 22520, 22525, 22526,
            22527, 22531, 22532, 22536, 22537, 22497, 22540,
            22541, 22555, 22558, 22559, 22560, 22566, 22567,
            22573, 22578, 22585, 22591, 22601, 22604, 22605,
            22607, 22608, 22613, 22623, 22625, 22628, 22631,
            22632, 22648, 22652, 22655, 22656, 22657, 22663,
            22664, 22665, 22666, 22668, 22669, 22671, 22672,
            22676, 22678, 22685, 22688, 22689, 22690, 22694,
            22697, 22705, 22706, 22724, 22716, 22722, 22728,
            22733, 22734, 22736, 22738, 22740, 22742, 22746,
            22749, 22753, 22754, 22761, 22771, 22789, 22790,
            22795, 22796, 22802, 22803, 22804, 34369, 22813,
            22817, 22819, 22820, 22824, 22831, 22832, 22835,
            22837, 22838, 22847, 22851, 22854, 22866, 22867,
            22873, 22875, 22877, 22878, 22879, 22881, 22883,
            22891, 22893, 22895, 22898, 22901, 22902, 22905,
            22907, 22908, 22923, 22924, 22926, 22930, 22933,
            22935, 22943, 22948, 22951, 22957, 22958, 22959,
            22960, 22963, 22967, 22970, 22972, 22977, 22979,
            22980, 22984, 22986, 22989, 22994, 23005, 23006,
            23007, 23011, 23012, 23015, 23022, 23023, 23025,
            23026, 23028, 23031, 23040, 23044, 23052, 23053,
            23054, 23058, 23059, 23070, 23075, 23076, 23079,
            23080, 23082, 23085, 23088, 23108, 23109, 23111,
            23112, 23116, 23120, 23125, 23134, 23139, 23141,
            23143, 23149, 23159, 23162, 23163, 23166, 23179,
            23184, 23187, 23190, 23193, 23196, 23198, 23199,
            23200, 23202, 23207, 23212, 23217, 23218, 23219,
            23221, 23224, 23226, 23227, 23231, 23236, 23238,
            23240, 23247, 23258, 23260, 23264, 23269, 23274,
            23278, 23285, 23286, 23293, 23296, 23297, 23304,
            23319, 23348, 23321, 23323, 23325, 23329, 23333,
            23341, 23352, 23361, 23371, 23372, 23378, 23382,
            23390, 23400, 23406, 23407, 23420, 23421, 23422,
            23423, 23425, 23428, 23430, 23434, 23438, 23440,
            23441, 23443, 23444, 23446, 23464, 23465, 23468,
            23469, 23471, 23473, 23474, 23479, 23482, 23484,
            23488, 23489, 23501, 23503, 23510, 23511, 23512,
            23513, 23514, 23520, 23535, 23537, 23540, 23549,
            23564, 23575, 23582, 23583, 23587, 23590, 23593,
            23595, 23596, 23598, 23600, 23602, 23605, 23606,
            23641, 23642, 23644, 23650, 23651, 23655, 23656,
            23657, 23661, 23664, 23668, 23669, 23674, 23675,
            23676, 23677, 23687, 23688, 23690, 23695, 23698,
            23709, 23711, 23712, 23714, 23715, 23718, 23722,
            23730, 23732, 23733, 23738, 23753, 23755, 23762,
            23773, 23767, 23790, 23793, 23794, 23796, 23809,
            23814, 23821, 23826, 23851, 23843, 23844, 23846,
            23847, 23857, 23860, 23865, 23869, 23871, 23874,
            23875, 23878, 23880, 23893, 23889, 23897, 23882,
            23903, 23904, 23905, 23906, 23908, 23914, 23917,
            23920, 23929, 23930, 23934, 23935, 23937, 23939,
            23944, 23946, 23954, 23955, 23956, 23957, 23961,
            23963, 23967, 23968, 23975, 23979, 23984, 23988,
            23992, 23993, 24003, 24007, 24011, 24016, 24014,
            24024, 24025, 24032, 24036, 24041, 24056, 24057,
            24064, 24071, 24077, 24082, 24084, 24085, 24088,
            24095, 24096, 24110, 24104, 24114, 24117, 24126,
            24139, 24144, 24137, 24145, 24150, 24152, 24155,
            24156, 24158, 24168, 24170, 24171, 24172, 24173,
            24174, 24176, 24192, 24203, 24206, 24226, 24228,
            24229, 24232, 24234, 24236, 24241, 24243, 24253,
            24254, 24255, 24262, 24268, 24267, 24270, 24273,
            24274, 24276, 24277, 24284, 24286, 24293, 24299,
            24322, 24326, 24327, 24328, 24334, 24345, 24348,
            24349, 24353, 24354, 24355, 24356, 24360, 24363,
            24364, 24366, 24368, 24372, 24374, 24379, 24381,
            24383, 24384, 24388, 24389, 24391, 24397, 24400,
            24404, 24408, 24411, 24416, 24419, 24420, 24423,
            24431, 24434, 24436, 24437, 24440, 24442, 24445,
            24446, 24457, 24461, 24463, 24470, 24476, 24477,
            24482, 24487, 24491, 24484, 24492, 24495, 24496,
            24497, 24504, 24516, 24519, 24520, 24521, 24523,
            24528, 24529, 24530, 24531, 24532, 24542, 24545,
            24546, 24552, 24553, 24554, 24556, 24557, 24558,
            24559, 24562, 24563, 24566, 24570, 24572, 24583,
            24586, 24589, 24595, 24596, 24599, 24600, 24602,
            24607, 24612, 24621, 24627, 24629, 24640, 24647,
            24648, 24649, 24652, 24657, 24660, 24662, 24663,
            24669, 24673, 24679, 24689, 24702, 24703, 24706,
            24710, 24712, 24714, 24718, 24721, 24723, 24725,
            24728, 24733, 24734, 24738, 24740, 24741, 24744,
            24752, 24753, 24759, 24763, 24766, 24770, 24772,
            24776, 24777, 24778, 24779, 24782, 24783, 24788,
            24789, 24793, 24795, 24797, 24798, 24802, 24805,
            24818, 24821, 24824, 24828, 24829, 24834, 24839,
            24842, 24844, 24848, 24849, 24850, 24851, 24852,
            24854, 24855, 24857, 24860, 24862, 24866, 24874,
            24875, 24880, 24881, 24885, 24886, 24887, 24889,
            24897, 24901, 24902, 24905, 24926, 24928, 24940,
            24946, 24952, 24955, 24956, 24959, 24960, 24961,
            24963, 24964, 24971, 24973, 24978, 24979, 24983,
            24984, 24988, 24989, 24991, 24992, 24997, 25000,
            25002, 25005, 25016, 25017, 25020, 25024, 25025,
            25026, 25038, 25039, 25045, 25052, 25053, 25054,
            25055, 25057, 25058, 25063, 25065, 25061, 25068,
            25069, 25071, 25089, 25091, 25092, 25095, 25107,
            25109, 25116, 25120, 25122, 25123, 25127, 25129,
            25131, 25145, 25149, 25154, 25155, 25156, 25158,
            25164, 25168, 25169, 25170, 25172, 25174, 25178,
            25180, 25188, 25197, 25199, 25203, 25210, 25213,
            25229, 25230, 25231, 25232, 25254, 25256, 25267,
            25270, 25271, 25274, 25278, 25279, 25284, 25294,
            25301, 25302, 25306, 25322, 25330, 25332, 25340,
            25341, 25347, 25348, 25354, 25355, 25357, 25360,
            25363, 25366, 25368, 25385, 25386, 25389, 25397,
            25398, 25401, 25404, 25409, 25410, 25411, 25412,
            25414, 25418, 25419, 25422, 25426, 25427, 25428,
            25432, 25435, 25445, 25446, 25452, 25453, 25457,
            25460, 25461, 25464, 25468, 25469, 25471, 25474,
            25476, 25479, 25482, 25488, 25492, 25493, 25497,
            25498, 25502, 25508, 25510, 25517, 25518, 25519,
            25533, 25537, 25541, 25544, 25550, 25553, 25555,
            25556, 25557, 25564, 25568, 25573, 25578, 25580,
            25586, 25587, 25589, 25592, 25593, 25609, 25610,
            25616, 25618, 25620, 25624, 25630, 25632, 25634,
            25636, 25637, 25641, 25642, 25647, 25648, 25653,
            25661, 25663, 25675, 25679, 25681, 25682, 25683,
            25684, 25690, 25691, 25692, 25693, 25695, 25696,
            25697, 25699, 25709, 25715, 25716, 25723, 25725,
            25733, 25735, 25743, 25744, 25745, 25752, 25753,
            25755, 25757, 25759, 25761, 25763, 25766, 25768,
            25772, 25779, 25789, 25790, 25791, 25796, 25801,
            25802, 25803, 25804, 25806, 25808, 25809, 25813,
            25815, 25828, 25829, 25833, 25834, 25837, 25840,
            25845, 25847, 25851, 25855, 25857, 25860, 25864,
            25865, 25866, 25871, 25875, 25876, 25878, 25881,
            25883, 25886, 25887, 25890, 25894, 25897, 25902,
            25905, 25914, 25916, 25917, 25923, 25927, 25929,
            25936, 25938, 25940, 25951, 25952, 25959, 25963,
            25978, 25981, 25985, 25989, 25994, 26002, 26005,
            26008, 26013, 26016, 26019, 26022, 26030, 26034,
            26035, 26036, 26047, 26050, 26056, 26057, 26062,
            26064, 26068, 26070, 26072, 26079, 26096, 26098,
            26100, 26101, 26105, 26110, 26111, 26112, 26116,
            26120, 26121, 26125, 26129, 26130, 26133, 26134,
            26141, 26142, 26145, 26146, 26147, 26148, 26150,
            26153, 26154, 26155, 26156, 26158, 26160, 26161,
            26163, 26169, 26167, 26176, 26181, 26182, 26186,
            26188, 26193, 26190, 26199, 26200, 26201, 26203,
            26204, 26208, 26209, 26363, 26218, 26219, 26220,
            26238, 26227, 26229, 26239, 26231, 26232, 26233,
            26235, 26240, 26236, 26251, 26252, 26253, 26256,
            26258, 26265, 26266, 26267, 26268, 26271, 26272,
            26276, 26285, 26289, 26290, 26293, 26299, 26303,
            26304, 26306, 26307, 26312, 26316, 26318, 26319,
            26324, 26331, 26335, 26344, 26347, 26348, 26350,
            26362, 26373, 26375, 26382, 26387, 26393, 26396,
            26400, 26402, 26419, 26430, 26437, 26439, 26440,
            26444, 26452, 26453, 26461, 26470, 26476, 26478,
            26484, 26486, 26491, 26497, 26500, 26510, 26511,
            26513, 26515, 26518, 26520, 26521, 26523, 26544,
            26545, 26546, 26549, 26555, 26556, 26557, 26617,
            26560, 26562, 26563, 26565, 26568, 26569, 26578,
            26583, 26585, 26588, 26593, 26598, 26608, 26610,
            26614, 26615, 26706, 26644, 26649, 26653, 26655,
            26664, 26663, 26668, 26669, 26671, 26672, 26673,
            26675, 26683, 26687, 26692, 26693, 26698, 26700,
            26709, 26711, 26712, 26715, 26731, 26734, 26735,
            26736, 26737, 26738, 26741, 26745, 26746, 26747,
            26748, 26754, 26756, 26758, 26760, 26774, 26776,
            26778, 26780, 26785, 26787, 26789, 26793, 26794,
            26798, 26802, 26811, 26821, 26824, 26828, 26831,
            26832, 26833, 26835, 26838, 26841, 26844, 26845,
            26853, 26856, 26858, 26859, 26860, 26861, 26864,
            26865, 26869, 26870, 26875, 26876, 26877, 26886,
            26889, 26890, 26896, 26897, 26899, 26902, 26903,
            26929, 26931, 26933, 26936, 26939, 26946, 26949,
            26953, 26958, 26967, 26971, 26979, 26980, 26981,
            26982, 26984, 26985, 26988, 26992, 26993, 26994,
            27002, 27003, 27007, 27008, 27021, 27026, 27030,
            27032, 27041, 27045, 27046, 27048, 27051, 27053,
            27055, 27063, 27064, 27066, 27068, 27077, 27080,
            27089, 27094, 27095, 27106, 27109, 27118, 27119,
            27121, 27123, 27125, 27134, 27136, 27137, 27139,
            27151, 27153, 27157, 27162, 27165, 27168, 27172,
            27176, 27184, 27186, 27188, 27191, 27195, 27198,
            27199, 27205, 27206, 27209, 27210, 27214, 27216,
            27217, 27218, 27221, 27222, 27227, 27236, 27239,
            27242, 27249, 27251, 27262, 27265, 27267, 27270,
            27271, 27273, 27275, 27281, 27291, 27293, 27294,
            27295, 27301, 27307, 27311, 27312, 27313, 27316,
            27325, 27326, 27327, 27334, 27337, 27336, 27340,
            27344, 27348, 27349, 27350, 27356, 27357, 27364,
            27367, 27372, 27376, 27377, 27378, 27388, 27389,
            27394, 27395, 27398, 27399, 27401, 27407, 27408,
            27409, 27415, 27419, 27422, 27428, 27432, 27435,
            27436, 27439, 27445, 27446, 27451, 27455, 27462,
            27466, 27469, 27474, 27478, 27480, 27485, 27488,
            27495, 27499, 27502, 27504, 27509, 27517, 27518,
            27522, 27525, 27543, 27547, 27551, 27552, 27554,
            27555, 27560, 27561, 27564, 27565, 27566, 27568,
            27576, 27577, 27581, 27582, 27587, 27588, 27593,
            27596, 27606, 27610, 27617, 27619, 27622, 27623,
            27630, 27633, 27639, 27641, 27647, 27650, 27652,
            27653, 27657, 27661, 27662, 27664, 27666, 27673,
            27679, 27686, 27687, 27688, 27692, 27694, 27699,
            27701, 27702, 27706, 27707, 27711, 27722, 27723,
            27725, 27727, 27730, 27732, 27737, 27739, 27740,
            27755, 27757, 27759, 27764, 27766, 27768, 27769,
            27771, 27781, 27782, 27783, 27785, 27796, 27797,
            27799, 27800, 27804, 27807, 27824, 27826, 27828,
            27842, 27846, 27853, 27855, 27856, 27857, 27858,
            27860, 27862, 27866, 27868, 27872, 27879, 27881,
            27883, 27884, 27886, 27890, 27892, 27908, 27911,
            27914, 27918, 27919, 27921, 27923, 27930, 27942,
            27943, 27944, 27751, 27950, 27951, 27953, 27961,
            27964, 27967, 27991, 27998, 27999, 28001, 28005,
            28007, 28015, 28016, 28028, 28034, 28039, 28049,
            28050, 28052, 28054, 28055, 28056, 28074, 28076,
            28084, 28087, 28089, 28093, 28095, 28100, 28104,
            28106, 28110, 28111, 28118, 28123, 28125, 28127,
            28128, 28130, 28133, 28137, 28143, 28144, 28148,
            28150, 28156, 28160, 28164, 28190, 28194, 28199,
            28210, 28214, 28217, 28219, 28220, 28228, 28229,
            28232, 28233, 28235, 28239, 28241, 28242, 28243,
            28244, 28247, 28252, 28253, 28254, 28258, 28259,
            28264, 28275, 28283, 28285, 28301, 28307, 28313,
            28320, 28327, 28333, 28334, 28337, 28339, 28347,
            28351, 28352, 28353, 28355, 28359, 28360, 28362,
            28365, 28366, 28367, 28395, 28397, 28398, 28409,
            28411, 28413, 28420, 28424, 28426, 28428, 28429,
            28438, 28440, 28442, 28443, 28454, 28457, 28458,
            28463, 28464, 28467, 28470, 28475, 28476, 28461,
            28495, 28497, 28498, 28499, 28503, 28505, 28506,
            28509, 28510, 28513, 28514, 28520, 28524, 28541,
            28542, 28547, 28551, 28552, 28555, 28556, 28557,
            28560, 28562, 28563, 28564, 28566, 28570, 28575,
            28576, 28581, 28582, 28583, 28584, 28590, 28591,
            28592, 28597, 28598, 28604, 28613, 28615, 28616,
            28618, 28634, 28638, 28648, 28649, 28656, 28661,
            28665, 28668, 28669, 28672, 28677, 28678, 28679,
            28685, 28695, 28704, 28707, 28719, 28724, 28727,
            28729, 28732, 28739, 28740, 28744, 28745, 28746,
            28747, 28756, 28757, 28765, 28766, 28750, 28772,
            28773, 28780, 28782, 28789, 28790, 28798, 28801,
            28805, 28806, 28820, 28821, 28822, 28823, 28824,
            28827, 28836, 28843, 28848, 28849, 28852, 28855,
            28874, 28881, 28883, 28884, 28885, 28886, 28888,
            28892, 28900, 28922, 28931, 28932, 28933, 28934,
            28935, 28939, 28940, 28943, 28958, 28960, 28971,
            28973, 28975, 28976, 28977, 28984, 28993, 28997,
            28998, 28999, 29002, 29003, 29008, 29010, 29015,
            29018, 29020, 29022, 29024, 29032, 29049, 29056,
            29061, 29063, 29068, 29074, 29082, 29083, 29088,
            29090, 29103, 29104, 29106, 29107, 29114, 29119,
            29120, 29121, 29124, 29131, 29132, 29139, 29142,
            29145, 29146, 29148, 29176, 29182, 29184, 29191,
            29192, 29193, 29203, 29207, 29210, 29213, 29215,
            29220, 29227, 29231, 29236, 29240, 29241, 29249,
            29250, 29251, 29253, 29262, 29263, 29264, 29267,
            29269, 29270, 29274, 29276, 29278, 29280, 29283,
            29288, 29291, 29294, 29295, 29297, 29303, 29304,
            29307, 29308, 29311, 29316, 29321, 29325, 29326,
            29331, 29339, 29352, 29357, 29358, 29361, 29364,
            29374, 29377, 29383, 29385, 29388, 29397, 29398,
            29400, 29407, 29413, 29427, 29428, 29434, 29435,
            29438, 29442, 29444, 29445, 29447, 29451, 29453,
            29458, 29459, 29464, 29465, 29470, 29474, 29476,
            29479, 29480, 29484, 29489, 29490, 29493, 29498,
            29499, 29501, 29507, 29517, 29520, 29522, 29526,
            29528, 29533, 29534, 29535, 29536, 29542, 29543,
            29545, 29547, 29548, 29550, 29551, 29553, 29559,
            29561, 29564, 29568, 29569, 29571, 29573, 29574,
            29582, 29584, 29587, 29589, 29591, 29592, 29596,
            29598, 29599, 29600, 29602, 29605, 29606, 29610,
            29611, 29613, 29621, 29623, 29625, 29628, 29629,
            29631, 29637, 29638, 29641, 29643, 29644, 29647,
            29650, 29651, 29654, 29657, 29661, 29665, 29667,
            29670, 29671, 29673, 29684, 29685, 29687, 29689,
            29690, 29691, 29693, 29695, 29696, 29697, 29700,
            29703, 29706, 29713, 29722, 29723, 29732, 29734,
            29736, 29737, 29738, 29739, 29740, 29741, 29742,
            29743, 29744, 29745, 29753, 29760, 29763, 29764,
            29766, 29767, 29771, 29773, 29777, 29778, 29783,
            29789, 29794, 29798, 29799, 29800, 29803, 29805,
            29806, 29809, 29810, 29824, 29825, 29829, 29830,
            29831, 29833, 29839, 29840, 29841, 29842, 29848,
            29849, 29850, 29852, 29855, 29856, 29857, 29859,
            29862, 29864, 29865, 29866, 29867, 29870, 29871,
            29873, 29874, 29877, 29881, 29883, 29887, 29896,
            29897, 29900, 29904, 29907, 29912, 29914, 29915,
            29918, 29919, 29924, 29928, 29930, 29931, 29935,
            29940, 29946, 29947, 29948, 29951, 29958, 29970,
            29974, 29975, 29984, 29985, 29988, 29991, 29993,
            29994, 29999, 30006, 30009, 30013, 30014, 30015,
            30016, 30019, 30023, 30024, 30030, 30032, 30034,
            30039, 30046, 30047, 30049, 30063, 30065, 30073,
            30074, 30075, 30076, 30077, 30078, 30081, 30085,
            30096, 30098, 30099, 30101, 30105, 30108, 30114,
            30116, 30132, 30138, 30143, 30144, 30145, 30148,
            30150, 30156, 30158, 30159, 30167, 30172, 30175,
            30176, 30177, 30180, 30183, 30188, 30190, 30191,
            30193, 30201, 30208, 30210, 30211, 30212, 30215,
            30216, 30218, 30220, 30223, 30226, 30227, 30229,
            30230, 30233, 30235, 30236, 30237, 30238, 30243,
            30245, 30246, 30249, 30253, 30258, 30259, 30261,
            30264, 30265, 30266, 30268, 30282, 30272, 30273,
            30275, 30276, 30277, 30281, 30283, 30293, 30297,
            30303, 30308, 30309, 30317, 30318, 30319, 30321,
            30324, 30337, 30341, 30348, 30349, 30357, 30363,
            30364, 30365, 30367, 30368, 30370, 30371, 30372,
            30373, 30374, 30375, 30376, 30378, 30381, 30397,
            30401, 30405, 30409, 30411, 30412, 30414, 30420,
            30425, 30432, 30438, 30440, 30444, 30448, 30449,
            30454, 30457, 30460, 30464, 30470, 30474, 30478,
            30482, 30484, 30485, 30487, 30489, 30490, 30492,
            30498, 30504, 30509, 30510, 30511, 30516, 30517,
            30518, 30521, 30525, 30526, 30530, 30533, 30534,
            30538, 30541, 30542, 30543, 30546, 30550, 30551,
            30556, 30558, 30559, 30560, 30562, 30564, 30567,
            30570, 30572, 30576, 30578, 30579, 30580, 30586,
            30589, 30592, 30596, 30604, 30605, 30612, 30613,
            30614, 30618, 30623, 30626, 30631, 30634, 30638,
            30639, 30641, 30645, 30654, 30659, 30665, 30673,
            30674, 30677, 30681, 30686, 30687, 30688, 30692,
            30694, 30698, 30700, 30704, 30705, 30708, 30712,
            30715, 30725, 30726, 30729, 30733, 30734, 30737,
            30749, 30753, 30754, 30755, 30765, 30766, 30768,
            30773, 30775, 30787, 30788, 30791, 30792, 30796,
            30798, 30802, 30812, 30814, 30816, 30817, 30819,
            30820, 30824, 30826, 30830, 30842, 30846, 30858,
            30863, 30868, 30872, 30881, 30877, 30878, 30879,
            30884, 30888, 30892, 30893, 30896, 30897, 30898,
            30899, 30907, 30909, 30911, 30919, 30920, 30921,
            30924, 30926, 30930, 30931, 30933, 30934, 30948,
            30939, 30943, 30944, 30945, 30950, 30954, 30962,
            30963, 30976, 30966, 30967, 30970, 30971, 30975,
            30982, 30988, 30992, 31002, 31004, 31006, 31007,
            31008, 31013, 31015, 31017, 31021, 31025, 31028,
            31029, 31035, 31037, 31039, 31044, 31045, 31046,
            31050, 31051, 31055, 31057, 31060, 31064, 31067,
            31068, 31079, 31081, 31083, 31090, 31097, 31099,
            31100, 31102, 31115, 31116, 31121, 31123, 31124,
            31125, 31126, 31128, 31131, 31132, 31137, 31144,
            31145, 31147, 31151, 31153, 31156, 31160, 31163,
            31170, 31172, 31175, 31176, 31178, 31183, 31188,
            31190, 31194, 31197, 31198, 31200, 31202, 31205,
            31210, 31211, 31213, 31217, 31224, 31228, 31234,
            31235, 31239, 31241, 31242, 31244, 31249, 31253,
            31259, 31262, 31265, 31271, 31275, 31277, 31279,
            31280, 31284, 31285, 31288, 31289, 31290, 31300,
            31301, 31303, 31304, 31308, 31317, 31318, 31321,
            31324, 31325, 31327, 31328, 31333, 31335, 31338,
            31341, 31349, 31352, 31358, 31360, 31362, 31365,
            31366, 31370, 31371, 31376, 31377, 31380, 31390,
            31392, 31395, 31404, 31411, 31413, 31417, 31419,
            31420, 31430, 31433, 31436, 31438, 31441, 31451,
            31464, 31465, 31467, 31468, 31473, 31476, 31483,
            31485, 31486, 31495, 31508, 31519, 31523, 31527,
            31529, 31530, 31531, 31533, 31534, 31535, 31536,
            31537, 31540, 31549, 31551, 31552, 31553, 31559,
            31566, 31573, 31584, 31588, 31590, 31593, 31594,
            31597, 31599, 31602, 31603, 31607, 31620, 31625,
            31630, 31632, 31633, 31638, 31643, 31646, 31648,
            31653, 31660, 31663, 31664, 31666, 31669, 31670,
            31674, 31675, 31676, 31677, 31682, 31685, 31688,
            31690, 31700, 31702, 31703, 31705, 31706, 31707,
            31720, 31722, 31730, 31732, 31733, 31736, 31737,
            31738, 31740, 31742, 31745, 31746, 31747, 31748,
            31750, 31753, 31755, 31756, 31758, 31759, 31769,
            31771, 31776, 31781, 31782, 31784, 31788, 31793,
            31795, 31796, 31798, 31801, 31802, 31814, 31818,
            31829, 31825, 31826, 31827, 31833, 31834, 31835,
            31836, 31837, 31838, 31841, 31843, 31847, 31849,
            31853, 31854, 31856, 31858, 31865, 31868, 31869,
            31878, 31879, 31887, 31892, 31902, 31904, 31910,
            31920, 31926, 31927, 31930, 31931, 31932, 31935,
            31940, 31943, 31944, 31945, 31949, 31951, 31955,
            31956, 31957, 31959, 31961, 31962, 31965, 31974,
            31977, 31979, 31989, 32003, 32007, 32008, 32009,
            32015, 32017, 32018, 32019, 32022, 32029, 32030,
            32035, 32038, 32042, 32045, 32049, 32060, 32061,
            32062, 32064, 32065, 32071, 32072, 32077, 32081,
            32083, 32087, 32089, 32090, 32092, 32093, 32101,
            32103, 32106, 32112, 32120, 32122, 32123, 32127,
            32129, 32130, 32131, 32133, 32134, 32136, 32139,
            32140, 32141, 32145, 32150, 32151, 32157, 32158,
            32166, 32167, 32170, 32179, 32182, 32183, 32185,
            32194, 32195, 32196, 32197, 32198, 32204, 32205,
            32206, 32215, 32217, 32256, 32226, 32229, 32230,
            32234, 32235, 32237, 32241, 32245, 32246, 32249,
            32250, 32264, 32272, 32273, 32277, 32279, 32284,
            32285, 32288, 32295, 32296, 32300, 32301, 32303,
            32307, 32310, 32319, 32324, 32325, 32327, 32334,
            32336, 32338, 32344, 32351, 32353, 32354, 32357,
            32363, 32366, 32367, 32371, 32376, 32382, 32385,
            32390, 32391, 32394, 32397, 32401, 32405, 32408,
            32410, 32413, 32414, 32572, 32571, 32573, 32574,
            32575, 32579, 32580, 32583, 32591, 32594, 32595,
            32603, 32604, 32605, 32609, 32611, 32612, 32613,
            32614, 32621, 32625, 32637, 32638, 32639, 32640,
            32651, 32653, 32655, 32656, 32657, 32662, 32663,
            32668, 32673, 32674, 32678, 32682, 32685, 32692,
            32700, 32703, 32704, 32707, 32712, 32718, 32719,
            32731, 32735, 32739, 32741, 32744, 32748, 32750,
            32751, 32754, 32762, 32765, 32766, 32767, 32775,
            32776, 32778, 32781, 32782, 32783, 32785, 32787,
            32788, 32790, 32797, 32798, 32799, 32800, 32804,
            32806, 32812, 32814, 32816, 32820, 32821, 32823,
            32825, 32826, 32828, 32830, 32832, 32836, 32864,
            32868, 32870, 32877, 32881, 32885, 32897, 32904,
            32910, 32924, 32926, 32934, 32935, 32939, 32952,
            32953, 32968, 32973, 32975, 32978, 32980, 32981,
            32983, 32984, 32992, 33005, 33006, 33008, 33010,
            33011, 33014, 33017, 33018, 33022, 33027, 33035,
            33046, 33047, 33048, 33052, 33054, 33056, 33060,
            33063, 33068, 33072, 33077, 33082, 33084, 33093,
            33095, 33098, 33100, 33106, 33111, 33120, 33121,
            33127, 33128, 33129, 33133, 33135, 33143, 33153,
            33168, 33156, 33157, 33158, 33163, 33166, 33174,
            33176, 33179, 33182, 33186, 33198, 33202, 33204,
            33211, 33227, 33219, 33221, 33226, 33230, 33231,
            33237, 33239, 33243, 33245, 33246, 33249, 33252,
            33259, 33260, 33264, 33265, 33266, 33269, 33270,
            33272, 33273, 33277, 33279, 33280, 33283, 33295,
            33299, 33300, 33305, 33306, 33309, 33313, 33314,
            33320, 33330, 33332, 33338, 33347, 33348, 33349,
            33350, 33355, 33358, 33359, 33361, 33366, 33372,
            33376, 33379, 33383, 33389, 33396, 33403, 33405,
            33407, 33408, 33409, 33411, 33412, 33415, 33417,
            33418, 33422, 33425, 33428, 33430, 33432, 33434,
            33435, 33440, 33441, 33443, 33444, 33447, 33448,
            33449, 33450, 33454, 33456, 33458, 33460, 33463,
            33466, 33468, 33470, 33471, 33478, 33488, 33493,
            33498, 33504, 33506, 33508, 33512, 33514, 33517,
            33519, 33526, 33527, 33533, 33534, 33536, 33537,
            33543, 33544, 33546, 33547, 33620, 33563, 33565,
            33566, 33567, 33569, 33570, 33580, 33581, 33582,
            33584, 33587, 33591, 33594, 33596, 33597, 33602,
            33603, 33604, 33607, 33613, 33614, 33617, 33621,
            33622, 33623, 33648, 33656, 33661, 33663, 33664,
            33666, 33668, 33670, 33677, 33682, 33684, 33685,
            33688, 33689, 33691, 33692, 33693, 33702, 33703,
            33705, 33708, 33726, 33727, 33728, 33735, 33737,
            33743, 33744, 33745, 33748, 33757, 33619, 33768,
            33770, 33782, 33784, 33785, 33788, 33793, 33798,
            33802, 33807, 33809, 33813, 33817, 33709, 33839,
            33849, 33861, 33863, 33864, 33866, 33869, 33871,
            33873, 33874, 33878, 33880, 33881, 33882, 33884,
            33888, 33892, 33893, 33895, 33898, 33904, 33907,
            33908, 33910, 33912, 33916, 33917, 33921, 33925,
            33938, 33939, 33941, 33950, 33958, 33960, 33961,
            33962, 33967, 33969, 33972, 33978, 33981, 33982,
            33984, 33986, 33991, 33992, 33996, 33999, 34003,
            34012, 34023, 34026, 34031, 34032, 34033, 34034,
            34039, 34098, 34042, 34043, 34045, 34050, 34051,
            34055, 34060, 34062, 34064, 34076, 34078, 34082,
            34083, 34084, 34085, 34087, 34090, 34091, 34095,
            34099, 34100, 34102, 34111, 34118, 34127, 34128,
            34129, 34130, 34131, 34134, 34137, 34140, 34141,
            34142, 34143, 34144, 34145, 34146, 34148, 34155,
            34159, 34169, 34170, 34171, 34173, 34175, 34177,
            34181, 34182, 34185, 34187, 34188, 34191, 34195,
            34200, 34205, 34207, 34208, 34210, 34213, 34215,
            34228, 34230, 34231, 34232, 34236, 34237, 34238,
            34239, 34242, 34247, 34250, 34251, 34254, 34221,
            34264, 34266, 34271, 34272, 34278, 34280, 34285,
            34291, 34294, 34300, 34303, 34304, 34308, 34309,
            34317, 34318, 34320, 34321, 34322, 34328, 34329,
            34331, 34334, 34337, 34343, 34345, 34358, 34360,
            34362, 34364, 34365, 34368, 34370, 34374, 34386,
            34387, 34390, 34391, 34392, 34393, 34397, 34400,
            34401, 34402, 34403, 34404, 34409, 34412, 34415,
            34421, 34422, 34423, 34426, 34445, 34449, 34454,
            34456, 34458, 34460, 34465, 34470, 34471, 34472,
            34477, 34481, 34483, 34484, 34485, 34487, 34488,
            34489, 34495, 34496, 34497, 34499, 34501, 34513,
            34514, 34517, 34519, 34522, 34524, 34528, 34531,
            34533, 34535, 34440, 34554, 34556, 34557, 34564,
            34565, 34567, 34571, 34574, 34575, 34576, 34579,
            34580, 34585, 34590, 34591, 34593, 34595, 34600,
            34606, 34607, 34609, 34610, 34617, 34618, 34620,
            34621, 34622, 34624, 34627, 34629, 34637, 34648,
            34653, 34657, 34660, 34661, 34671, 34673, 34674,
            34683, 34691, 34692, 34693, 34694, 34695, 34696,
            34697, 34699, 34700, 34704, 34707, 34709, 34711,
            34712, 34713, 34718, 34720, 34723, 34727, 34732,
            34733, 34734, 34737, 34741, 34750, 34751, 34753,
            34760, 34761, 34762, 34766, 34773, 34774, 34777,
            34778, 34780, 34783, 34786, 34787, 34788, 34794,
            34795, 34797, 34801, 34803, 34808, 34810, 34815,
            34817, 34819, 34822, 34825, 34826, 34827, 34832,
            34841, 34834, 34835, 34836, 34840, 34842, 34843,
            34844, 34846, 34847, 34856, 34861, 34862, 34864,
            34866, 34869, 34874, 34876, 34881, 34883, 34885,
            34888, 34889, 34890, 34891, 34894, 34897, 34901,
            34902, 34904, 34906, 34908, 34911, 34912, 34916,
            34921, 34929, 34937, 34939, 34944, 34968, 34970,
            34971, 34972, 34975, 34976, 34984, 34986, 35002,
            35005, 35006, 35008, 35018, 35019, 35020, 35021,
            35022, 35025, 35026, 35027, 35035, 35038, 35047,
            35055, 35056, 35057, 35061, 35063, 35073, 35078,
            35085, 35086, 35087, 35093, 35094, 35096, 35097,
            35098, 35100, 35104, 35110, 35111, 35112, 35120,
            35121, 35122, 35125, 35129, 35130, 35134, 35136,
            35138, 35141, 35142, 35145, 35151, 35154, 35159,
            35162, 35163, 35164, 35169, 35170, 35171, 35179,
            35182, 35184, 35187, 35189, 35194, 35195, 35196,
            35197, 35209, 35213, 35216, 35220, 35221, 35227,
            35228, 35231, 35232, 35237, 35248, 35252, 35253,
            35254, 35255, 35260, 35284, 35285, 35286, 35287,
            35288, 35301, 35305, 35307, 35309, 35313, 35315,
            35318, 35321, 35325, 35327, 35332, 35333, 35335,
            35343, 35345, 35346, 35348, 35349, 35358, 35360,
            35362, 35364, 35366, 35371, 35372, 35375, 35381,
            35383, 35389, 35390, 35392, 35395, 35397, 35399,
            35401, 35405, 35406, 35411, 35414, 35415, 35416,
            35420, 35421, 35425, 35429, 35431, 35445, 35446,
            35447, 35449, 35450, 35451, 35454, 35455, 35456,
            35459, 35462, 35467, 35471, 35472, 35474, 35478,
            35479, 35481, 35487, 35495, 35497, 35502, 35503,
            35507, 35510, 35511, 35515, 35518, 35523, 35526,
            35528, 35529, 35530, 35537, 35539, 35540, 35541,
            35543, 35549, 35551, 35564, 35568, 35572, 35573,
            35574, 35580, 35583, 35589, 35590, 35595, 35601,
            35612, 35614, 35615, 35594, 35629, 35632, 35639,
            35644, 35650, 35651, 35652, 35653, 35654, 35656,
            35666, 35667, 35668, 35673, 35661, 35678, 35683,
            35693, 35702, 35704, 35705, 35708, 35710, 35713,
            35716, 35717, 35723, 35725, 35727, 35732, 35733,
            35740, 35742, 35743, 35896, 35897, 35901, 35902,
            35909, 35911, 35913, 35915, 35919, 35921, 35923,
            35924, 35927, 35928, 35931, 35933, 35929, 35939,
            35940, 35942, 35944, 35945, 35949, 35955, 35957,
            35958, 35963, 35966, 35974, 35975, 35979, 35984,
            35986, 35987, 35993, 35995, 35996, 36004, 36025,
            36026, 36037, 36038, 36041, 36043, 36047, 36054,
            36053, 36057, 36061, 36065, 36072, 36076, 36079,
            36080, 36082, 36085, 36087, 36088, 36094, 36095,
            36097, 36099, 36105, 36114, 36119, 36123, 36197,
            36201, 36204, 36206, 36223, 36226, 36228, 36232,
            36237, 36240, 36241, 36245, 36254, 36255, 36256,
            36262, 36267, 36268, 36271, 36274, 36277, 36279,
            36281, 36283, 36288, 36293, 36294, 36295, 36296,
            36298, 36302, 36305, 36308, 36309, 36311, 36313,
            36324, 36325, 36327, 36332, 36336, 36284, 36337,
            36338, 36340, 36349, 36353, 36356, 36357, 36358,
            36363, 36369, 36372, 36374, 36384, 36385, 36386,
            36387, 36390, 36391, 36401, 36403, 36406, 36407,
            36408, 36409, 36413, 36416, 36417, 36427, 36429,
            36430, 36431, 36436, 36443, 36444, 36445, 36446,
            36449, 36450, 36457, 36460, 36461, 36463, 36464,
            36465, 36473, 36474, 36475, 36482, 36483, 36489,
            36496, 36498, 36501, 36506, 36507, 36509, 36510,
            36514, 36519, 36521, 36525, 36526, 36531, 36533,
            36538, 36539, 36544, 36545, 36547, 36548, 36551,
            36559, 36561, 36564, 36572, 36584, 36590, 36592,
            36593, 36599, 36601, 36602, 36589, 36608, 36610,
            36615, 36616, 36623, 36624, 36630, 36631, 36632,
            36638, 36640, 36641, 36643, 36645, 36647, 36648,
            36652, 36653, 36654, 36660, 36661, 36662, 36663,
            36666, 36672, 36673, 36675, 36679, 36687, 36689,
            36690, 36691, 36692, 36693, 36696, 36701, 36702,
            36709, 36765, 36768, 36769, 36772, 36773, 36774,
            36789, 36790, 36792, 36798, 36800, 36801, 36806,
            36810, 36811, 36813, 36816, 36818, 36819, 36821,
            36832, 36835, 36836, 36840, 36846, 36849, 36853,
            36854, 36859, 36862, 36866, 36868, 36872, 36876,
            36888, 36891, 36904, 36905, 36911, 36906, 36908,
            36909, 36915, 36916, 36919, 36927, 36931, 36932,
            36940, 36955, 36957, 36962, 36966, 36967, 36972,
            36976, 36980, 36985, 36997, 37000, 37003, 37004,
            37006, 37008, 37013, 37015, 37016, 37017, 37019,
            37024, 37025, 37026, 37029, 37040, 37042, 37043,
            37044, 37046, 37053, 37068, 37054, 37059, 37060,
            37061, 37063, 37064, 37077, 37079, 37080, 37081,
            37084, 37085, 37087, 37093, 37074, 37110, 37099,
            37103, 37104, 37108, 37118, 37119, 37120, 37124,
            37125, 37126, 37128, 37133, 37136, 37140, 37142,
            37143, 37144, 37146, 37148, 37150, 37152, 37157,
            37154, 37155, 37159, 37161, 37166, 37167, 37169,
            37172, 37174, 37175, 37177, 37178, 37180, 37181,
            37187, 37191, 37192, 37199, 37203, 37207, 37209,
            37210, 37211, 37217, 37220, 37223, 37229, 37236,
            37241, 37242, 37243, 37249, 37251, 37253, 37254,
            37258, 37262, 37265, 37267, 37268, 37269, 37272,
            37278, 37281, 37286, 37288, 37292, 37293, 37294,
            37296, 37297, 37298, 37299, 37302, 37307, 37308,
            37309, 37311, 37314, 37315, 37317, 37331, 37332,
            37335, 37337, 37338, 37342, 37348, 37349, 37353,
            37354, 37356, 37357, 37358, 37359, 37360, 37361,
            37367, 37369, 37371, 37373, 37376, 37377, 37380,
            37381, 37382, 37383, 37385, 37386, 37388, 37392,
            37394, 37395, 37398, 37400, 37404, 37405, 37411,
            37412, 37413, 37414, 37416, 37422, 37423, 37424,
            37427, 37429, 37430, 37432, 37433, 37434, 37436,
            37438, 37440, 37442, 37443, 37446, 37447, 37450,
            37453, 37454, 37455, 37457, 37464, 37465, 37468,
            37469, 37472, 37473, 37477, 37479, 37480, 37481,
            37486, 37487, 37488, 37493, 37494, 37495, 37496,
            37497, 37499, 37500, 37501, 37503, 37512, 37513,
            37514, 37517, 37518, 37522, 37527, 37529, 37535,
            37536, 37540, 37541, 37543, 37544, 37547, 37551,
            37554, 37558, 37560, 37562, 37563, 37564, 37565,
            37567, 37568, 37569, 37570, 37571, 37573, 37574,
            37575, 37576, 37579, 37580, 37581, 37582, 37584,
            37587, 37589, 37591, 37592, 37593, 37596, 37597,
            37599, 37600, 37601, 37603, 37605, 37607, 37608,
            37612, 37614, 37616, 37625, 37627, 37631, 37632,
            37634, 37640, 37645, 37649, 37652, 37653, 37660,
            37661, 37662, 37663, 37665, 37668, 37669, 37671,
            37673, 37674, 37683, 37684, 37686, 37687, 37703,
            37704, 37705, 37712, 37713, 37714, 37717, 37719,
            37720, 37722, 37726, 37732, 37733, 37735, 37737,
            37738, 37741, 37743, 37744, 37745, 37747, 37748,
            37750, 37754, 37757, 37759, 37760, 37761, 37762,
            37768, 37770, 37771, 37773, 37775, 37778, 37781,
            37784, 37787, 37790, 37793, 37795, 37796, 37798,
            37800, 37803, 37812, 37813, 37814, 37818, 37801,
            37825, 37828, 37829, 37830, 37831, 37833, 37834,
            37835, 37836, 37837, 37843, 37849, 37852, 37854,
            37855, 37858, 37862, 37863, 37881, 37879, 37880,
            37882, 37883, 37885, 37889, 37890, 37892, 37896,
            37897, 37901, 37902, 37903, 37909, 37910, 37911,
            37919, 37934, 37935, 37937, 37938, 37939, 37940,
            37947, 37951, 37949, 37955, 37957, 37960, 37962,
            37964, 37973, 37977, 37980, 37983, 37985, 37987,
            37992, 37995, 37997, 37998, 37999, 38001, 38002,
            38020, 38019, 38264, 38265, 38270, 38276, 38280,
            38284, 38285, 38286, 38301, 38302, 38303, 38305,
            38310, 38313, 38315, 38316, 38324, 38326, 38330,
            38333, 38335, 38342, 38344, 38345, 38347, 38352,
            38353, 38354, 38355, 38361, 38362, 38365, 38366,
            38367, 38368, 38372, 38374, 38429, 38430, 38434,
            38436, 38437, 38438, 38444, 38449, 38451, 38455,
            38456, 38457, 38458, 38460, 38461, 38465, 38482,
            38484, 38486, 38487, 38488, 38497, 38510, 38516,
            38523, 38524, 38526, 38527, 38529, 38530, 38531,
            38532, 38537, 38545, 38550, 38554, 38557, 38559,
            38564, 38565, 38566, 38569, 38574, 38575, 38579,
            38586, 38602, 38610, 23986, 38616, 38618, 38621,
            38622, 38623, 38633, 38639, 38641, 38650, 38658,
            38659, 38661, 38665, 38682, 38683, 38685, 38689,
            38690, 38691, 38696, 38705, 38707, 38721, 38723,
            38730, 38734, 38735, 38741, 38743, 38744, 38746,
            38747, 38755, 38759, 38762, 38766, 38771, 38774,
            38775, 38776, 38779, 38781, 38783, 38784, 38793,
            38805, 38806, 38807, 38809, 38810, 38814, 38815,
            38818, 38828, 38830, 38833, 38834, 38837, 38838,
            38840, 38841, 38842, 38844, 38846, 38847, 38849,
            38852, 38853, 38855, 38857, 38858, 38860, 38861,
            38862, 38864, 38865, 38868, 38871, 38872, 38873,
            38877, 38878, 38880, 38875, 38881, 38884, 38895,
            38897, 38900, 38903, 38904, 38906, 38919, 38922,
            38937, 38925, 38926, 38932, 38934, 38940, 38942,
            38944, 38947, 38950, 38955, 38958, 38959, 38960,
            38962, 38963, 38965, 38949, 38974, 38980, 38983,
            38986, 38993, 38994, 38995, 38998, 38999, 39001,
            39002, 39010, 39011, 39013, 39014, 39018, 39020,
            39083, 39085, 39086, 39088, 39092, 39095, 39096,
            39098, 39099, 39103, 39106, 39109, 39112, 39116,
            39137, 39139, 39141, 39142, 39143, 39146, 39155,
            39158, 39170, 39175, 39176, 39185, 39189, 39190,
            39191, 39194, 39195, 39196, 39199, 39202, 39206,
            39207, 39211, 39217, 39218, 39219, 39220, 39221,
            39225, 39226, 39227, 39228, 39232, 39233, 39238,
            39239, 39240, 39245, 39246, 39252, 39256, 39257,
            39259, 39260, 39262, 39263, 39264, 39323, 39325,
            39327, 39334, 39344, 39345, 39346, 39349, 39353,
            39354, 39357, 39359, 39363, 39369, 39379, 39380,
            39385, 39386, 39388, 39390, 39399, 39402, 39403,
            39404, 39408, 39412, 39413, 39417, 39421, 39422,
            39426, 39427, 39428, 39435, 39436, 39440, 39441,
            39446, 39454, 39456, 39458, 39459, 39460, 39463,
            39469, 39470, 39475, 39477, 39478, 39480, 39495,
            39489, 39492, 39498, 39499, 39500, 39502, 39505,
            39508, 39510, 39517, 39594, 39596, 39598, 39599,
            39602, 39604, 39605, 39606, 39609, 39611, 39614,
            39615, 39617, 39619, 39622, 39624, 39630, 39632,
            39634, 39637, 39638, 39639, 39643, 39644, 39648,
            39652, 39653, 39655, 39657, 39660, 39666, 39667,
            39669, 39673, 39674, 39677, 39679, 39680, 39681,
            39682, 39683, 39684, 39685, 39688, 39689, 39691,
            39692, 39693, 39694, 39696, 39698, 39702, 39705,
            39707, 39708, 39712, 39718, 39723, 39725, 39731,
            39732, 39733, 39735, 39737, 39738, 39741, 39752,
            39755, 39756, 39765, 39766, 39767, 39771, 39774,
            39777, 39779, 39781, 39782, 39784, 39786, 39787,
            39788, 39789, 39790, 39795, 39797, 39799, 39800,
            39801, 39807, 39808, 39812, 39813, 39814, 39815,
            39817, 39818, 39819, 39821, 39823, 39824, 39828,
            39834, 39837, 39838, 39846, 39847, 39849, 39852,
            39856, 39857, 39858, 39863, 39864, 39867, 39868,
            39870, 39871, 39873, 39879, 39880, 39886, 39888,
            39895, 39896, 39901, 39903, 39909, 39911, 39914,
            39915, 39919, 39923, 39927, 39928, 39929, 39930,
            39933, 39935, 39936, 39938, 39947, 39951, 39953,
            39958, 39960, 39961, 39962, 39964, 39966, 39970,
            39971, 39974, 39975, 39976, 39977, 39978, 39985,
            39989, 39990, 39991, 39997, 40001, 40003, 40004,
            40005, 40009, 40010, 40014, 40015, 40016, 40019,
            40020, 40022, 40024, 40027, 40029, 40030, 40031,
            40035, 40041, 40042, 40028, 40043, 40040, 40046,
            40048, 40050, 40053, 40055, 40059, 40166, 40178,
            40183, 40185, 40203, 40194, 40209, 40215, 40216,
            40220, 40221, 40222, 40239, 40240, 40242, 40243,
            40244, 40250, 40252, 40261, 40253, 40258, 40259,
            40263, 40266, 40275, 40276, 40287, 40291, 40290,
            40293, 40297, 40298, 40299, 40304, 40310, 40311,
            40315, 40316, 40318, 40323, 40324, 40326, 40330,
            40333, 40334, 40338, 40339, 40341, 40342, 40343,
            40344, 40353, 40362, 40364, 40366, 40369, 40373,
            40377, 40380, 40383, 40387, 40391, 40393, 40394,
            40404, 40405, 40406, 40407, 40410, 40414, 40415,
            40416, 40421, 40423, 40425, 40427, 40430, 40432,
            40435, 40436, 40446, 40458, 40450, 40455, 40462,
            40464, 40465, 40466, 40469, 40470, 40473, 40476,
            40477, 40570, 40571, 40572, 40576, 40578, 40579,
            40580, 40581, 40583, 40590, 40591, 40598, 40600,
            40603, 40606, 40612, 40616, 40620, 40622, 40623,
            40624, 40627, 40628, 40629, 40646, 40648, 40651,
            40661, 40671, 40676, 40679, 40684, 40685, 40686,
            40688, 40689, 40690, 40693, 40696, 40703, 40706,
            40707, 40713, 40719, 40720, 40721, 40722, 40724,
            40726, 40727, 40729, 40730, 40731, 40735, 40738,
            40742, 40746, 40747, 40751, 40753, 40754, 40756,
            40759, 40761, 40762, 40764, 40765, 40767, 40769,
            40771, 40772, 40773, 40774, 40775, 40787, 40789,
            40790, 40791, 40792, 40794, 40797, 40798, 40808,
            40809, 40813, 40814, 40815, 40816, 40817, 40819,
            40821, 40826, 40829, 40847, 40848, 40849, 40850,
            40852, 40854, 40855, 40862, 40865, 40866, 40867,
            40869, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null
        ],
        "ibm866": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
            1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
            1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
            1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
            1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
            1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
            9617, 9618, 9619, 9474, 9508, 9569, 9570, 9558,
            9557, 9571, 9553, 9559, 9565, 9564, 9563, 9488,
            9492, 9524, 9516, 9500, 9472, 9532, 9566, 9567,
            9562, 9556, 9577, 9574, 9568, 9552, 9580, 9575,
            9576, 9572, 9573, 9561, 9560, 9554, 9555, 9579,
            9578, 9496, 9484, 9608, 9604, 9612, 9616, 9600,
            1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
            1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
            1025, 1105, 1028, 1108, 1031, 1111, 1038, 1118, 176,
            8729, 183, 8730, 8470, 164, 9632, 160
        ],
        "iso-8859-2": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 728, 321, 164, 317, 346,
            167, 168, 352, 350, 356, 377, 173, 381, 379, 176,
            261, 731, 322, 180, 318, 347, 711, 184, 353, 351,
            357, 378, 733, 382, 380, 340, 193, 194, 258, 196,
            313, 262, 199, 268, 201, 280, 203, 282, 205, 206,
            270, 272, 323, 327, 211, 212, 336, 214, 215, 344,
            366, 218, 368, 220, 221, 354, 223, 341, 225, 226,
            259, 228, 314, 263, 231, 269, 233, 281, 235, 283,
            237, 238, 271, 273, 324, 328, 243, 244, 337, 246,
            247, 345, 367, 250, 369, 252, 253, 355, 729
        ],
        "iso-8859-3": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 294, 728, 163, 164, null, 292,
            167, 168, 304, 350, 286, 308, 173, null, 379, 176,
            295, 178, 179, 180, 181, 293, 183, 184, 305, 351,
            287, 309, 189, null, 380, 192, 193, 194, null, 196,
            266, 264, 199, 200, 201, 202, 203, 204, 205, 206,
            207, null, 209, 210, 211, 212, 288, 214, 215, 284,
            217, 218, 219, 220, 364, 348, 223, 224, 225, 226,
            null, 228, 267, 265, 231, 232, 233, 234, 235, 236,
            237, 238, 239, null, 241, 242, 243, 244, 289, 246,
            247, 285, 249, 250, 251, 252, 365, 349, 729
        ],
        "iso-8859-4": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 312, 342, 164, 296, 315,
            167, 168, 352, 274, 290, 358, 173, 381, 175, 176,
            261, 731, 343, 180, 297, 316, 711, 184, 353, 275,
            291, 359, 330, 382, 331, 256, 193, 194, 195, 196,
            197, 198, 302, 268, 201, 280, 203, 278, 205, 206,
            298, 272, 325, 332, 310, 212, 213, 214, 215, 216,
            370, 218, 219, 220, 360, 362, 223, 257, 225, 226,
            227, 228, 229, 230, 303, 269, 233, 281, 235, 279,
            237, 238, 299, 273, 326, 333, 311, 244, 245, 246,
            247, 248, 371, 250, 251, 252, 361, 363, 729
        ],
        "iso-8859-5": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 1025, 1026, 1027, 1028, 1029,
            1030, 1031, 1032, 1033, 1034, 1035, 1036, 173, 1038,
            1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
            1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
            1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
            1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
            1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
            1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
            1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
            1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
            1103, 8470, 1105, 1106, 1107, 1108, 1109, 1110,
            1111, 1112, 1113, 1114, 1115, 1116, 167, 1118, 1119
        ],
        "iso-8859-6": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, null, null, null, 164, null,
            null, null, null, null, null, null, 1548, 173, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 1563, null, null, null,
            1567, null, 1569, 1570, 1571, 1572, 1573, 1574,
            1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
            1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
            1591, 1592, 1593, 1594, null, null, null, null,
            null, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
            1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
            1615, 1616, 1617, 1618, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null
        ],
        "iso-8859-7": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 8216, 8217, 163, 8364, 8367,
            166, 167, 168, 169, 890, 171, 172, 173, null, 8213,
            176, 177, 178, 179, 900, 901, 902, 183, 904, 905,
            906, 187, 908, 189, 910, 911, 912, 913, 914, 915,
            916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
            926, 927, 928, 929, null, 931, 932, 933, 934, 935,
            936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
            946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
            956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
            966, 967, 968, 969, 970, 971, 972, 973, 974, null
        ],
        "iso-8859-8": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, null, 162, 163, 164, 165, 166,
            167, 168, 169, 215, 171, 172, 173, 174, 175, 176,
            177, 178, 179, 180, 181, 182, 183, 184, 185, 247,
            187, 188, 189, 190, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 8215, 1488, 1489, 1490, 1491,
            1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
            1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
            1508, 1509, 1510, 1511, 1512, 1513, 1514, null,
            null, 8206, 8207, null
        ],
        "iso-8859-10": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 274, 290, 298, 296, 310,
            167, 315, 272, 352, 358, 381, 173, 362, 330, 176,
            261, 275, 291, 299, 297, 311, 183, 316, 273, 353,
            359, 382, 8213, 363, 331, 256, 193, 194, 195, 196,
            197, 198, 302, 268, 201, 280, 203, 278, 205, 206,
            207, 208, 325, 332, 211, 212, 213, 214, 360, 216,
            370, 218, 219, 220, 221, 222, 223, 257, 225, 226,
            227, 228, 229, 230, 303, 269, 233, 281, 235, 279,
            237, 238, 239, 240, 326, 333, 243, 244, 245, 246,
            361, 248, 371, 250, 251, 252, 253, 254, 312
        ],
        "iso-8859-13": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 8221, 162, 163, 164, 8222, 166,
            167, 216, 169, 342, 171, 172, 173, 174, 198, 176,
            177, 178, 179, 8220, 181, 182, 183, 248, 185, 343,
            187, 188, 189, 190, 230, 260, 302, 256, 262, 196,
            197, 280, 274, 268, 201, 377, 278, 290, 310, 298,
            315, 352, 323, 325, 211, 332, 213, 214, 215, 370,
            321, 346, 362, 220, 379, 381, 223, 261, 303, 257,
            263, 228, 229, 281, 275, 269, 233, 378, 279, 291,
            311, 299, 316, 353, 324, 326, 243, 333, 245, 246,
            247, 371, 322, 347, 363, 252, 380, 382, 8217
        ],
        "iso-8859-14": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 7682, 7683, 163, 266, 267, 7690,
            167, 7808, 169, 7810, 7691, 7922, 173, 174, 376,
            7710, 7711, 288, 289, 7744, 7745, 182, 7766, 7809,
            7767, 7811, 7776, 7923, 7812, 7813, 7777, 192, 193,
            194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
            204, 205, 206, 207, 372, 209, 210, 211, 212, 213,
            214, 7786, 216, 217, 218, 219, 220, 221, 374, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
            234, 235, 236, 237, 238, 239, 373, 241, 242, 243,
            244, 245, 246, 7787, 248, 249, 250, 251, 252, 253,
            375, 255
        ],
        "iso-8859-15": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 161, 162, 163, 8364, 165, 352,
            167, 353, 169, 170, 171, 172, 173, 174, 175, 176,
            177, 178, 179, 381, 181, 182, 183, 382, 185, 186,
            187, 338, 339, 376, 191, 192, 193, 194, 195, 196,
            197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
            207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
            217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
            227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
            237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
            247, 248, 249, 250, 251, 252, 253, 254, 255
        ],
        "iso-8859-16": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 261, 321, 8364, 8222, 352,
            167, 353, 169, 536, 171, 377, 173, 378, 379, 176,
            177, 268, 322, 381, 8221, 182, 183, 382, 269, 537,
            187, 338, 339, 376, 380, 192, 193, 194, 258, 196,
            262, 198, 199, 200, 201, 202, 203, 204, 205, 206,
            207, 272, 323, 210, 211, 212, 336, 214, 346, 368,
            217, 218, 219, 220, 280, 538, 223, 224, 225, 226,
            259, 228, 263, 230, 231, 232, 233, 234, 235, 236,
            237, 238, 239, 273, 324, 242, 243, 244, 337, 246,
            347, 369, 249, 250, 251, 252, 281, 539, 255
        ],
        "koi8-r": [9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508,
            9516, 9524, 9532, 9600, 9604, 9608, 9612, 9616,
            9617, 9618, 9619, 8992, 9632, 8729, 8730, 8776,
            8804, 8805, 160, 8993, 176, 178, 183, 247, 9552,
            9553, 9554, 1105, 9555, 9556, 9557, 9558, 9559,
            9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567,
            9568, 9569, 1025, 9570, 9571, 9572, 9573, 9574,
            9575, 9576, 9577, 9578, 9579, 9580, 169, 1102, 1072,
            1073, 1094, 1076, 1077, 1092, 1075, 1093, 1080,
            1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103,
            1088, 1089, 1090, 1091, 1078, 1074, 1100, 1099,
            1079, 1096, 1101, 1097, 1095, 1098, 1070, 1040,
            1041, 1062, 1044, 1045, 1060, 1043, 1061, 1048,
            1049, 1050, 1051, 1052, 1053, 1054, 1055, 1071,
            1056, 1057, 1058, 1059, 1046, 1042, 1068, 1067,
            1047, 1064, 1069, 1065, 1063, 1066
        ],
        "koi8-u": [9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508,
            9516, 9524, 9532, 9600, 9604, 9608, 9612, 9616,
            9617, 9618, 9619, 8992, 9632, 8729, 8730, 8776,
            8804, 8805, 160, 8993, 176, 178, 183, 247, 9552,
            9553, 9554, 1105, 1108, 9556, 1110, 1111, 9559,
            9560, 9561, 9562, 9563, 1169, 9565, 9566, 9567,
            9568, 9569, 1025, 1028, 9571, 1030, 1031, 9574,
            9575, 9576, 9577, 9578, 1168, 9580, 169, 1102, 1072,
            1073, 1094, 1076, 1077, 1092, 1075, 1093, 1080,
            1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103,
            1088, 1089, 1090, 1091, 1078, 1074, 1100, 1099,
            1079, 1096, 1101, 1097, 1095, 1098, 1070, 1040,
            1041, 1062, 1044, 1045, 1060, 1043, 1061, 1048,
            1049, 1050, 1051, 1052, 1053, 1054, 1055, 1071,
            1056, 1057, 1058, 1059, 1046, 1042, 1068, 1067,
            1047, 1064, 1069, 1065, 1063, 1066
        ],
        "macintosh": [196, 197, 199, 201, 209, 214, 220, 225, 224,
            226, 228, 227, 229, 231, 233, 232, 234, 235, 237,
            236, 238, 239, 241, 243, 242, 244, 246, 245, 250,
            249, 251, 252, 8224, 176, 162, 163, 167, 8226, 182,
            223, 174, 169, 8482, 180, 168, 8800, 198, 216, 8734,
            177, 8804, 8805, 165, 181, 8706, 8721, 8719, 960,
            8747, 170, 186, 937, 230, 248, 191, 161, 172, 8730,
            402, 8776, 8710, 171, 187, 8230, 160, 192, 195, 213,
            338, 339, 8211, 8212, 8220, 8221, 8216, 8217, 247,
            9674, 255, 376, 8260, 8364, 8249, 8250, 64257,
            64258, 8225, 183, 8218, 8222, 8240, 194, 202, 193,
            203, 200, 205, 206, 207, 204, 211, 212, 63743, 210,
            218, 219, 217, 305, 710, 732, 175, 728, 729, 730,
            184, 733, 731, 711
        ],
        "windows-874": [8364, 129, 130, 131, 132, 8230, 134, 135,
            136, 137, 138, 139, 140, 141, 142, 143, 144, 8216,
            8217, 8220, 8221, 8226, 8211, 8212, 152, 153, 154,
            155, 156, 157, 158, 159, 160, 3585, 3586, 3587,
            3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595,
            3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603,
            3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611,
            3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619,
            3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627,
            3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635,
            3636, 3637, 3638, 3639, 3640, 3641, 3642, null,
            null, null, null, 3647, 3648, 3649, 3650, 3651,
            3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,
            3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667,
            3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675,
            null, null, null, null
        ],
        "windows-1250": [8364, 129, 8218, 131, 8222, 8230, 8224,
            8225, 136, 8240, 352, 8249, 346, 356, 381, 377, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482,
            353, 8250, 347, 357, 382, 378, 160, 711, 728, 321,
            164, 260, 166, 167, 168, 169, 350, 171, 172, 173,
            174, 379, 176, 177, 731, 322, 180, 181, 182, 183,
            184, 261, 351, 187, 317, 733, 318, 380, 340, 193,
            194, 258, 196, 313, 262, 199, 268, 201, 280, 203,
            282, 205, 206, 270, 272, 323, 327, 211, 212, 336,
            214, 215, 344, 366, 218, 368, 220, 221, 354, 223,
            341, 225, 226, 259, 228, 314, 263, 231, 269, 233,
            281, 235, 283, 237, 238, 271, 273, 324, 328, 243,
            244, 337, 246, 247, 345, 367, 250, 369, 252, 253,
            355, 729
        ],
        "windows-1251": [1026, 1027, 8218, 1107, 8222, 8230, 8224,
            8225, 8364, 8240, 1033, 8249, 1034, 1036, 1035,
            1039, 1106, 8216, 8217, 8220, 8221, 8226, 8211,
            8212, 152, 8482, 1113, 8250, 1114, 1116, 1115, 1119,
            160, 1038, 1118, 1032, 164, 1168, 166, 167, 1025,
            169, 1028, 171, 172, 173, 174, 1031, 176, 177, 1030,
            1110, 1169, 181, 182, 183, 1105, 8470, 1108, 187,
            1112, 1029, 1109, 1111, 1040, 1041, 1042, 1043,
            1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
            1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
            1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
            1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
            1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
            1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
            1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
            1100, 1101, 1102, 1103
        ],
        "windows-1252": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            353, 8250, 339, 157, 382, 376, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
            194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
            204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
            214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
            234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
            244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
            254, 255
        ],
        "windows-1253": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 136, 8240, 138, 8249, 140, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482,
            154, 8250, 156, 157, 158, 159, 160, 901, 902, 163,
            164, 165, 166, 167, 168, 169, null, 171, 172, 173,
            174, 8213, 176, 177, 178, 179, 900, 181, 182, 183,
            904, 905, 906, 187, 908, 189, 910, 911, 912, 913,
            914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
            924, 925, 926, 927, 928, 929, null, 931, 932, 933,
            934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
            944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
            954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
            964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
            974, null
        ],
        "windows-1254": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 352, 8249, 338, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            353, 8250, 339, 157, 158, 376, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
            194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
            204, 205, 206, 207, 286, 209, 210, 211, 212, 213,
            214, 215, 216, 217, 218, 219, 220, 304, 350, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
            234, 235, 236, 237, 238, 239, 287, 241, 242, 243,
            244, 245, 246, 247, 248, 249, 250, 251, 252, 305,
            351, 255
        ],
        "windows-1255": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 138, 8249, 140, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            154, 8250, 156, 157, 158, 159, 160, 161, 162, 163,
            8362, 165, 166, 167, 168, 169, 215, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 247, 187, 188, 189, 190, 191, 1456, 1457,
            1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
            null, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
            1474, 1475, 1520, 1521, 1522, 1523, 1524, null,
            null, null, null, null, null, null, 1488, 1489,
            1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
            1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
            1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
            1514, null, null, 8206, 8207, null
        ],
        "windows-1256": [8364, 1662, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 1657, 8249, 338, 1670, 1688, 1672,
            1711, 8216, 8217, 8220, 8221, 8226, 8211, 8212,
            1705, 8482, 1681, 8250, 339, 8204, 8205, 1722, 160,
            1548, 162, 163, 164, 165, 166, 167, 168, 169, 1726,
            171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
            181, 182, 183, 184, 185, 1563, 187, 188, 189, 190,
            1567, 1729, 1569, 1570, 1571, 1572, 1573, 1574,
            1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
            1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 215,
            1591, 1592, 1593, 1594, 1600, 1601, 1602, 1603, 224,
            1604, 226, 1605, 1606, 1607, 1608, 231, 232, 233,
            234, 235, 1609, 1610, 238, 239, 1611, 1612, 1613,
            1614, 244, 1615, 1616, 247, 1617, 249, 1618, 251,
            252, 8206, 8207, 1746
        ],
        "windows-1257": [8364, 129, 8218, 131, 8222, 8230, 8224,
            8225, 136, 8240, 138, 8249, 140, 168, 711, 184, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482,
            154, 8250, 156, 175, 731, 159, 160, null, 162, 163,
            164, null, 166, 167, 216, 169, 342, 171, 172, 173,
            174, 198, 176, 177, 178, 179, 180, 181, 182, 183,
            248, 185, 343, 187, 188, 189, 190, 230, 260, 302,
            256, 262, 196, 197, 280, 274, 268, 201, 377, 278,
            290, 310, 298, 315, 352, 323, 325, 211, 332, 213,
            214, 215, 370, 321, 346, 362, 220, 379, 381, 223,
            261, 303, 257, 263, 228, 229, 281, 275, 269, 233,
            378, 279, 291, 311, 299, 316, 353, 324, 326, 243,
            333, 245, 246, 247, 371, 322, 347, 363, 252, 380,
            382, 729
        ],
        "windows-1258": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 138, 8249, 338, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            154, 8250, 339, 157, 158, 376, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
            194, 258, 196, 197, 198, 199, 200, 201, 202, 203,
            768, 205, 206, 207, 272, 209, 777, 211, 212, 416,
            214, 215, 216, 217, 218, 219, 220, 431, 771, 223,
            224, 225, 226, 259, 228, 229, 230, 231, 232, 233,
            234, 235, 769, 237, 238, 239, 273, 241, 803, 243,
            244, 417, 246, 247, 248, 249, 250, 251, 252, 432,
            8363, 255
        ],
        "x-mac-cyrillic": [1040, 1041, 1042, 1043, 1044, 1045, 1046,
            1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
            1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
            1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
            1071, 8224, 176, 1168, 163, 167, 8226, 182, 1030,
            174, 169, 8482, 1026, 1106, 8800, 1027, 1107, 8734,
            177, 8804, 8805, 1110, 181, 1169, 1032, 1028, 1108,
            1031, 1111, 1033, 1113, 1034, 1114, 1112, 1029, 172,
            8730, 402, 8776, 8710, 171, 187, 8230, 160, 1035,
            1115, 1036, 1116, 1109, 8211, 8212, 8220, 8221,
            8216, 8217, 247, 8222, 1038, 1118, 1039, 1119, 8470,
            1025, 1105, 1103, 1072, 1073, 1074, 1075, 1076,
            1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
            1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
            1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
            1101, 1102, 8364
        ]
    };

    //
    // Utilities
    //

    /**
     * @param {number} a The number to test.
     * @param {number} min The minimum value in the range, inclusive.
     * @param {number} max The maximum value in the range, inclusive.
     * @return {boolean} True if a >= min and a <= max.
     */
    function inRange(a, min, max) {
        return min <= a && a <= max;
    }

    /**
     * @param {number} n The numerator.
     * @param {number} d The denominator.
     * @return {number} The result of the integer division of n by d.
     */
    function div(n, d) {
        return Math.floor(n / d);
    }


    //
    // Implementation of Encoding specification
    // http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html
    //

    //
    // 3. Terminology
    //

    //
    // 4. Encodings
    //

    /** @const */
    var EOF_byte = -1;
    /** @const */
    var EOF_code_point = -1;

    /**
     * @constructor
     * @param {Uint8Array} bytes Array of bytes that provide the stream.
     */
    function ByteInputStream(bytes) {
        /** @type {number} */
        var pos = 0;

        /**
         * @this {ByteInputStream}
         * @return {number} Get the next byte from the stream.
         */
        this.get = function() {
            return (pos >= bytes.length) ? EOF_byte : Number(bytes[
                pos]);
        };

        /** @param {number} n Number (positive or negative) by which to
         *      offset the byte pointer. */
        this.offset = function(n) {
            pos += n;
            if (pos < 0) {
                throw new Error('Seeking past start of the buffer');
            }
            if (pos > bytes.length) {
                throw new Error('Seeking past EOF');
            }
        };

        /**
         * @param {Array.<number>} test Array of bytes to compare against.
         * @return {boolean} True if the start of the stream matches the test
         *     bytes.
         */
        this.match = function(test) {
            if (test.length > pos + bytes.length) {
                return false;
            }
            var i;
            for (i = 0; i < test.length; i += 1) {
                if (Number(bytes[pos + i]) !== test[i]) {
                    return false;
                }
            }
            return true;
        };
    }

    /**
     * @constructor
     * @param {Array.<number>} bytes The array to write bytes into.
     */
    function ByteOutputStream(bytes) {
        /** @type {number} */
        var pos = 0;

        /**
         * @param {...number} var_args The byte or bytes to emit into the stream.
         * @return {number} The last byte emitted.
         */
        this.emit = function(var_args) {
            /** @type {number} */
            var last = EOF_byte;
            var i;
            for (i = 0; i < arguments.length; ++i) {
                last = Number(arguments[i]);
                bytes[pos++] = last;
            }
            return last;
        };
    }

    /**
     * @constructor
     * @param {string} string The source of code units for the stream.
     */
    function CodePointInputStream(string) {
        /**
         * @param {string} string Input string of UTF-16 code units.
         * @return {Array.<number>} Code points.
         */
        function stringToCodePoints(string) {
            /** @type {Array.<number>} */
            var cps = [];
            // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString
            var i = 0,
                n = string.length;
            while (i < string.length) {
                var c = string.charCodeAt(i);
                if (!inRange(c, 0xD800, 0xDFFF)) {
                    cps.push(c);
                } else if (inRange(c, 0xDC00, 0xDFFF)) {
                    cps.push(0xFFFD);
                } else { // (inRange(cu, 0xD800, 0xDBFF))
                    if (i === n - 1) {
                        cps.push(0xFFFD);
                    } else {
                        var d = string.charCodeAt(i + 1);
                        if (inRange(d, 0xDC00, 0xDFFF)) {
                            var a = c & 0x3FF;
                            var b = d & 0x3FF;
                            i += 1;
                            cps.push(0x10000 + (a << 10) + b);
                        } else {
                            cps.push(0xFFFD);
                        }
                    }
                }
                i += 1;
            }
            return cps;
        }

        /** @type {number} */
        var pos = 0;
        /** @type {Array.<number>} */
        var cps = stringToCodePoints(string);

        /** @param {number} n The number of bytes (positive or negative)
         *      to advance the code point pointer by.*/
        this.offset = function(n) {
            pos += n;
            if (pos < 0) {
                throw new Error('Seeking past start of the buffer');
            }
            if (pos > cps.length) {
                throw new Error('Seeking past EOF');
            }
        };


        /** @return {number} Get the next code point from the stream. */
        this.get = function() {
            if (pos >= cps.length) {
                return EOF_code_point;
            }
            return cps[pos];
        };
    }

    /**
     * @constructor
     */
    function CodePointOutputStream() {
        /** @type {string} */
        var string = '';

        /** @return {string} The accumulated string. */
        this.string = function() {
            return string;
        };

        /** @param {number} c The code point to encode into the stream. */
        this.emit = function(c) {
            if (c <= 0xFFFF) {
                string += String.fromCharCode(c);
            } else {
                c -= 0x10000;
                string += String.fromCharCode(0xD800 + ((c >> 10) &
                    0x3ff));
                string += String.fromCharCode(0xDC00 + (c & 0x3ff));
            }
        };
    }

    /**
     * @constructor
     * @param {string} message Description of the error.
     */
    function EncodingError(message) {
        this.name = 'EncodingError';
        this.message = message;
        this.code = 0;
    }
    EncodingError.prototype = Error.prototype;

    /**
     * @param {boolean} fatal If true, decoding errors raise an exception.
     * @param {number=} opt_code_point Override the standard fallback code point.
     * @return {number} The code point to insert on a decoding error.
     */
    function decoderError(fatal, opt_code_point) {
        if (fatal) {
            throw new EncodingError('Decoder error');
        }
        return opt_code_point || 0xFFFD;
    }

    /**
     * @param {number} code_point The code point that could not be encoded.
     * @return {number} Always throws, no value is actually returned.
     */
    function encoderError(code_point) {
        throw new EncodingError('The code point ' + code_point +
            ' could not be encoded.');
    }

    /**
     * @param {string} label The encoding label.
     * @return {?{name:string,labels:Array.<string>}}
     */
    function getEncoding(label) {
        label = String(label).trim().toLowerCase();
        if (Object.prototype.hasOwnProperty.call(label_to_encoding,
                label)) {
            return label_to_encoding[label];
        }
        return null;
    }

    /** @type {Array.<{encodings: Array.<{name:string,labels:Array.<string>}>,
     *      heading: string}>} */
    var encodings = [{
        "encodings": [{
            "labels": [
                "unicode-1-1-utf-8",
                "utf-8",
                "utf8"
            ],
            "name": "utf-8"
        }],
        "heading": "The Encoding"
    }, {
        "encodings": [{
            "labels": [
                "866",
                "cp866",
                "csibm866",
                "ibm866"
            ],
            "name": "ibm866"
        }, {
            "labels": [
                "csisolatin2",
                "iso-8859-2",
                "iso-ir-101",
                "iso8859-2",
                "iso88592",
                "iso_8859-2",
                "iso_8859-2:1987",
                "l2",
                "latin2"
            ],
            "name": "iso-8859-2"
        }, {
            "labels": [
                "csisolatin3",
                "iso-8859-3",
                "iso-ir-109",
                "iso8859-3",
                "iso88593",
                "iso_8859-3",
                "iso_8859-3:1988",
                "l3",
                "latin3"
            ],
            "name": "iso-8859-3"
        }, {
            "labels": [
                "csisolatin4",
                "iso-8859-4",
                "iso-ir-110",
                "iso8859-4",
                "iso88594",
                "iso_8859-4",
                "iso_8859-4:1988",
                "l4",
                "latin4"
            ],
            "name": "iso-8859-4"
        }, {
            "labels": [
                "csisolatincyrillic",
                "cyrillic",
                "iso-8859-5",
                "iso-ir-144",
                "iso8859-5",
                "iso88595",
                "iso_8859-5",
                "iso_8859-5:1988"
            ],
            "name": "iso-8859-5"
        }, {
            "labels": [
                "arabic",
                "asmo-708",
                "csiso88596e",
                "csiso88596i",
                "csisolatinarabic",
                "ecma-114",
                "iso-8859-6",
                "iso-8859-6-e",
                "iso-8859-6-i",
                "iso-ir-127",
                "iso8859-6",
                "iso88596",
                "iso_8859-6",
                "iso_8859-6:1987"
            ],
            "name": "iso-8859-6"
        }, {
            "labels": [
                "csisolatingreek",
                "ecma-118",
                "elot_928",
                "greek",
                "greek8",
                "iso-8859-7",
                "iso-ir-126",
                "iso8859-7",
                "iso88597",
                "iso_8859-7",
                "iso_8859-7:1987",
                "sun_eu_greek"
            ],
            "name": "iso-8859-7"
        }, {
            "labels": [
                "csiso88598e",
                "csisolatinhebrew",
                "hebrew",
                "iso-8859-8",
                "iso-8859-8-e",
                "iso-ir-138",
                "iso8859-8",
                "iso88598",
                "iso_8859-8",
                "iso_8859-8:1988",
                "visual"
            ],
            "name": "iso-8859-8"
        }, {
            "labels": [
                "csiso88598i",
                "iso-8859-8-i",
                "logical"
            ],
            "name": "iso-8859-8-i"
        }, {
            "labels": [
                "csisolatin6",
                "iso-8859-10",
                "iso-ir-157",
                "iso8859-10",
                "iso885910",
                "l6",
                "latin6"
            ],
            "name": "iso-8859-10"
        }, {
            "labels": [
                "iso-8859-13",
                "iso8859-13",
                "iso885913"
            ],
            "name": "iso-8859-13"
        }, {
            "labels": [
                "iso-8859-14",
                "iso8859-14",
                "iso885914"
            ],
            "name": "iso-8859-14"
        }, {
            "labels": [
                "csisolatin9",
                "iso-8859-15",
                "iso8859-15",
                "iso885915",
                "iso_8859-15",
                "l9"
            ],
            "name": "iso-8859-15"
        }, {
            "labels": [
                "iso-8859-16"
            ],
            "name": "iso-8859-16"
        }, {
            "labels": [
                "cskoi8r",
                "koi",
                "koi8",
                "koi8-r",
                "koi8_r"
            ],
            "name": "koi8-r"
        }, {
            "labels": [
                "koi8-u"
            ],
            "name": "koi8-u"
        }, {
            "labels": [
                "csmacintosh",
                "mac",
                "macintosh",
                "x-mac-roman"
            ],
            "name": "macintosh"
        }, {
            "labels": [
                "dos-874",
                "iso-8859-11",
                "iso8859-11",
                "iso885911",
                "tis-620",
                "windows-874"
            ],
            "name": "windows-874"
        }, {
            "labels": [
                "cp1250",
                "windows-1250",
                "x-cp1250"
            ],
            "name": "windows-1250"
        }, {
            "labels": [
                "cp1251",
                "windows-1251",
                "x-cp1251"
            ],
            "name": "windows-1251"
        }, {
            "labels": [
                "ansi_x3.4-1968",
                "ascii",
                "cp1252",
                "cp819",
                "csisolatin1",
                "ibm819",
                "iso-8859-1",
                "iso-ir-100",
                "iso8859-1",
                "iso88591",
                "iso_8859-1",
                "iso_8859-1:1987",
                "l1",
                "latin1",
                "us-ascii",
                "windows-1252",
                "x-cp1252"
            ],
            "name": "windows-1252"
        }, {
            "labels": [
                "cp1253",
                "windows-1253",
                "x-cp1253"
            ],
            "name": "windows-1253"
        }, {
            "labels": [
                "cp1254",
                "csisolatin5",
                "iso-8859-9",
                "iso-ir-148",
                "iso8859-9",
                "iso88599",
                "iso_8859-9",
                "iso_8859-9:1989",
                "l5",
                "latin5",
                "windows-1254",
                "x-cp1254"
            ],
            "name": "windows-1254"
        }, {
            "labels": [
                "cp1255",
                "windows-1255",
                "x-cp1255"
            ],
            "name": "windows-1255"
        }, {
            "labels": [
                "cp1256",
                "windows-1256",
                "x-cp1256"
            ],
            "name": "windows-1256"
        }, {
            "labels": [
                "cp1257",
                "windows-1257",
                "x-cp1257"
            ],
            "name": "windows-1257"
        }, {
            "labels": [
                "cp1258",
                "windows-1258",
                "x-cp1258"
            ],
            "name": "windows-1258"
        }, {
            "labels": [
                "x-mac-cyrillic",
                "x-mac-ukrainian"
            ],
            "name": "x-mac-cyrillic"
        }],
        "heading": "Legacy single-byte encodings"
    }, {
        "encodings": [{
            "labels": [
                "chinese",
                "csgb2312",
                "csiso58gb231280",
                "gb18030",
                "gb2312",
                "gb_2312",
                "gb_2312-80",
                "gbk",
                "iso-ir-58",
                "x-gbk"
            ],
            "name": "gb18030"
        }, {
            "labels": [
                "hz-gb-2312"
            ],
            "name": "hz-gb-2312"
        }],
        "heading": "Legacy multi-byte Chinese (simplified) encodings"
    }, {
        "encodings": [{
            "labels": [
                "big5",
                "big5-hkscs",
                "cn-big5",
                "csbig5",
                "x-x-big5"
            ],
            "name": "big5"
        }],
        "heading": "Legacy multi-byte Chinese (traditional) encodings"
    }, {
        "encodings": [{
            "labels": [
                "cseucpkdfmtjapanese",
                "euc-jp",
                "x-euc-jp"
            ],
            "name": "euc-jp"
        }, {
            "labels": [
                "csiso2022jp",
                "iso-2022-jp"
            ],
            "name": "iso-2022-jp"
        }, {
            "labels": [
                "csshiftjis",
                "ms_kanji",
                "shift-jis",
                "shift_jis",
                "sjis",
                "windows-31j",
                "x-sjis"
            ],
            "name": "shift_jis"
        }],
        "heading": "Legacy multi-byte Japanese encodings"
    }, {
        "encodings": [{
            "labels": [
                "cseuckr",
                "csksc56011987",
                "euc-kr",
                "iso-ir-149",
                "korean",
                "ks_c_5601-1987",
                "ks_c_5601-1989",
                "ksc5601",
                "ksc_5601",
                "windows-949"
            ],
            "name": "euc-kr"
        }],
        "heading": "Legacy multi-byte Korean encodings"
    }, {
        "encodings": [{
            "labels": [
                "csiso2022kr",
                "iso-2022-cn",
                "iso-2022-cn-ext",
                "iso-2022-kr"
            ],
            "name": "replacement"
        }, {
            "labels": [
                "utf-16be"
            ],
            "name": "utf-16be"
        }, {
            "labels": [
                "utf-16",
                "utf-16le"
            ],
            "name": "utf-16le"
        }, {
            "labels": [
                "x-user-defined"
            ],
            "name": "x-user-defined"
        }],
        "heading": "Legacy miscellaneous encodings"
    }];

    var name_to_encoding = {};
    var label_to_encoding = {};
    encodings.forEach(function(category) {
        category.encodings.forEach(function(encoding) {
            name_to_encoding[encoding.name] = encoding;
            encoding.labels.forEach(function(label) {
                label_to_encoding[label] =
                    encoding;
            });
        });
    });

    //
    // 5. Indexes
    //

    /**
     * @param {number} pointer The |pointer| to search for.
     * @param {Array.<?number>|undefined} index The |index| to search within.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in |index|.
     */
    function indexCodePointFor(pointer, index) {
        if (!index) return null;
        return index[pointer] || null;
    }

    /**
     * @param {number} code_point The |code point| to search for.
     * @param {Array.<?number>} index The |index| to search within.
     * @return {?number} The first pointer corresponding to |code point| in
     *     |index|, or null if |code point| is not in |index|.
     */
    function indexPointerFor(code_point, index) {
        var pointer = index.indexOf(code_point);
        return pointer === -1 ? null : pointer;
    }

    /**
     * @param {string} name Name of the index.
     * @return {(Array.<number>|Array.<Array.<number>>)}
     *  */
    function index(name) {
        return ENCODING_INDEXES[name];
    }

    /**
     * @param {number} pointer The |pointer| to search for in the gb18030 index.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in the gb18030 index.
     */
    function indexGB18030CodePointFor(pointer) {
        if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575)) {
            return null;
        }
        var /** @type {number} */ offset = 0,
            /** @type {number} */
            code_point_offset = 0,
            /** @type {Array.<Array.<number>>} */
            idx = index('gb18030');
        var i;
        for (i = 0; i < idx.length; ++i) {
            var entry = idx[i];
            if (entry[0] <= pointer) {
                offset = entry[0];
                code_point_offset = entry[1];
            } else {
                break;
            }
        }
        return code_point_offset + pointer - offset;
    }

    /**
     * @param {number} code_point The |code point| to locate in the gb18030 index.
     * @return {number} The first pointer corresponding to |code point| in the
     *     gb18030 index.
     */
    function indexGB18030PointerFor(code_point) {
        var /** @type {number} */ offset = 0,
            /** @type {number} */
            pointer_offset = 0,
            /** @type {Array.<Array.<number>>} */
            idx = index('gb18030');
        var i;
        for (i = 0; i < idx.length; ++i) {
            var entry = idx[i];
            if (entry[1] <= code_point) {
                offset = entry[1];
                pointer_offset = entry[0];
            } else {
                break;
            }
        }
        return pointer_offset + code_point - offset;
    }


    //
    // 7. API
    //

    /** @const */
    var DEFAULT_ENCODING = 'utf-8';

    // 7.1 Interface TextDecoder

    /**
     * @constructor
     * @param {string=} opt_encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {{fatal: boolean}=} options
     */
    function TextDecoder(opt_encoding, options) {
        if (!(this instanceof TextDecoder)) {
            return new TextDecoder(opt_encoding, options);
        }
        opt_encoding = opt_encoding ? String(opt_encoding) :
            DEFAULT_ENCODING;
        options = Object(options);
        /** @private */
        this._encoding = getEncoding(opt_encoding);
        if (this._encoding === null || this._encoding.name ===
            'replacement')
            throw new TypeError('Unknown encoding: ' + opt_encoding);

        /** @private @type {boolean} */
        this._streaming = false;
        /** @private @type {boolean} */
        this._BOMseen = false;
        /** @private */
        this._decoder = null;
        /** @private @type {{fatal: boolean}=} */
        this._options = {
            fatal: Boolean(options.fatal)
        };

        if (Object.defineProperty) {
            Object.defineProperty(
                this, 'encoding', {
                    get: function() {
                        return this._encoding.name;
                    }
                });
        } else {
            this.encoding = this._encoding.name;
        }

        return this;
    }

    // TODO: Issue if input byte stream is offset by decoder
    // TODO: BOM detection will not work if stream header spans multiple calls
    // (last N bytes of previous stream may need to be retained?)
    TextDecoder.prototype = {
        /**
         * @param {ArrayBufferView=} opt_view The buffer of bytes to decode.
         * @param {{stream: boolean}=} options
         */
        decode: function decode(opt_view, options) {
            if (opt_view && !('buffer' in opt_view &&
                    'byteOffset' in opt_view &&
                    'byteLength' in opt_view)) {
                throw new TypeError('Expected ArrayBufferView');
            } else if (!opt_view) {
                opt_view = new Uint8Array(0);
            }
            options = Object(options);

            if (!this._streaming) {
                this._decoder = this._encoding.getDecoder(this._options);
                this._BOMseen = false;
            }
            this._streaming = Boolean(options.stream);

            var bytes = new Uint8Array(opt_view.buffer,
                opt_view.byteOffset,
                opt_view.byteLength);
            var input_stream = new ByteInputStream(bytes);

            var output_stream = new CodePointOutputStream();

            /** @type {number} */
            var code_point;

            while (input_stream.get() !== EOF_byte) {
                code_point = this._decoder.decode(input_stream);
                if (code_point !== null && code_point !==
                    EOF_code_point) {
                    output_stream.emit(code_point);
                }
            }
            if (!this._streaming) {
                do {
                    code_point = this._decoder.decode(
                        input_stream);
                    if (code_point !== null && code_point !==
                        EOF_code_point) {
                        output_stream.emit(code_point);
                    }
                } while (code_point !== EOF_code_point &&
                    input_stream.get() != EOF_byte);
                this._decoder = null;
            }

            var result = output_stream.string();
            if (!this._BOMseen && result.length) {
                this._BOMseen = true;
                if (['utf-8', 'utf-16le', 'utf-16be'].indexOf(
                        this.encoding) !== -1 &&
                    result.charCodeAt(0) === 0xFEFF) {
                    result = result.substring(1);
                }
            }

            return result;
        }
    };

    // 7.2 Interface TextEncoder

    /**
     * @constructor
     * @param {string=} opt_encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {{fatal: boolean}=} options
     */
    function TextEncoder(opt_encoding, options) {
        if (!(this instanceof TextEncoder)) {
            return new TextEncoder(opt_encoding, options);
        }
        opt_encoding = opt_encoding ? String(opt_encoding) :
            DEFAULT_ENCODING;
        options = Object(options);
        /** @private */
        this._encoding = getEncoding(opt_encoding);
        if (this._encoding === null || (this._encoding.name !== 'utf-8' &&
                this._encoding.name !== 'utf-16le' &&
                this._encoding.name !== 'utf-16be'))
            throw new TypeError('Unknown encoding: ' + opt_encoding);
        /** @private @type {boolean} */
        this._streaming = false;
        /** @private */
        this._encoder = null;
        /** @private @type {{fatal: boolean}=} */
        this._options = {
            fatal: Boolean(options.fatal)
        };

        if (Object.defineProperty) {
            Object.defineProperty(
                this, 'encoding', {
                    get: function() {
                        return this._encoding.name;
                    }
                });
        } else {
            this.encoding = this._encoding.name;
        }

        return this;
    }

    TextEncoder.prototype = {
        /**
         * @param {string=} opt_string The string to encode.
         * @param {{stream: boolean}=} options
         */
        encode: function encode(opt_string, options) {
            opt_string = opt_string ? String(opt_string) : '';
            options = Object(options);
            // TODO: any options?
            if (!this._streaming) {
                this._encoder = this._encoding.getEncoder(this._options);
            }
            this._streaming = Boolean(options.stream);

            var bytes = [];
            var output_stream = new ByteOutputStream(bytes);
            var input_stream = new CodePointInputStream(
                opt_string);
            while (input_stream.get() !== EOF_code_point) {
                this._encoder.encode(output_stream,
                    input_stream);
            }
            if (!this._streaming) {
                /** @type {number} */
                var last_byte;
                do {
                    last_byte = this._encoder.encode(
                        output_stream, input_stream);
                } while (last_byte !== EOF_byte);
                this._encoder = null;
            }
            return new Uint8Array(bytes);
        }
    };


    //
    // 8. The encoding
    //

    // 8.1 utf-8

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function UTF8Decoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ utf8_code_point = 0,
            /** @type {number} */
            utf8_bytes_needed = 0,
            /** @type {number} */
            utf8_bytes_seen = 0,
            /** @type {number} */
            utf8_lower_boundary = 0;

        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte) {
                if (utf8_bytes_needed !== 0) {
                    return decoderError(fatal);
                }
                return EOF_code_point;
            }
            byte_pointer.offset(1);

            if (utf8_bytes_needed === 0) {
                if (inRange(bite, 0x00, 0x7F)) {
                    return bite;
                }
                if (inRange(bite, 0xC2, 0xDF)) {
                    utf8_bytes_needed = 1;
                    utf8_lower_boundary = 0x80;
                    utf8_code_point = bite - 0xC0;
                } else if (inRange(bite, 0xE0, 0xEF)) {
                    utf8_bytes_needed = 2;
                    utf8_lower_boundary = 0x800;
                    utf8_code_point = bite - 0xE0;
                } else if (inRange(bite, 0xF0, 0xF4)) {
                    utf8_bytes_needed = 3;
                    utf8_lower_boundary = 0x10000;
                    utf8_code_point = bite - 0xF0;
                } else {
                    return decoderError(fatal);
                }
                utf8_code_point = utf8_code_point * Math.pow(64,
                    utf8_bytes_needed);
                return null;
            }
            if (!inRange(bite, 0x80, 0xBF)) {
                utf8_code_point = 0;
                utf8_bytes_needed = 0;
                utf8_bytes_seen = 0;
                utf8_lower_boundary = 0;
                byte_pointer.offset(-1);
                return decoderError(fatal);
            }
            utf8_bytes_seen += 1;
            utf8_code_point = utf8_code_point + (bite - 0x80) *
                Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
            if (utf8_bytes_seen !== utf8_bytes_needed) {
                return null;
            }
            var code_point = utf8_code_point;
            var lower_boundary = utf8_lower_boundary;
            utf8_code_point = 0;
            utf8_bytes_needed = 0;
            utf8_bytes_seen = 0;
            utf8_lower_boundary = 0;
            if (inRange(code_point, lower_boundary, 0x10FFFF) &&
                !inRange(code_point, 0xD800, 0xDFFF)) {
                return code_point;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function UTF8Encoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            /** @type {number} */
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0xD800, 0xDFFF)) {
                return encoderError(code_point);
            }
            if (inRange(code_point, 0x0000, 0x007f)) {
                return output_byte_stream.emit(code_point);
            }
            var count, offset;
            if (inRange(code_point, 0x0080, 0x07FF)) {
                count = 1;
                offset = 0xC0;
            } else if (inRange(code_point, 0x0800, 0xFFFF)) {
                count = 2;
                offset = 0xE0;
            } else if (inRange(code_point, 0x10000, 0x10FFFF)) {
                count = 3;
                offset = 0xF0;
            }
            var result = output_byte_stream.emit(
                div(code_point, Math.pow(64, count)) + offset);
            while (count > 0) {
                var temp = div(code_point, Math.pow(64, count - 1));
                result = output_byte_stream.emit(0x80 + (temp % 64));
                count -= 1;
            }
            return result;
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-8'].getEncoder = function(options) {
        return new UTF8Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-8'].getDecoder = function(options) {
        return new UTF8Decoder(options);
    };

    //
    // 9. Legacy single-byte encodings
    //

    /**
     * @constructor
     * @param {Array.<number>} index The encoding index.
     * @param {{fatal: boolean}} options
     */
    function SingleByteDecoder(index, options) {
        var fatal = options.fatal;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte) {
                return EOF_code_point;
            }
            byte_pointer.offset(1);
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            var code_point = index[bite - 0x80];
            if (code_point === null) {
                return decoderError(fatal);
            }
            return code_point;
        };
    }

    /**
     * @constructor
     * @param {Array.<?number>} index The encoding index.
     * @param {{fatal: boolean}} options
     */
    function SingleByteEncoder(index, options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index);
            if (pointer === null) {
                encoderError(code_point);
            }
            return output_byte_stream.emit(pointer + 0x80);
        };
    }

    (function() {
        encodings.forEach(function(category) {
            if (category.heading !==
                'Legacy single-byte encodings')
                return;
            category.encodings.forEach(function(encoding) {
                var idx = index(encoding.name);
                /** @param {{fatal: boolean}} options */
                encoding.getDecoder = function(
                    options) {
                    return new SingleByteDecoder(
                        idx, options);
                };
                /** @param {{fatal: boolean}} options */
                encoding.getEncoder = function(
                    options) {
                    return new SingleByteEncoder(
                        idx, options);
                };
            });
        });
    }());

    //
    // 10. Legacy multi-byte Chinese (simplified) encodings
    //

    // 9.1 gb18030

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function GB18030Decoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ gb18030_first = 0x00,
            /** @type {number} */
            gb18030_second = 0x00,
            /** @type {number} */
            gb18030_third = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && gb18030_first === 0x00 &&
                gb18030_second === 0x00 && gb18030_third === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte &&
                (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||
                    gb18030_third !== 0x00)) {
                gb18030_first = 0x00;
                gb18030_second = 0x00;
                gb18030_third = 0x00;
                decoderError(fatal);
            }
            byte_pointer.offset(1);
            var code_point;
            if (gb18030_third !== 0x00) {
                code_point = null;
                if (inRange(bite, 0x30, 0x39)) {
                    code_point = indexGB18030CodePointFor(
                        (((gb18030_first - 0x81) * 10 + (
                                gb18030_second - 0x30)) * 126 +
                            (gb18030_third - 0x81)) * 10 + bite -
                        0x30);
                }
                gb18030_first = 0x00;
                gb18030_second = 0x00;
                gb18030_third = 0x00;
                if (code_point === null) {
                    byte_pointer.offset(-3);
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (gb18030_second !== 0x00) {
                if (inRange(bite, 0x81, 0xFE)) {
                    gb18030_third = bite;
                    return null;
                }
                byte_pointer.offset(-2);
                gb18030_first = 0x00;
                gb18030_second = 0x00;
                return decoderError(fatal);
            }
            if (gb18030_first !== 0x00) {
                if (inRange(bite, 0x30, 0x39)) {
                    gb18030_second = bite;
                    return null;
                }
                var lead = gb18030_first;
                var pointer = null;
                gb18030_first = 0x00;
                var offset = bite < 0x7F ? 0x40 : 0x41;
                if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80,
                        0xFE)) {
                    pointer = (lead - 0x81) * 190 + (bite - offset);
                }
                code_point = pointer === null ? null :
                    indexCodePointFor(pointer, index('gb18030'));
                if (pointer === null) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (bite === 0x80) {
                return 0x20AC;
            }
            if (inRange(bite, 0x81, 0xFE)) {
                gb18030_first = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function GB18030Encoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index(
                'gb18030'));
            if (pointer !== null) {
                var lead = div(pointer, 190) + 0x81;
                var trail = pointer % 190;
                var offset = trail < 0x3F ? 0x40 : 0x41;
                return output_byte_stream.emit(lead, trail + offset);
            }
            pointer = indexGB18030PointerFor(code_point);
            var byte1 = div(div(div(pointer, 10), 126), 10);
            pointer = pointer - byte1 * 10 * 126 * 10;
            var byte2 = div(div(pointer, 10), 126);
            pointer = pointer - byte2 * 10 * 126;
            var byte3 = div(pointer, 10);
            var byte4 = pointer - byte3 * 10;
            return output_byte_stream.emit(byte1 + 0x81,
                byte2 + 0x30,
                byte3 + 0x81,
                byte4 + 0x30);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['gb18030'].getEncoder = function(options) {
        return new GB18030Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['gb18030'].getDecoder = function(options) {
        return new GB18030Decoder(options);
    };

    // 10.2 hz-gb-2312

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function HZGB2312Decoder(options) {
        var fatal = options.fatal;
        var /** @type {boolean} */ hzgb2312 = false,
            /** @type {number} */
            hzgb2312_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && hzgb2312_lead === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && hzgb2312_lead !== 0x00) {
                hzgb2312_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (hzgb2312_lead === 0x7E) {
                hzgb2312_lead = 0x00;
                if (bite === 0x7B) {
                    hzgb2312 = true;
                    return null;
                }
                if (bite === 0x7D) {
                    hzgb2312 = false;
                    return null;
                }
                if (bite === 0x7E) {
                    return 0x007E;
                }
                if (bite === 0x0A) {
                    return null;
                }
                byte_pointer.offset(-1);
                return decoderError(fatal);
            }
            if (hzgb2312_lead !== 0x00) {
                var lead = hzgb2312_lead;
                hzgb2312_lead = 0x00;
                var code_point = null;
                if (inRange(bite, 0x21, 0x7E)) {
                    code_point = indexCodePointFor((lead - 1) * 190 +
                        (bite + 0x3F), index('gb18030'));
                }
                if (bite === 0x0A) {
                    hzgb2312 = false;
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (bite === 0x7E) {
                hzgb2312_lead = 0x7E;
                return null;
            }
            if (hzgb2312) {
                if (inRange(bite, 0x20, 0x7F)) {
                    hzgb2312_lead = bite;
                    return null;
                }
                if (bite === 0x0A) {
                    hzgb2312 = false;
                }
                return decoderError(fatal);
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function HZGB2312Encoder(options) {
        var fatal = options.fatal;
        /** @type {boolean} */
        var hzgb2312 = false;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F) && hzgb2312) {
                code_point_pointer.offset(-1);
                hzgb2312 = false;
                return output_byte_stream.emit(0x7E, 0x7D);
            }
            if (code_point === 0x007E) {
                return output_byte_stream.emit(0x7E, 0x7E);
            }
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            if (!hzgb2312) {
                code_point_pointer.offset(-1);
                hzgb2312 = true;
                return output_byte_stream.emit(0x7E, 0x7B);
            }
            var pointer = indexPointerFor(code_point, index(
                'gb18030'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 190) + 1;
            var trail = pointer % 190 - 0x3F;
            if (!inRange(lead, 0x21, 0x7E) || !inRange(trail, 0x21,
                    0x7E)) {
                return encoderError(code_point);
            }
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['hz-gb-2312'].getEncoder = function(options) {
        return new HZGB2312Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['hz-gb-2312'].getDecoder = function(options) {
        return new HZGB2312Decoder(options);
    };

    //
    // 11. Legacy multi-byte Chinese (traditional) encodings
    //

    // 11.1 big5

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function Big5Decoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ big5_lead = 0x00,
            /** @type {?number} */
            big5_pending = null;

        /**
         * @param {ByteInputStream} byte_pointer The byte steram to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            // NOTE: Hack to support emitting two code points
            if (big5_pending !== null) {
                var pending = big5_pending;
                big5_pending = null;
                return pending;
            }
            var bite = byte_pointer.get();
            if (bite === EOF_byte && big5_lead === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && big5_lead !== 0x00) {
                big5_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (big5_lead !== 0x00) {
                var lead = big5_lead;
                var pointer = null;
                big5_lead = 0x00;
                var offset = bite < 0x7F ? 0x40 : 0x62;
                if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1,
                        0xFE)) {
                    pointer = (lead - 0x81) * 157 + (bite - offset);
                }
                if (pointer === 1133) {
                    big5_pending = 0x0304;
                    return 0x00CA;
                }
                if (pointer === 1135) {
                    big5_pending = 0x030C;
                    return 0x00CA;
                }
                if (pointer === 1164) {
                    big5_pending = 0x0304;
                    return 0x00EA;
                }
                if (pointer === 1166) {
                    big5_pending = 0x030C;
                    return 0x00EA;
                }
                var code_point = (pointer === null) ? null :
                    indexCodePointFor(pointer, index('big5'));
                if (pointer === null) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (inRange(bite, 0x81, 0xFE)) {
                big5_lead = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function Big5Encoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index('big5'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 157) + 0x81;
            //if (lead < 0xA1) {
            //  return encoderError(code_point);
            //}
            var trail = pointer % 157;
            var offset = trail < 0x3F ? 0x40 : 0x62;
            return output_byte_stream.emit(lead, trail + offset);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['big5'].getEncoder = function(options) {
        return new Big5Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['big5'].getDecoder = function(options) {
        return new Big5Decoder(options);
    };


    //
    // 12. Legacy multi-byte Japanese encodings
    //

    // 12.1 euc.jp

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCJPDecoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ eucjp_first = 0x00,
            /** @type {number} */
            eucjp_second = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte) {
                if (eucjp_first === 0x00 && eucjp_second === 0x00) {
                    return EOF_code_point;
                }
                eucjp_first = 0x00;
                eucjp_second = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);

            var lead, code_point;
            if (eucjp_second !== 0x00) {
                lead = eucjp_second;
                eucjp_second = 0x00;
                code_point = null;
                if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1,
                        0xFE)) {
                    code_point = indexCodePointFor((lead - 0xA1) *
                        94 + bite - 0xA1,
                        index('jis0212'));
                }
                if (!inRange(bite, 0xA1, 0xFE)) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (eucjp_first === 0x8E && inRange(bite, 0xA1, 0xDF)) {
                eucjp_first = 0x00;
                return 0xFF61 + bite - 0xA1;
            }
            if (eucjp_first === 0x8F && inRange(bite, 0xA1, 0xFE)) {
                eucjp_first = 0x00;
                eucjp_second = bite;
                return null;
            }
            if (eucjp_first !== 0x00) {
                lead = eucjp_first;
                eucjp_first = 0x00;
                code_point = null;
                if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1,
                        0xFE)) {
                    code_point = indexCodePointFor((lead - 0xA1) *
                        94 + bite - 0xA1,
                        index('jis0208'));
                }
                if (!inRange(bite, 0xA1, 0xFE)) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (bite === 0x8E || bite === 0x8F || (inRange(bite,
                    0xA1, 0xFE))) {
                eucjp_first = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCJPEncoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            if (code_point === 0x00A5) {
                return output_byte_stream.emit(0x5C);
            }
            if (code_point === 0x203E) {
                return output_byte_stream.emit(0x7E);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F)) {
                return output_byte_stream.emit(0x8E, code_point -
                    0xFF61 + 0xA1);
            }

            var pointer = indexPointerFor(code_point, index(
                'jis0208'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 94) + 0xA1;
            var trail = pointer % 94 + 0xA1;
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-jp'].getEncoder = function(options) {
        return new EUCJPEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-jp'].getDecoder = function(options) {
        return new EUCJPDecoder(options);
    };

    // 12.2 iso-2022-jp

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ISO2022JPDecoder(options) {
        var fatal = options.fatal;
        /** @enum */
        var state = {
            ASCII: 0,
            escape_start: 1,
            escape_middle: 2,
            escape_final: 3,
            lead: 4,
            trail: 5,
            Katakana: 6
        };
        var /** @type {number} */ iso2022jp_state = state.ASCII,
            /** @type {boolean} */
            iso2022jp_jis0212 = false,
            /** @type {number} */
            iso2022jp_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite !== EOF_byte) {
                byte_pointer.offset(1);
            }
            switch (iso2022jp_state) {
                default:
                    case state.ASCII:
                    if (bite === 0x1B) {
                        iso2022jp_state = state.escape_start;
                        return null;
                    }
                if (inRange(bite, 0x00, 0x7F)) {
                    return bite;
                }
                if (bite === EOF_byte) {
                    return EOF_code_point;
                }
                return decoderError(fatal);

                case state.escape_start:
                        if (bite === 0x24 || bite === 0x28) {
                            iso2022jp_lead = bite;
                            iso2022jp_state = state.escape_middle;
                            return null;
                        }
                    if (bite !== EOF_byte) {
                        byte_pointer.offset(-1);
                    }
                    iso2022jp_state = state.ASCII;
                    return decoderError(fatal);

                case state.escape_middle:
                        var lead = iso2022jp_lead;
                    iso2022jp_lead = 0x00;
                    if (lead === 0x24 && (bite === 0x40 || bite ===
                            0x42)) {
                        iso2022jp_jis0212 = false;
                        iso2022jp_state = state.lead;
                        return null;
                    }
                    if (lead === 0x24 && bite === 0x28) {
                        iso2022jp_state = state.escape_final;
                        return null;
                    }
                    if (lead === 0x28 && (bite === 0x42 || bite ===
                            0x4A)) {
                        iso2022jp_state = state.ASCII;
                        return null;
                    }
                    if (lead === 0x28 && bite === 0x49) {
                        iso2022jp_state = state.Katakana;
                        return null;
                    }
                    if (bite === EOF_byte) {
                        byte_pointer.offset(-1);
                    } else {
                        byte_pointer.offset(-2);
                    }
                    iso2022jp_state = state.ASCII;
                    return decoderError(fatal);

                case state.escape_final:
                        if (bite === 0x44) {
                            iso2022jp_jis0212 = true;
                            iso2022jp_state = state.lead;
                            return null;
                        }
                    if (bite === EOF_byte) {
                        byte_pointer.offset(-2);
                    } else {
                        byte_pointer.offset(-3);
                    }
                    iso2022jp_state = state.ASCII;
                    return decoderError(fatal);

                case state.lead:
                        if (bite === 0x0A) {
                            iso2022jp_state = state.ASCII;
                            return decoderError(fatal, 0x000A);
                        }
                    if (bite === 0x1B) {
                        iso2022jp_state = state.escape_start;
                        return null;
                    }
                    if (bite === EOF_byte) {
                        return EOF_code_point;
                    }
                    iso2022jp_lead = bite;
                    iso2022jp_state = state.trail;
                    return null;

                case state.trail:
                        iso2022jp_state = state.lead;
                    if (bite === EOF_byte) {
                        return decoderError(fatal);
                    }
                    var code_point = null;
                    var pointer = (iso2022jp_lead - 0x21) * 94 +
                        bite - 0x21;
                    if (inRange(iso2022jp_lead, 0x21, 0x7E) &&
                        inRange(bite, 0x21, 0x7E)) {
                        code_point = (iso2022jp_jis0212 === false) ?
                            indexCodePointFor(pointer, index(
                                'jis0208')) :
                            indexCodePointFor(pointer, index(
                                'jis0212'));
                    }
                    if (code_point === null) {
                        return decoderError(fatal);
                    }
                    return code_point;

                case state.Katakana:
                        if (bite === 0x1B) {
                            iso2022jp_state = state.escape_start;
                            return null;
                        }
                    if (inRange(bite, 0x21, 0x5F)) {
                        return 0xFF61 + bite - 0x21;
                    }
                    if (bite === EOF_byte) {
                        return EOF_code_point;
                    }
                    return decoderError(fatal);
            }
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ISO2022JPEncoder(options) {
        var fatal = options.fatal;
        /** @enum */
        var state = {
            ASCII: 0,
            lead: 1,
            Katakana: 2
        };
        var /** @type {number} */ iso2022jp_state = state.ASCII;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if ((inRange(code_point, 0x0000, 0x007F) ||
                    code_point === 0x00A5 || code_point === 0x203E) &&
                iso2022jp_state !== state.ASCII) {
                code_point_pointer.offset(-1);
                iso2022jp_state = state.ASCII;
                return output_byte_stream.emit(0x1B, 0x28, 0x42);
            }
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            if (code_point === 0x00A5) {
                return output_byte_stream.emit(0x5C);
            }
            if (code_point === 0x203E) {
                return output_byte_stream.emit(0x7E);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F) &&
                iso2022jp_state !== state.Katakana) {
                code_point_pointer.offset(-1);
                iso2022jp_state = state.Katakana;
                return output_byte_stream.emit(0x1B, 0x28, 0x49);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F)) {
                return output_byte_stream.emit(code_point - 0xFF61 -
                    0x21);
            }
            if (iso2022jp_state !== state.lead) {
                code_point_pointer.offset(-1);
                iso2022jp_state = state.lead;
                return output_byte_stream.emit(0x1B, 0x24, 0x42);
            }
            var pointer = indexPointerFor(code_point, index(
                'jis0208'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 94) + 0x21;
            var trail = pointer % 94 + 0x21;
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['iso-2022-jp'].getEncoder = function(options) {
        return new ISO2022JPEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['iso-2022-jp'].getDecoder = function(options) {
        return new ISO2022JPDecoder(options);
    };

    // 12.3 shift_jis

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ShiftJISDecoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ shiftjis_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && shiftjis_lead === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && shiftjis_lead !== 0x00) {
                shiftjis_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (shiftjis_lead !== 0x00) {
                var lead = shiftjis_lead;
                shiftjis_lead = 0x00;
                if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80,
                        0xFC)) {
                    var offset = (bite < 0x7F) ? 0x40 : 0x41;
                    var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;
                    var code_point = indexCodePointFor((lead -
                            lead_offset) * 188 +
                        bite - offset, index('jis0208'));
                    if (code_point === null) {
                        return decoderError(fatal);
                    }
                    return code_point;
                }
                byte_pointer.offset(-1);
                return decoderError(fatal);
            }
            if (inRange(bite, 0x00, 0x80)) {
                return bite;
            }
            if (inRange(bite, 0xA1, 0xDF)) {
                return 0xFF61 + bite - 0xA1;
            }
            if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0,
                    0xFC)) {
                shiftjis_lead = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ShiftJISEncoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x0080)) {
                return output_byte_stream.emit(code_point);
            }
            if (code_point === 0x00A5) {
                return output_byte_stream.emit(0x5C);
            }
            if (code_point === 0x203E) {
                return output_byte_stream.emit(0x7E);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F)) {
                return output_byte_stream.emit(code_point - 0xFF61 +
                    0xA1);
            }
            var pointer = indexPointerFor(code_point, index(
                'jis0208'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 188);
            var lead_offset = lead < 0x1F ? 0x81 : 0xC1;
            var trail = pointer % 188;
            var offset = trail < 0x3F ? 0x40 : 0x41;
            return output_byte_stream.emit(lead + lead_offset,
                trail + offset);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['shift_jis'].getEncoder = function(options) {
        return new ShiftJISEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['shift_jis'].getDecoder = function(options) {
        return new ShiftJISDecoder(options);
    };

    //
    // 13. Legacy multi-byte Korean encodings
    //

    // 13.1 euc-kr

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCKRDecoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ euckr_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && euckr_lead === 0) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && euckr_lead !== 0) {
                euckr_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (euckr_lead !== 0x00) {
                var lead = euckr_lead;
                var pointer = null;
                euckr_lead = 0x00;

                if (inRange(lead, 0x81, 0xC6)) {
                    var temp = (26 + 26 + 126) * (lead - 0x81);
                    if (inRange(bite, 0x41, 0x5A)) {
                        pointer = temp + bite - 0x41;
                    } else if (inRange(bite, 0x61, 0x7A)) {
                        pointer = temp + 26 + bite - 0x61;
                    } else if (inRange(bite, 0x81, 0xFE)) {
                        pointer = temp + 26 + 26 + bite - 0x81;
                    }
                }

                if (inRange(lead, 0xC7, 0xFD) && inRange(bite, 0xA1,
                        0xFE)) {
                    pointer = (26 + 26 + 126) * (0xC7 - 0x81) + (
                            lead - 0xC7) * 94 +
                        (bite - 0xA1);
                }

                var code_point = (pointer === null) ? null :
                    indexCodePointFor(pointer, index('euc-kr'));
                if (pointer === null) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }

            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }

            if (inRange(bite, 0x81, 0xFD)) {
                euckr_lead = bite;
                return null;
            }

            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCKREncoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index(
                'euc-kr'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead, trail;
            if (pointer < ((26 + 26 + 126) * (0xC7 - 0x81))) {
                lead = div(pointer, (26 + 26 + 126)) + 0x81;
                trail = pointer % (26 + 26 + 126);
                var offset = trail < 26 ? 0x41 : trail < 26 + 26 ?
                    0x47 : 0x4D;
                return output_byte_stream.emit(lead, trail + offset);
            }
            pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);
            lead = div(pointer, 94) + 0xC7;
            trail = pointer % 94 + 0xA1;
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-kr'].getEncoder = function(options) {
        return new EUCKREncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-kr'].getDecoder = function(options) {
        return new EUCKRDecoder(options);
    };


    //
    // 14. Legacy miscellaneous encodings
    //

    // 14.1 replacement

    // Not needed - API throws TypeError

    // 14.2 utf-16

    /**
     * @constructor
     * @param {boolean} utf16_be True if big-endian, false if little-endian.
     * @param {{fatal: boolean}} options
     */
    function UTF16Decoder(utf16_be, options) {
        var fatal = options.fatal;
        var /** @type {?number} */ utf16_lead_byte = null,
            /** @type {?number} */
            utf16_lead_surrogate = null;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && utf16_lead_byte === null &&
                utf16_lead_surrogate === null) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && (utf16_lead_byte !== null ||
                    utf16_lead_surrogate !== null)) {
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (utf16_lead_byte === null) {
                utf16_lead_byte = bite;
                return null;
            }
            var code_point;
            if (utf16_be) {
                code_point = (utf16_lead_byte << 8) + bite;
            } else {
                code_point = (bite << 8) + utf16_lead_byte;
            }
            utf16_lead_byte = null;
            if (utf16_lead_surrogate !== null) {
                var lead_surrogate = utf16_lead_surrogate;
                utf16_lead_surrogate = null;
                if (inRange(code_point, 0xDC00, 0xDFFF)) {
                    return 0x10000 + (lead_surrogate - 0xD800) *
                        0x400 +
                        (code_point - 0xDC00);
                }
                byte_pointer.offset(-2);
                return decoderError(fatal);
            }
            if (inRange(code_point, 0xD800, 0xDBFF)) {
                utf16_lead_surrogate = code_point;
                return null;
            }
            if (inRange(code_point, 0xDC00, 0xDFFF)) {
                return decoderError(fatal);
            }
            return code_point;
        };
    }

    /**
     * @constructor
     * @param {boolean} utf16_be True if big-endian, false if little-endian.
     * @param {{fatal: boolean}} options
     */
    function UTF16Encoder(utf16_be, options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            /**
             * @param {number} code_unit
             * @return {number} last byte emitted
             */
            function convert_to_bytes(code_unit) {
                var byte1 = code_unit >> 8;
                var byte2 = code_unit & 0x00FF;
                if (utf16_be) {
                    return output_byte_stream.emit(byte1, byte2);
                }
                return output_byte_stream.emit(byte2, byte1);
            }
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0xD800, 0xDFFF)) {
                encoderError(code_point);
            }
            if (code_point <= 0xFFFF) {
                return convert_to_bytes(code_point);
            }
            var lead = div((code_point - 0x10000), 0x400) + 0xD800;
            var trail = ((code_point - 0x10000) % 0x400) + 0xDC00;
            convert_to_bytes(lead);
            return convert_to_bytes(trail);
        };
    }

    // 14.3 utf-16be
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16be'].getEncoder = function(options) {
        return new UTF16Encoder(true, options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16be'].getDecoder = function(options) {
        return new UTF16Decoder(true, options);
    };

    // 14.4 utf-16le
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16le'].getEncoder = function(options) {
        return new UTF16Encoder(false, options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16le'].getDecoder = function(options) {
        return new UTF16Decoder(false, options);
    };

    // 14.5 x-user-defined
    // TODO: Implement this encoding.

    // NOTE: currently unused
    /**
     * @param {string} label The encoding label.
     * @param {ByteInputStream} input_stream The byte stream to test.
     */
    function detectEncoding(label, input_stream) {
        if (input_stream.match([0xFF, 0xFE])) {
            input_stream.offset(2);
            return 'utf-16le';
        }
        if (input_stream.match([0xFE, 0xFF])) {
            input_stream.offset(2);
            return 'utf-16be';
        }
        if (input_stream.match([0xEF, 0xBB, 0xBF])) {
            input_stream.offset(3);
            return 'utf-8';
        }
        return label;
    }

    return {
        TextEncoder: TextEncoder,
        TextDecoder: TextDecoder
    };

}));

},{}],76:[function(requireb,module,exports){
// Copyright (c) 2014 Whiteout Networks

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // amd under chrome packaged app
        define(['forge'], factory);
    } else if (typeof exports === 'object' && typeof navigator !== 'undefined') {
        // common.js for browser apps with native socket support
        // fallback to forge browser global
        module.exports = factory(forge);
    } else {
        // global browser import
        root['emailjs-tcp-socket-tls'] = factory(root.forge);
    }
}(this, function(forge) {
    'use strict';

    var TlsClient = function() {
        var self = this;

        self.open = false;
        self._outboundBuffer = [];

        self._tls = forge.tls.createConnection({
            server: false,
            verify: function(connection, verified, depth, certs) {
                if (!(certs && certs[0])) {
                    return false;
                }

                if (!self.verifyCertificate(certs[0], self._host)) {
                    return false;
                }

                /*
                 * Please see the readme for an explanation of the behavior without a native TLS stack!
                 */

                // without a pinned certificate, we'll just accept the connection and notify the upper layer
                if (!self._ca) {
                    // notify the upper layer of the new cert
                    self.tlscert(forge.pki.certificateToPem(certs[0]));
                    // succeed only if self.tlscert is implemented (otherwise forge catches the error)
                    return true;
                }

                // if we have a pinned certificate, things get a little more complicated:
                // - leaf certificates pin the host directly, e.g. for self-signed certificates
                // - we also allow intermediate certificates, for providers that are able to sign their own certs.

                // detect if this is a certificate used for signing by testing if the common name different from the hostname.
                // also, an intermediate cert has no SANs, at least none that match the hostname.
                if (!self.verifyCertificate(self._ca, self._host)) {
                    // verify certificate through a valid certificate chain
                    return self._ca.verify(certs[0]);
                }

                // verify certificate through host certificate pinning
                var fpPinned = forge.pki.getPublicKeyFingerprint(self._ca.publicKey, {
                    encoding: 'hex'
                });
                var fpRemote = forge.pki.getPublicKeyFingerprint(certs[0].publicKey, {
                    encoding: 'hex'
                });

                // check if cert fingerprints match
                if (fpPinned === fpRemote) {
                    return true;
                }

                // notify the upper layer of the new cert
                self.tlscert(forge.pki.certificateToPem(certs[0]));
                // fail when fingerprint does not match
                return false;

            },
            connected: function(connection) {
                if (!connection) {
                    self.tlserror('Unable to connect');
                    self.tlsclose();
                    return;
                }

                // tls connection open
                self.open = true;

                self.tlsopen();

                // empty the buffer
                while (self._outboundBuffer.length) {
                    self.prepareOutbound(self._outboundBuffer.shift());
                }
            },
            tlsDataReady: function(connection) {
                // encrypted data ready to be written to the socket
                self.tlsoutbound(s2a(connection.tlsData.getBytes()));
            },
            dataReady: function(connection) {
                // encrypted data received from the socket is decrypted
                self.tlsinbound(s2a(connection.data.getBytes()));
            },
            closed: function() {
                self.tlsclose();
            },
            error: function(connection, error) {
                self.tlserror(error.message);
                self.tlsclose();
            }
        });
    };

    TlsClient.prototype.configure = function(options) {
        this._host = options.host;
        if (options.ca) {
            this._ca = forge.pki.certificateFromPem(options.ca);
        }
    };

    TlsClient.prototype.prepareOutbound = function(buffer) {
        if (!this.open) {
            this._outboundBuffer.push(buffer);
            return;
        }

        this._tls.prepare(a2s(buffer));
    };

    TlsClient.prototype.processInbound = function(buffer) {
        this._tls.process(a2s(buffer));
    };

    TlsClient.prototype.handshake = function() {
        this._tls.handshake();
    };

    /**
     * Verifies a host name by the Common Name or Subject Alternative Names
     * Expose as a method of TlsClient for testing purposes
     *
     * @param {Object} cert A forge certificate object
     * @param {String} host The host name, e.g. imap.gmail.com
     * @return {Boolean} true, if host name matches certificate, otherwise false
     */
    TlsClient.prototype.verifyCertificate = function(cert, host) {
        var cn, subjectAltName, entries, self = this;

        subjectAltName = cert.getExtension({
            name: 'subjectAltName'
        });

        cn = cert.subject.getField('CN');

        // If subjectAltName is present then it must be used and Common Name must be discarded
        // http://tools.ietf.org/html/rfc2818#section-3.1
        // So we check subjectAltName first and if it does not exist then revert back to Common Name
        if (subjectAltName && subjectAltName.altNames && subjectAltName.altNames.length) {
            entries = subjectAltName.altNames.map(function(entry) {
                return entry.value;
            });
        } else if (cn && cn.value) {
            entries = [cn.value];
        } else {
            return false;
        }

        // find matches for hostname and if any are found return true, otherwise returns false
        return !!entries.filter(function(sanEntry) {
            return self.compareServername(host, sanEntry);
        }).length;
    };

    /**
     * Compares servername with a subjectAltName entry. Returns true if these values match.
     *
     * Wildcard usage in certificate hostnames is very limited, the only valid usage
     * form is "*.domain" and not "*sub.domain" or "sub.*.domain" so we only have to check
     * if the entry starts with "*." when comparing against a wildcard hostname. If "*" is used
     * in invalid places, then treat it as a string and not as a wildcard.
     *
     * @param {String} servername Hostname to check
     * @param {String} sanEntry subjectAltName entry to check against
     * @returns {Boolean} Returns true if hostname matches entry from SAN
     */
    TlsClient.prototype.compareServername = function(servername, sanEntry) {
        // normalize input values
        servername = (servername || '').toString().toLowerCase();
        sanEntry = (sanEntry || '').toString().toLowerCase();

        // if the entry name does not include a wildcard, then expect exact match
        if (sanEntry.substr(0, 2) !== '*.') {
            return sanEntry === servername;
        }

        // otherwise ignore the first subdomain
        return servername.split('.').slice(1).join('.') === sanEntry.substr(2);
    };

    // array buffer -> singlebyte string
    function a2s(buf) {
        var view = new Uint8Array(buf),
            str = '';
        for (var i = 0, j = view.length; i < j; i++) {
            str += String.fromCharCode(view[i]);
        }
        return str;
    }

    // singlebyte string -> array buffer
    function s2a(str) {
        var view = new Uint8Array(str.length);
        for (var i = 0, j = str.length; i < j; i++) {
            view[i] = str.charCodeAt(i);
        }
        return view.buffer;
    }

    return TlsClient;
}));

},{}],77:[function(requireb,module,exports){
// Copyright (c) 2014 Whiteout Networks

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // amd
        define(['emailjs-tcp-socket-tls'], factory.bind(null, navigator));
    } else if (typeof exports === 'object' && typeof navigator !== 'undefined') {
        if (process.versions.electron || process.versions.nw || process.versions['node-webkit']) {
            // common.js for electron
            module.exports = factory(navigator, null, require('net'), require('tls'));
        } else {
            // common.js for browserify apps with native socket support
            module.exports = factory(navigator, requireb('./emailjs-tcp-socket-tls'));
        }
    } else if (typeof exports === 'object') {
        // common.js for node.js
        module.exports = factory(null, null, require('net'), require('tls'));
    } else {
        // global browser import
        navigator.TCPSocket = factory(navigator, root['emailjs-tcp-socket-tls']);
    }
})(this, function(root, TLS, net, tls) {
    'use strict';

    // Constants used for tls-worker
    var EVENT_INBOUND = 'inbound',
        EVENT_OUTBOUND = 'outbound',
        EVENT_OPEN = 'open',
        EVENT_CLOSE = 'close',
        EVENT_ERROR = 'error',
        EVENT_CONFIG = 'configure',
        EVENT_CERT = 'cert',
        EVENT_HANDSHAKE = 'handshake';

    // the class to be implemented
    var TCPSocket = function() {
        throw new Error('Runtime does not offer TCPSockets!');
    };

    // detect runtime
    if (root && typeof io === 'undefined') {
        // check for native support
        root.TCPSocket = root.TCPSocket || root.mozTCPSocket;

        if (root.TCPSocket && typeof root.TCPSocket === "object") {
            // TCPSocket is already defined
            return root.TCPSocket;
        }
    }

    if (net && tls) {
        // node.js -> use native net/tls impl
        nodeShim();
    } else if (typeof chrome !== 'undefined' && (chrome.socket || chrome.sockets)) {
        // chrome packaged app using chrome.socket
        chromeShim();
    } else if (typeof Windows === 'object' && Windows && Windows.Networking &&
        Windows.Networking.Sockets && Windows.Networking.Sockets.StreamSocket) {
        // Windows app using SocketStream
        winShim();
    } else if (typeof window === 'object' && typeof io === 'function') {
        // websocket proxy
        wsShim();
    }

    function winShim() {

        TCPSocket = function(config) {
            var self = this;

            config.options.useSecureTransport = (typeof config.options.useSecureTransport !== 'undefined') ? config.options.useSecureTransport : false;
            config.options.binaryType = config.options.binaryType || 'arraybuffer';

            // public flags
            self.host = new Windows.Networking.HostName(config.host); // NB! HostName constructor will throw on invalid input
            self.port = config.port;
            self.ssl = config.options.useSecureTransport;
            self.bufferedAmount = 0;
            self.readyState = 'connecting';
            self.binaryType = config.options.binaryType;

            if (self.binaryType !== 'arraybuffer') {
                throw new Error('Only arraybuffers are supported!');
            }

            self._socket = new Windows.Networking.Sockets.StreamSocket();

            self._socket.control.keepAlive = true;
            self._socket.control.noDelay = true;

            self._dataReader = null;
            self._dataWriter = null;

            // set to true if upgrading with STARTTLS
            self._upgrading = false;

            // cache all client.send calls to this array if currently upgrading
            self._upgradeCache = [];

            // initial socket type. default is 'plainSocket' (no encryption applied)
            // 'tls12' supports the TLS 1.2, TLS 1.1 and TLS 1.0 protocols but no SSL
            self._protectionLevel = Windows.Networking.Sockets.SocketProtectionLevel[self.ssl ? 'tls12' : 'plainSocket'];

            // Initiate connection to destination
            self._socket.
            connectAsync(self.host, self.port, self._protectionLevel).
            done(function() {
                self._setStreamHandlers();
                self._emit('open');
            }, function(E) {
                self._emit('error', E);
            });
        };

        /**
         * Initiate Reader and Writer interfaces for the socket
         */
        TCPSocket.prototype._setStreamHandlers = function() {
            var self = this;

            // setup reader
            self._dataReader = new Windows.Storage.Streams.DataReader(self._socket.inputStream);
            self._dataReader.inputStreamOptions = Windows.Storage.Streams.InputStreamOptions.partial;

            // setup writer
            self._dataWriter = new Windows.Storage.Streams.DataWriter(self._socket.outputStream);

            // start byte reader loop
            self._read();
        };

        /**
         * Emit an error and close socket
         *
         * @param {Error} error Error object
         */
        TCPSocket.prototype._errorHandler = function(error) {
            var self = this;

            // we ignore errors after close has been called, since all aborted operations
            // will emit their error handlers
            // this will also apply to starttls as a read call is aborted before upgrading the socket
            if (self._upgrading || (self.readyState !== 'closing' && self.readyState !== 'closed')) {
                self._emit('error', error);
                self.close();
            }
        };

        /**
         * Read available bytes from the socket. This method is recursive  once it ends, it restarts itself
         */
        TCPSocket.prototype._read = function() {
            var self = this;

            if (self._upgrading || (self.readyState !== 'open' && self.readyState !== 'connecting')) {
                return; // do nothing if socket not open
            }

            // Read up to 4096 bytes from the socket. This is not a fixed number (the mode was set
            // with inputStreamOptions.partial property), so it might return with a smaller
            // amount of bytes.
            self._dataReader.loadAsync(4096).done(function(availableByteCount) {

                if (!availableByteCount) {
                    // no bytes available for reading, restart the reading process
                    return setImmediate(self._read.bind(self));
                }

                // we need an Uint8Array that gets filled with the bytes from the buffer
                var data = new Uint8Array(availableByteCount);
                self._dataReader.readBytes(data); // data argument gets filled with the bytes

                self._emit('data', data.buffer);

                // restart reading process
                return setImmediate(self._read.bind(self));
            }, function(E) {
                self._errorHandler(E);
            });
        };

        //
        // API
        //

        TCPSocket.prototype.close = function() {
            var self = this;
            self.readyState = 'closing';

            try {
                self._socket.close();
            } catch (E) {
                self._emit('error', E);
            }

            setImmediate(self._emit.bind(self, 'close'));
        };

        TCPSocket.prototype.send = function(data) {
            var self = this;

            if (this.readyState !== 'open') {
                return;
            }

            if (self._upgrading) {
                self._upgradeCache.push(data);
                return;
            }

            // Write bytes to buffer
            this._dataWriter.writeBytes(data.buffer && data || new Uint8Array(data));

            // Emit buffer contents
            self._dataWriter.storeAsync().done(function() {
                self._emit('drain');
            }, function(E) {
                self._errorHandler(E);
            });
        };

        TCPSocket.prototype.upgradeToSecure = function() {
            var self = this;

            if (self.ssl || self._upgrading) {
                // nothing to do here
                return;
            }

            self._upgrading = true;
            try {
                // release current input stream. this is requirebd to allow socket upgrade
                // write stream is not released as all send calls are cached from this point onwards
                // and not passed to socket until the socket is upgraded
                this._dataReader.detachStream();
            } catch (E) {}

            // update protection level
            self._protectionLevel = Windows.Networking.Sockets.SocketProtectionLevel.tls12;

            self._socket.upgradeToSslAsync(self._protectionLevel, self.host).done(
                function() {
                    var data;

                    self._upgrading = false;
                    self.ssl = true; // secured connection from now on

                    self._dataReader = new Windows.Storage.Streams.DataReader(self._socket.inputStream);
                    self._dataReader.inputStreamOptions = Windows.Storage.Streams.InputStreamOptions.partial;
                    self._read();

                    // emit all cached requests
                    while (self._upgradeCache.length) {
                        data = self._upgradeCache.shift();
                        self.send(data);
                    }
                },
                function(E) {
                    self._upgrading = false;
                    self._errorHandler(E);
                }
            );
        };
    }

    function nodeShim() {
        TCPSocket = function(config) {
            var self = this,
                netApi;

            config.options.useSecureTransport = (typeof config.options.useSecureTransport !== 'undefined') ? config.options.useSecureTransport : false;
            config.options.binaryType = config.options.binaryType || 'arraybuffer';

            // public flags
            self.host = config.host;
            self.port = config.port;
            self.ssl = config.options.useSecureTransport;
            self.bufferedAmount = 0;
            self.readyState = 'connecting';
            self.binaryType = config.options.binaryType;

            if (self.binaryType !== 'arraybuffer') {
                throw new Error('Only arraybuffers are supported!');
            }

            netApi = (self.ssl) ? tls : net;
            self._socket = netApi.connect(self.port, self.host, self._emit.bind(self, 'open'));

            // add all event listeners to the new socket
            self._attachListeners();
        };

        TCPSocket.prototype._attachListeners = function() {
            var self = this;

            self._socket.on('data', function(nodeBuf) {
                // convert node buffer to array buffer or string
                self._emit('data', toArrayBuffer(nodeBuf));
            });

            self._socket.on('error', function(error) {
                // Ignore ECONNRESET errors. For the app this is the same as normal close
                if (error.code !== 'ECONNRESET') {
                    self._emit('error', error);
                }
                self.close();
            });

            self._socket.on('end', self._emit.bind(self, 'close'));
        };

        TCPSocket.prototype._removeListeners = function() {
            this._socket.removeAllListeners('data');
            this._socket.removeAllListeners('end');
            this._socket.removeAllListeners('error');
        };

        //
        // API
        //

        TCPSocket.prototype.close = function() {
            this.readyState = 'closing';
            this._socket.end();
        };

        TCPSocket.prototype.send = function(data) {
            // convert data to string or node buffer
            this._socket.write(toBuffer(data), this._emit.bind(this, 'drain'));
        };

        TCPSocket.prototype.upgradeToSecure = function() {
            var self = this;

            if (self.ssl) {
                return;
            }

            // remove all event listeners from the old socket
            self._removeListeners();

            // replace the old socket with a shiny new tls socket
            self._socket = tls.connect({
                socket: self._socket
            }, function() {
                self.ssl = true;
            });

            // add all event listeners to the new socket
            self._attachListeners();
        };

        // node buffer -> array buffer
        function toArrayBuffer(buffer) {
            var view = new Uint8Array(buffer.length);
            for (var i = 0; i < buffer.length; ++i) {
                view[i] = buffer[i];
            }
            return view.buffer;
        }

        // array buffer -> node buffer
        function toBuffer(ab) {
            return new Buffer(new Uint8Array(ab));
        }
    }

    function chromeShim() {

        // setZeroTimeout slightly adapted from
        // https://github.com/shahyar/setZeroTimeout-js (CC BY 3.0).
        // Provides a function similar to setImmediate() on Chrome.
        var setZeroTimeout = (function (w) {
            var timeouts = [],
            msg_name = 'asc0tmot',

            // Like setTimeout, but only takes a function argument.  There's
            // no time argument (always zero) and no arguments (you have to
            // use a closure).
            _postTimeout = function (fn) {
                timeouts.push(fn);
                postMessage(msg_name, '*');
            },

            _handleMessage = function (event) {
                if (event.source === w && event.data === msg_name) {
                    if (event.stopPropagation) {
                        event.stopPropagation();
                    }
                    if (timeouts.length) {
                        try {
                            timeouts.shift()();
                        } catch (e) {
                            // Throw in an asynchronous closure to prevent setZeroTimeout from hanging due to error
                            setTimeout((function (e) {
                                return function () {
                                    throw e.stack || e;
                                };
                            }(e)), 0);
                        }
                    }
                    if (timeouts.length) { // more left?
                        postMessage(msg_name, '*');
                    }
                }
            };

            addEventListener('message', _handleMessage, true);
            return _postTimeout;
        }(window));

        TCPSocket = function(config) {
            var self = this;

            config.options.useSecureTransport = (typeof config.options.useSecureTransport !== 'undefined') ? config.options.useSecureTransport : false;
            config.options.binaryType = config.options.binaryType || 'arraybuffer';

            // public flags
            self.host = config.host;
            self.port = config.port;
            self.ssl = false;
            self.bufferedAmount = 0;
            self.readyState = 'connecting';
            self.binaryType = config.options.binaryType;

            if (self.binaryType !== 'arraybuffer') {
                throw new Error('Only arraybuffers are supported!');
            }

            // internal flags
            self._socketId = 0;
            self._ca = config.options.ca;
            self._useTLS = config.options.useSecureTransport;
            self._useSTARTTLS = false;
            self._tlsWorkerPath = config.options.tlsWorkerPath;
            self._useLegacySocket = false;
            self._useForgeTls = false;

            // handles writes during starttls handshake, chrome socket only
            self._startTlsBuffer = [];
            self._startTlsHandshakeInProgress = false;

            chrome.runtime.getPlatformInfo(function(platformInfo) {

                //
                // FIX START
                //

                if (platformInfo.os.indexOf("cordova") !== -1) {
                    // chrome.sockets.tcp.secure is not functional on cordova
                    // https://github.com/MobileChromeApps/mobile-chrome-apps/issues/269
                    self._useLegacySocket = false;
                    self._useForgeTls = true;
                } else {
                    self._useLegacySocket = true;
                    self._useForgeTls = false;
                }

                //
                // FIX END
                //

                // fire up the socket
                if (self._useLegacySocket) {
                    self._createLegacySocket();
                } else {
                    self._createSocket();
                }
            });
        };

        /**
         * Creates a socket using the deprecated chrome.socket API
         */
        TCPSocket.prototype._createLegacySocket = function() {
            var self = this;

            chrome.socket.create('tcp', {}, function(createInfo) {
                self._socketId = createInfo.socketId;

                chrome.socket.connect(self._socketId, self.host, self.port, function(result) {
                    if (result !== 0) {
                        self.readyState = 'closed';
                        self._emit('error', new Error('Unable to connect'));
                        return;
                    }

                    self._onSocketConnected();
                });
            });
        };

        /**
         * Creates a socket using chrome.sockets.tcp
         */
        TCPSocket.prototype._createSocket = function() {
            var self = this;

            chrome.sockets.tcp.create({}, function(createInfo) {
                self._socketId = createInfo.socketId;

                // register for data events on the socket before connecting
                chrome.sockets.tcp.onReceive.addListener(function(readInfo) {
                    if (readInfo.socketId === self._socketId) {
                        // process the data available on the socket
                        self._onData(readInfo.data);
                    }
                });

                // register for data error on the socket before connecting
                chrome.sockets.tcp.onReceiveError.addListener(function(readInfo) {
                    if (readInfo.socketId === self._socketId) {
                        // socket closed remotely or broken
                        self.close();
                    }
                });

                chrome.sockets.tcp.setPaused(self._socketId, true, function() {
                    chrome.sockets.tcp.connect(self._socketId, self.host, self.port, function(result) {
                        if (result < 0) {
                            self.readyState = 'closed';
                            self._emit('error', new Error('Unable to connect'));
                            return;
                        }

                        self._onSocketConnected();
                    });
                });
            });
        };

        /**
         * Invoked once a socket has been connected:
         * - Kicks off TLS handshake, if necessary
         * - Starts reading from legacy socket, if necessary
         */
        TCPSocket.prototype._onSocketConnected = function() {
            var self = this;

            if (!self._useTLS) {
                return read();
            }

            // do an immediate TLS handshake if self._useTLS === true
            self._upgradeToSecure(function() {
                read();
            });

            function read() {
                if (self._useLegacySocket) {
                    // the tls handshake is done let's start reading from the legacy socket
                    self._readLegacySocket();
                    self._emit('open');
                } else {
                    chrome.sockets.tcp.setPaused(self._socketId, false, function() {
                        self._emit('open');
                    });
                }
            }
        };

        /**
         * Handles the rough edges for differences between chrome.socket and chrome.sockets.tcp
         * for upgrading to a TLS connection with or without forge
         */
        TCPSocket.prototype._upgradeToSecure = function(callback) {
            var self = this;

            callback = callback || function() {};

            if (!self._useLegacySocket && self.readyState !== 'open') {
                // use chrome.sockets.tcp.secure for TLS, not for STARTTLS!
                // use forge only for STARTTLS
                self._useForgeTls = false;
                chrome.sockets.tcp.secure(self._socketId, onUpgraded);
            } else if (self._useLegacySocket) {
                chrome.socket.secure(self._socketId, onUpgraded);
            } else if (self._useForgeTls) {
                // setup the forge tls client or webworker as tls fallback
                createTls.bind(self)();
                callback();
            }

            // invoked after chrome.socket.secure or chrome.sockets.tcp.secure have been upgraded
            function onUpgraded(tlsResult) {
                if (tlsResult !== 0) {
                    self._emit('error', new Error('TLS handshake failed. Reason: ' + chrome.runtime.lastError.message));
                    self.close();
                    return;
                }

                self.ssl = true;

                // empty the buffer
                while (self._startTlsBuffer.length) {
                    self.send(self._startTlsBuffer.shift());
                }

                callback();
            }
        };

        TCPSocket.prototype.upgradeToSecure = function() {
            var self = this;

            if (self.ssl || self._useSTARTTLS) {
                return;
            }

            self._useSTARTTLS = true;
            self._upgradeToSecure(function() {
                if (self._useLegacySocket) {
                    self._readLegacySocket(); // tls handshake is done, restart reading
                }
            });
        };

        /**
         * Reads from a legacy chrome.socket.
         */
        TCPSocket.prototype._readLegacySocket = function() {
            var self = this;

            if (self._socketId === 0) {
                // the socket is closed. omit read and stop further reads
                return;
            }

            // don't read from chrome.socket if we have chrome.socket.secure a handshake in progress!
            if ((self._useSTARTTLS || self._useTLS) && !self.ssl) {
                return;
            }

            chrome.socket.read(self._socketId, function(readInfo) {
                // socket closed remotely or broken
                if (readInfo.resultCode <= 0) {
                    self._socketId = 0;
                    self.close();
                    return;
                }

                // process the data available on the socket
                self._onData(readInfo.data);

                // Queue the next read.
                // If a STARTTLS handshake might be upcoming, postpone this onto
                // the task queue so the IMAP client has a chance to call upgradeToSecure;
                // without this, we might eat the beginning of the handshake.
                // If we are already secure, just call it (for performance).
                if (self.ssl) {     // are we secure yet?
                    self._readLegacySocket();
                } else {
                    setZeroTimeout(self._readLegacySocket.bind(self));
                }
            });
        };

        /**
         * Invoked when data has been read from the socket. Handles cases when to feed
         * the data available on the socket to forge.
         *
         * @param {ArrayBuffer} buffer The binary data read from the socket
         */
        TCPSocket.prototype._onData = function(buffer) {
            var self = this;

            if ((self._useTLS || self._useSTARTTLS) && self._useForgeTls) {
                // feed the data to the tls client
                if (self._tlsWorker) {
                    self._tlsWorker.postMessage(createMessage(EVENT_INBOUND, buffer), [buffer]);
                } else {
                    self._tls.processInbound(buffer);
                }
            } else {
                // emit data event
                self._emit('data', buffer);
            }
        };

        /**
         * Closes the socket
         * @return {[type]} [description]
         */
        TCPSocket.prototype.close = function() {
            this.readyState = 'closing';

            if (this._socketId !== 0) {
                if (this._useLegacySocket) {
                    // close legacy socket
                    chrome.socket.disconnect(this._socketId);
                    chrome.socket.destroy(this._socketId);
                } else {
                    // close socket
                    chrome.sockets.tcp.disconnect(this._socketId);
                }

                this._socketId = 0;
            }

            // terminate the tls worker
            if (this._tlsWorker) {
                this._tlsWorker.terminate();
                this._tlsWorker = undefined;
            }

            this._emit('close');
        };

        TCPSocket.prototype.send = function(buffer) {
            if (!this._useForgeTls && this._useSTARTTLS && !this.ssl) {
                // buffer the unprepared data until chrome.socket(s.tcp) handshake is done
                this._startTlsBuffer.push(buffer);
            } else if (this._useForgeTls && (this._useTLS || this._useSTARTTLS)) {
                // give buffer to forge to be prepared for tls
                if (this._tlsWorker) {
                    this._tlsWorker.postMessage(createMessage(EVENT_OUTBOUND, buffer), [buffer]);
                } else {
                    this._tls.prepareOutbound(buffer);
                }
            } else {
                // send the arraybuffer
                this._send(buffer);
            }
        };

        TCPSocket.prototype._send = function(data) {
            var self = this;

            if (self._socketId === 0) {
                // the socket is closed.
                return;
            }

            if (self._useLegacySocket) {
                chrome.socket.write(self._socketId, data, function(writeInfo) {
                    if (writeInfo.bytesWritten < 0 && self._socketId !== 0) {
                        // if the socket is already 0, it has already been closed. no need to alert then...
                        self._emit('error', new Error('Could not write ' + data.byteLength + ' bytes to socket ' + self._socketId + '. Chrome error code: ' + writeInfo.bytesWritten));
                        self._socketId = 0;
                        self.close();

                        return;
                    }

                    self._emit('drain');
                });
            } else {
                chrome.sockets.tcp.send(self._socketId, data, function(sendInfo) {
                    if (sendInfo.bytesSent < 0 && self._socketId !== 0) {
                        // if the socket is already 0, it has already been closed. no need to alert then...
                        self._emit('error', new Error('Could not write ' + data.byteLength + ' bytes to socket ' + self._socketId + '. Chrome error code: ' + sendInfo.bytesSent));
                        self.close();

                        return;
                    }

                    self._emit('drain');
                });
            }
        };
    }

    function wsShim() {
        TCPSocket = function(config) {
            var self = this;

            config.options.useSecureTransport = (typeof config.options.useSecureTransport !== 'undefined') ? config.options.useSecureTransport : false;
            config.options.binaryType = config.options.binaryType || 'arraybuffer';

            // public flags
            self.host = config.host;
            self.port = config.port;
            self.ssl = false;
            self.bufferedAmount = 0;
            self.readyState = 'connecting';
            self.binaryType = config.options.binaryType;

            if (self.binaryType !== 'arraybuffer') {
                throw new Error('Only arraybuffers are supported!');
            }

            // internal flags
            self._ca = config.options.ca;
            self._useTLS = config.options.useSecureTransport;
            self._useSTARTTLS = false;
            self._tlsWorkerPath = config.options.tlsWorkerPath;

            self._wsHost = (config.options.ws && config.options.ws.url) || window.location.origin;
            self._wsOptions = (config.options.ws && config.options.ws.options) || {};
            self._wsOptions.reconnection = self._wsOptions.reconnection || false;
            self._wsOptions.multiplex = self._wsOptions.multiplex || false;

            self._socket = io(self._wsHost, self._wsOptions);
            self._socket.emit('open', {
                host: self.host,
                port: self.port
            }, function(proxyHostname) {
                self._proxyHostname = proxyHostname;
                if (self._useTLS) {
                    // the socket is up, do the tls handshake
                    createTls.bind(self)();
                } else {
                    // socket is up and running
                    self._emit('open', {
                        proxyHostname: self._proxyHostname
                    });
                }

                self._socket.on('data', function(buffer) {
                    if (self._useTLS || self._useSTARTTLS) {
                        // feed the data to the tls socket
                        if (self._tlsWorker) {
                            self._tlsWorker.postMessage(createMessage(EVENT_INBOUND, buffer), [buffer]);
                        } else {
                            self._tls.processInbound(buffer);
                        }
                    } else {
                        // emit data event
                        self._emit('data', buffer);
                    }
                });

                self._socket.on('error', function(message) {
                    self._emit('error', new Error(message));
                    self.close();
                });

                self._socket.on('close', function() {
                    self.close();
                });
            });
        };

        //
        // API
        //

        TCPSocket.prototype.close = function() {
            this.readyState = 'closing';

            this._socket.emit('end');
            this._socket.disconnect();

            if (this._tlsWorker) {
                this._tlsWorker.terminate();
            }

            this._emit('close');
        };

        TCPSocket.prototype.send = function(buffer) {
            if (this._useTLS || this._useSTARTTLS) {
                // give buffer to forge to be prepared for tls
                if (this._tlsWorker) {
                    this._tlsWorker.postMessage(createMessage(EVENT_OUTBOUND, buffer), [buffer]);
                } else {
                    this._tls.prepareOutbound(buffer);
                }
                return;
            }

            // send the arraybuffer
            this._send(buffer);
        };

        TCPSocket.prototype._send = function(data) {
            var self = this;
            self._socket.emit('data', data, function() {
                self._emit('drain');
            });
        };

        TCPSocket.prototype.upgradeToSecure = function() {
            if (this.ssl || this._useSTARTTLS) {
                return;
            }

            this._useSTARTTLS = true;

            // setup the forge tls client or webworker
            createTls.bind(this)();
        };
    }

    //
    // TLS shim event handlers, unused when native TLS
    //

    TCPSocket.prototype.tlscert = function(cert) {
        this.oncert(cert);
    };

    TCPSocket.prototype.tlserror = function(message) {
        this._emit('error', new Error(message));
        this.close();
    };

    TCPSocket.prototype.tlsclose = function() {
        this.close();
    };

    TCPSocket.prototype.tlsopen = function() {
        this.ssl = true;
        if (this._useTLS) {
            if (this._proxyHostname) {
                this._emit('open', {
                    proxyHostname: this._proxyHostname
                });
            } else {
                this._emit('open');
            }
        }
    };

    TCPSocket.prototype.tlsoutbound = function(buffer) {
        this._send(buffer);
    };

    TCPSocket.prototype.tlsinbound = function(buffer) {
        this._emit('data', buffer);
    };


    //
    // Common API
    //

    TCPSocket.open = function(host, port, options) {
        return new TCPSocket({
            host: host,
            port: port,
            options: options || {}
        });
    };

    TCPSocket.listen = TCPSocket.listen || apiNotSupported;
    TCPSocket.prototype.resume = TCPSocket.prototype.resume || apiNotSupported;
    TCPSocket.prototype.suspend = TCPSocket.prototype.suspend || apiNotSupported;
    TCPSocket.prototype.upgradeToSecure = TCPSocket.prototype.upgradeToSecure || apiNotSupported;

    function apiNotSupported() {
        throw new Error('API not supported');
    }


    //
    //
    // Internal use
    //
    //

    // utility function, to be bound to the respective websocket & chrome.socket shim TCPSocket object
    var createTls = function() {
        // create the respective TLS shim
        if (window.Worker && typeof this._tlsWorkerPath === 'string') {
            createTlsWorker.bind(this)();
        } else {
            // setup the forge tls client
            createTlsNoWorker.bind(this)();
        }
    };

    // utility function, to be bound to the TCPSocket object
    // creates an instance of the tls shim (no worker)
    var createTlsNoWorker = function() {
        // create the tls client
        this._tls = new TLS();

        // attach the handlers
        this._tls.tlserror = this.tlserror.bind(this);
        this._tls.tlscert = this.tlscert.bind(this);
        this._tls.tlsclose = this.tlsclose.bind(this);
        this._tls.tlsopen = this.tlsopen.bind(this);
        this._tls.tlsoutbound = this.tlsoutbound.bind(this);
        this._tls.tlsinbound = this.tlsinbound.bind(this);

        // configure the tls client
        this._tls.configure({
            host: this.host,
            ca: this._ca
        });

        // start the handshake
        this._tls.handshake();
    };

    // utility function, to be bound to the TCPSocket object
    // creates an instance of the tls shim running in a web worker
    var createTlsWorker = function() {
        var self = this,
            workerPath = self._tlsWorkerPath;

        self._tlsWorker = new Worker(workerPath);
        self._tlsWorker.onmessage = function(e) {
            var event = e.data.event,
                message = e.data.message;

            switch (event) {
                case EVENT_CERT:
                    self.tlscert(message);
                    break;

                case EVENT_ERROR:
                    self.tlserror(message);
                    break;

                case EVENT_CLOSE:
                    self.tlsclose(message);
                    break;

                case EVENT_OPEN:
                    self.tlsopen(message);
                    break;

                case EVENT_OUTBOUND:
                    self.tlsoutbound(message);
                    break;

                case EVENT_INBOUND:
                    self.tlsinbound(message);
                    break;
            }
        };

        self._tlsWorker.onerror = function(e) {
            var error = new Error('Error handling web worker: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
            console.error(error);
            self.tlserror(error.message);
        };

        // start the worker and configure the tls client
        self._tlsWorker.postMessage(createMessage(EVENT_CONFIG, {
            host: self.host,
            ca: self._ca
        }));

        // start the handshake
        self._tlsWorker.postMessage(createMessage(EVENT_HANDSHAKE));
    };

    function createMessage(event, message) {
        return {
            event: event,
            message: message
        };
    }

    TCPSocket.prototype._emit = function(type, data) {
        var cb;
        if (type === 'open') {
            this.readyState = 'open';
            cb = this.onopen;
        } else if (type === 'error') {
            cb = this.onerror;
        } else if (type === 'data') {
            cb = this.ondata;
        } else if (type === 'drain') {
            cb = this.ondrain;
        } else if (type === 'close') {
            this.readyState = 'closed';
            cb = this.onclose;
        }

        if (typeof cb !== 'function') {
            return;
        }

        cb({
            target: this,
            type: type,
            data: data
        });
    };

    if (root) {
        // add TCPSocket to root object
        root.TCPSocket = TCPSocket;
    }

    return TCPSocket;
});

},{"./emailjs-tcp-socket-tls":76,"net":6,"tls":6}],78:[function(requireb,module,exports){
// Copyright (c) 2010-2011 Konstantin Käfer

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root['emailjs-utf7'] = factory();
    }
}(this, function() {
    'use strict';

    function encode(str) {
        var b = new Uint8Array(str.length * 2),
            octets = '',
            i, bi, len, c, encoded;

        for (i = 0, bi = 0, len = str.length; i < len; i++) {
            // Note that we can't simply convert a UTF-8 string to Base64 because
            // UTF-8 uses a different encoding. In modified UTF-7, all characters
            // are represented by their two byte Unicode ID.
            c = str.charCodeAt(i);
            // Upper 8 bits shifted into lower 8 bits so that they fit into 1 byte.
            b[bi++] = c >> 8;
            // Lower 8 bits. Cut off the upper 8 bits so that they fit into 1 byte.
            b[bi++] = c & 0xFF;
        }

        // Convert b:Uint8Array to a binary string
        for (i = 0, len = b.length; i < len; i++) {
            octets += String.fromCharCode(b[i]);
        }

        // Modified Base64 uses , instead of / and omits trailing =.
        encoded = '';
        if (typeof window !== 'undefined' && btoa) {
            encoded = btoa(octets);
        } else {
            encoded = (new Buffer(octets, "binary")).toString("base64");
        }
        return encoded.replace(/=+$/, '');
    }

    /**
     * Safe base64 decoding. Does not throw on unexpected input.
     *
     * Implementation from the MDN docs:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding
     * (MDN code samples are MIT licensed)
     *
     * @param {String} base64Str Base64 encoded string
     * @returns {Uint8Array} Decoded binary blob
     */
    function base64toTypedArray(base64Str) {
        var bitsSoFar = 0;
        var validBits = 0;
        var iOut = 0;
        var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));
        var c;
        var bits;

        for (var i = 0, len = base64Str.length; i < len; i++) {
            c = base64Str.charCodeAt(i);
            if (c >= 0x41 && c <= 0x5a) { // [A-Z]
                bits = c - 0x41;
            } else if (c >= 0x61 && c <= 0x7a) { // [a-z]
                bits = c - 0x61 + 0x1a;
            } else if (c >= 0x30 && c <= 0x39) { // [0-9]
                bits = c - 0x30 + 0x34;
            } else if (c === 0x2b) { // +
                bits = 0x3e;
            } else if (c === 0x2f) { // /
                bits = 0x3f;
            } else if (c === 0x3d) { // =
                validBits = 0;
                continue;
            } else {
                // ignore all other characters!
                continue;
            }
            bitsSoFar = (bitsSoFar << 6) | bits;
            validBits += 6;
            if (validBits >= 8) {
                validBits -= 8;
                arr[iOut++] = bitsSoFar >> validBits;
                if (validBits === 2) {
                    bitsSoFar &= 0x03;
                } else if (validBits === 4) {
                    bitsSoFar &= 0x0f;
                }
            }
        }

        if (iOut < arr.length) {
            return arr.subarray(0, iOut);
        }
        return arr;
    }

    function decode(str) {
        var octets = base64toTypedArray(str),
            r = [];

        for (var i = 0, len = octets.length; i < len;) {
            // Calculate charcode from two adjacent bytes.
            r.push(String.fromCharCode(octets[i++] << 8 | octets[i++]));
        }
        return r.join('');
    }

    // Escape RegEx from http://simonwillison.net/2006/Jan/20/escape/
    function escape(chars) {
        return chars.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }

    // Character classes defined by RFC 2152.
    var setD = 'A-Za-z0-9' + escape('\'(),-./:?'),
        setO = escape('!"#$%&*;<=>@[]^_\'{|}'),
        setW = escape(' \r\n\t'),

        // Stores compiled regexes for various replacement pattern.
        regexes = {},
        regexAll = new RegExp('[^' + setW + setD + setO + ']+', 'g');

    return {
        // RFC 2152 UTF-7 encoding.
        encode: function(str, mask) {
            // Generate a RegExp object from the string of mask characters.
            if (!mask) {
                mask = '';
            }
            if (!regexes[mask]) {
                regexes[mask] = new RegExp('[^' + setD + escape(mask) + ']+', 'g');
            }

            // We replace subsequent disallowed chars with their escape sequence.
            return str.replace(regexes[mask], function(chunk) {
                // + is represented by an empty sequence +-, otherwise call encode().
                return '+' + (chunk === '+' ? '' : encode(chunk)) + '-';
            });
        },

        // RFC 2152 UTF-7 encoding with all optionals.
        encodeAll: function(str) {
            // We replace subsequent disallowed chars with their escape sequence.
            return str.replace(regexAll, function(chunk) {
                // + is represented by an empty sequence +-, otherwise call encode().
                return '+' + (chunk === '+' ? '' : encode(chunk)) + '-';
            });
        },

        // RFC 2152 UTF-7 decoding.
        decode: function(str) {
            return str.replace(/\+([A-Za-z0-9\/]*)-?/gi, function(_, chunk) {
                // &- represents &.
                if (chunk === '') {
                    return '+';
                }
                return decode(chunk);
            });
        },

        imap: {
            // RFC 3501, section 5.1.3 UTF-7 encoding.
            encode: function(str) {
                // All printable ASCII chars except for & must be represented by themselves.
                // We replace subsequent non-representable chars with their escape sequence.
                return str.replace(/&/g, '&-').replace(/[^\x20-\x7e]+/g, function(chunk) {
                    // & is represented by an empty sequence &-, otherwise call encode().
                    chunk = (chunk === '&' ? '' : encode(chunk)).replace(/\//g, ',');
                    return '&' + chunk + '-';
                });
            },

            // RFC 3501, section 5.1.3 UTF-7 decoding.
            decode: function(str) {
                return str.replace(/&([^-]*)-/g, function(_, chunk) {
                    // &- represents &.
                    if (chunk === '') {
                        return '&';
                    }
                    return decode(chunk.replace(/,/g, '/'));
                });
            }
        }
    };
}));

},{}],79:[function(requireb,module,exports){
var encode = requireb("./lib/encode.js"),
    decode = requireb("./lib/decode.js");

exports.decode = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level){
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 =
exports.encodeHTML5 =
exports.encodeHTML  = encode.HTML;

exports.decodeXML =
exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 =
exports.decodeHTML5 =
exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict =
exports.decodeHTML5Strict =
exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

},{"./lib/decode.js":80,"./lib/encode.js":82}],80:[function(requireb,module,exports){
var entityMap = requireb("../maps/entities.json"),
    legacyMap = requireb("../maps/legacy.json"),
    xmlMap    = requireb("../maps/xml.json"),
    decodeCodePoint = requireb("./decode_codepoint.js");

var decodeXMLStrict  = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map){
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function(str){
		return String(str).replace(re, replace);
	};
}

var decodeHTML = (function(){
	var legacy = Object.keys(legacyMap)
		.sort(sorter);

	var keys = Object.keys(entityMap)
		.sort(sorter);

	for(var i = 0, j = 0; i < keys.length; i++){
		if(legacy[j] === keys[i]){
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str){
		if(str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function(str){
		return String(str).replace(re, replacer);
	};
}());

function sorter(a, b){
	return a < b ? 1 : -1;
}

function getReplacer(map){
	return function replace(str){
		if(str.charAt(1) === "#"){
			if(str.charAt(2) === "X" || str.charAt(2) === "x"){
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};
},{"../maps/entities.json":84,"../maps/legacy.json":85,"../maps/xml.json":86,"./decode_codepoint.js":81}],81:[function(requireb,module,exports){
var decodeMap = requireb("../maps/decode.json");

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

},{"../maps/decode.json":83}],82:[function(requireb,module,exports){
var inverseXML = getInverseObj(requireb("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(requireb("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c){
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c){
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low  = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re){
	function func(name){
		return inverse[name];
	}

	return function(data){
		return data
				.replace(re, func)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data){
	return data
			.replace(re_xmlChars, singleCharReplacer)
			.replace(re_astralSymbols, astralReplacer)
			.replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

},{"../maps/entities.json":84,"../maps/xml.json":86}],83:[function(requireb,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
},{}],84:[function(requireb,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}
},{}],85:[function(requireb,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"}
},{}],86:[function(requireb,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],87:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],88:[function(requireb,module,exports){
/*!
 * HTMLMinifier v0.7.2 (http://kangax.github.io/html-minifier/)
 * Copyright 2010-2015 Juriy "kangax" Zaytsev
 * Licensed under MIT (https://github.com/kangax/html-minifier/blob/gh-pages/LICENSE)
 */
/*!
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 */

/*
 * // Use like so:
 * HTMLParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * // or to get an XML string:
 * HTMLtoXML(htmlString);
 *
 * // or to get an XML DOM Document
 * HTMLtoDOM(htmlString);
 *
 * // or to inject into an existing document/DOM node
 * HTMLtoDOM(htmlString, document);
 * HTMLtoDOM(htmlString, document.body);
 *
 */

 /* global ActiveXObject, DOMDocument */

(function(global) {
  'use strict';

  // Regular Expressions for parsing tags and attributes
  var singleAttrIdentifier = /([\w:\.-]+)/,
      singleAttrAssign = /=/,
      singleAttrAssigns = [ singleAttrAssign ],
      singleAttrValues = [
        /"((?:\\.|[^"])*)"/.source, // attr value double quotes
        /'((?:\\.|[^'])*)'/.source, // attr value, single quotes
        /([^>\s]+)/.source          // attr value, no quotes
      ],
      startTagOpen = /^<([\w:-]+)/,
      startTagClose = /\s*(\/?)>/,
      endTag = /^<\/([\w:-]+)[^>]*>/,
      endingSlash = /\/>$/,
      doctype = /^<!DOCTYPE [^>]+>/i;

  var IS_REGEX_CAPTURING_BROKEN = false;
  'x'.replace(/x(.)?/g, function(m, g) {
    IS_REGEX_CAPTURING_BROKEN = g === '';
  });

  // Empty Elements - HTML 4.01
  var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,wbr');

  // Block Elements - HTML 4.01
  // var block = makeMap('address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul');

  // Inline Elements - HTML 4.01
  var inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,noscript,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,svg,textarea,tt,u,var');

  // Elements that you can, intentionally, leave open
  // (and which close themselves)
  var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');

  // Attributes that have their values filled in disabled='disabled'
  var fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');

  // Special Elements (can contain anything)
  var special = makeMap('script,style,noscript');

  var reCache = {}, stackedTag, reStackedTag, tagMatch;

  function startTagForHandler( handler ) {
    var customStartTagAttrs;

    var startTagAttrs = new RegExp(
        '(?:\\s*[\\w:\\.-]+'
      +   '(?:\\s*'
      +     '(?:' + joinSingleAttrAssigns(handler) + ')'
      +     '\\s*(?:(?:"[^"]*")|(?:\'[^\']*\')|[^>\\s]+)'
      +   ')?'
      + ')*'
    );

    if ( handler.customAttrSurround ) {
      var attrClauses = [];

      for ( var i = handler.customAttrSurround.length - 1; i >= 0; i-- ) {
        // Capture the custom attribute opening and closing markup surrounding the standard attribute rules
        attrClauses[i] = '(?:\\s*'
          + handler.customAttrSurround[i][0].source
          + startTagAttrs.source
          + handler.customAttrSurround[i][1].source
          + ')';
      }
      attrClauses.unshift(startTagAttrs.source);

      customStartTagAttrs = new RegExp(
        '((?:' + attrClauses.join('|') + ')*)'
      );
    }
    else {
      // No custom attribute wrappers specified, so just capture the standard attribute rules
      customStartTagAttrs = new RegExp('(' + startTagAttrs.source + ')');
    }

    return new RegExp(startTagOpen.source + customStartTagAttrs.source + startTagClose.source);
  }

  function attrForHandler( handler ) {
    var singleAttr = new RegExp(
      singleAttrIdentifier.source
      + '(?:\\s*'
      + '(' + joinSingleAttrAssigns( handler ) + ')'
      + '\\s*'
      + '(?:'
      + singleAttrValues.join('|')
      + ')'
      + ')?'
    );

    if ( handler.customAttrSurround ) {
      var attrClauses = [];
      for ( var i = handler.customAttrSurround.length - 1; i >= 0; i-- ) {
        attrClauses[i] = '(?:'
          + '(' + handler.customAttrSurround[i][0].source + ')'
          + singleAttr.source
          + '(' + handler.customAttrSurround[i][1].source + ')'
          + ')';
      }
      attrClauses.unshift('(?:' + singleAttr.source + ')');

      return new RegExp(attrClauses.join('|'), 'g');
    }
    else {
      return new RegExp(singleAttr.source, 'g');
    }
  }

  function joinSingleAttrAssigns( handler ) {
    return singleAttrAssigns.concat(
      handler.customAttrAssign || []
    ).map(function (assign) {
      return '(?:' + assign.source + ')';
    }).join('|');
  }

  var HTMLParser = global.HTMLParser = function( html, handler ) {
    var index, chars, match, stack = [], last = html, prevTag, nextTag;
    stack.last = function() {
      var last = this[ this.length - 1 ];
      return last && last.tag;
    };

    var startTag = startTagForHandler(handler);
    var attr = attrForHandler(handler);

    while ( html ) {
      chars = true;

      // Make sure we're not in a script or style element
      if ( !stack.last() || !special[ stack.last() ] ) {

        // Comment:
        if ( /^<!--/.test( html ) ) {
          index = html.indexOf('-->');

          if ( index >= 0 ) {
            if ( handler.comment ) {
              handler.comment( html.substring( 4, index ) );
            }
            html = html.substring( index + 3 );
            chars = false;
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if ( /^<!\[/.test( html ) ) {
          index = html.indexOf(']>');

          if (index >= 0) {
            if ( handler.comment ) {
              handler.comment( html.substring(2, index + 1 ), true /* non-standard */ );
            }
            html = html.substring( index + 2 );
            chars = false;
          }
        }

        // Ignored elements?
        else if ( /^<\?/.test( html ) ) {
          index = html.indexOf( '?>', 2 );
          if ( index >= 0 ) {
            if ( handler.chars ) {
              handler.chars( html.substring( 0, index + 2 ) );
            }
            html = html.substring( index + 2 );
          }
        }

        else if ( /^<%/.test( html ) ) {
          index = html.indexOf( '%>', 2 );
          if ( index >= 0 ) {
            if ( handler.chars ) {
              handler.chars(html.substring( 0, index + 2) );
            }
            html = html.substring( index + 2 );
          }
        }

        // Doctype:
        else if ( (match = doctype.exec( html )) ) {
          if ( handler.doctype ) {
            handler.doctype( match[0] );
          }
          html = html.substring( match[0].length );
          chars = false;
        }

        // End tag:
        else if ( /^<\//.test( html ) ) {
          match = html.match( endTag );

          if ( match ) {
            html = html.substring( match[0].length );
            match[0].replace( endTag, parseEndTag );
            prevTag = '/' + match[1].toLowerCase();
            chars = false;
          }

        }
        // Start tag:
        else if ( /^</.test( html ) ) {
          match = html.match( startTag );
          if ( match ) {
            html = html.substring( match[0].length );
            match[0].replace( startTag, parseStartTag );
            prevTag = match[1].toLowerCase();
            chars = false;
          }
        }

        if ( chars ) {
          index = html.indexOf('<');

          var text = index < 0 ? html : html.substring( 0, index );
          html = index < 0 ? '' : html.substring( index );

          // next tag
          tagMatch = html.match( startTag );
          if (tagMatch) {
            nextTag = tagMatch[1];
          }
          else {
            tagMatch = html.match( endTag );
            if (tagMatch) {
              nextTag = '/' + tagMatch[1];
            }
            else {
              nextTag = '';
            }
          }

          if ( handler.chars ) {
            handler.chars(text, prevTag, nextTag);
          }

        }

      }
      else {

        stackedTag = stack.last().toLowerCase();
        reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)<\/' + stackedTag + '[^>]*>', 'i'));

        html = html.replace(reStackedTag, function(all, text) {
          if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {
            text = text
              .replace(/<!--([\s\S]*?)-->/g, '$1')
              .replace(/<!\[CDATA\[([\s\S]*?)\]\]>/g, '$1');
          }

          if ( handler.chars ) {
            handler.chars( text );
          }

          return '';
        });

        parseEndTag( '', stackedTag );
      }

      if ( html === last ) {
        throw 'Parse Error: ' + html;
      }
      last = html;
    }

    // Clean up any remaining tags
    parseEndTag();

    function parseStartTag( tag, tagName, rest, unary ) {
      var unarySlash = false;

      while ( !handler.html5 && stack.last() && inline[ stack.last() ]) {
        parseEndTag( '', stack.last() );
      }

      if ( closeSelf[ tagName ] && stack.last() === tagName ) {
        parseEndTag( '', tagName );
      }

      unary = empty[ tagName ] || !!unary;

      var attrs = [];

      rest.replace(attr, function () {
        var name, value, fallbackValue, customOpen, customClose, customAssign, quote;
        var ncp = 7; // number of captured parts, scalar

        // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
        if (IS_REGEX_CAPTURING_BROKEN && arguments[0].indexOf('""') === -1) {
          if (arguments[3] === '') { arguments[3] = undefined; }
          if (arguments[4] === '') { arguments[4] = undefined; }
          if (arguments[5] === '') { arguments[5] = undefined; }
        }

        name = arguments[1];
        if ( name ) {
          customAssign = arguments[2];
          fallbackValue = arguments[3];
          value = fallbackValue || arguments[4] || arguments[5];

          if (customAssign) {
            quote = arguments[0].charAt(name.length + customAssign.length);
            quote = (quote === '\'' || quote === '"') ? quote : '';
          }

        }
        else if ( handler.customAttrSurround ) {
          for ( var i = handler.customAttrSurround.length - 1; i >= 0; i-- ) {
            name = arguments[i * ncp + 7];
            customAssign = arguments[i * ncp + 8];
            if ( name ) {
              fallbackValue = arguments[i * ncp + 9];
              value = fallbackValue
                || arguments[i * ncp + 10]
                || arguments[i * ncp + 11];
              customOpen = arguments[i * ncp + 6];
              customClose = arguments[i * ncp + 12];
              break;
            }
          }
        }

        if ( value === undefined ) {
          value = fillAttrs[name] ? name : fallbackValue;
        }

        attrs.push({
          name: name,
          value: value,
          escaped: value && value.replace(/(^|.)("+)/g, function(match) {
            return match.replace(/"/g, '&quot;');
          }),
          customAssign: customAssign || '=',
          customOpen:  customOpen || '',
          customClose: customClose || '',
          quote: quote || ''
        });
      });

      if ( !unary ) {
        stack.push( { tag: tagName, attrs: attrs } );
      }
      else {
        unarySlash = tag.match( endingSlash );
      }


      if ( handler.start ) {
        handler.start( tagName, attrs, unary, unarySlash );
      }
    }

    function parseEndTag( tag, tagName ) {
      var pos;

      // If no tag name is provided, clean shop
      if ( !tagName ) {
        pos = 0;
      }
      else {
        // Find the closest opened tag of the same type
        var needle = tagName.toLowerCase();
        for ( pos = stack.length - 1; pos >= 0; pos-- ) {
          if ( stack[ pos ].tag.toLowerCase() === needle ) {
            break;
          }
        }
      }

      if ( pos >= 0 ) {
        // Close all the open elements, up the stack
        for ( var i = stack.length - 1; i >= pos; i-- ) {
          if ( handler.end ) {
            handler.end( stack[ i ].tag, stack[ i ].attrs );
          }
        }

        // Remove the open elements from the stack
        stack.length = pos;
      }
    }
  };

  global.HTMLtoXML = function( html ) {
    var results = '';

    new HTMLParser(html, {
      start: function( tag, attrs, unary ) {
        results += '<' + tag;

        for ( var i = 0; i < attrs.length; i++ ) {
          results += ' ' + attrs[i].name + '="' + attrs[i].escaped + '"';
        }

        results += (unary ? '/' : '') + '>';
      },
      end: function( tag ) {
        results += '</' + tag + '>';
      },
      chars: function( text ) {
        results += text;
      },
      comment: function( text ) {
        results += '<!--' + text + '-->';
      },
      ignore: function(text) {
        results += text;
      }
    });

    return results;
  };

  global.HTMLtoDOM = function( html, doc ) {
    // There can be only one of these elements
    var one = makeMap('html,head,body,title');

    // Enforce a structure for the document
    var structure = {
      link: 'head',
      base: 'head'
    };

    if ( !doc ) {
      if ( typeof DOMDocument !== 'undefined' ) {
        doc = new DOMDocument();
      }
      else if ( typeof document !== 'undefined' && document.implementation && document.implementation.createDocument ) {
        doc = document.implementation.createDocument('', '', null);
      }
      else if ( typeof ActiveX !== 'undefined' ) {
        doc = new ActiveXObject('Msxml.DOMDocument');
      }

    }
    else {
      doc = doc.ownerDocument ||
        doc.getOwnerDocument && doc.getOwnerDocument() ||
        doc;
    }

    var elems = [],
      documentElement = doc.documentElement ||
        doc.getDocumentElement && doc.getDocumentElement();

    // If we're dealing with an empty document then we
    // need to pre-populate it with the HTML document structure
    if ( !documentElement && doc.createElement ) {
      (function() {
        var html = doc.createElement('html');
        var head = doc.createElement('head');
        head.appendChild( doc.createElement('title') );
        html.appendChild( head );
        html.appendChild( doc.createElement('body') );
        doc.appendChild( html );
      })();
    }

    // Find all the unique elements
    if ( doc.getElementsByTagName ) {
      for ( var i in one ) {
        one[ i ] = doc.getElementsByTagName( i )[0];
      }
    }

    // If we're working with a document, inject contents into
    // the body element
    var curParentNode = one.body;

    new HTMLParser( html, {
      start: function( tagName, attrs, unary ) {
        // If it's a pre-built element, then we can ignore
        // its construction
        if ( one[ tagName ] ) {
          curParentNode = one[ tagName ];
          return;
        }

        var elem = doc.createElement( tagName );

        for ( var attr in attrs ) {
          elem.setAttribute( attrs[ attr ].name, attrs[ attr ].value );
        }

        if ( structure[ tagName ] && typeof one[ structure[ tagName ] ] !== 'boolean' ) {
          one[ structure[ tagName ] ].appendChild( elem );
        }
        else if ( curParentNode && curParentNode.appendChild ) {
          curParentNode.appendChild( elem );
        }

        if ( !unary ) {
          elems.push( elem );
          curParentNode = elem;
        }
      },
      end: function( /* tag */ ) {
        elems.length -= 1;

        // Init the new parentNode
        curParentNode = elems[ elems.length - 1 ];
      },
      chars: function( text ) {
        curParentNode.appendChild( doc.createTextNode( text ) );
      },
      comment: function( /*text*/ ) {
        // create comment node
      },
      ignore: function( /* text */ ) {
        // What to do here?
      }
    });

    return doc;
  };

  function makeMap(str) {
    var obj = {}, items = str.split(',');
    for ( var i = 0; i < items.length; i++ ) {
      obj[ items[i] ] = true;
      obj[ items[i].toUpperCase() ] = true;
    }
    return obj;
  }
})(typeof exports === 'undefined' ? this : exports);

/* global CleanCSS */

(function(global) {
  'use strict';

  var log, HTMLParser;
  if (global.console && global.console.log) {
    log = function(message) {
      // "preserving" `this`
      global.console.log(message);
    };
  }
  else {
    log = function() {};
  }

  if (global.HTMLParser) {
    HTMLParser = global.HTMLParser;
  }
  else if (typeof requireb === 'function') {
    HTMLParser = requireb('./htmlparser').HTMLParser;
  }

  var trimWhitespace = function(str) {
    if (typeof str !== 'string') {
      return str;
    }
    return str.replace(/^\s+/, '').replace(/\s+$/, '');
  };
  if (String.prototype.trim) {
    trimWhitespace = function(str) {
      if (typeof str !== 'string') {
        return str;
      }
      return str.trim();
    };
  }

  function collapseWhitespace(str) {
    return str ? str.replace(/[\t\n\r ]+/g, ' ') : str;
  }

  function collapseWhitespaceSmart(str, prevTag, nextTag, options) {

    // array of non-empty element tags that will maintain a single space outside of them
    var tags = [
      'a', 'abbr', 'acronym', 'b', 'bdi', 'bdo', 'big', 'button', 'cite',
      'code', 'del', 'dfn', 'em', 'font', 'i', 'ins', 'kbd', 'mark', 'q',
      'rt', 'rp', 's', 'samp', 'small', 'span', 'strike', 'strong',
      'sub', 'sup', 'svg', 'time', 'tt', 'u', 'var'
    ],
    lineBreakBefore = /^[\t ]*[\n\r]+[\t\n\r ]*/,
    lineBreakAfter = /[\t\n\r ]*[\n\r]+[\t ]*$/,
    preserveBefore = lineBreakBefore.test(str) ? '\n' : ' ',
    preserveAfter = lineBreakAfter.test(str) ? '\n' : ' ',
    lineBreakStamp = 'htmlmincollapsedlinebreak';

    if (prevTag && prevTag !== 'img' && prevTag !== 'input' && (prevTag.substr(0, 1) !== '/'
      || (prevTag.substr(0, 1) === '/' && tags.indexOf(prevTag.substr(1)) === -1))) {
      str = str.replace(/^\s+/, options.conservativeCollapse ? ' ' : options.preserveLineBreaks ? preserveBefore : '');
    }

    if (nextTag && nextTag !== 'img' && nextTag !== 'input' && (nextTag.substr(0, 1) === '/'
      || (nextTag.substr(0, 1) !== '/' && tags.indexOf(nextTag) === -1))) {
      str = str.replace(/\s+$/, options.conservativeCollapse ? ' ' : options.preserveLineBreaks ? preserveAfter : '');
    }

    if (prevTag && nextTag) {

      if (options.preserveLineBreaks) {
        str = str
          .replace(lineBreakBefore, lineBreakStamp)
          .replace(lineBreakAfter, lineBreakStamp);
      }
      // strip non space whitespace then compress spaces to one
      return str
        .replace(/[\t\n\r]+/g, ' ').replace(/[ ]+/g, ' ')
        .replace(new RegExp(lineBreakStamp, 'g'), '\n');
    }

    return str;
  }

  function isConditionalComment(text) {
    return ((/\[if[^\]]+\]/).test(text) || (/\s*((?:<!)?\[endif\])$/).test(text));
  }

  function isIgnoredComment(text, options) {
    if ((/^!/).test(text)) {
      return true;
    }

    if (options.ignoreCustomComments) {
      for (var i = 0, len = options.ignoreCustomComments.length; i < len; i++) {
        if (options.ignoreCustomComments[i].test(text)) {
          return true;
        }
      }
    }

    return false;
  }

  function isEventAttribute(attrName) {
    return (/^on[a-z]+/).test(attrName);
  }

  function canRemoveAttributeQuotes(value) {
    // http://mathiasbynens.be/notes/unquoted-attribute-values
    return (/^[^\x20\t\n\f\r"'`=<>]+$/).test(value) && !(/\/$/).test(value) &&
    // make sure trailing slash is not interpreted as HTML self-closing tag
        !(/\/$/).test(value);
  }

  function attributesInclude(attributes, attribute) {
    for (var i = attributes.length; i--;) {
      if (attributes[i].name.toLowerCase() === attribute) {
        return true;
      }
    }
    return false;
  }

  function isAttributeRedundant(tag, attrName, attrValue, attrs) {
    attrValue = attrValue ? trimWhitespace(attrValue.toLowerCase()) : '';

    return (
        (tag === 'script' &&
        attrName === 'language' &&
        attrValue === 'javascript') ||

        (tag === 'form' &&
        attrName === 'method' &&
        attrValue === 'get') ||

        (tag === 'input' &&
        attrName === 'type' &&
        attrValue === 'text') ||

        (tag === 'script' &&
        attrName === 'charset' &&
        !attributesInclude(attrs, 'src')) ||

        (tag === 'a' &&
        attrName === 'name' &&
        attributesInclude(attrs, 'id')) ||

        (tag === 'area' &&
        attrName === 'shape' &&
        attrValue === 'rect')
    );
  }

  function isScriptTypeAttribute(tag, attrName, attrValue) {
    return (
      tag === 'script' &&
      attrName === 'type' &&
      trimWhitespace(attrValue.toLowerCase()) === 'text/javascript'
    );
  }

  // https://mathiasbynens.be/demo/javascript-mime-type
  // https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-type
  var executableScriptsMimetypes = {
    'text/javascript': 1,
    'text/ecmascript': 1,
    'text/jscript': 1,
    'application/javascript': 1,
    'application/x-javascript': 1,
    'application/ecmascript': 1
  };

  function isExecutableScript(tag, attrs) {
    if (tag !== 'script') {
      return false;
    }
    for (var i = 0, len = attrs.length; i < len; i++) {
      var attrName = attrs[i].name.toLowerCase();
      if (attrName === 'type') {
        return attrs[i].value === '' ||
               executableScriptsMimetypes[attrs[i].value] === 1;
      }
    }
    return true;
  }

  function isStyleLinkTypeAttribute(tag, attrName, attrValue) {
    return (
      (tag === 'style' || tag === 'link') &&
      attrName === 'type' &&
      trimWhitespace(attrValue.toLowerCase()) === 'text/css'
    );
  }

  var enumeratedAttributeValues = {
    draggable: ['true', 'false'] // defaults to 'auto'
  };

  function isBooleanAttribute(attrName, attrValue) {
    var isSimpleBoolean = (/^(?:allowfullscreen|async|autofocus|autoplay|checked|compact|controls|declare|default|defaultchecked|defaultmuted|defaultselected|defer|disabled|enabled|formnovalidate|hidden|indeterminate|inert|ismap|itemscope|loop|multiple|muted|nohref|noresize|noshade|novalidate|nowrap|open|pauseonexit|readonly|requirebd|reversed|scoped|seamless|selected|sortable|spellcheck|truespeed|typemustmatch|visible)$/i).test(attrName);
    if (isSimpleBoolean) {
      return true;
    }

    var attrValueEnumeration = enumeratedAttributeValues[attrName.toLowerCase()];
    if (!attrValueEnumeration) {
      return false;
    }
    else {
      return (-1 === attrValueEnumeration.indexOf(attrValue.toLowerCase()));
    }
  }

  function isUriTypeAttribute(attrName, tag) {
    return (
      ((/^(?:a|area|link|base)$/).test(tag) && attrName === 'href') ||
      (tag === 'img' && (/^(?:src|longdesc|usemap)$/).test(attrName)) ||
      (tag === 'object' && (/^(?:classid|codebase|data|usemap)$/).test(attrName)) ||
      (tag === 'q' && attrName === 'cite') ||
      (tag === 'blockquote' && attrName === 'cite') ||
      ((tag === 'ins' || tag === 'del') && attrName === 'cite') ||
      (tag === 'form' && attrName === 'action') ||
      (tag === 'input' && (attrName === 'src' || attrName === 'usemap')) ||
      (tag === 'head' && attrName === 'profile') ||
      (tag === 'script' && (attrName === 'src' || attrName === 'for'))
    );
  }

  function isNumberTypeAttribute(attrName, tag) {
    return (
      ((/^(?:a|area|object|button)$/).test(tag) && attrName === 'tabindex') ||
      (tag === 'input' && (attrName === 'maxlength' || attrName === 'tabindex')) ||
      (tag === 'select' && (attrName === 'size' || attrName === 'tabindex')) ||
      (tag === 'textarea' && (/^(?:rows|cols|tabindex)$/).test(attrName)) ||
      (tag === 'colgroup' && attrName === 'span') ||
      (tag === 'col' && attrName === 'span') ||
      ((tag === 'th' || tag === 'td') && (attrName === 'rowspan' || attrName === 'colspan'))
    );
  }

  function cleanAttributeValue(tag, attrName, attrValue, options, attrs) {
    if (attrValue && isEventAttribute(attrName)) {
      attrValue = trimWhitespace(attrValue).replace(/^javascript:\s*/i, '').replace(/\s*;$/, '');
      if (options.minifyJS) {
        var wrappedCode = '(function(){' + attrValue + '})()';
        var minified = minifyJS(wrappedCode, options.minifyJS);
        return minified.slice(12, minified.length - 4).replace(/"/g, '&quot;');
      }
      return attrValue;
    }
    else if (attrName === 'class') {
      return collapseWhitespace(trimWhitespace(attrValue));
    }
    else if (isUriTypeAttribute(attrName, tag)) {
      attrValue = trimWhitespace(attrValue);
      if (options.minifyURLs) {
        return minifyURLs(attrValue, options.minifyURLs);
      }
      return attrValue;
    }
    else if (isNumberTypeAttribute(attrName, tag)) {
      return trimWhitespace(attrValue);
    }
    else if (attrName === 'style') {
      attrValue = trimWhitespace(attrValue);
      if (attrValue) {
        attrValue = attrValue.replace(/\s*;\s*$/, '');
      }
      if (options.minifyCSS) {
        return minifyCSS(attrValue, options.minifyCSS, true);
      }
      return attrValue;
    }
    else if (isMetaViewport(tag, attrs) && attrName === 'content') {
      attrValue = attrValue.replace(/1\.0/g, '1').replace(/\s+/g, '');
    }
    else if (attrValue && options.customAttrCollapse && options.customAttrCollapse.test(attrName)) {
      attrValue = attrValue.replace(/\n+/g, '');
    }
    return attrValue;
  }

  function isMetaViewport(tag, attrs) {
    if (tag !== 'meta') {
      return false;
    }
    for (var i = 0, len = attrs.length; i < len; i++) {
      if (attrs[i].name === 'name' && attrs[i].value === 'viewport') {
        return true;
      }
    }
  }

  // Wrap CSS declarations for CleanCSS > 3.x
  // See https://github.com/jakubpawlowicz/clean-css/issues/418
  function wrapCSS(text) {
    return '*{' + text + '}';
  }

  function unwrapCSS(text) {
    var matches = text.match(/^\*\{([\s\S]*)\}$/m);
    if (matches && matches[1]) {
      return matches[1];
    }
    else {
      return text;
    }
  }

  function cleanConditionalComment(comment) {
    return comment
      .replace(/^(\[[^\]]+\]>)\s*/, '$1')
      .replace(/\s*(<!\[endif\])$/, '$1');
  }

  function removeCDATASections(text) {
    return text
      // "/* <![CDATA[ */" or "// <![CDATA["
      .replace(/^(?:\s*\/\*\s*<!\[CDATA\[\s*\*\/|\s*\/\/\s*<!\[CDATA\[.*)/, '')
      // "/* ]]> */" or "// ]]>"
      .replace(/(?:\/\*\s*\]\]>\s*\*\/|\/\/\s*\]\]>)\s*$/, '');
  }

  function processScript(text, options, currentAttrs) {
    for (var i = 0, len = currentAttrs.length; i < len; i++) {
      if (currentAttrs[i].name.toLowerCase() === 'type' &&
          options.processScripts.indexOf(currentAttrs[i].value) > -1) {
        return minify(text, options);
      }
    }
    return text;
  }

  var reStartDelimiter = {
    // account for js + html comments (e.g.: //<!--)
    script: /^\s*(?:\/\/)?\s*<!--.*\n?/,
    style: /^\s*<!--\s*/
  };
  var reEndDelimiter = {
    script: /\s*(?:\/\/)?\s*-->\s*$/,
    style: /\s*-->\s*$/
  };
  function removeComments(text, tag) {
    return text.replace(reStartDelimiter[tag], '').replace(reEndDelimiter[tag], '');
  }

  function isOptionalTag(tag) {
    return (/^(?:html|t?body|t?head|tfoot|tr|td|th|dt|dd|option|colgroup|source)$/).test(tag);
  }

  var reEmptyAttribute = new RegExp(
    '^(?:class|id|style|title|lang|dir|on(?:focus|blur|change|click|dblclick|mouse(' +
      '?:down|up|over|move|out)|key(?:press|down|up)))$');

  function canDeleteEmptyAttribute(tag, attrName, attrValue) {
    var isValueEmpty = !attrValue || (/^\s*$/).test(attrValue);
    if (isValueEmpty) {
      return (
        (tag === 'input' && attrName === 'value') ||
        reEmptyAttribute.test(attrName));
    }
    return false;
  }

  function canRemoveElement(tag, attrs) {
    if (tag === 'textarea') {
      return false;
    }

    if (tag === 'script') {
      for (var i = attrs.length - 1; i >= 0; i--) {
        if (attrs[i].name === 'src') {
          return false;
        }
      }
    }

    return true;
  }

  function canCollapseWhitespace(tag) {
    return !(/^(?:script|style|pre|textarea)$/.test(tag));
  }

  function canTrimWhitespace(tag) {
    return !(/^(?:pre|textarea)$/.test(tag));
  }

  function attrsToMarkup(attrs) {
    var markup = '';
    for (var i = 0, len = attrs.length; i < len; i++) {
      markup += (' ' + attrs[i].name + (isBooleanAttribute(attrs[i].value) ? '' : ('="' + attrs[i].value + '"')));
    }
    return markup;
  }

  function normalizeAttribute(attr, attrs, tag, unarySlash, index, options) {

    var attrName = options.caseSensitive ? attr.name : attr.name.toLowerCase(),
        attrValue = options.preventAttributesEscaping ? attr.value : attr.escaped,
        attrQuote = options.preventAttributesEscaping ? attr.quote : '"',
        attrFragment,
        emittedAttrValue,
        isTerminalOfUnarySlash = unarySlash && index === attrs.length - 1;

    if ((options.removeRedundantAttributes &&
      isAttributeRedundant(tag, attrName, attrValue, attrs))
      ||
      (options.removeScriptTypeAttributes &&
      isScriptTypeAttribute(tag, attrName, attrValue))
      ||
      (options.removeStyleLinkTypeAttributes &&
      isStyleLinkTypeAttribute(tag, attrName, attrValue))) {
      return '';
    }

    attrValue = cleanAttributeValue(tag, attrName, attrValue, options, attrs);

    if (attrValue !== undefined && !options.removeAttributeQuotes ||
        !canRemoveAttributeQuotes(attrValue) || isTerminalOfUnarySlash) {
      emittedAttrValue = attrQuote + attrValue + attrQuote;
    }
    else {
      emittedAttrValue = attrValue;
    }

    if (options.removeEmptyAttributes &&
        canDeleteEmptyAttribute(tag, attrName, attrValue)) {
      return '';
    }

    if (attrValue === undefined || (options.collapseBooleanAttributes &&
        isBooleanAttribute(attrName, attrValue))) {
      attrFragment = attrName;
    }
    else {
      attrFragment = attrName + attr.customAssign + emittedAttrValue;
    }

    return (' ' + attr.customOpen + attrFragment + attr.customClose);
  }

  function setDefaultTesters(options) {

    var defaultTesters = ['canCollapseWhitespace', 'canTrimWhitespace'];

    for (var i = 0, len = defaultTesters.length; i < len; i++) {
      if (!options[defaultTesters[i]]) {
        options[defaultTesters[i]] = function() {
          return false;
        };
      }
    }
  }

  function minifyURLs(text, options) {
    if (typeof options !== 'object') {
      options = { };
    }

    try {
      // try to get global reference first
      var __RelateUrl = global.RelateUrl;

      if (typeof __RelateUrl === 'undefined' && typeof requireb === 'function') {
        __RelateUrl = requireb('relateurl');
      }

      // noop
      if (!__RelateUrl) {
        return text;
      }

      if (__RelateUrl.relate) {
        return __RelateUrl.relate(text, options);
      }
      else {
        return text;
      }
    }
    catch (err) {
      log(err);
    }
    return text;
  }

  function minifyJS(text, options) {
    if (typeof options !== 'object') {
      options = { };
    }
    options.fromString = true;
    var outputOptions = options.output || {};
    outputOptions.inline_script = true;
    options.output = outputOptions;

    try {
      // try to get global reference first
      var __UglifyJS = global.UglifyJS;

      if (typeof __UglifyJS === 'undefined' && typeof requireb === 'function') {
        __UglifyJS = requireb('uglify-js');
      }

      // noop
      if (!__UglifyJS) {
        return text;
      }

      if (__UglifyJS.minify) {
        return __UglifyJS.minify(text, options).code;
      }
      else if (__UglifyJS.parse) {

        var ast = __UglifyJS.parse(text);
        ast.figure_out_scope();

        var compressor = __UglifyJS.Compressor();
        var compressedAst = ast.transform(compressor);

        compressedAst.figure_out_scope();
        compressedAst.compute_char_frequency();

        if (options.mangle !== false) {
          compressedAst.mangle_names();
        }

        var stream = __UglifyJS.OutputStream(options.output);
        compressedAst.print(stream);

        return stream.toString();
      }
      else {
        return text;
      }
    }
    catch (err) {
      log(err);
    }
    return text;
  }

  function minifyCSS(text, options, inline) {
    if (typeof options !== 'object') {
      options = { };
    }
    if (typeof options.advanced === 'undefined') {
      options.advanced = false;
    }
    try {
      var cleanCSS;

      if (typeof CleanCSS !== 'undefined') {
        cleanCSS = new CleanCSS(options);
      }
      else if (typeof requireb === 'function') {
        var CleanCSSModule = requireb('clean-css');
        cleanCSS = new CleanCSSModule(options);
      }
      if (inline) {
        return unwrapCSS(cleanCSS.minify(wrapCSS(text)).styles);
      }
      else {
        return cleanCSS.minify(text).styles;
      }
    }
    catch (err) {
      log(err);
    }
    return text;
  }

  function minify(value, options) {

    options = options || {};
    var optionsStack = [];

    value = trimWhitespace(value);
    setDefaultTesters(options);

    var results = [ ],
        buffer = [ ],
        currentChars = '',
        currentTag = '',
        currentAttrs = [],
        stackNoTrimWhitespace = [],
        stackNoCollapseWhitespace = [],
        lint = options.lint,
        isIgnoring = false,
        t = new Date();

    if (options.removeIgnored) {
      value = value
        .replace(/<\?[^\?]+\?>/g, '')
        .replace(/<%[^%]+%>/g, '');
    }

    function _canCollapseWhitespace(tag, attrs) {
      return canCollapseWhitespace(tag) || options.canCollapseWhitespace(tag, attrs);
    }

    function _canTrimWhitespace(tag, attrs) {
      return canTrimWhitespace(tag) || options.canTrimWhitespace(tag, attrs);
    }

    new HTMLParser(value, {
      html5: typeof options.html5 !== 'undefined' ? options.html5 : true,

      start: function(tag, attrs, unary, unarySlash) {
        if (isIgnoring) {
          buffer.push('<' + tag, attrsToMarkup(attrs), unarySlash ? '/' : '', '>');
          return;
        }

        var lowerTag = tag.toLowerCase();

        if (lowerTag === 'svg') {
          optionsStack.push(options);
          var nextOptions = {};
          for (var key in options) {
            nextOptions[key] = options[key];
          }
          nextOptions.keepClosingSlash = true;
          nextOptions.caseSensitive = true;
          options = nextOptions;
        }

        tag = options.caseSensitive ? tag : lowerTag;

        currentTag = tag;
        currentChars = '';
        currentAttrs = attrs;

        // set whitespace flags for nested tags (eg. <code> within a <pre>)
        if (options.collapseWhitespace) {
          if (!_canTrimWhitespace(tag, attrs)) {
            stackNoTrimWhitespace.push(tag);
          }
          if (!_canCollapseWhitespace(tag, attrs)) {
            stackNoCollapseWhitespace.push(tag);
          }
        }

        var openTag = '<' + tag;
        var closeTag = ((unarySlash && options.keepClosingSlash) ? '/' : '') + '>';
        if (attrs.length === 0) {
          openTag += closeTag;
        }

        buffer.push(openTag);

        if (lint) {
          lint.testElement(tag);
        }

        var token;
        for (var i = 0, len = attrs.length; i < len; i++) {
          if (lint) {
            lint.testAttribute(tag, attrs[i].name.toLowerCase(), attrs[i].escaped);
          }
          token = normalizeAttribute(attrs[i], attrs, tag, unarySlash, i, options);
          if (i === len - 1) {
            token += closeTag;
          }
          buffer.push(token);
        }
      },
      end: function(tag, attrs) {

        if (isIgnoring) {
          buffer.push('</' + tag + '>');
          return;
        }

        var lowerTag = tag.toLowerCase();
        if (lowerTag === 'svg') {
          options = optionsStack.pop();
        }

        // check if current tag is in a whitespace stack
        if (options.collapseWhitespace) {
          if (stackNoTrimWhitespace.length &&
            tag === stackNoTrimWhitespace[stackNoTrimWhitespace.length - 1]) {
            stackNoTrimWhitespace.pop();
          }
          if (stackNoCollapseWhitespace.length &&
            tag === stackNoCollapseWhitespace[stackNoCollapseWhitespace.length - 1]) {
            stackNoCollapseWhitespace.pop();
          }
        }

        var isElementEmpty = currentChars === '' && tag === currentTag;
        if ((options.removeEmptyElements && isElementEmpty && canRemoveElement(tag, attrs))) {
          // remove last "element" from buffer, return
          for (var i = buffer.length - 1; i >= 0; i--) {
            if (/^<[^\/!]/.test(buffer[i])) {
              buffer.splice(i);
              break;
            }
          }
          return;
        }
        else if (options.removeOptionalTags && isOptionalTag(tag)) {
          // noop, leave start tag in buffer
          return;
        }
        else {
          // push end tag to buffer
          buffer.push('</' + (options.caseSensitive ? tag : lowerTag) + '>');
          results.push.apply(results, buffer);
        }
        // flush buffer
        buffer.length = 0;
        currentChars = '';
      },
      chars: function(text, prevTag, nextTag) {
        prevTag = prevTag === '' ? 'comment' : prevTag;
        nextTag = nextTag === '' ? 'comment' : nextTag;

        if (isIgnoring) {
          buffer.push(text);
          return;
        }

        if (currentTag === 'script' || currentTag === 'style') {
          if (options.removeCommentsFromCDATA) {
            text = removeComments(text, currentTag);
          }
          if (options.removeCDATASectionsFromCDATA) {
            text = removeCDATASections(text);
          }
          if (options.processScripts) {
            text = processScript(text, options, currentAttrs);
          }
        }
        if (options.minifyJS && isExecutableScript(currentTag, currentAttrs)) {
          text = minifyJS(text, options.minifyJS);
        }
        if (currentTag === 'style' && options.minifyCSS) {
          text = minifyCSS(text, options.minifyCSS);
        }
        if (options.collapseWhitespace) {
          if (!stackNoTrimWhitespace.length) {
            text = ((prevTag && prevTag !== 'comment') || (nextTag && nextTag !== 'comment')) ?
              collapseWhitespaceSmart(text, prevTag, nextTag, options)
              : trimWhitespace(text);
          }
          if (!stackNoCollapseWhitespace.length) {
            text = !(prevTag && nextTag || nextTag === 'html') ? collapseWhitespace(text) : text;
          }
        }
        currentChars = text;
        if (lint) {
          lint.testChars(text);
        }
        buffer.push(text);
      },
      comment: function(text, nonStandard) {

        var prefix = nonStandard ? '<!' : '<!--';
        var suffix = nonStandard ? '>' : '-->';

        if (/^\s*htmlmin:ignore/.test(text)) {
          isIgnoring = !isIgnoring;
          if (!options.removeComments) {
            buffer.push('<!--' + text + '-->');
          }
          return;
        }
        if (options.removeComments) {
          if (isConditionalComment(text)) {
            text = prefix + cleanConditionalComment(text) + suffix;
          }
          else if (isIgnoredComment(text, options)) {
            text = '<!--' + text + '-->';
          }
          else {
            text = '';
          }
        }
        else {
          text = prefix + text + suffix;
        }
        buffer.push(text);
      },
      doctype: function(doctype) {
        buffer.push(options.useShortDoctype ? '<!DOCTYPE html>' : collapseWhitespace(doctype));
      },
      customAttrAssign: options.customAttrAssign,
      customAttrSurround: options.customAttrSurround
    });

    results.push.apply(results, buffer);
    var str = joinResultSegments(results, options);
    log('minified in: ' + (new Date() - t) + 'ms');
    return str;
  }

  function joinResultSegments(results, options) {
    var str;
    var maxLineLength = options.maxLineLength;
    if (maxLineLength) {
      var token;
      var lines = [];
      var line = '';
      for (var i = 0, len = results.length; i < len; i++) {
        token = results[i];
        if (line.length + token.length < maxLineLength) {
          line += token;
        }
        else {
          lines.push(line.replace(/^\n/, ''));
          line = token;
        }
      }
      lines.push(line);

      str = lines.join('\n');
    }
    else {
      str = results.join('');
    }

    return str;
  }

  // for CommonJS enviroments, export everything
  if (typeof exports !== 'undefined') {
    exports.minify = minify;
  }
  else {
    global.minify = minify;
  }

}(this));

/*!
 * HTMLLint (to be used in conjunction with HTMLMinifier)
 *
 * Copyright (c) 2010-2013 Juriy "kangax" Zaytsev
 * Licensed under the MIT license.
 *
 */

(function(global) {
  'use strict';

  function isPresentationalElement(tag) {
    return (/^(?:big|small|hr|blink|marquee)$/).test(tag);
  }
  function isDeprecatedElement(tag) {
    return (/^(?:applet|basefont|center|dir|font|isindex|strike)$/).test(tag);
  }
  function isEventAttribute(attrName) {
    return (/^on[a-z]+/).test(attrName);
  }
  function isStyleAttribute(attrName) {
    return (attrName.toLowerCase() === 'style');
  }
  function isDeprecatedAttribute(tag, attrName) {
    return (
      (attrName === 'align' &&
      (/^(?:caption|applet|iframe|img|imput|object|legend|table|hr|div|h[1-6]|p)$/).test(tag)) ||
      (attrName === 'alink' && tag === 'body') ||
      (attrName === 'alt' && tag === 'applet') ||
      (attrName === 'archive' && tag === 'applet') ||
      (attrName === 'background' && tag === 'body') ||
      (attrName === 'bgcolor' && (/^(?:table|t[rdh]|body)$/).test(tag)) ||
      (attrName === 'border' && (/^(?:img|object)$/).test(tag)) ||
      (attrName === 'clear' && tag === 'br') ||
      (attrName === 'code' && tag === 'applet') ||
      (attrName === 'codebase' && tag === 'applet') ||
      (attrName === 'color' && (/^(?:base(?:font)?)$/).test(tag)) ||
      (attrName === 'compact' && (/^(?:dir|[dou]l|menu)$/).test(tag)) ||
      (attrName === 'face' && (/^base(?:font)?$/).test(tag)) ||
      (attrName === 'height' && (/^(?:t[dh]|applet)$/).test(tag)) ||
      (attrName === 'hspace' && (/^(?:applet|img|object)$/).test(tag)) ||
      (attrName === 'language' && tag === 'script') ||
      (attrName === 'link' && tag === 'body') ||
      (attrName === 'name' && tag === 'applet') ||
      (attrName === 'noshade' && tag === 'hr') ||
      (attrName === 'nowrap' && (/^t[dh]$/).test(tag)) ||
      (attrName === 'object' && tag === 'applet') ||
      (attrName === 'prompt' && tag === 'isindex') ||
      (attrName === 'size' && (/^(?:hr|font|basefont)$/).test(tag)) ||
      (attrName === 'start' && tag === 'ol') ||
      (attrName === 'text' && tag === 'body') ||
      (attrName === 'type' && (/^(?:li|ol|ul)$/).test(tag)) ||
      (attrName === 'value' && tag === 'li') ||
      (attrName === 'version' && tag === 'html') ||
      (attrName === 'vlink' && tag === 'body') ||
      (attrName === 'vspace' && (/^(?:applet|img|object)$/).test(tag)) ||
      (attrName === 'width' && (/^(?:hr|td|th|applet|pre)$/).test(tag))
    );
  }
  function isInaccessibleAttribute(attrName, attrValue) {
    return (
      attrName === 'href' &&
      (/^\s*javascript\s*:\s*void\s*(\s+0|\(\s*0\s*\))\s*$/i).test(attrValue)
    );
  }

  function Lint() {
    this.log = [ ];
    this._lastElement = null;
    this._isElementRepeated = false;
  }

  Lint.prototype.testElement = function(tag) {
    if (isDeprecatedElement(tag)) {
      this.log.push(
        'Found <span class="deprecated-element">deprecated</span> <strong><code>&lt;' +
          tag + '&gt;</code></strong> element'
      );
    }
    else if (isPresentationalElement(tag)) {
      this.log.push(
        'Found <span class="presentational-element">presentational</span> <strong><code>&lt;' +
          tag + '&gt;</code></strong> element'
      );
    }
    else {
      this.checkRepeatingElement(tag);
    }
  };

  Lint.prototype.checkRepeatingElement = function(tag) {
    if (tag === 'br' && this._lastElement === 'br') {
      this._isElementRepeated = true;
    }
    else if (this._isElementRepeated) {
      this._reportRepeatingElement();
      this._isElementRepeated = false;
    }
    this._lastElement = tag;
  };

  Lint.prototype._reportRepeatingElement = function() {
    this.log.push('Found <code>&lt;br></code> sequence. Try replacing it with styling.');
  };

  Lint.prototype.testAttribute = function(tag, attrName, attrValue) {
    if (isEventAttribute(attrName)) {
      this.log.push(
        'Found <span class="event-attribute">event attribute</span> (<strong>' +
        attrName + '</strong>) on <strong><code>&lt;' + tag + '&gt;</code></strong> element.'
      );
    }
    else if (isDeprecatedAttribute(tag, attrName)) {
      this.log.push(
        'Found <span class="deprecated-attribute">deprecated</span> <strong>' +
          attrName + '</strong> attribute on <strong><code>&lt;' + tag + '&gt;</code></strong> element.'
      );
    }
    else if (isStyleAttribute(attrName)) {
      this.log.push(
        'Found <span class="style-attribute">style attribute</span> on <strong><code>&lt;' +
          tag + '&gt;</code></strong> element.'
      );
    }
    else if (isInaccessibleAttribute(attrName, attrValue)) {
      this.log.push(
        'Found <span class="inaccessible-attribute">inaccessible attribute</span> ' +
          '(on <strong><code>&lt;' + tag + '&gt;</code></strong> element).'
      );
    }
  };

  Lint.prototype.testChars = function(chars) {
    this._lastElement = '';
    if (/(&nbsp;\s*){2,}/.test(chars)) {
      this.log.push('Found repeating <strong><code>&amp;nbsp;</code></strong> sequence. Try replacing it with styling.');
    }
  };

  Lint.prototype.test = function(tag, attrName, attrValue) {
    this.testElement(tag);
    this.testAttribute(tag, attrName, attrValue);
  };

  Lint.prototype.populate = function(writeToElement) {
    if (this._isElementRepeated) {
      this._reportRepeatingElement();
    }

    if (this.log.length) {
      if (writeToElement) {
        writeToElement.innerHTML = '<ol><li>' + this.log.join('<li>') + '</ol>';
      }
      else {
        var output = ' - ' +
          this.log.join('\n - ')
          .replace(/(<([^>]+)>)/ig, '')
          .replace(/&lt;/g, '<')
          .replace(/&gt;/g, '>');

        console.log(output);
      }
    }
  };

  global.HTMLLint = Lint;

})(typeof exports === 'undefined' ? this : exports);

},{"./htmlparser":undefined,"clean-css":9,"relateurl":117,"uglify-js":164}],89:[function(requireb,module,exports){
var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}

},{"http":"http"}],90:[function(requireb,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],91:[function(requireb,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],92:[function(requireb,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],93:[function(requireb,module,exports){
/*
 * @name Lazy.js
 *
 * @fileOverview
 * Lazy.js is a lazy evaluation library for JavaScript.
 *
 * This has been done before. For examples see:
 *
 * - [wu.js](http://fitzgen.github.io/wu.js/)
 * - [Linq.js](http://linqjs.codeplex.com/)
 * - [from.js](https://github.com/suckgamoni/fromjs/)
 * - [IxJS](http://rx.codeplex.com/)
 * - [sloth.js](http://rfw.name/sloth.js/)
 *
 * However, at least at present, Lazy.js is faster (on average) than any of
 * those libraries. It is also more complete, with nearly all of the
 * functionality of [Underscore](http://underscorejs.org/) and
 * [Lo-Dash](http://lodash.com/).
 *
 * Finding your way around the code
 * --------------------------------
 *
 * At the heart of Lazy.js is the {@link Sequence} object. You create an initial
 * sequence using {@link Lazy}, which can accept an array, object, or string.
 * You can then "chain" together methods from this sequence, creating a new
 * sequence with each call.
 *
 * Here's an example:
 *
 *     var data = getReallyBigArray();
 *
 *     var statistics = Lazy(data)
 *       .map(transform)
 *       .filter(validate)
 *       .reduce(aggregate);
 *
 * {@link Sequence} is the foundation of other, more specific sequence types.
 *
 * An {@link ArrayLikeSequence} provides indexed access to its elements.
 *
 * An {@link ObjectLikeSequence} consists of key/value pairs.
 *
 * A {@link StringLikeSequence} is like a string (duh): actually, it is an
 * {@link ArrayLikeSequence} whose elements happen to be characters.
 *
 * An {@link AsyncSequence} is special: it iterates over its elements
 * asynchronously (so calling `each` generally begins an asynchronous loop and
 * returns immediately).
 *
 * For more information
 * --------------------
 *
 * I wrote a blog post that explains a little bit more about Lazy.js, which you
 * can read [here](http://philosopherdeveloper.com/posts/introducing-lazy-js.html).
 *
 * You can also [create an issue on GitHub](https://github.com/dtao/lazy.js/issues)
 * if you have any issues with the library. I work through them eventually.
 *
 * [@dtao](https://github.com/dtao)
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Lazy = factory();
  }
})(this, function(context) {
  /**
   * Wraps an object and returns a {@link Sequence}. For `null` or `undefined`,
   * simply returns an empty sequence (see {@link Lazy.strict} for a stricter
   * implementation).
   *
   * - For **arrays**, Lazy will create a sequence comprising the elements in
   *   the array (an {@link ArrayLikeSequence}).
   * - For **objects**, Lazy will create a sequence of key/value pairs
   *   (an {@link ObjectLikeSequence}).
   * - For **strings**, Lazy will create a sequence of characters (a
   *   {@link StringLikeSequence}).
   *
   * @public
   * @param {Array|Object|string} source An array, object, or string to wrap.
   * @returns {Sequence} The wrapped lazy object.
   *
   * @exampleHelpers
   * // Utility functions to provide to all examples
   * function increment(x) { return x + 1; }
   * function isEven(x) { return x % 2 === 0; }
   * function isPositive(x) { return x > 0; }
   * function isNegative(x) { return x < 0; }
   *
   * @examples
   * Lazy([1, 2, 4])       // instanceof Lazy.ArrayLikeSequence
   * Lazy({ foo: "bar" })  // instanceof Lazy.ObjectLikeSequence
   * Lazy("hello, world!") // instanceof Lazy.StringLikeSequence
   * Lazy()                // sequence: []
   * Lazy(null)            // sequence: []
   */
  function Lazy(source) {
    if (source instanceof Array) {
      return new ArrayWrapper(source);

    } else if (typeof source === "string") {
      return new StringWrapper(source);

    } else if (source instanceof Sequence) {
      return source;
    }

    if (Lazy.extensions) {
      var extensions = Lazy.extensions, length = extensions.length, result;
      while (!result && length--) {
        result = extensions[length](source);
      }
      if (result) {
        return result;
      }
    }

    return new ObjectWrapper(source);
  }

  Lazy.VERSION = '0.4.2';

  /*** Utility methods of questionable value ***/

  Lazy.noop = function noop() {};
  Lazy.identity = function identity(x) { return x; };

  /**
   * Provides a stricter version of {@link Lazy} which throws an error when
   * attempting to wrap `null`, `undefined`, or numeric or boolean values as a
   * sequence.
   *
   * @public
   * @returns {Function} A stricter version of the {@link Lazy} helper function.
   *
   * @examples
   * var Strict = Lazy.strict();
   *
   * Strict()                  // throws
   * Strict(null)              // throws
   * Strict(true)              // throws
   * Strict(5)                 // throws
   * Strict([1, 2, 3])         // instanceof Lazy.ArrayLikeSequence
   * Strict({ foo: "bar" })    // instanceof Lazy.ObjectLikeSequence
   * Strict("hello, world!")   // instanceof Lazy.StringLikeSequence
   *
   * // Let's also ensure the static functions are still there.
   * Strict.range(3)           // sequence: [0, 1, 2]
   * Strict.generate(Date.now) // instanceof Lazy.GeneratedSequence
   */
  Lazy.strict = function strict() {
    function StrictLazy(source) {
      if (source == null) {
        throw new Error("You cannot wrap null or undefined using Lazy.");
      }

      if (typeof source === "number" || typeof source === "boolean") {
        throw new Error("You cannot wrap primitive values using Lazy.");
      }

      return Lazy(source);
    };

    Lazy(Lazy).each(function(property, name) {
      StrictLazy[name] = property;
    });

    return StrictLazy;
  };

  /**
   * The `Sequence` object provides a unified API encapsulating the notion of
   * zero or more consecutive elements in a collection, stream, etc.
   *
   * Lazy evaluation
   * ---------------
   *
   * Generally speaking, creating a sequence should not be an expensive operation,
   * and should not iterate over an underlying source or trigger any side effects.
   * This means that chaining together methods that return sequences incurs only
   * the cost of creating the `Sequence` objects themselves and not the cost of
   * iterating an underlying data source multiple times.
   *
   * The following code, for example, creates 4 sequences and does nothing with
   * `source`:
   *
   *     var seq = Lazy(source) // 1st sequence
   *       .map(func)           // 2nd
   *       .filter(pred)        // 3rd
   *       .reverse();          // 4th
   *
   * Lazy's convention is to hold off on iterating or otherwise *doing* anything
   * (aside from creating `Sequence` objects) until you call `each`:
   *
   *     seq.each(function(x) { console.log(x); });
   *
   * Defining custom sequences
   * -------------------------
   *
   * Defining your own type of sequence is relatively simple:
   *
   * 1. Pass a *method name* and an object containing *function overrides* to
   *    {@link Sequence.define}. If the object includes a function called `init`,
   *    this function will be called upon initialization.
   * 2. The object should include at least either a `getIterator` method or an
   *    `each` method. The former supports both asynchronous and synchronous
   *    iteration, but is slightly more cumbersome to implement. The latter
   *    supports synchronous iteration and can be automatically implemented in
   *    terms of the former. You can also implement both if you want, e.g. to
   *    optimize performance. For more info, see {@link Iterator} and
   *    {@link AsyncSequence}.
   *
   * As a trivial example, the following code defines a new method, `sample`,
   * which randomly may or may not include each element from its parent.
   *
   *     Lazy.Sequence.define("sample", {
   *       each: function(fn) {
   *         return this.parent.each(function(e) {
   *           // 50/50 chance of including this element.
   *           if (Math.random() > 0.5) {
   *             return fn(e);
   *           }
   *         });
   *       }
   *     });
   *
   * (Of course, the above could also easily have been implemented using
   * {@link #filter} instead of creating a custom sequence. But I *did* say this
   * was a trivial example, to be fair.)
   *
   * Now it will be possible to create this type of sequence from any parent
   * sequence by calling the method name you specified. In other words, you can
   * now do this:
   *
   *     Lazy(arr).sample();
   *     Lazy(arr).map(func).sample();
   *     Lazy(arr).map(func).filter(pred).sample();
   *
   * Etc., etc.
   *
   * @public
   * @constructor
   */
  function Sequence() {}

  /**
   * Create a new constructor function for a type inheriting from `Sequence`.
   *
   * @public
   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be
   *     used for constructing the new sequence. The method will be attached to
   *     the `Sequence` prototype so that it can be chained with any other
   *     sequence methods, like {@link #map}, {@link #filter}, etc.
   * @param {Object} overrides An object containing function overrides for this
   *     new sequence type. **Must** include either `getIterator` or `each` (or
   *     both). *May* include an `init` method as well. For these overrides,
   *     `this` will be the new sequence, and `this.parent` will be the base
   *     sequence from which the new sequence was constructed.
   * @returns {Function} A constructor for a new type inheriting from `Sequence`.
   *
   * @examples
   * // This sequence type logs every element to the specified logger as it
   * // iterates over it.
   * Lazy.Sequence.define("verbose", {
   *   init: function(logger) {
   *     this.logger = logger;
   *   },
   *
   *   each: function(fn) {
   *     var logger = this.logger;
   *     return this.parent.each(function(e, i) {
   *       logger(e);
   *       return fn(e, i);
   *     });
   *   }
   * });
   *
   * Lazy([1, 2, 3]).verbose(logger).each(Lazy.noop) // calls logger 3 times
   */
  Sequence.define = function define(methodName, overrides) {
    if (!overrides || (!overrides.getIterator && !overrides.each)) {
      throw new Error("A custom sequence must implement *at least* getIterator or each!");
    }

    return defineSequenceType(Sequence, methodName, overrides);
  };

  /**
   * Gets the number of elements in the sequence. In some cases, this may
   * requireb eagerly evaluating the sequence.
   *
   * @public
   * @returns {number} The number of elements in the sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).size();                 // => 3
   * Lazy([1, 2]).map(Lazy.identity).size(); // => 2
   * Lazy([1, 2, 3]).reject(isEven).size();  // => 2
   * Lazy([1, 2, 3]).take(1).size();         // => 1
   * Lazy({ foo: 1, bar: 2 }).size();        // => 2
   * Lazy('hello').size();                   // => 5
   */
  Sequence.prototype.size = function size() {
    return this.getIndex().length();
  };

  /**
   * Creates an {@link Iterator} object with two methods, `moveNext` -- returning
   * true or false -- and `current` -- returning the current value.
   *
   * This method is used when asynchronously iterating over sequences. Any type
   * inheriting from `Sequence` must implement this method or it can't support
   * asynchronous iteration.
   *
   * Note that **this method is not intended to be used directly by application
   * code.** Rather, it is intended as a means for implementors to potentially
   * define custom sequence types that support either synchronous or
   * asynchronous iteration.
   *
   * @public
   * @returns {Iterator} An iterator object.
   *
   * @examples
   * var iterator = Lazy([1, 2]).getIterator();
   *
   * iterator.moveNext(); // => true
   * iterator.current();  // => 1
   * iterator.moveNext(); // => true
   * iterator.current();  // => 2
   * iterator.moveNext(); // => false
   */
  Sequence.prototype.getIterator = function getIterator() {
    return new Iterator(this);
  };

  /**
   * Gets the root sequence underlying the current chain of sequences.
   */
  Sequence.prototype.root = function root() {
    return this.parent.root();
  };

  /**
   * Whether or not the current sequence is an asynchronous one. This is more
   * accurate than checking `instanceof {@link AsyncSequence}` because, for
   * example, `Lazy([1, 2, 3]).async().map(Lazy.identity)` returns a sequence
   * that iterates asynchronously even though it's not an instance of
   * `AsyncSequence`.
   *
   * @returns {boolean} Whether or not the current sequence is an asynchronous one.
   */
  Sequence.prototype.isAsync = function isAsync() {
    return this.parent ? this.parent.isAsync() : false;
  };

  /**
   * Evaluates the sequence and produces the appropriate value (an array in most
   * cases, an object for {@link ObjectLikeSequence}s or a string for
   * {@link StringLikeSequence}s).
   *
   * @returns {Array|string|Object} The value resulting from fully evaluating
   *     the sequence.
   */
  Sequence.prototype.value = function value() {
    return this.toArray();
  };

  /**
   * Applies the current transformation chain to a given source, returning the
   * resulting value.
   *
   * @examples
   * var sequence = Lazy([])
   *   .map(function(x) { return x * -1; })
   *   .filter(function(x) { return x % 2 === 0; });
   *
   * sequence.apply([1, 2, 3, 4]); // => [-2, -4]
   */
  Sequence.prototype.apply = function apply(source) {
    var root = this.root(),
        previousSource = root.source,
        result;

    try {
      root.source = source;
      result = this.value();
    } finally {
      root.source = previousSource;
    }

    return result;
  };

  /**
   * The Iterator object provides an API for iterating over a sequence.
   *
   * The purpose of the `Iterator` type is mainly to offer an agnostic way of
   * iterating over a sequence -- either synchronous (i.e. with a `while` loop)
   * or asynchronously (with recursive calls to either `setTimeout` or --- if
   * available --- `setImmediate`). It is not intended to be used directly by
   * application code.
   *
   * @public
   * @constructor
   * @param {Sequence} sequence The sequence to iterate over.
   */
  function Iterator(sequence) {
    this.sequence = sequence;
    this.index    = -1;
  }

  /**
   * Gets the current item this iterator is pointing to.
   *
   * @public
   * @returns {*} The current item.
   */
  Iterator.prototype.current = function current() {
    return this.cachedIndex && this.cachedIndex.get(this.index);
  };

  /**
   * Moves the iterator to the next item in a sequence, if possible.
   *
   * @public
   * @returns {boolean} True if the iterator is able to move to a new item, or else
   *     false.
   */
  Iterator.prototype.moveNext = function moveNext() {
    var cachedIndex = this.cachedIndex;

    if (!cachedIndex) {
      cachedIndex = this.cachedIndex = this.sequence.getIndex();
    }

    if (this.index >= cachedIndex.length() - 1) {
      return false;
    }

    ++this.index;
    return true;
  };

  /**
   * Creates an array snapshot of a sequence.
   *
   * Note that for indefinite sequences, this method may raise an exception or
   * (worse) cause the environment to hang.
   *
   * @public
   * @returns {Array} An array containing the current contents of the sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).toArray() // => [1, 2, 3]
   */
  Sequence.prototype.toArray = function toArray() {
    return this.reduce(function(arr, element) {
      arr.push(element);
      return arr;
    }, []);
  };

  /**
   * Provides an indexed view into the sequence.
   *
   * For sequences that are already indexed, this will simply return the
   * sequence. For non-indexed sequences, this will eagerly evaluate the
   * sequence.
   *
   * @returns {ArrayLikeSequence} A sequence containing the current contents of
   *     the sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).filter(isEven)            // instanceof Lazy.Sequence
   * Lazy([1, 2, 3]).filter(isEven).getIndex() // instanceof Lazy.ArrayLikeSequence
   */
  Sequence.prototype.getIndex = function getIndex() {
    return new ArrayWrapper(this.toArray());
  };

  /**
   * Returns the element at the specified index. Note that, for sequences that
   * are not {@link ArrayLikeSequence}s, this may requireb partially evaluating
   * the sequence, iterating to reach the result. (In other words for such
   * sequences this method is not O(1).)
   *
   * @public
   * @param {number} i The index to access.
   * @returns {*} The element.
   *
   */
  Sequence.prototype.get = function get(i) {
    var element;
    this.each(function(e, index) {
      if (index === i) {
        element = e;
        return false;
      }
    });
    return element;
  };

  /**
   * Provides an indexed, memoized view into the sequence. This will cache the
   * result whenever the sequence is first iterated, so that subsequent
   * iterations will access the same element objects.
   *
   * @public
   * @returns {ArrayLikeSequence} An indexed, memoized sequence containing this
   *     sequence's elements, cached after the first iteration.
   *
   * @example
   * function createObject() { return new Object(); }
   *
   * var plain    = Lazy.generate(createObject, 10),
   *     memoized = Lazy.generate(createObject, 10).memoize();
   *
   * plain.toArray()[0] === plain.toArray()[0];       // => false
   * memoized.toArray()[0] === memoized.toArray()[0]; // => true
   */
  Sequence.prototype.memoize = function memoize() {
    return new MemoizedSequence(this);
  };

  /**
   * @constructor
   */
  function MemoizedSequence(parent) {
    this.parent = parent;
  }

  // MemoizedSequence needs to have its prototype set up after ArrayLikeSequence

  /**
   * Creates an object from a sequence of key/value pairs.
   *
   * @public
   * @returns {Object} An object with keys and values corresponding to the pairs
   *     of elements in the sequence.
   *
   * @examples
   * var details = [
   *   ["first", "Dan"],
   *   ["last", "Tao"],
   *   ["age", 29]
   * ];
   *
   * Lazy(details).toObject() // => { first: "Dan", last: "Tao", age: 29 }
   */
  Sequence.prototype.toObject = function toObject() {
    return this.reduce(function(object, pair) {
      object[pair[0]] = pair[1];
      return object;
    }, {});
  };

  /**
   * Iterates over this sequence and executes a function for every element.
   *
   * @public
   * @aka forEach
   * @param {Function} fn The function to call on each element in the sequence.
   *     Return false from the function to end the iteration.
   * @returns {boolean} `true` if the iteration evaluated the entire sequence,
   *     or `false` if iteration was ended early.
   *
   * @examples
   * Lazy([1, 2, 3, 4]).each(fn) // calls fn 4 times
   */
  Sequence.prototype.each = function each(fn) {
    var iterator = this.getIterator(),
        i = -1;

    while (iterator.moveNext()) {
      if (fn(iterator.current(), ++i) === false) {
        return false;
      }
    }

    return true;
  };

  Sequence.prototype.forEach = function forEach(fn) {
    return this.each(fn);
  };

  /**
   * Creates a new sequence whose values are calculated by passing this sequence's
   * elements through some mapping function.
   *
   * @public
   * @aka collect
   * @param {Function} mapFn The mapping function used to project this sequence's
   *     elements onto a new sequence. This function takes up to two arguments:
   *     the element, and the current index.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * function addIndexToValue(e, i) { return e + i; }
   *
   * Lazy([]).map(increment)              // sequence: []
   * Lazy([1, 2, 3]).map(increment)       // sequence: [2, 3, 4]
   * Lazy([1, 2, 3]).map(addIndexToValue) // sequence: [1, 3, 5]
   *
   * @benchmarks
   * function increment(x) { return x + 1; }
   *
   * var smArr = Lazy.range(10).toArray(),
   *     lgArr = Lazy.range(100).toArray();
   *
   * Lazy(smArr).map(increment).each(Lazy.noop) // lazy - 10 elements
   * Lazy(lgArr).map(increment).each(Lazy.noop) // lazy - 100 elements
   * _.each(_.map(smArr, increment), _.noop)    // lodash - 10 elements
   * _.each(_.map(lgArr, increment), _.noop)    // lodash - 100 elements
   */
  Sequence.prototype.map = function map(mapFn) {
    return new MappedSequence(this, createCallback(mapFn));
  };

  Sequence.prototype.collect = function collect(mapFn) {
    return this.map(mapFn);
  };

  /**
   * @constructor
   */
  function MappedSequence(parent, mapFn) {
    this.parent = parent;
    this.mapFn  = mapFn;
  }

  MappedSequence.prototype = new Sequence();

  MappedSequence.prototype.getIterator = function getIterator() {
    return new MappingIterator(this.parent, this.mapFn);
  };

  MappedSequence.prototype.each = function each(fn) {
    var mapFn = this.mapFn;
    return this.parent.each(function(e, i) {
      return fn(mapFn(e, i), i);
    });
  };

  /**
   * @constructor
   */
  function MappingIterator(sequence, mapFn) {
    this.iterator = sequence.getIterator();
    this.mapFn    = mapFn;
    this.index    = -1;
  }

  MappingIterator.prototype.current = function current() {
    return this.mapFn(this.iterator.current(), this.index);
  };

  MappingIterator.prototype.moveNext = function moveNext() {
    if (this.iterator.moveNext()) {
      ++this.index;
      return true;
    }

    return false;
  };

  /**
   * Creates a new sequence whose values are calculated by accessing the specified
   * property from each element in this sequence.
   *
   * @public
   * @param {string} propertyName The name of the property to access for every
   *     element in this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * var people = [
   *   { first: "Dan", last: "Tao" },
   *   { first: "Bob", last: "Smith" }
   * ];
   *
   * Lazy(people).pluck("last") // sequence: ["Tao", "Smith"]
   */
  Sequence.prototype.pluck = function pluck(property) {
    return this.map(property);
  };

  /**
   * Creates a new sequence whose values are calculated by invoking the specified
   * function on each element in this sequence.
   *
   * @public
   * @param {string} methodName The name of the method to invoke for every element
   *     in this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * function Person(first, last) {
   *   this.fullName = function fullName() {
   *     return first + " " + last;
   *   };
   * }
   *
   * var people = [
   *   new Person("Dan", "Tao"),
   *   new Person("Bob", "Smith")
   * ];
   *
   * Lazy(people).invoke("fullName") // sequence: ["Dan Tao", "Bob Smith"]
   */
  Sequence.prototype.invoke = function invoke(methodName) {
    return this.map(function(e) {
      return e[methodName]();
    });
  };

  /**
   * Creates a new sequence whose values are the elements of this sequence which
   * satisfy the specified predicate.
   *
   * @public
   * @aka select
   * @param {Function} filterFn The predicate to call on each element in this
   *     sequence, which returns true if the element should be included.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * var numbers = [1, 2, 3, 4, 5, 6];
   *
   * Lazy(numbers).filter(isEven) // sequence: [2, 4, 6]
   *
   * @benchmarks
   * function isEven(x) { return x % 2 === 0; }
   *
   * var smArr = Lazy.range(10).toArray(),
   *     lgArr = Lazy.range(100).toArray();
   *
   * Lazy(smArr).filter(isEven).each(Lazy.noop) // lazy - 10 elements
   * Lazy(lgArr).filter(isEven).each(Lazy.noop) // lazy - 100 elements
   * _.each(_.filter(smArr, isEven), _.noop)    // lodash - 10 elements
   * _.each(_.filter(lgArr, isEven), _.noop)    // lodash - 100 elements
   */
  Sequence.prototype.filter = function filter(filterFn) {
    return new FilteredSequence(this, createCallback(filterFn));
  };

  Sequence.prototype.select = function select(filterFn) {
    return this.filter(filterFn);
  };

  /**
   * @constructor
   */
  function FilteredSequence(parent, filterFn) {
    this.parent   = parent;
    this.filterFn = filterFn;
  }

  FilteredSequence.prototype = new Sequence();

  FilteredSequence.prototype.getIterator = function getIterator() {
    return new FilteringIterator(this.parent, this.filterFn);
  };

  FilteredSequence.prototype.each = function each(fn) {
    var filterFn = this.filterFn,
        j = 0;

    return this.parent.each(function(e, i) {
      if (filterFn(e, i)) {
        return fn(e, j++);
      }
    });
  };

  FilteredSequence.prototype.reverse = function reverse() {
    return this.parent.reverse().filter(this.filterFn);
  };

  /**
   * @constructor
   */
  function FilteringIterator(sequence, filterFn) {
    this.iterator = sequence.getIterator();
    this.filterFn = filterFn;
    this.index    = 0;
  }

  FilteringIterator.prototype.current = function current() {
    return this.value;
  };

  FilteringIterator.prototype.moveNext = function moveNext() {
    var iterator = this.iterator,
        filterFn = this.filterFn,
        value;

    while (iterator.moveNext()) {
      value = iterator.current();
      if (filterFn(value, this.index++)) {
        this.value = value;
        return true;
      }
    }

    this.value = undefined;
    return false;
  };

  /**
   * Creates a new sequence whose values exclude the elements of this sequence
   * identified by the specified predicate.
   *
   * @public
   * @param {Function} rejectFn The predicate to call on each element in this
   *     sequence, which returns true if the element should be omitted.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 3, 4, 5]).reject(isEven)              // sequence: [1, 3, 5]
   * Lazy([{ foo: 1 }, { bar: 2 }]).reject('foo')      // sequence: [{ bar: 2 }]
   * Lazy([{ foo: 1 }, { foo: 2 }]).reject({ foo: 2 }) // sequence: [{ foo: 1 }]
   */
  Sequence.prototype.reject = function reject(rejectFn) {
    rejectFn = createCallback(rejectFn);
    return this.filter(function(e) { return !rejectFn(e); });
  };

  /**
   * Creates a new sequence whose values have the specified type, as determined
   * by the `typeof` operator.
   *
   * @public
   * @param {string} type The type of elements to include from the underlying
   *     sequence, i.e. where `typeof [element] === [type]`.
   * @returns {Sequence} The new sequence, comprising elements of the specified
   *     type.
   *
   * @examples
   * Lazy([1, 2, 'foo', 'bar']).ofType('number')  // sequence: [1, 2]
   * Lazy([1, 2, 'foo', 'bar']).ofType('string')  // sequence: ['foo', 'bar']
   * Lazy([1, 2, 'foo', 'bar']).ofType('boolean') // sequence: []
   */
  Sequence.prototype.ofType = function ofType(type) {
    return this.filter(function(e) { return typeof e === type; });
  };

  /**
   * Creates a new sequence whose values are the elements of this sequence with
   * property names and values matching those of the specified object.
   *
   * @public
   * @param {Object} properties The properties that should be found on every
   *     element that is to be included in this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * var people = [
   *   { first: "Dan", last: "Tao" },
   *   { first: "Bob", last: "Smith" }
   * ];
   *
   * Lazy(people).where({ first: "Dan" }) // sequence: [{ first: "Dan", last: "Tao" }]
   *
   * @benchmarks
   * var animals = ["dog", "cat", "mouse", "horse", "pig", "snake"];
   *
   * Lazy(animals).where({ length: 3 }).each(Lazy.noop) // lazy
   * _.each(_.where(animals, { length: 3 }), _.noop)    // lodash
   */
  Sequence.prototype.where = function where(properties) {
    return this.filter(properties);
  };

  /**
   * Creates a new sequence with the same elements as this one, but to be iterated
   * in the opposite order.
   *
   * Note that in some (but not all) cases, the only way to create such a sequence
   * may requireb iterating the entire underlying source when `each` is called.
   *
   * @public
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).reverse() // sequence: [3, 2, 1]
   * Lazy([]).reverse()        // sequence: []
   */
  Sequence.prototype.reverse = function reverse() {
    return new ReversedSequence(this);
  };

  /**
   * @constructor
   */
  function ReversedSequence(parent) {
    this.parent = parent;
  }

  ReversedSequence.prototype = new Sequence();

  ReversedSequence.prototype.getIterator = function getIterator() {
    return new ReversedIterator(this.parent);
  };

  /**
   * @constuctor
   */
  function ReversedIterator(sequence) {
    this.sequence = sequence;
  }

  ReversedIterator.prototype.current = function current() {
    return this.getIndex().get(this.index);
  };

  ReversedIterator.prototype.moveNext = function moveNext() {
    var index  = this.getIndex(),
        length = index.length();

    if (typeof this.index === "undefined") {
      this.index = length;
    }

    return (--this.index >= 0);
  };

  ReversedIterator.prototype.getIndex = function getIndex() {
    if (!this.cachedIndex) {
      this.cachedIndex = this.sequence.getIndex();
    }

    return this.cachedIndex;
  };

  /**
   * Creates a new sequence with all of the elements of this one, plus those of
   * the given array(s).
   *
   * @public
   * @param {...*} var_args One or more values (or arrays of values) to use for
   *     additional items after this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * var left  = [1, 2, 3];
   * var right = [4, 5, 6];
   *
   * Lazy(left).concat(right)         // sequence: [1, 2, 3, 4, 5, 6]
   * Lazy(left).concat(Lazy(right))   // sequence: [1, 2, 3, 4, 5, 6]
   * Lazy(left).concat(right, [7, 8]) // sequence: [1, 2, 3, 4, 5, 6, 7, 8]
   */
  Sequence.prototype.concat = function concat(var_args) {
    return new ConcatenatedSequence(this, arraySlice.call(arguments, 0));
  };

  /**
   * @constructor
   */
  function ConcatenatedSequence(parent, arrays) {
    this.parent = parent;
    this.arrays = arrays;
  }

  ConcatenatedSequence.prototype = new Sequence();

  ConcatenatedSequence.prototype.each = function each(fn) {
    var done = false,
        i = 0;

    this.parent.each(function(e) {
      if (fn(e, i++) === false) {
        done = true;
        return false;
      }
    });

    if (!done) {
      Lazy(this.arrays).flatten().each(function(e) {
        if (fn(e, i++) === false) {
          return false;
        }
      });
    }
  };

  /**
   * Creates a new sequence comprising the first N elements from this sequence, OR
   * (if N is `undefined`) simply returns the first element of this sequence.
   *
   * @public
   * @aka head, take
   * @param {number=} count The number of elements to take from this sequence. If
   *     this value exceeds the length of the sequence, the resulting sequence
   *     will be essentially the same as this one.
   * @returns {*} The new sequence (or the first element from this sequence if
   *     no count was given).
   *
   * @examples
   * function powerOfTwo(exp) {
   *   return Math.pow(2, exp);
   * }
   *
   * Lazy.generate(powerOfTwo).first()          // => 1
   * Lazy.generate(powerOfTwo).first(5)         // sequence: [1, 2, 4, 8, 16]
   * Lazy.generate(powerOfTwo).skip(2).first()  // => 4
   * Lazy.generate(powerOfTwo).skip(2).first(2) // sequence: [4, 8]
   */
  Sequence.prototype.first = function first(count) {
    if (typeof count === "undefined") {
      return getFirst(this);
    }
    return new TakeSequence(this, count);
  };

  Sequence.prototype.head =
  Sequence.prototype.take = function (count) {
    return this.first(count);
  };

  /**
   * @constructor
   */
  function TakeSequence(parent, count) {
    this.parent = parent;
    this.count  = count;
  }

  TakeSequence.prototype = new Sequence();

  TakeSequence.prototype.getIterator = function getIterator() {
    return new TakeIterator(this.parent, this.count);
  };

  TakeSequence.prototype.each = function each(fn) {
    var count = this.count,
        i     = 0;

    var result;
    var handle = this.parent.each(function(e) {
      if (i < count) { result = fn(e, i++); }
      if (i >= count) { return false; }
      return result;
    });

    if (handle instanceof AsyncHandle) {
      return handle;
    }

    return i === count && result !== false;
  };

  /**
   * @constructor
   */
  function TakeIterator(sequence, count) {
    this.iterator = sequence.getIterator();
    this.count    = count;
  }

  TakeIterator.prototype.current = function current() {
    return this.iterator.current();
  };

  TakeIterator.prototype.moveNext = function moveNext() {
    return ((--this.count >= 0) && this.iterator.moveNext());
  };

  /**
   * Creates a new sequence comprising the elements from the head of this sequence
   * that satisfy some predicate. Once an element is encountered that doesn't
   * satisfy the predicate, iteration will stop.
   *
   * @public
   * @param {Function} predicate
   * @returns {Sequence} The new sequence
   *
   * @examples
   * function lessThan(x) {
   *   return function(y) {
   *     return y < x;
   *   };
   * }
   *
   * Lazy([1, 2, 3, 4]).takeWhile(lessThan(3)) // sequence: [1, 2]
   * Lazy([1, 2, 3, 4]).takeWhile(lessThan(0)) // sequence: []
   */
  Sequence.prototype.takeWhile = function takeWhile(predicate) {
    return new TakeWhileSequence(this, predicate);
  };

  /**
   * @constructor
   */
  function TakeWhileSequence(parent, predicate) {
    this.parent    = parent;
    this.predicate = predicate;
  }

  TakeWhileSequence.prototype = new Sequence();

  TakeWhileSequence.prototype.each = function each(fn) {
    var predicate = this.predicate,
        finished = false,
        j = 0;

    var result = this.parent.each(function(e, i) {
      if (!predicate(e, i)) {
        finished = true;
        return false;
      }

      return fn(e, j++);
    });

    if (result instanceof AsyncHandle) {
      return result;
    }

    return finished;
  };

  /**
   * Creates a new sequence comprising all but the last N elements of this
   * sequence.
   *
   * @public
   * @param {number=} count The number of items to omit from the end of the
   *     sequence (defaults to 1).
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 3, 4]).initial()                    // sequence: [1, 2, 3]
   * Lazy([1, 2, 3, 4]).initial(2)                   // sequence: [1, 2]
   * Lazy([1, 2, 3]).filter(Lazy.identity).initial() // sequence: [1, 2]
   */
  Sequence.prototype.initial = function initial(count) {
    return new InitialSequence(this, count);
  };

  function InitialSequence(parent, count) {
    this.parent = parent;
    this.count = typeof count === "number" ? count : 1;
  }

  InitialSequence.prototype = new Sequence();

  InitialSequence.prototype.each = function each(fn) {
    var index = this.parent.getIndex();
    return index.take(index.length() - this.count).each(fn);
  };

  /**
   * Creates a new sequence comprising the last N elements of this sequence, OR
   * (if N is `undefined`) simply returns the last element of this sequence.
   *
   * @public
   * @param {number=} count The number of items to take from the end of the
   *     sequence.
   * @returns {*} The new sequence (or the last element from this sequence
   *     if no count was given).
   *
   * @examples
   * Lazy([1, 2, 3]).last()                 // => 3
   * Lazy([1, 2, 3]).last(2)                // sequence: [2, 3]
   * Lazy([1, 2, 3]).filter(isEven).last(2) // sequence: [2]
   */
  Sequence.prototype.last = function last(count) {
    if (typeof count === "undefined") {
      return this.reverse().first();
    }
    return this.reverse().take(count).reverse();
  };

  /**
   * Returns the first element in this sequence with property names and values
   * matching those of the specified object.
   *
   * @public
   * @param {Object} properties The properties that should be found on some
   *     element in this sequence.
   * @returns {*} The found element, or `undefined` if none exists in this
   *     sequence.
   *
   * @examples
   * var words = ["foo", "bar"];
   *
   * Lazy(words).findWhere({ 0: "f" }); // => "foo"
   * Lazy(words).findWhere({ 0: "z" }); // => undefined
   */
  Sequence.prototype.findWhere = function findWhere(properties) {
    return this.where(properties).first();
  };

  /**
   * Creates a new sequence comprising all but the first N elements of this
   * sequence.
   *
   * @public
   * @aka skip, tail, rest
   * @param {number=} count The number of items to omit from the beginning of the
   *     sequence (defaults to 1).
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 3, 4]).rest()  // sequence: [2, 3, 4]
   * Lazy([1, 2, 3, 4]).rest(0) // sequence: [1, 2, 3, 4]
   * Lazy([1, 2, 3, 4]).rest(2) // sequence: [3, 4]
   * Lazy([1, 2, 3, 4]).rest(5) // sequence: []
   */
  Sequence.prototype.rest = function rest(count) {
    return new DropSequence(this, count);
  };

  Sequence.prototype.skip =
  Sequence.prototype.tail =
  Sequence.prototype.drop = function drop(count) {
    return this.rest(count);
  };

  /**
   * @constructor
   */
  function DropSequence(parent, count) {
    this.parent = parent;
    this.count  = typeof count === "number" ? count : 1;
  }

  DropSequence.prototype = new Sequence();

  DropSequence.prototype.each = function each(fn) {
    var count   = this.count,
        dropped = 0,
        i       = 0;

    return this.parent.each(function(e) {
      if (dropped++ < count) { return; }
      return fn(e, i++);
    });
  };

  /**
   * Creates a new sequence comprising the elements from this sequence *after*
   * those that satisfy some predicate. The sequence starts with the first
   * element that does not match the predicate.
   *
   * @public
   * @aka skipWhile
   * @param {Function} predicate
   * @returns {Sequence} The new sequence
   */
  Sequence.prototype.dropWhile = function dropWhile(predicate) {
    return new DropWhileSequence(this, predicate);
  };

  Sequence.prototype.skipWhile = function skipWhile(predicate) {
    return this.dropWhile(predicate);
  };

  /**
   * @constructor
   */
  function DropWhileSequence(parent, predicate) {
    this.parent    = parent;
    this.predicate = predicate;
  }

  DropWhileSequence.prototype = new Sequence();

  DropWhileSequence.prototype.each = function each(fn) {
    var predicate = this.predicate,
        done      = false;

    return this.parent.each(function(e) {
      if (!done) {
        if (predicate(e)) {
          return;
        }

        done = true;
      }

      return fn(e);
    });
  };

  /**
   * Creates a new sequence with the same elements as this one, but ordered
   * using the specified comparison function.
   *
   * This has essentially the same behavior as calling
   * [`Array#sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort),
   * but obviously instead of modifying the collection it returns a new
   * {@link Sequence} object.
   *
   * @public
   * @param {Function=} sortFn The function used to compare elements in the
   *     sequence. The function will be passed two elements and should return:
   *     - 1 if the first is greater
   *     - -1 if the second is greater
   *     - 0 if the two values are the same
   * @param {boolean} descending Whether or not the resulting sequence should be
   *     in descending order (defaults to `false`).
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([5, 10, 1]).sort()                // sequence: [1, 5, 10]
   * Lazy(['foo', 'bar']).sort()            // sequence: ['bar', 'foo']
   * Lazy(['b', 'c', 'a']).sort(null, true) // sequence: ['c', 'b', 'a']
   * Lazy([5, 10, 1]).sort(null, true)      // sequence: [10, 5, 1]
   *
   * // Sorting w/ custom comparison function
   * Lazy(['a', 'ab', 'aa', 'ba', 'b', 'abc']).sort(function compare(x, y) {
   *   if (x.length && (x.length !== y.length)) { return compare(x.length, y.length); }
   *   if (x === y) { return 0; }
   *   return x > y ? 1 : -1;
   * });
   * // => sequence: ['a', 'b', 'aa', 'ab', 'ba', 'abc']
   */
  Sequence.prototype.sort = function sort(sortFn, descending) {
    sortFn || (sortFn = compare);
    if (descending) { sortFn = reverseArguments(sortFn); }
    return new SortedSequence(this, sortFn);
  };

  /**
   * Creates a new sequence with the same elements as this one, but ordered by
   * the results of the given function.
   *
   * You can pass:
   *
   * - a *string*, to sort by the named property
   * - a function, to sort by the result of calling the function on each element
   *
   * @public
   * @param {Function} sortFn The function to call on the elements in this
   *     sequence, in order to sort them.
   * @param {boolean} descending Whether or not the resulting sequence should be
   *     in descending order (defaults to `false`).
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * function population(country) {
   *   return country.pop;
   * }
   *
   * function area(country) {
   *   return country.sqkm;
   * }
   *
   * var countries = [
   *   { name: "USA", pop: 320000000, sqkm: 9600000 },
   *   { name: "Brazil", pop: 194000000, sqkm: 8500000 },
   *   { name: "Nigeria", pop: 174000000, sqkm: 924000 },
   *   { name: "China", pop: 1350000000, sqkm: 9700000 },
   *   { name: "Russia", pop: 143000000, sqkm: 17000000 },
   *   { name: "Australia", pop: 23000000, sqkm: 7700000 }
   * ];
   *
   * Lazy(countries).sortBy(population).last(3).pluck('name') // sequence: ["Brazil", "USA", "China"]
   * Lazy(countries).sortBy(area).last(3).pluck('name')       // sequence: ["USA", "China", "Russia"]
   * Lazy(countries).sortBy(area, true).first(3).pluck('name') // sequence: ["Russia", "China", "USA"]
   *
   * @benchmarks
   * var randoms = Lazy.generate(Math.random).take(100).toArray();
   *
   * Lazy(randoms).sortBy(Lazy.identity).each(Lazy.noop) // lazy
   * _.each(_.sortBy(randoms, Lazy.identity), _.noop)    // lodash
   */
  Sequence.prototype.sortBy = function sortBy(sortFn, descending) {
    sortFn = createComparator(sortFn);
    if (descending) { sortFn = reverseArguments(sortFn); }
    return new SortedSequence(this, sortFn);
  };

  /**
   * @constructor
   */
  function SortedSequence(parent, sortFn) {
    this.parent = parent;
    this.sortFn = sortFn;
  }

  SortedSequence.prototype = new Sequence();

  SortedSequence.prototype.each = function each(fn) {
    var sortFn = this.sortFn,
        result = this.parent.toArray();

    result.sort(sortFn);

    return forEach(result, fn);
  };

  /**
   * @examples
   * var items = [{ a: 4 }, { a: 3 }, { a: 5 }];
   *
   * Lazy(items).sortBy('a').reverse();
   * // => sequence: [{ a: 5 }, { a: 4 }, { a: 3 }]
   *
   * Lazy(items).sortBy('a').reverse().reverse();
   * // => sequence: [{ a: 3 }, { a: 4 }, { a: 5 }]
   */
  SortedSequence.prototype.reverse = function reverse() {
    return new SortedSequence(this.parent, reverseArguments(this.sortFn));
  };

  /**
   * Creates a new {@link ObjectLikeSequence} comprising the elements in this
   * one, grouped together according to some key. The value associated with each
   * key in the resulting object-like sequence is an array containing all of
   * the elements in this sequence with that key.
   *
   * @public
   * @param {Function|string} keyFn The function to call on the elements in this
   *     sequence to obtain a key by which to group them, or a string representing
   *     a parameter to read from all the elements in this sequence.
   * @param {Function|string} valFn (Optional) The function to call on the elements
   *     in this sequence to assign to the value for each instance to appear in the
   *     group, or a string representing a parameter to read from all the elements
   *     in this sequence.
   * @returns {ObjectLikeSequence} The new sequence.
   *
   * @examples
   * function oddOrEven(x) {
   *   return x % 2 === 0 ? 'even' : 'odd';
   * }
   * function square(x) {
   *   return x*x;
   * }
   *
   * var numbers = [1, 2, 3, 4, 5];
   *
   * Lazy(numbers).groupBy(oddOrEven)                     // sequence: { odd: [1, 3, 5], even: [2, 4] }
   * Lazy(numbers).groupBy(oddOrEven).get("odd")          // => [1, 3, 5]
   * Lazy(numbers).groupBy(oddOrEven).get("foo")          // => undefined
   * Lazy(numbers).groupBy(oddOrEven, square).get("even") // => [4, 16]
   *
   * Lazy([
   *   { name: 'toString' },
   *   { name: 'toString' }
   * ]).groupBy('name');
   * // => sequence: {
   *   'toString': [
   *     { name: 'toString' },
   *     { name: 'toString' }
   *   ]
   * }
   */
  Sequence.prototype.groupBy = function groupBy(keyFn, valFn) {
    return new GroupedSequence(this, keyFn, valFn);
  };

  /**
   * @constructor
   */
  function GroupedSequence(parent, keyFn, valFn) {
    this.parent = parent;
    this.keyFn  = keyFn;
    this.valFn  = valFn;
  }

  // GroupedSequence must have its prototype set after ObjectLikeSequence has
  // been fully initialized.

  /**
   * Creates a new {@link ObjectLikeSequence} comprising the elements in this
   * one, indexed according to some key.
   *
   * @public
   * @param {Function|string} keyFn The function to call on the elements in this
   *     sequence to obtain a key by which to index them, or a string
   *     representing a property to read from all the elements in this sequence.
   * @param {Function|string} valFn (Optional) The function to call on the elements
   *     in this sequence to assign to the value of the indexed object, or a string
   *     representing a parameter to read from all the elements in this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * var people = [
   *   { name: 'Bob', age: 25 },
   *   { name: 'Fred', age: 34 }
   * ];
   *
   * var bob  = people[0],
   *     fred = people[1];
   *
   * Lazy(people).indexBy('name')        // sequence: { 'Bob': bob, 'Fred': fred }
   * Lazy(people).indexBy('name', 'age') // sequence: { 'Bob': 25, 'Fred': 34 }
   */
  Sequence.prototype.indexBy = function(keyFn, valFn) {
    return new IndexedSequence(this, keyFn, valFn);
  };

  /**
   * @constructor
   */
  function IndexedSequence(parent, keyFn, valFn) {
    this.parent = parent;
    this.keyFn  = keyFn;
    this.valFn  = valFn;
  }

  // IndexedSequence must have its prototype set after ObjectLikeSequence has
  // been fully initialized.

  /**
   * Creates a new {@link ObjectLikeSequence} containing the unique keys of all
   * the elements in this sequence, each paired with the number of elements
   * in this sequence having that key.
   *
   * @public
   * @param {Function|string} keyFn The function to call on the elements in this
   *     sequence to obtain a key by which to count them, or a string representing
   *     a parameter to read from all the elements in this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * function oddOrEven(x) {
   *   return x % 2 === 0 ? 'even' : 'odd';
   * }
   *
   * var numbers = [1, 2, 3, 4, 5];
   *
   * Lazy(numbers).countBy(oddOrEven)            // sequence: { odd: 3, even: 2 }
   * Lazy(numbers).countBy(oddOrEven).get("odd") // => 3
   * Lazy(numbers).countBy(oddOrEven).get("foo") // => undefined
   */
  Sequence.prototype.countBy = function countBy(keyFn) {
    return new CountedSequence(this, keyFn);
  };

  /**
   * @constructor
   */
  function CountedSequence(parent, keyFn) {
    this.parent = parent;
    this.keyFn  = keyFn;
  }

  // CountedSequence, like GroupedSequence, must have its prototype set after
  // ObjectLikeSequence has been fully initialized.

  /**
   * Creates a new sequence with every unique element from this one appearing
   * exactly once (i.e., with duplicates removed).
   *
   * @public
   * @aka unique
   * @param {Function} keyFn An optional function to produce the key for each
   *     object. This key is then tested for uniqueness as  opposed to the
   *     object reference.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 2, 3, 3, 3]).uniq() // sequence: [1, 2, 3]
   * Lazy([{ name: 'mike' }, 
   * 	{ name: 'sarah' }, 
   * 	{ name: 'mike' }
   * ]).uniq('name')
   * // sequence: [{ name: 'mike' }, { name: 'sarah' }]
   *
   * @benchmarks
   * function randomOf(array) {
   *   return function() {
   *     return array[Math.floor(Math.random() * array.length)];
   *   };
   * }
   *
   * var mostUnique = Lazy.generate(randomOf(_.range(100)), 100).toArray(),
   *     someUnique = Lazy.generate(randomOf(_.range(50)), 100).toArray(),
   *     mostDupes  = Lazy.generate(randomOf(_.range(5)), 100).toArray();
   *
   * Lazy(mostUnique).uniq().each(Lazy.noop) // lazy - mostly unique elements
   * Lazy(someUnique).uniq().each(Lazy.noop) // lazy - some unique elements
   * Lazy(mostDupes).uniq().each(Lazy.noop)  // lazy - mostly duplicate elements
   * _.each(_.uniq(mostUnique), _.noop)      // lodash - mostly unique elements
   * _.each(_.uniq(someUnique), _.noop)      // lodash - some unique elements
   * _.each(_.uniq(mostDupes), _.noop)       // lodash - mostly duplicate elements
   */
  Sequence.prototype.uniq = function uniq(keyFn) {
    return new UniqueSequence(this, keyFn);
  };

  Sequence.prototype.unique = function unique(keyFn) {
    return this.uniq(keyFn);
  };

  /**
   * @constructor
   */
  function UniqueSequence(parent, keyFn) {
    this.parent = parent;
    this.keyFn  = keyFn;
  }

  UniqueSequence.prototype = new Sequence();

  UniqueSequence.prototype.each = function each(fn) {
    var cache = new Set(),
        keyFn = this.keyFn,
        i     = 0;

    if (keyFn) {
      keyFn = createCallback(keyFn);
      return this.parent.each(function(e) {
        if (cache.add(keyFn(e))) {
          return fn(e, i++);
        }
      });

    } else {
      return this.parent.each(function(e) {
        if (cache.add(e)) {
          return fn(e, i++);
        }
      });
    }
  };

  /**
   * Creates a new sequence by combining the elements from this sequence with
   * corresponding elements from the specified array(s).
   *
   * @public
   * @param {...Array} var_args One or more arrays of elements to combine with
   *     those of this sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2]).zip([3, 4]) // sequence: [[1, 3], [2, 4]]
   *
   * @benchmarks
   * var smArrL = Lazy.range(10).toArray(),
   *     smArrR = Lazy.range(10, 20).toArray(),
   *     lgArrL = Lazy.range(100).toArray(),
   *     lgArrR = Lazy.range(100, 200).toArray();
   *
   * Lazy(smArrL).zip(smArrR).each(Lazy.noop) // lazy - zipping 10-element arrays
   * Lazy(lgArrL).zip(lgArrR).each(Lazy.noop) // lazy - zipping 100-element arrays
   * _.each(_.zip(smArrL, smArrR), _.noop)    // lodash - zipping 10-element arrays
   * _.each(_.zip(lgArrL, lgArrR), _.noop)    // lodash - zipping 100-element arrays
   */
  Sequence.prototype.zip = function zip(var_args) {
    if (arguments.length === 1) {
      return new SimpleZippedSequence(this, (/** @type {Array} */ var_args));
    } else {
      return new ZippedSequence(this, arraySlice.call(arguments, 0));
    }
  };

  /**
   * @constructor
   */
  function ZippedSequence(parent, arrays) {
    this.parent = parent;
    this.arrays = arrays;
  }

  ZippedSequence.prototype = new Sequence();

  ZippedSequence.prototype.each = function each(fn) {
    var arrays = this.arrays,
        i = 0;
    this.parent.each(function(e) {
      var group = [e];
      for (var j = 0; j < arrays.length; ++j) {
        if (arrays[j].length > i) {
          group.push(arrays[j][i]);
        }
      }
      return fn(group, i++);
    });
  };

  /**
   * Creates a new sequence with the same elements as this one, in a randomized
   * order.
   *
   * @public
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 3, 4, 5]).shuffle().value() // =~ [1, 2, 3, 4, 5]
   */
  Sequence.prototype.shuffle = function shuffle() {
    return new ShuffledSequence(this);
  };

  /**
   * @constructor
   */
  function ShuffledSequence(parent) {
    this.parent = parent;
  }

  ShuffledSequence.prototype = new Sequence();

  ShuffledSequence.prototype.each = function each(fn) {
    var shuffled = this.parent.toArray(),
        floor = Math.floor,
        random = Math.random,
        j = 0;

    for (var i = shuffled.length - 1; i > 0; --i) {
      swap(shuffled, i, floor(random() * (i + 1)));
      if (fn(shuffled[i], j++) === false) {
        return;
      }
    }
    fn(shuffled[0], j);
  };

  /**
   * Creates a new sequence with every element from this sequence, and with arrays
   * exploded so that a sequence of arrays (of arrays) becomes a flat sequence of
   * values.
   *
   * @public
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, [2, 3], [4, [5]]]).flatten() // sequence: [1, 2, 3, 4, 5]
   * Lazy([1, Lazy([2, 3])]).flatten()     // sequence: [1, 2, 3]
   */
  Sequence.prototype.flatten = function flatten() {
    return new FlattenedSequence(this);
  };

  /**
   * @constructor
   */
  function FlattenedSequence(parent) {
    this.parent = parent;
  }

  FlattenedSequence.prototype = new Sequence();

  FlattenedSequence.prototype.each = function each(fn) {
    var index = 0;

    return this.parent.each(function recurseVisitor(e) {
      if (e instanceof Array) {
        return forEach(e, recurseVisitor);
      }

      if (e instanceof Sequence) {
        return e.each(recurseVisitor);
      }

      return fn(e, index++);
    });
  };

  /**
   * Creates a new sequence with the same elements as this one, except for all
   * falsy values (`false`, `0`, `""`, `null`, and `undefined`).
   *
   * @public
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy(["foo", null, "bar", undefined]).compact() // sequence: ["foo", "bar"]
   */
  Sequence.prototype.compact = function compact() {
    return this.filter(function(e) { return !!e; });
  };

  /**
   * Creates a new sequence with all the elements of this sequence that are not
   * also among the specified arguments.
   *
   * @public
   * @aka difference
   * @param {...*} var_args The values, or array(s) of values, to be excluded from the
   *     resulting sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy([1, 2, 3, 4, 5]).without(2, 3)   // sequence: [1, 4, 5]
   * Lazy([1, 2, 3, 4, 5]).without([4, 5]) // sequence: [1, 2, 3]
   */
  Sequence.prototype.without = function without(var_args) {
    return new WithoutSequence(this, arraySlice.call(arguments, 0));
  };

  Sequence.prototype.difference = function difference(var_args) {
    return this.without.apply(this, arguments);
  };

  /**
   * @constructor
   */
  function WithoutSequence(parent, values) {
    this.parent = parent;
    this.values = values;
  }

  WithoutSequence.prototype = new Sequence();

  WithoutSequence.prototype.each = function each(fn) {
    var set = createSet(this.values),
        i = 0;
    return this.parent.each(function(e) {
      if (!set.contains(e)) {
        return fn(e, i++);
      }
    });
  };

  /**
   * Creates a new sequence with all the unique elements either in this sequence
   * or among the specified arguments.
   *
   * @public
   * @param {...*} var_args The values, or array(s) of values, to be additionally
   *     included in the resulting sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy(["foo", "bar"]).union([])             // sequence: ["foo", "bar"]
   * Lazy(["foo", "bar"]).union(["bar", "baz"]) // sequence: ["foo", "bar", "baz"]
   */
  Sequence.prototype.union = function union(var_args) {
    return this.concat(var_args).uniq();
  };

  /**
   * Creates a new sequence with all the elements of this sequence that also
   * appear among the specified arguments.
   *
   * @public
   * @param {...*} var_args The values, or array(s) of values, in which elements
   *     from this sequence must also be included to end up in the resulting sequence.
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * Lazy(["foo", "bar"]).intersection([])             // sequence: []
   * Lazy(["foo", "bar"]).intersection(["bar", "baz"]) // sequence: ["bar"]
   */
  Sequence.prototype.intersection = function intersection(var_args) {
    if (arguments.length === 1 && arguments[0] instanceof Array) {
      return new SimpleIntersectionSequence(this, (/** @type {Array} */ var_args));
    } else {
      return new IntersectionSequence(this, arraySlice.call(arguments, 0));
    }
  };

  /**
   * @constructor
   */
  function IntersectionSequence(parent, arrays) {
    this.parent = parent;
    this.arrays = arrays;
  }

  IntersectionSequence.prototype = new Sequence();

  IntersectionSequence.prototype.each = function each(fn) {
    var sets = Lazy(this.arrays).map(function(values) {
      return new UniqueMemoizer(Lazy(values).getIterator());
    });

    var setIterator = new UniqueMemoizer(sets.getIterator()),
        i = 0;

    return this.parent.each(function(e) {
      var includedInAll = true;
      setIterator.each(function(set) {
        if (!set.contains(e)) {
          includedInAll = false;
          return false;
        }
      });

      if (includedInAll) {
        return fn(e, i++);
      }
    });
  };

  /**
   * @constructor
   */
  function UniqueMemoizer(iterator) {
    this.iterator     = iterator;
    this.set          = new Set();
    this.memo         = [];
    this.currentValue = undefined;
  }

  UniqueMemoizer.prototype.current = function current() {
    return this.currentValue;
  };

  UniqueMemoizer.prototype.moveNext = function moveNext() {
    var iterator = this.iterator,
        set = this.set,
        memo = this.memo,
        current;

    while (iterator.moveNext()) {
      current = iterator.current();
      if (set.add(current)) {
        memo.push(current);
        this.currentValue = current;
        return true;
      }
    }
    return false;
  };

  UniqueMemoizer.prototype.each = function each(fn) {
    var memo = this.memo,
        length = memo.length,
        i = -1;

    while (++i < length) {
      if (fn(memo[i], i) === false) {
        return false;
      }
    }

    while (this.moveNext()) {
      if (fn(this.currentValue, i++) === false) {
        break;
      }
    }
  };

  UniqueMemoizer.prototype.contains = function contains(e) {
    if (this.set.contains(e)) {
      return true;
    }

    while (this.moveNext()) {
      if (this.currentValue === e) {
        return true;
      }
    }

    return false;
  };

  /**
   * Checks whether every element in this sequence satisfies a given predicate.
   *
   * @public
   * @aka all
   * @param {Function} predicate A function to call on (potentially) every element
   *     in this sequence.
   * @returns {boolean} True if `predicate` returns true for every element in the
   *     sequence (or the sequence is empty). False if `predicate` returns false
   *     for at least one element.
   *
   * @examples
   * var numbers = [1, 2, 3, 4, 5];
   *
   * var objects = [{ foo: true }, { foo: false, bar: true }];
   *
   * Lazy(numbers).every(isEven)     // => false
   * Lazy(numbers).every(isPositive) // => true
   * Lazy(objects).all('foo')        // => false
   * Lazy(objects).all('bar')        // => false
   */
  Sequence.prototype.every = function every(predicate) {
    predicate = createCallback(predicate);

    return this.each(function(e, i) {
      return !!predicate(e, i);
    });
  };

  Sequence.prototype.all = function all(predicate) {
    return this.every(predicate);
  };

  /**
   * Checks whether at least one element in this sequence satisfies a given
   * predicate (or, if no predicate is specified, whether the sequence contains at
   * least one element).
   *
   * @public
   * @aka any
   * @param {Function=} predicate A function to call on (potentially) every element
   *     in this sequence.
   * @returns {boolean} True if `predicate` returns true for at least one element
   *     in the sequence. False if `predicate` returns false for every element (or
   *     the sequence is empty).
   *
   * @examples
   * var numbers = [1, 2, 3, 4, 5];
   *
   * Lazy(numbers).some()           // => true
   * Lazy(numbers).some(isEven)     // => true
   * Lazy(numbers).some(isNegative) // => false
   * Lazy([]).some()                // => false
   */
  Sequence.prototype.some = function some(predicate) {
    predicate = createCallback(predicate, true);

    var success = false;
    this.each(function(e) {
      if (predicate(e)) {
        success = true;
        return false;
      }
    });
    return success;
  };

  Sequence.prototype.any = function any(predicate) {
    return this.some(predicate);
  };

  /**
   * Checks whether NO elements in this sequence satisfy the given predicate
   * (the opposite of {@link Sequence#all}, basically).
   *
   * @public
   * @param {Function=} predicate A function to call on (potentially) every element
   *     in this sequence.
   * @returns {boolean} True if `predicate` does not return true for any element
   *     in the sequence. False if `predicate` returns true for at least one
   *     element.
   *
   * @examples
   * var numbers = [1, 2, 3, 4, 5];
   *
   * Lazy(numbers).none()           // => false
   * Lazy(numbers).none(isEven)     // => false
   * Lazy(numbers).none(isNegative) // => true
   * Lazy([]).none(isEven)          // => true
   * Lazy([]).none(isNegative)      // => true
   * Lazy([]).none()                // => true
   */
  Sequence.prototype.none = function none(predicate) {
    return !this.any(predicate);
  };

  /**
   * Checks whether the sequence has no elements.
   *
   * @public
   * @returns {boolean} True if the sequence is empty, false if it contains at
   *     least one element.
   *
   * @examples
   * Lazy([]).isEmpty()        // => true
   * Lazy([1, 2, 3]).isEmpty() // => false
   */
  Sequence.prototype.isEmpty = function isEmpty() {
    return !this.any();
  };

  /**
   * Performs (at worst) a linear search from the head of this sequence,
   * returning the first index at which the specified value is found.
   *
   * @public
   * @param {*} value The element to search for in the sequence.
   * @returns {number} The index within this sequence where the given value is
   *     located, or -1 if the sequence doesn't contain the value.
   *
   * @examples
   * function reciprocal(x) { return 1 / x; }
   *
   * Lazy(["foo", "bar", "baz"]).indexOf("bar")   // => 1
   * Lazy([1, 2, 3]).indexOf(4)                   // => -1
   * Lazy([1, 2, 3]).map(reciprocal).indexOf(0.5) // => 1
   */
  Sequence.prototype.indexOf = function indexOf(value) {
    var foundIndex = -1;
    this.each(function(e, i) {
      if (e === value) {
        foundIndex = i;
        return false;
      }
    });
    return foundIndex;
  };

  /**
   * Performs (at worst) a linear search from the tail of this sequence,
   * returning the last index at which the specified value is found.
   *
   * @public
   * @param {*} value The element to search for in the sequence.
   * @returns {number} The last index within this sequence where the given value
   *     is located, or -1 if the sequence doesn't contain the value.
   *
   * @examples
   * Lazy(["a", "b", "c", "b", "a"]).lastIndexOf("b")    // => 3
   * Lazy([1, 2, 3]).lastIndexOf(0)                      // => -1
   * Lazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2) // 2
   */
  Sequence.prototype.lastIndexOf = function lastIndexOf(value) {
    var reversed = this.getIndex().reverse(),
        index    = reversed.indexOf(value);
    if (index !== -1) {
      index = reversed.length() - index - 1;
    }
    return index;
  };

  /**
   * Performs a binary search of this sequence, returning the lowest index where
   * the given value is either found, or where it belongs (if it is not already
   * in the sequence).
   *
   * This method assumes the sequence is in sorted order and will fail otherwise.
   *
   * @public
   * @param {*} value The element to search for in the sequence.
   * @returns {number} An index within this sequence where the given value is
   *     located, or where it belongs in sorted order.
   *
   * @examples
   * Lazy([1, 3, 6, 9]).sortedIndex(3)                    // => 1
   * Lazy([1, 3, 6, 9]).sortedIndex(7)                    // => 3
   * Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10) // => 0
   * Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12) // => 1
   */
  Sequence.prototype.sortedIndex = function sortedIndex(value) {
    var indexed = this.getIndex(),
        lower   = 0,
        upper   = indexed.length(),
        i;

    while (lower < upper) {
      i = (lower + upper) >>> 1;
      if (compare(indexed.get(i), value) === -1) {
        lower = i + 1;
      } else {
        upper = i;
      }
    }
    return lower;
  };

  /**
   * Checks whether the given value is in this sequence.
   *
   * @public
   * @param {*} value The element to search for in the sequence.
   * @returns {boolean} True if the sequence contains the value, false if not.
   *
   * @examples
   * var numbers = [5, 10, 15, 20];
   *
   * Lazy(numbers).contains(15) // => true
   * Lazy(numbers).contains(13) // => false
   */
  Sequence.prototype.contains = function contains(value) {
    return this.indexOf(value) !== -1;
  };

  /**
   * Aggregates a sequence into a single value according to some accumulator
   * function.
   *
   * For an asynchronous sequence, instead of immediately returning a result
   * (which it can't, obviously), this method returns an {@link AsyncHandle}
   * whose `onComplete` method can be called to supply a callback to handle the
   * final result once iteration has completed.
   *
   * @public
   * @aka inject, foldl
   * @param {Function} aggregator The function through which to pass every element
   *     in the sequence. For every element, the function will be passed the total
   *     aggregated result thus far and the element itself, and should return a
   *     new aggregated result.
   * @param {*=} memo The starting value to use for the aggregated result
   *     (defaults to the first element in the sequence).
   * @returns {*} The result of the aggregation, or, for asynchronous sequences,
   *     an {@link AsyncHandle} whose `onComplete` method accepts a callback to
   *     handle the final result.
   *
   * @examples
   * function multiply(x, y) { return x * y; }
   *
   * var numbers = [1, 2, 3, 4];
   *
   * Lazy(numbers).reduce(multiply)    // => 24
   * Lazy(numbers).reduce(multiply, 5) // => 120
   */
  Sequence.prototype.reduce = function reduce(aggregator, memo) {
    if (arguments.length < 2) {
      return this.tail().reduce(aggregator, this.head());
    }

    var eachResult = this.each(function(e, i) {
      memo = aggregator(memo, e, i);
    });

    // TODO: Think of a way more efficient solution to this problem.
    if (eachResult instanceof AsyncHandle) {
      return eachResult.then(function() { return memo; });
    }

    return memo;
  };

  Sequence.prototype.inject =
  Sequence.prototype.foldl = function foldl(aggregator, memo) {
    return this.reduce(aggregator, memo);
  };

  /**
   * Aggregates a sequence, from the tail, into a single value according to some
   * accumulator function.
   *
   * @public
   * @aka foldr
   * @param {Function} aggregator The function through which to pass every element
   *     in the sequence. For every element, the function will be passed the total
   *     aggregated result thus far and the element itself, and should return a
   *     new aggregated result.
   * @param {*} memo The starting value to use for the aggregated result.
   * @returns {*} The result of the aggregation.
   *
   * @examples
   * function append(s1, s2) {
   *   return s1 + s2;
   * }
   *
   * function isVowel(str) {
   *   return "aeiou".indexOf(str) !== -1;
   * }
   *
   * Lazy("abcde").reduceRight(append)                 // => "edcba"
   * Lazy("abcde").filter(isVowel).reduceRight(append) // => "ea"
   */
  Sequence.prototype.reduceRight = function reduceRight(aggregator, memo) {
    if (arguments.length < 2) {
      return this.initial(1).reduceRight(aggregator, this.last());
    }

    // This bothers me... but frankly, calling reverse().reduce() is potentially
    // going to eagerly evaluate the sequence anyway; so it's really not an issue.
    var indexed = this.getIndex(),
        i = indexed.length() - 1;
    return indexed.reverse().reduce(function(m, e) {
      return aggregator(m, e, i--);
    }, memo);
  };

  Sequence.prototype.foldr = function foldr(aggregator, memo) {
    return this.reduceRight(aggregator, memo);
  };

  /**
   * Groups this sequence into consecutive (overlapping) segments of a specified
   * length. If the underlying sequence has fewer elements than the specfied
   * length, then this sequence will be empty.
   *
   * @public
   * @param {number} length The length of each consecutive segment.
   * @returns {Sequence} The resulting sequence of consecutive segments.
   *
   * @examples
   * Lazy([]).consecutive(2)        // => sequence: []
   * Lazy([1]).consecutive(2)       // => sequence: []
   * Lazy([1, 2]).consecutive(2)    // => sequence: [[1, 2]]
   * Lazy([1, 2, 3]).consecutive(2) // => sequence: [[1, 2], [2, 3]]
   * Lazy([1, 2, 3]).consecutive(0) // => sequence: [[]]
   * Lazy([1, 2, 3]).consecutive(1) // => sequence: [[1], [2], [3]]
   */
  Sequence.prototype.consecutive = function consecutive(count) {
    var queue    = new Queue(count);
    var segments = this.map(function(element) {
      if (queue.add(element).count === count) {
        return queue.toArray();
      }
    });
    return segments.compact();
  };

  /**
   * Breaks this sequence into chunks (arrays) of a specified length.
   *
   * @public
   * @param {number} size The size of each chunk.
   * @returns {Sequence} The resulting sequence of chunks.
   *
   * @examples
   * Lazy([]).chunk(2)        // sequence: []
   * Lazy([1, 2, 3]).chunk(2) // sequence: [[1, 2], [3]]
   * Lazy([1, 2, 3]).chunk(1) // sequence: [[1], [2], [3]]
   * Lazy([1, 2, 3]).chunk(4) // sequence: [[1, 2, 3]]
   * Lazy([1, 2, 3]).chunk(0) // throws
   */
  Sequence.prototype.chunk = function chunk(size) {
    if (size < 1) {
      throw new Error("You must specify a positive chunk size.");
    }

    return new ChunkedSequence(this, size);
  };

  /**
   * @constructor
   */
  function ChunkedSequence(parent, size) {
    this.parent    = parent;
    this.chunkSize = size;
  }

  ChunkedSequence.prototype = new Sequence();

  ChunkedSequence.prototype.getIterator = function getIterator() {
    return new ChunkedIterator(this.parent, this.chunkSize);
  };

  /**
   * @constructor
   */
  function ChunkedIterator(sequence, size) {
    this.iterator = sequence.getIterator();
    this.size     = size;
  }

  ChunkedIterator.prototype.current = function current() {
    return this.currentChunk;
  };

  ChunkedIterator.prototype.moveNext = function moveNext() {
    var iterator  = this.iterator,
        chunkSize = this.size,
        chunk     = [];

    while (chunk.length < chunkSize && iterator.moveNext()) {
      chunk.push(iterator.current());
    }

    if (chunk.length === 0) {
      return false;
    }

    this.currentChunk = chunk;
    return true;
  };

  /**
   * Passes each element in the sequence to the specified callback during
   * iteration. This is like {@link Sequence#each}, except that it can be
   * inserted anywhere in the middle of a chain of methods to "intercept" the
   * values in the sequence at that point.
   *
   * @public
   * @param {Function} callback A function to call on every element in the
   *     sequence during iteration. The return value of this function does not
   *     matter.
   * @returns {Sequence} A sequence comprising the same elements as this one.
   *
   * @examples
   * Lazy([1, 2, 3]).tap(fn).each(Lazy.noop); // calls fn 3 times
   */
  Sequence.prototype.tap = function tap(callback) {
    return new TappedSequence(this, callback);
  };

  /**
   * @constructor
   */
  function TappedSequence(parent, callback) {
    this.parent = parent;
    this.callback = callback;
  }

  TappedSequence.prototype = new Sequence();

  TappedSequence.prototype.each = function each(fn) {
    var callback = this.callback;
    return this.parent.each(function(e, i) {
      callback(e, i);
      return fn(e, i);
    });
  };

  /**
   * Seaches for the first element in the sequence satisfying a given predicate.
   *
   * @public
   * @aka detect
   * @param {Function} predicate A function to call on (potentially) every element
   *     in the sequence.
   * @returns {*} The first element in the sequence for which `predicate` returns
   *     `true`, or `undefined` if no such element is found.
   *
   * @examples
   * function divisibleBy3(x) {
   *   return x % 3 === 0;
   * }
   *
   * var numbers = [5, 6, 7, 8, 9, 10];
   *
   * Lazy(numbers).find(divisibleBy3) // => 6
   * Lazy(numbers).find(isNegative)   // => undefined
   */
  Sequence.prototype.find = function find(predicate) {
    return this.filter(predicate).first();
  };

  Sequence.prototype.detect = function detect(predicate) {
    return this.find(predicate);
  };

  /**
   * Gets the minimum value in the sequence.
   *
   * @public
   * @param {Function=} valueFn The function by which the value for comparison is
   *     calculated for each element in the sequence.
   * @returns {*} The element with the lowest value in the sequence, or
   *     `Infinity` if the sequence is empty.
   *
   * @examples
   * function negate(x) { return x * -1; }
   *
   * Lazy([]).min()                       // => Infinity
   * Lazy([6, 18, 2, 49, 34]).min()       // => 2
   * Lazy([6, 18, 2, 49, 34]).min(negate) // => 49
   */
  Sequence.prototype.min = function min(valueFn) {
    if (typeof valueFn !== "undefined") {
      return this.minBy(valueFn);
    }

    return this.reduce(function(x, y) { return y < x ? y : x; }, Infinity);
  };

  Sequence.prototype.minBy = function minBy(valueFn) {
    valueFn = createCallback(valueFn);
    return this.reduce(function(x, y) { return valueFn(y) < valueFn(x) ? y : x; });
  };

  /**
   * Gets the maximum value in the sequence.
   *
   * @public
   * @param {Function=} valueFn The function by which the value for comparison is
   *     calculated for each element in the sequence.
   * @returns {*} The element with the highest value in the sequence, or
   *     `-Infinity` if the sequence is empty.
   *
   * @examples
   * function reverseDigits(x) {
   *   return Number(String(x).split('').reverse().join(''));
   * }
   *
   * Lazy([]).max()                              // => -Infinity
   * Lazy([6, 18, 2, 48, 29]).max()              // => 48
   * Lazy([6, 18, 2, 48, 29]).max(reverseDigits) // => 29
   */
  Sequence.prototype.max = function max(valueFn) {
    if (typeof valueFn !== "undefined") {
      return this.maxBy(valueFn);
    }

    return this.reduce(function(x, y) { return y > x ? y : x; }, -Infinity);
  };

  Sequence.prototype.maxBy = function maxBy(valueFn) {
    valueFn = createCallback(valueFn);
    return this.reduce(function(x, y) { return valueFn(y) > valueFn(x) ? y : x; });
  };

  /**
   * Gets the sum of the values in the sequence.
   *
   * @public
   * @param {Function=} valueFn The function used to select the values that will
   *     be summed up.
   * @returns {*} The sum.
   *
   * @examples
   * Lazy([]).sum()                     // => 0
   * Lazy([1, 2, 3, 4]).sum()           // => 10
   * Lazy([1.2, 3.4]).sum(Math.floor)   // => 4
   * Lazy(['foo', 'bar']).sum('length') // => 6
   */
  Sequence.prototype.sum = function sum(valueFn) {
    if (typeof valueFn !== "undefined") {
      return this.sumBy(valueFn);
    }

    return this.reduce(function(x, y) { return x + y; }, 0);
  };

  Sequence.prototype.sumBy = function sumBy(valueFn) {
    valueFn = createCallback(valueFn);
    return this.reduce(function(x, y) { return x + valueFn(y); }, 0);
  };

  /**
   * Creates a string from joining together all of the elements in this sequence,
   * separated by the given delimiter.
   *
   * @public
   * @aka toString
   * @param {string=} delimiter The separator to insert between every element from
   *     this sequence in the resulting string (defaults to `","`).
   * @returns {string} The delimited string.
   *
   * @examples
   * Lazy([6, 29, 1984]).join("/")  // => "6/29/1984"
   * Lazy(["a", "b", "c"]).join()   // => "a,b,c"
   * Lazy(["a", "b", "c"]).join("") // => "abc"
   * Lazy([1, 2, 3]).join()         // => "1,2,3"
   * Lazy([1, 2, 3]).join("")       // => "123"
   * Lazy(["", "", ""]).join(",")   // => ",,"
   */
  Sequence.prototype.join = function join(delimiter) {
    delimiter = typeof delimiter === "string" ? delimiter : ",";

    return this.reduce(function(str, e, i) {
      if (i > 0) {
        str += delimiter;
      }
      return str + e;
    }, "");
  };

  Sequence.prototype.toString = function toString(delimiter) {
    return this.join(delimiter);
  };

  /**
   * Creates a sequence, with the same elements as this one, that will be iterated
   * over asynchronously when calling `each`.
   *
   * @public
   * @param {number=} interval The approximate period, in milliseconds, that
   *     should elapse between each element in the resulting sequence. Omitting
   *     this argument will result in the fastest possible asynchronous iteration.
   * @returns {AsyncSequence} The new asynchronous sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).async(100).each(fn) // calls fn 3 times asynchronously
   */
  Sequence.prototype.async = function async(interval) {
    return new AsyncSequence(this, interval);
  };

  /**
   * @constructor
   */
  function SimpleIntersectionSequence(parent, array) {
    this.parent = parent;
    this.array  = array;
    this.each   = getEachForIntersection(array);
  }

  SimpleIntersectionSequence.prototype = new Sequence();

  SimpleIntersectionSequence.prototype.eachMemoizerCache = function eachMemoizerCache(fn) {
    var iterator = new UniqueMemoizer(Lazy(this.array).getIterator()),
        i = 0;

    return this.parent.each(function(e) {
      if (iterator.contains(e)) {
        return fn(e, i++);
      }
    });
  };

  SimpleIntersectionSequence.prototype.eachArrayCache = function eachArrayCache(fn) {
    var array = this.array,
        find  = arrayContains,
        i = 0;

    return this.parent.each(function(e) {
      if (find(array, e)) {
        return fn(e, i++);
      }
    });
  };

  function getEachForIntersection(source) {
    if (source.length < 40) {
      return SimpleIntersectionSequence.prototype.eachArrayCache;
    } else {
      return SimpleIntersectionSequence.prototype.eachMemoizerCache;
    }
  }

  /**
   * An optimized version of {@link ZippedSequence}, when zipping a sequence with
   * only one array.
   *
   * @param {Sequence} parent The underlying sequence.
   * @param {Array} array The array with which to zip the sequence.
   * @constructor
   */
  function SimpleZippedSequence(parent, array) {
    this.parent = parent;
    this.array  = array;
  }

  SimpleZippedSequence.prototype = new Sequence();

  SimpleZippedSequence.prototype.each = function each(fn) {
    var array = this.array;
    return this.parent.each(function(e, i) {
      return fn([e, array[i]], i);
    });
  };

  /**
   * An `ArrayLikeSequence` is a {@link Sequence} that provides random access to
   * its elements. This extends the API for iterating with the additional methods
   * {@link #get} and {@link #length}, allowing a sequence to act as a "view" into
   * a collection or other indexed data source.
   *
   * The initial sequence created by wrapping an array with `Lazy(array)` is an
   * `ArrayLikeSequence`.
   *
   * All methods of `ArrayLikeSequence` that conceptually should return
   * something like a array (with indexed access) return another
   * `ArrayLikeSequence`, for example:
   *
   * - {@link Sequence#map}
   * - {@link ArrayLikeSequence#slice}
   * - {@link Sequence#take} and {@link Sequence#drop}
   * - {@link Sequence#reverse}
   *
   * The above is not an exhaustive list. There are also certain other cases
   * where it might be possible to return an `ArrayLikeSequence` (e.g., calling
   * {@link Sequence#concat} with a single array argument), but this is not
   * guaranteed by the API.
   *
   * Note that in many cases, it is not possible to provide indexed access
   * without first performing at least a partial iteration of the underlying
   * sequence. In these cases an `ArrayLikeSequence` will not be returned:
   *
   * - {@link Sequence#filter}
   * - {@link Sequence#uniq}
   * - {@link Sequence#union}
   * - {@link Sequence#intersect}
   *
   * etc. The above methods only return ordinary {@link Sequence} objects.
   *
   * Defining custom array-like sequences
   * ------------------------------------
   *
   * Creating a custom `ArrayLikeSequence` is essentially the same as creating a
   * custom {@link Sequence}. You just have a couple more methods you need to
   * implement: `get` and (optionally) `length`.
   *
   * Here's an example. Let's define a sequence type called `OffsetSequence` that
   * offsets each of its parent's elements by a set distance, and circles back to
   * the beginning after reaching the end. **Remember**: the initialization
   * function you pass to {@link #define} should always accept a `parent` as its
   * first parameter.
   *
   *     ArrayLikeSequence.define("offset", {
   *       init: function(parent, offset) {
   *         this.offset = offset;
   *       },
   *
   *       get: function(i) {
   *         return this.parent.get((i + this.offset) % this.parent.length());
   *       }
   *     });
   *
   * It's worth noting a couple of things here.
   *
   * First, Lazy's default implementation of `length` simply returns the parent's
   * length. In this case, since an `OffsetSequence` will always have the same
   * number of elements as its parent, that implementation is fine; so we don't
   * need to override it.
   *
   * Second, the default implementation of `each` uses `get` and `length` to
   * essentially create a `for` loop, which is fine here. If you want to implement
   * `each` your own way, you can do that; but in most cases (as here), you can
   * probably just stick with the default.
   *
   * So we're already done, after only implementing `get`! Pretty easy, huh?
   *
   * Now the `offset` method will be chainable from any `ArrayLikeSequence`. So
   * for example:
   *
   *     Lazy([1, 2, 3]).map(mapFn).offset(3);
   *
   * ...will work, but:
   *
   *     Lazy([1, 2, 3]).filter(mapFn).offset(3);
   *
   * ...will not (because `filter` does not return an `ArrayLikeSequence`).
   *
   * (Also, as with the example provided for defining custom {@link Sequence}
   * types, this example really could have been implemented using a function
   * already available as part of Lazy.js: in this case, {@link Sequence#map}.)
   *
   * @public
   * @constructor
   *
   * @examples
   * Lazy([1, 2, 3])                    // instanceof Lazy.ArrayLikeSequence
   * Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence
   * Lazy([1, 2, 3]).take(2)            // instanceof Lazy.ArrayLikeSequence
   * Lazy([1, 2, 3]).drop(2)            // instanceof Lazy.ArrayLikeSequence
   * Lazy([1, 2, 3]).reverse()          // instanceof Lazy.ArrayLikeSequence
   * Lazy([1, 2, 3]).slice(1, 2)        // instanceof Lazy.ArrayLikeSequence
   */
  function ArrayLikeSequence() {}

  ArrayLikeSequence.prototype = new Sequence();

  /**
   * Create a new constructor function for a type inheriting from
   * `ArrayLikeSequence`.
   *
   * @public
   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be
   *     used for constructing the new sequence. The method will be attached to
   *     the `ArrayLikeSequence` prototype so that it can be chained with any other
   *     methods that return array-like sequences.
   * @param {Object} overrides An object containing function overrides for this
   *     new sequence type. **Must** include `get`. *May* include `init`,
   *     `length`, `getIterator`, and `each`. For each function, `this` will be
   *     the new sequence and `this.parent` will be the source sequence.
   * @returns {Function} A constructor for a new type inheriting from
   *     `ArrayLikeSequence`.
   *
   * @examples
   * Lazy.ArrayLikeSequence.define("offset", {
   *   init: function(offset) {
   *     this.offset = offset;
   *   },
   *
   *   get: function(i) {
   *     return this.parent.get((i + this.offset) % this.parent.length());
   *   }
   * });
   *
   * Lazy([1, 2, 3]).offset(1) // sequence: [2, 3, 1]
   */
  ArrayLikeSequence.define = function define(methodName, overrides) {
    if (!overrides || typeof overrides.get !== 'function') {
      throw new Error("A custom array-like sequence must implement *at least* get!");
    }

    return defineSequenceType(ArrayLikeSequence, methodName, overrides);
  };

  /**
   * Returns the element at the specified index.
   *
   * @public
   * @param {number} i The index to access.
   * @returns {*} The element.
   *
   * @examples
   * function increment(x) { return x + 1; }
   *
   * Lazy([1, 2, 3]).get(1)                // => 2
   * Lazy([1, 2, 3]).get(-1)               // => undefined
   * Lazy([1, 2, 3]).map(increment).get(1) // => 3
   */
  ArrayLikeSequence.prototype.get = function get(i) {
    return this.parent.get(i);
  };

  /**
   * Returns the length of the sequence.
   *
   * @public
   * @returns {number} The length.
   *
   * @examples
   * function increment(x) { return x + 1; }
   *
   * Lazy([]).length()                       // => 0
   * Lazy([1, 2, 3]).length()                // => 3
   * Lazy([1, 2, 3]).map(increment).length() // => 3
   */
  ArrayLikeSequence.prototype.length = function length() {
    return this.parent.length();
  };

  /**
   * Returns the current sequence (since it is already indexed).
   */
  ArrayLikeSequence.prototype.getIndex = function getIndex() {
    return this;
  };

  /**
   * An optimized version of {@link Sequence#getIterator}.
   */
  ArrayLikeSequence.prototype.getIterator = function getIterator() {
    return new IndexedIterator(this);
  };

  /**
   * An optimized version of {@link Iterator} meant to work with already-indexed
   * sequences.
   *
   * @param {ArrayLikeSequence} sequence The sequence to iterate over.
   * @constructor
   */
  function IndexedIterator(sequence) {
    this.sequence = sequence;
    this.index    = -1;
  }

  IndexedIterator.prototype.current = function current() {
    return this.sequence.get(this.index);
  };

  IndexedIterator.prototype.moveNext = function moveNext() {
    if (this.index >= this.sequence.length() - 1) {
      return false;
    }

    ++this.index;
    return true;
  };

  /**
   * An optimized version of {@link Sequence#each}.
   */
  ArrayLikeSequence.prototype.each = function each(fn) {
    var length = this.length(),
        i = -1;

    while (++i < length) {
      if (fn(this.get(i), i) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * Returns a new sequence with the same elements as this one, minus the last
   * element.
   *
   * @public
   * @returns {ArrayLikeSequence} The new array-like sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).pop() // sequence: [1, 2]
   * Lazy([]).pop()        // sequence: []
   */
  ArrayLikeSequence.prototype.pop = function pop() {
    return this.initial();
  };

  /**
   * Returns a new sequence with the same elements as this one, minus the first
   * element.
   *
   * @public
   * @returns {ArrayLikeSequence} The new array-like sequence.
   *
   * @examples
   * Lazy([1, 2, 3]).shift() // sequence: [2, 3]
   * Lazy([]).shift()        // sequence: []
   */
  ArrayLikeSequence.prototype.shift = function shift() {
    return this.drop();
  };

  /**
   * Returns a new sequence comprising the portion of this sequence starting
   * from the specified starting index and continuing until the specified ending
   * index or to the end of the sequence.
   *
   * @public
   * @param {number} begin The index at which the new sequence should start.
   * @param {number=} end The index at which the new sequence should end.
   * @returns {ArrayLikeSequence} The new array-like sequence.
   *
   * @examples
   * Lazy([1, 2, 3, 4, 5]).slice(0)     // sequence: [1, 2, 3, 4, 5]
   * Lazy([1, 2, 3, 4, 5]).slice(2)     // sequence: [3, 4, 5]
   * Lazy([1, 2, 3, 4, 5]).slice(2, 4)  // sequence: [3, 4]
   * Lazy([1, 2, 3, 4, 5]).slice(-1)    // sequence: [5]
   * Lazy([1, 2, 3, 4, 5]).slice(1, -1) // sequence: [2, 3, 4]
   * Lazy([1, 2, 3, 4, 5]).slice(0, 10) // sequence: [1, 2, 3, 4, 5]
   */
  ArrayLikeSequence.prototype.slice = function slice(begin, end) {
    var length = this.length();

    if (begin < 0) {
      begin = length + begin;
    }

    var result = this.drop(begin);

    if (typeof end === "number") {
      if (end < 0) {
        end = length + end;
      }
      result = result.take(end - begin);
    }

    return result;
  };

  /**
   * An optimized version of {@link Sequence#map}, which creates an
   * {@link ArrayLikeSequence} so that the result still provides random access.
   *
   * @public
   *
   * @examples
   * Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence
   */
  ArrayLikeSequence.prototype.map = function map(mapFn) {
    return new IndexedMappedSequence(this, createCallback(mapFn));
  };

  /**
   * @constructor
   */
  function IndexedMappedSequence(parent, mapFn) {
    this.parent = parent;
    this.mapFn  = mapFn;
  }

  IndexedMappedSequence.prototype = new ArrayLikeSequence();

  IndexedMappedSequence.prototype.get = function get(i) {
    if (i < 0 || i >= this.parent.length()) {
      return undefined;
    }

    return this.mapFn(this.parent.get(i), i);
  };

  /**
   * An optimized version of {@link Sequence#filter}.
   */
  ArrayLikeSequence.prototype.filter = function filter(filterFn) {
    return new IndexedFilteredSequence(this, createCallback(filterFn));
  };

  /**
   * @constructor
   */
  function IndexedFilteredSequence(parent, filterFn) {
    this.parent   = parent;
    this.filterFn = filterFn;
  }

  IndexedFilteredSequence.prototype = new FilteredSequence();

  IndexedFilteredSequence.prototype.each = function each(fn) {
    var parent = this.parent,
        filterFn = this.filterFn,
        length = this.parent.length(),
        i = -1,
        j = 0,
        e;

    while (++i < length) {
      e = parent.get(i);
      if (filterFn(e, i) && fn(e, j++) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * An optimized version of {@link Sequence#reverse}, which creates an
   * {@link ArrayLikeSequence} so that the result still provides random access.
   *
   * @public
   *
   * @examples
   * Lazy([1, 2, 3]).reverse() // instanceof Lazy.ArrayLikeSequence
   */
  ArrayLikeSequence.prototype.reverse = function reverse() {
    return new IndexedReversedSequence(this);
  };

  /**
   * @constructor
   */
  function IndexedReversedSequence(parent) {
    this.parent = parent;
  }

  IndexedReversedSequence.prototype = new ArrayLikeSequence();

  IndexedReversedSequence.prototype.get = function get(i) {
    return this.parent.get(this.length() - i - 1);
  };

  /**
   * An optimized version of {@link Sequence#first}, which creates an
   * {@link ArrayLikeSequence} so that the result still provides random access.
   *
   * @public
   *
   * @examples
   * Lazy([1, 2, 3]).first(2) // instanceof Lazy.ArrayLikeSequence
   */
  ArrayLikeSequence.prototype.first = function first(count) {
    if (typeof count === "undefined") {
      return this.get(0);
    }

    return new IndexedTakeSequence(this, count);
  };

  /**
   * @constructor
   */
  function IndexedTakeSequence(parent, count) {
    this.parent = parent;
    this.count  = count;
  }

  IndexedTakeSequence.prototype = new ArrayLikeSequence();

  IndexedTakeSequence.prototype.length = function length() {
    var parentLength = this.parent.length();
    return this.count <= parentLength ? this.count : parentLength;
  };

  /**
   * An optimized version of {@link Sequence#rest}, which creates an
   * {@link ArrayLikeSequence} so that the result still provides random access.
   *
   * @public
   *
   * @examples
   * Lazy([1, 2, 3]).rest() // instanceof Lazy.ArrayLikeSequence
   */
  ArrayLikeSequence.prototype.rest = function rest(count) {
    return new IndexedDropSequence(this, count);
  };

  /**
   * @constructor
   */
  function IndexedDropSequence(parent, count) {
    this.parent = parent;
    this.count  = typeof count === "number" ? count : 1;
  }

  IndexedDropSequence.prototype = new ArrayLikeSequence();

  IndexedDropSequence.prototype.get = function get(i) {
    return this.parent.get(this.count + i);
  };

  IndexedDropSequence.prototype.length = function length() {
    var parentLength = this.parent.length();
    return this.count <= parentLength ? parentLength - this.count : 0;
  };

  /**
   * An optimized version of {@link Sequence#concat} that returns another
   * {@link ArrayLikeSequence} *if* the argument is an array.
   *
   * @public
   * @param {...*} var_args
   *
   * @examples
   * Lazy([1, 2]).concat([3, 4]) // instanceof Lazy.ArrayLikeSequence
   * Lazy([1, 2]).concat([3, 4]) // sequence: [1, 2, 3, 4]
   */
  ArrayLikeSequence.prototype.concat = function concat(var_args) {
    if (arguments.length === 1 && arguments[0] instanceof Array) {
      return new IndexedConcatenatedSequence(this, (/** @type {Array} */ var_args));
    } else {
      return Sequence.prototype.concat.apply(this, arguments);
    }
  };

  /**
   * @constructor
   */
  function IndexedConcatenatedSequence(parent, other) {
    this.parent = parent;
    this.other  = other;
  }

  IndexedConcatenatedSequence.prototype = new ArrayLikeSequence();

  IndexedConcatenatedSequence.prototype.get = function get(i) {
    var parentLength = this.parent.length();
    if (i < parentLength) {
      return this.parent.get(i);
    } else {
      return this.other[i - parentLength];
    }
  };

  IndexedConcatenatedSequence.prototype.length = function length() {
    return this.parent.length() + this.other.length;
  };

  /**
   * An optimized version of {@link Sequence#uniq}.
   */
  ArrayLikeSequence.prototype.uniq = function uniq(keyFn) {
    return new IndexedUniqueSequence(this, createCallback(keyFn));
  };

  /**
   * @param {ArrayLikeSequence} parent
   * @constructor
   */
  function IndexedUniqueSequence(parent, keyFn) {
    this.parent = parent;
    this.each   = getEachForParent(parent);
    this.keyFn  = keyFn;
  }

  IndexedUniqueSequence.prototype = new Sequence();

  IndexedUniqueSequence.prototype.eachArrayCache = function eachArrayCache(fn) {
    // Basically the same implementation as w/ the set, but using an array because
    // it's cheaper for smaller sequences.
    var parent = this.parent,
        keyFn  = this.keyFn,
        length = parent.length(),
        cache  = [],
        find   = arrayContains,
        key, value,
        i = -1,
        j = 0;

    while (++i < length) {
      value = parent.get(i);
      key = keyFn(value);
      if (!find(cache, key)) {
        cache.push(key);
        if (fn(value, j++) === false) {
          return false;
        }
      }
    }
  };

  IndexedUniqueSequence.prototype.eachSetCache = UniqueSequence.prototype.each;

  function getEachForParent(parent) {
    if (parent.length() < 100) {
      return IndexedUniqueSequence.prototype.eachArrayCache;
    } else {
      return UniqueSequence.prototype.each;
    }
  }

  // Now that we've fully initialized the ArrayLikeSequence prototype, we can
  // set the prototype for MemoizedSequence.

  MemoizedSequence.prototype = new ArrayLikeSequence();

  MemoizedSequence.prototype.cache = function cache() {
    return this.cachedResult || (this.cachedResult = this.parent.toArray());
  };

  MemoizedSequence.prototype.get = function get(i) {
    return this.cache()[i];
  };

  MemoizedSequence.prototype.length = function length() {
    return this.cache().length;
  };

  MemoizedSequence.prototype.slice = function slice(begin, end) {
    return this.cache().slice(begin, end);
  };

  MemoizedSequence.prototype.toArray = function toArray() {
    return this.cache().slice(0);
  };

  /**
   * ArrayWrapper is the most basic {@link Sequence}. It directly wraps an array
   * and implements the same methods as {@link ArrayLikeSequence}, but more
   * efficiently.
   *
   * @constructor
   */
  function ArrayWrapper(source) {
    this.source = source;
  }

  ArrayWrapper.prototype = new ArrayLikeSequence();

  ArrayWrapper.prototype.root = function root() {
    return this;
  };

  ArrayWrapper.prototype.isAsync = function isAsync() {
    return false;
  };

  /**
   * Returns the element at the specified index in the source array.
   *
   * @param {number} i The index to access.
   * @returns {*} The element.
   */
  ArrayWrapper.prototype.get = function get(i) {
    return this.source[i];
  };

  /**
   * Returns the length of the source array.
   *
   * @returns {number} The length.
   */
  ArrayWrapper.prototype.length = function length() {
    return this.source.length;
  };

  /**
   * An optimized version of {@link Sequence#each}.
   */
  ArrayWrapper.prototype.each = function each(fn) {
    return forEach(this.source, fn);
  };

  /**
   * An optimized version of {@link Sequence#map}.
   */
  ArrayWrapper.prototype.map = function map(mapFn) {
    return new MappedArrayWrapper(this, createCallback(mapFn));
  };

  /**
   * An optimized version of {@link Sequence#filter}.
   */
  ArrayWrapper.prototype.filter = function filter(filterFn) {
    return new FilteredArrayWrapper(this, createCallback(filterFn));
  };

  /**
   * An optimized version of {@link Sequence#uniq}.
   */
  ArrayWrapper.prototype.uniq = function uniq(keyFn) {
    return new UniqueArrayWrapper(this, keyFn);
  };

  /**
   * An optimized version of {@link ArrayLikeSequence#concat}.
   *
   * @param {...*} var_args
   */
  ArrayWrapper.prototype.concat = function concat(var_args) {
    if (arguments.length === 1 && arguments[0] instanceof Array) {
      return new ConcatArrayWrapper(this, (/** @type {Array} */ var_args));
    } else {
      return ArrayLikeSequence.prototype.concat.apply(this, arguments);
    }
  };

  /**
   * An optimized version of {@link Sequence#toArray}.
   */
  ArrayWrapper.prototype.toArray = function toArray() {
    return this.source.slice(0);
  };

  /**
   * @constructor
   */
  function MappedArrayWrapper(parent, mapFn) {
    this.parent = parent;
    this.mapFn  = mapFn;
  }

  MappedArrayWrapper.prototype = new ArrayLikeSequence();

  MappedArrayWrapper.prototype.get = function get(i) {
    var source = this.parent.source;

    if (i < 0 || i >= source.length) {
      return undefined;
    }

    return this.mapFn(source[i]);
  };

  MappedArrayWrapper.prototype.length = function length() {
    return this.parent.source.length;
  };

  MappedArrayWrapper.prototype.each = function each(fn) {
    var source = this.parent.source,
        length = source.length,
        mapFn  = this.mapFn,
        i = -1;

    while (++i < length) {
      if (fn(mapFn(source[i], i), i) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * @constructor
   */
  function FilteredArrayWrapper(parent, filterFn) {
    this.parent   = parent;
    this.filterFn = filterFn;
  }

  FilteredArrayWrapper.prototype = new FilteredSequence();

  FilteredArrayWrapper.prototype.each = function each(fn) {
    var source = this.parent.source,
        filterFn = this.filterFn,
        length = source.length,
        i = -1,
        j = 0,
        e;

    while (++i < length) {
      e = source[i];
      if (filterFn(e, i) && fn(e, j++) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * @constructor
   */
  function UniqueArrayWrapper(parent, keyFn) {
    this.parent = parent;
    this.each   = getEachForSource(parent.source);
    this.keyFn  = keyFn;
  }

  UniqueArrayWrapper.prototype = new Sequence();

  UniqueArrayWrapper.prototype.eachNoCache = function eachNoCache(fn) {
    var source = this.parent.source,
        keyFn  = this.keyFn,
        length = source.length,
        find   = arrayContainsBefore,
        value,

        // Yes, this is hideous.
        // Trying to get performance first, will refactor next!
        i = -1,
        k = 0;

    while (++i < length) {
      value = source[i];
      if (!find(source, value, i, keyFn) && fn(value, k++) === false) {
        return false;
      }
    }

    return true;
  };

  UniqueArrayWrapper.prototype.eachArrayCache = function eachArrayCache(fn) {
    // Basically the same implementation as w/ the set, but using an array because
    // it's cheaper for smaller sequences.
    var source = this.parent.source,
        keyFn  = this.keyFn,
        length = source.length,
        cache  = [],
        find   = arrayContains,
        key, value,
        i = -1,
        j = 0;

    if (keyFn) {
      keyFn = createCallback(keyFn);
      while (++i < length) {
        value = source[i];
        key = keyFn(value);
        if (!find(cache, key)) {
          cache.push(key);
          if (fn(value, j++) === false) {
            return false;
          }
        }
      }

    } else {
      while (++i < length) {
        value = source[i];
        if (!find(cache, value)) {
          cache.push(value);
          if (fn(value, j++) === false) {
            return false;
          }
        }
      }
    }

    return true;
  };

  UniqueArrayWrapper.prototype.eachSetCache = UniqueSequence.prototype.each;

  /**
   * My latest findings here...
   *
   * So I hadn't really given the set-based approach enough credit. The main issue
   * was that my Set implementation was totally not optimized at all. After pretty
   * heavily optimizing it (just take a look; it's a monstrosity now!), it now
   * becomes the fastest option for much smaller values of N.
   */
  function getEachForSource(source) {
    if (source.length < 40) {
      return UniqueArrayWrapper.prototype.eachNoCache;
    } else if (source.length < 100) {
      return UniqueArrayWrapper.prototype.eachArrayCache;
    } else {
      return UniqueArrayWrapper.prototype.eachSetCache;
    }
  }

  /**
   * @constructor
   */
  function ConcatArrayWrapper(parent, other) {
    this.parent = parent;
    this.other  = other;
  }

  ConcatArrayWrapper.prototype = new ArrayLikeSequence();

  ConcatArrayWrapper.prototype.get = function get(i) {
    var source = this.parent.source,
        sourceLength = source.length;

    if (i < sourceLength) {
      return source[i];
    } else {
      return this.other[i - sourceLength];
    }
  };

  ConcatArrayWrapper.prototype.length = function length() {
    return this.parent.source.length + this.other.length;
  };

  ConcatArrayWrapper.prototype.each = function each(fn) {
    var source = this.parent.source,
        sourceLength = source.length,
        other = this.other,
        otherLength = other.length,
        i = 0,
        j = -1;

    while (++j < sourceLength) {
      if (fn(source[j], i++) === false) {
        return false;
      }
    }

    j = -1;
    while (++j < otherLength) {
      if (fn(other[j], i++) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * An `ObjectLikeSequence` object represents a sequence of key/value pairs.
   *
   * The initial sequence you get by wrapping an object with `Lazy(object)` is
   * an `ObjectLikeSequence`.
   *
   * All methods of `ObjectLikeSequence` that conceptually should return
   * something like an object return another `ObjectLikeSequence`.
   *
   * @public
   * @constructor
   *
   * @examples
   * var obj = { foo: 'bar' };
   *
   * Lazy(obj).assign({ bar: 'baz' })   // instanceof Lazy.ObjectLikeSequence
   * Lazy(obj).defaults({ bar: 'baz' }) // instanceof Lazy.ObjectLikeSequence
   * Lazy(obj).invert()                 // instanceof Lazy.ObjectLikeSequence
   */
  function ObjectLikeSequence() {}

  ObjectLikeSequence.prototype = new Sequence();

  /**
   * Create a new constructor function for a type inheriting from
   * `ObjectLikeSequence`.
   *
   * @public
   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be
   *     used for constructing the new sequence. The method will be attached to
   *     the `ObjectLikeSequence` prototype so that it can be chained with any other
   *     methods that return object-like sequences.
   * @param {Object} overrides An object containing function overrides for this
   *     new sequence type. **Must** include `each`. *May* include `init` and
   *     `get` (for looking up an element by key).
   * @returns {Function} A constructor for a new type inheriting from
   *     `ObjectLikeSequence`.
   *
   * @examples
   * function downcaseKey(value, key) {
   *   return [key.toLowerCase(), value];
   * }
   *
   * Lazy.ObjectLikeSequence.define("caseInsensitive", {
   *   init: function() {
   *     var downcased = this.parent
   *       .map(downcaseKey)
   *       .toObject();
   *     this.downcased = Lazy(downcased);
   *   },
   *
   *   get: function(key) {
   *     return this.downcased.get(key.toLowerCase());
   *   },
   *
   *   each: function(fn) {
   *     return this.downcased.each(fn);
   *   }
   * });
   *
   * Lazy({ Foo: 'bar' }).caseInsensitive()            // sequence: { foo: 'bar' }
   * Lazy({ FOO: 'bar' }).caseInsensitive().get('foo') // => 'bar'
   * Lazy({ FOO: 'bar' }).caseInsensitive().get('FOO') // => 'bar'
   */
  ObjectLikeSequence.define = function define(methodName, overrides) {
    if (!overrides || typeof overrides.each !== 'function') {
      throw new Error("A custom object-like sequence must implement *at least* each!");
    }

    return defineSequenceType(ObjectLikeSequence, methodName, overrides);
  };

  ObjectLikeSequence.prototype.value = function value() {
    return this.toObject();
  };

  /**
   * Gets the element at the specified key in this sequence.
   *
   * @public
   * @param {string} key The key.
   * @returns {*} The element.
   *
   * @examples
   * Lazy({ foo: "bar" }).get("foo")                          // => "bar"
   * Lazy({ foo: "bar" }).extend({ foo: "baz" }).get("foo")   // => "baz"
   * Lazy({ foo: "bar" }).defaults({ bar: "baz" }).get("bar") // => "baz"
   * Lazy({ foo: "bar" }).invert().get("bar")                 // => "foo"
   * Lazy({ foo: 1, bar: 2 }).pick(["foo"]).get("foo")        // => 1
   * Lazy({ foo: 1, bar: 2 }).pick(["foo"]).get("bar")        // => undefined
   * Lazy({ foo: 1, bar: 2 }).omit(["foo"]).get("bar")        // => 2
   * Lazy({ foo: 1, bar: 2 }).omit(["foo"]).get("foo")        // => undefined
   */
  ObjectLikeSequence.prototype.get = function get(key) {
    var pair = this.pairs().find(function(pair) {
      return pair[0] === key;
    });

    return pair ? pair[1] : undefined;
  };

  /**
   * Returns a {@link Sequence} whose elements are the keys of this object-like
   * sequence.
   *
   * @public
   * @returns {Sequence} The sequence based on this sequence's keys.
   *
   * @examples
   * Lazy({ hello: "hola", goodbye: "hasta luego" }).keys() // sequence: ["hello", "goodbye"]
   */
  ObjectLikeSequence.prototype.keys = function keys() {
    return this.map(function(v, k) { return k; });
  };

  /**
   * Returns a {@link Sequence} whose elements are the values of this object-like
   * sequence.
   *
   * @public
   * @returns {Sequence} The sequence based on this sequence's values.
   *
   * @examples
   * Lazy({ hello: "hola", goodbye: "hasta luego" }).values() // sequence: ["hola", "hasta luego"]
   */
  ObjectLikeSequence.prototype.values = function values() {
    return this.map(function(v, k) { return v; });
  };

  /**
   * Throws an exception. Asynchronous iteration over object-like sequences is
   * not supported.
   *
   * @public
   * @examples
   * Lazy({ foo: 'bar' }).async() // throws
   */
  ObjectLikeSequence.prototype.async = function async() {
    throw new Error('An ObjectLikeSequence does not support asynchronous iteration.');
  };

  ObjectLikeSequence.prototype.filter = function filter(filterFn) {
    return new FilteredObjectLikeSequence(this, createCallback(filterFn));
  };

  function FilteredObjectLikeSequence(parent, filterFn) {
    this.parent = parent;
    this.filterFn = filterFn;
  }

  FilteredObjectLikeSequence.prototype = new ObjectLikeSequence();

  FilteredObjectLikeSequence.prototype.each = function each(fn) {
    var filterFn = this.filterFn;

    return this.parent.each(function(v, k) {
      if (filterFn(v, k)) {
        return fn(v, k);
      }
    });
  };

  /**
   * Returns this same sequence. (Reversing an object-like sequence doesn't make
   * any sense.)
   */
  ObjectLikeSequence.prototype.reverse = function reverse() {
    return this;
  };

  /**
   * Returns an {@link ObjectLikeSequence} whose elements are the combination of
   * this sequence and another object. In the case of a key appearing in both this
   * sequence and the given object, the other object's value will override the
   * one in this sequence.
   *
   * @public
   * @aka extend
   * @param {Object} other The other object to assign to this sequence.
   * @returns {ObjectLikeSequence} A new sequence comprising elements from this
   *     sequence plus the contents of `other`.
   *
   * @examples
   * Lazy({ "uno": 1, "dos": 2 }).assign({ "tres": 3 }) // sequence: { uno: 1, dos: 2, tres: 3 }
   * Lazy({ foo: "bar" }).assign({ foo: "baz" });       // sequence: { foo: "baz" }
   */
  ObjectLikeSequence.prototype.assign = function assign(other) {
    return new AssignSequence(this, other);
  };

  ObjectLikeSequence.prototype.extend = function extend(other) {
    return this.assign(other);
  };

  /**
   * @constructor
   */
  function AssignSequence(parent, other) {
    this.parent = parent;
    this.other  = other;
  }

  AssignSequence.prototype = new ObjectLikeSequence();

  AssignSequence.prototype.get = function get(key) {
    return this.other[key] || this.parent.get(key);
  };

  AssignSequence.prototype.each = function each(fn) {
    var merged = new Set(),
        done   = false;

    Lazy(this.other).each(function(value, key) {
      if (fn(value, key) === false) {
        done = true;
        return false;
      }

      merged.add(key);
    });

    if (!done) {
      return this.parent.each(function(value, key) {
        if (!merged.contains(key) && fn(value, key) === false) {
          return false;
        }
      });
    }
  };

  /**
   * Returns an {@link ObjectLikeSequence} whose elements are the combination of
   * this sequence and a 'default' object. In the case of a key appearing in both
   * this sequence and the given object, this sequence's value will override the
   * default object's.
   *
   * @public
   * @param {Object} defaults The 'default' object to use for missing keys in this
   *     sequence.
   * @returns {ObjectLikeSequence} A new sequence comprising elements from this
   *     sequence supplemented by the contents of `defaults`.
   *
   * @examples
   * Lazy({ name: "Dan" }).defaults({ name: "User", password: "passw0rd" }) // sequence: { name: "Dan", password: "passw0rd" }
   */
  ObjectLikeSequence.prototype.defaults = function defaults(defaults) {
    return new DefaultsSequence(this, defaults);
  };

  /**
   * @constructor
   */
  function DefaultsSequence(parent, defaults) {
    this.parent   = parent;
    this.defaults = defaults;
  }

  DefaultsSequence.prototype = new ObjectLikeSequence();

  DefaultsSequence.prototype.get = function get(key) {
    return this.parent.get(key) || this.defaults[key];
  };

  DefaultsSequence.prototype.each = function each(fn) {
    var merged = new Set(),
        done   = false;

    this.parent.each(function(value, key) {
      if (fn(value, key) === false) {
        done = true;
        return false;
      }

      if (typeof value !== "undefined") {
        merged.add(key);
      }
    });

    if (!done) {
      Lazy(this.defaults).each(function(value, key) {
        if (!merged.contains(key) && fn(value, key) === false) {
          return false;
        }
      });
    }
  };

  /**
   * Returns an {@link ObjectLikeSequence} whose values are this sequence's keys,
   * and whose keys are this sequence's values.
   *
   * @public
   * @returns {ObjectLikeSequence} A new sequence comprising the inverted keys and
   *     values from this sequence.
   *
   * @examples
   * Lazy({ first: "Dan", last: "Tao" }).invert() // sequence: { Dan: "first", Tao: "last" }
   */
  ObjectLikeSequence.prototype.invert = function invert() {
    return new InvertedSequence(this);
  };

  /**
   * @constructor
   */
  function InvertedSequence(parent) {
    this.parent = parent;
  }

  InvertedSequence.prototype = new ObjectLikeSequence();

  InvertedSequence.prototype.each = function each(fn) {
    this.parent.each(function(value, key) {
      return fn(key, value);
    });
  };

  /**
   * Produces an {@link ObjectLikeSequence} consisting of all the recursively
   * merged values from this and the given object(s) or sequence(s).
   *
   * Note that by default this method only merges "vanilla" objects (bags of
   * key/value pairs), not arrays or any other custom object types. To customize
   * how merging works, you can provide the mergeFn argument, e.g. to handling
   * merging arrays, strings, or other types of objects.
   *
   * @public
   * @param {...Object|ObjectLikeSequence} others The other object(s) or
   *     sequence(s) whose values will be merged into this one.
   * @param {Function=} mergeFn An optional function used to customize merging
   *     behavior. The function should take two values as parameters and return
   *     whatever the "merged" form of those values is. If the function returns
   *     undefined then the new value will simply replace the old one in the
   *     final result.
   * @returns {ObjectLikeSequence} The new sequence consisting of merged values.
   *
   * @examples
   * // These examples are completely stolen from Lo-Dash's documentation:
   * // lodash.com/docs#merge
   *
   * var names = {
   *   'characters': [
   *     { 'name': 'barney' },
   *     { 'name': 'fred' }
   *   ]
   * };
   *
   * var ages = {
   *   'characters': [
   *     { 'age': 36 },
   *     { 'age': 40 }
   *   ]
   * };
   *
   * var food = {
   *   'fruits': ['apple'],
   *   'vegetables': ['beet']
   * };
   *
   * var otherFood = {
   *   'fruits': ['banana'],
   *   'vegetables': ['carrot']
   * };
   *
   * function mergeArrays(a, b) {
   *   return Array.isArray(a) ? a.concat(b) : undefined;
   * }
   *
   * Lazy(names).merge(ages); // => sequence: { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
   * Lazy(food).merge(otherFood, mergeArrays); // => sequence: { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
   *
   * // ----- Now for my own tests: -----
   *
   * // merges objects
   * Lazy({ foo: 1 }).merge({ foo: 2 }); // => sequence: { foo: 2 }
   * Lazy({ foo: 1 }).merge({ bar: 2 }); // => sequence: { foo: 1, bar: 2 }
   *
   * // goes deep
   * Lazy({ foo: { bar: 1 } }).merge({ foo: { bar: 2 } }); // => sequence: { foo: { bar: 2 } }
   * Lazy({ foo: { bar: 1 } }).merge({ foo: { baz: 2 } }); // => sequence: { foo: { bar: 1, baz: 2 } }
   * Lazy({ foo: { bar: 1 } }).merge({ foo: { baz: 2 } }); // => sequence: { foo: { bar: 1, baz: 2 } }
   *
   * // gives precedence to later sources
   * Lazy({ foo: 1 }).merge({ bar: 2 }, { bar: 3 }); // => sequence: { foo: 1, bar: 3 }
   *
   * // undefined gets passed over
   * Lazy({ foo: 1 }).merge({ foo: undefined }); // => sequence: { foo: 1 }
   *
   * // null doesn't get passed over
   * Lazy({ foo: 1 }).merge({ foo: null }); // => sequence: { foo: null }
   *
   * // array contents get merged as well
   * Lazy({ foo: [{ bar: 1 }] }).merge({ foo: [{ baz: 2 }] }); // => sequence: { foo: [{ bar: 1, baz: 2}] }
   */
  ObjectLikeSequence.prototype.merge = function merge(var_args) {
    var mergeFn = arguments.length > 1 && typeof arguments[arguments.length - 1] === "function" ?
      arrayPop.call(arguments) : null;
    return new MergedSequence(this, arraySlice.call(arguments, 0), mergeFn);
  };

  /**
   * @constructor
   */
  function MergedSequence(parent, others, mergeFn) {
    this.parent  = parent;
    this.others  = others;
    this.mergeFn = mergeFn;
  }

  MergedSequence.prototype = new ObjectLikeSequence();

  MergedSequence.prototype.each = function each(fn) {
    var others  = this.others,
        mergeFn = this.mergeFn || mergeObjects,
        keys    = {};

    var iteratedFullSource = this.parent.each(function(value, key) {
      var merged = value;

      forEach(others, function(other) {
        if (key in other) {
          merged = mergeFn(merged, other[key]);
        }
      });

      keys[key] = true;

      return fn(merged, key);
    });

    if (iteratedFullSource === false) {
      return false;
    }

    var remaining = {};

    forEach(others, function(other) {
      for (var k in other) {
        if (!keys[k]) {
          remaining[k] = mergeFn(remaining[k], other[k]);
        }
      }
    });

    return Lazy(remaining).each(fn);
  };

  /**
   * @private
   * @examples
   * mergeObjects({ foo: 1 }, { bar: 2 }); // => { foo: 1, bar: 2 }
   * mergeObjects({ foo: { bar: 1 } }, { foo: { baz: 2 } }); // => { foo: { bar: 1, baz: 2 } }
   * mergeObjects({ foo: { bar: 1 } }, { foo: undefined }); // => { foo: { bar: 1 } }
   * mergeObjects({ foo: { bar: 1 } }, { foo: null }); // => { foo: null }
   * mergeObjects({ array: [0, 1, 2] }, { array: [3, 4, 5] }).array; // instanceof Array
   * mergeObjects({ date: new Date() }, { date: new Date() }).date; // instanceof Date
   * mergeObjects([{ foo: 1 }], [{ bar: 2 }]); // => [{ foo: 1, bar: 2 }]
   */
  function mergeObjects(a, b) {
    var merged, prop;

    if (typeof b === 'undefined') {
      return a;
    }

    // Check that we're dealing with two objects or two arrays.
    if (isVanillaObject(a) && isVanillaObject(b)) {
      merged = {};
    } else if (a instanceof Array && b instanceof Array) {
      merged = [];
    } else {
      // Otherwise there's no merging to do -- just replace a w/ b.
      return b;
    }

    for (prop in a) {
      merged[prop] = mergeObjects(a[prop], b[prop]);
    }
    for (prop in b) {
      if (!merged[prop]) {
        merged[prop] = b[prop];
      }
    }
    return merged;
  }

  /**
   * Checks whether an object is a "vanilla" object, i.e. {'foo': 'bar'} as
   * opposed to an array, date, etc.
   *
   * @private
   * @examples
   * isVanillaObject({foo: 'bar'}); // => true
   * isVanillaObject(new Date());   // => false
   * isVanillaObject([1, 2, 3]);    // => false
   */
  function isVanillaObject(object) {
    return object && object.constructor === Object;
  }

  /**
   * Creates a {@link Sequence} consisting of the keys from this sequence whose
   *     values are functions.
   *
   * @public
   * @aka methods
   * @returns {Sequence} The new sequence.
   *
   * @examples
   * var dog = {
   *   name: "Fido",
   *   breed: "Golden Retriever",
   *   bark: function() { console.log("Woof!"); },
   *   wagTail: function() { console.log("TODO: implement robotic dog interface"); }
   * };
   *
   * Lazy(dog).functions() // sequence: ["bark", "wagTail"]
   */
  ObjectLikeSequence.prototype.functions = function functions() {
    return this
      .filter(function(v, k) { return typeof(v) === "function"; })
      .map(function(v, k) { return k; });
  };

  ObjectLikeSequence.prototype.methods = function methods() {
    return this.functions();
  };

  /**
   * Creates an {@link ObjectLikeSequence} consisting of the key/value pairs from
   * this sequence whose keys are included in the given array of property names.
   *
   * @public
   * @param {Array} properties An array of the properties to "pick" from this
   *     sequence.
   * @returns {ObjectLikeSequence} The new sequence.
   *
   * @examples
   * var players = {
   *   "who": "first",
   *   "what": "second",
   *   "i don't know": "third"
   * };
   *
   * Lazy(players).pick(["who", "what"]) // sequence: { who: "first", what: "second" }
   */
  ObjectLikeSequence.prototype.pick = function pick(properties) {
    return new PickSequence(this, properties);
  };

  /**
   * @constructor
   */
  function PickSequence(parent, properties) {
    this.parent     = parent;
    this.properties = properties;
  }

  PickSequence.prototype = new ObjectLikeSequence();

  PickSequence.prototype.get = function get(key) {
    return arrayContains(this.properties, key) ? this.parent.get(key) : undefined;
  };

  PickSequence.prototype.each = function each(fn) {
    var inArray    = arrayContains,
        properties = this.properties;

    return this.parent.each(function(value, key) {
      if (inArray(properties, key)) {
        return fn(value, key);
      }
    });
  };

  /**
   * Creates an {@link ObjectLikeSequence} consisting of the key/value pairs from
   * this sequence excluding those with the specified keys.
   *
   * @public
   * @param {Array} properties An array of the properties to *omit* from this
   *     sequence.
   * @returns {ObjectLikeSequence} The new sequence.
   *
   * @examples
   * var players = {
   *   "who": "first",
   *   "what": "second",
   *   "i don't know": "third"
   * };
   *
   * Lazy(players).omit(["who", "what"]) // sequence: { "i don't know": "third" }
   */
  ObjectLikeSequence.prototype.omit = function omit(properties) {
    return new OmitSequence(this, properties);
  };

  /**
   * @constructor
   */
  function OmitSequence(parent, properties) {
    this.parent     = parent;
    this.properties = properties;
  }

  OmitSequence.prototype = new ObjectLikeSequence();

  OmitSequence.prototype.get = function get(key) {
    return arrayContains(this.properties, key) ? undefined : this.parent.get(key);
  };

  OmitSequence.prototype.each = function each(fn) {
    var inArray    = arrayContains,
        properties = this.properties;

    return this.parent.each(function(value, key) {
      if (!inArray(properties, key)) {
        return fn(value, key);
      }
    });
  };

  /**
   * Maps the key/value pairs in this sequence to arrays.
   *
   * @public
   * @aka toArray
   * @returns {Sequence} An sequence of `[key, value]` pairs.
   *
   * @examples
   * var colorCodes = {
   *   red: "#f00",
   *   green: "#0f0",
   *   blue: "#00f"
   * };
   *
   * Lazy(colorCodes).pairs() // sequence: [["red", "#f00"], ["green", "#0f0"], ["blue", "#00f"]]
   */
  ObjectLikeSequence.prototype.pairs = function pairs() {
    return this.map(function(v, k) { return [k, v]; });
  };

  /**
   * Creates an array from the key/value pairs in this sequence.
   *
   * @public
   * @returns {Array} An array of `[key, value]` elements.
   *
   * @examples
   * var colorCodes = {
   *   red: "#f00",
   *   green: "#0f0",
   *   blue: "#00f"
   * };
   *
   * Lazy(colorCodes).toArray() // => [["red", "#f00"], ["green", "#0f0"], ["blue", "#00f"]]
   */
  ObjectLikeSequence.prototype.toArray = function toArray() {
    return this.pairs().toArray();
  };

  /**
   * Creates an object with the key/value pairs from this sequence.
   *
   * @public
   * @returns {Object} An object with the same key/value pairs as this sequence.
   *
   * @examples
   * var colorCodes = {
   *   red: "#f00",
   *   green: "#0f0",
   *   blue: "#00f"
   * };
   *
   * Lazy(colorCodes).toObject() // => { red: "#f00", green: "#0f0", blue: "#00f" }
   */
  ObjectLikeSequence.prototype.toObject = function toObject() {
    return this.reduce(function(object, value, key) {
      object[key] = value;
      return object;
    }, {});
  };

  // Now that we've fully initialized the ObjectLikeSequence prototype, we can
  // actually set the prototypes for GroupedSequence, IndexedSequence, and
  // CountedSequence.

  GroupedSequence.prototype = new ObjectLikeSequence();

  GroupedSequence.prototype.each = function each(fn) {
    var keyFn   = createCallback(this.keyFn),
        valFn   = createCallback(this.valFn),
        result;

    result = this.parent.reduce(function(grouped,e) {
      var key = keyFn(e),
          val = valFn(e);
      if (!(grouped[key] instanceof Array)) {
        grouped[key] = [val];
      } else {
        grouped[key].push(val);
      }
      return grouped;
    },{});

    return transform(function(grouped) {
      for (var key in grouped) {
        if (fn(grouped[key], key) === false) {
          return false;
        }
      }
    }, result);
  };

  IndexedSequence.prototype = new ObjectLikeSequence();

  IndexedSequence.prototype.each = function each(fn) {
    var keyFn   = createCallback(this.keyFn),
        valFn   = createCallback(this.valFn),
        indexed = {};

    return this.parent.each(function(e) {
      var key = keyFn(e),
          val = valFn(e);

      if (!indexed[key]) {
        indexed[key] = val;
        return fn(val, key);
      }
    });
  };

  CountedSequence.prototype = new ObjectLikeSequence();

  CountedSequence.prototype.each = function each(fn) {
    var keyFn   = createCallback(this.keyFn),
        counted = {};

    this.parent.each(function(e) {
      var key = keyFn(e);
      if (!counted[key]) {
        counted[key] = 1;
      } else {
        counted[key] += 1;
      }
    });

    for (var key in counted) {
      if (fn(counted[key], key) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * Watches for all changes to a specified property (or properties) of an
   * object and produces a sequence whose elements have the properties
   * `{ property, value }` indicating which property changed and what it was
   * changed to.
   *
   * Note that this method **only works on directly wrapped objects**; it will
   * *not* work on any arbitrary {@link ObjectLikeSequence}.
   *
   * @public
   * @param {(string|Array)=} propertyNames A property name or array of property
   *     names to watch. If this parameter is `undefined`, all of the object's
   *     current (enumerable) properties will be watched.
   * @returns {Sequence} A sequence comprising `{ property, value }` objects
   *     describing each change to the specified property/properties.
   *
   * @examples
   * var obj = {},
   *     changes = [];
   *
   * Lazy(obj).watch('foo').each(function(change) {
   *   changes.push(change);
   * });
   *
   * obj.foo = 1;
   * obj.bar = 2;
   * obj.foo = 3;
   *
   * obj.foo; // => 3
   * changes; // => [{ property: 'foo', value: 1 }, { property: 'foo', value: 3 }]
   */
  ObjectLikeSequence.prototype.watch = function watch(propertyNames) {
    throw new Error('You can only call #watch on a directly wrapped object.');
  };

  /**
   * @constructor
   */
  function ObjectWrapper(source) {
    this.source = source;
  }

  ObjectWrapper.prototype = new ObjectLikeSequence();

  ObjectWrapper.prototype.root = function root() {
    return this;
  };

  ObjectWrapper.prototype.isAsync = function isAsync() {
    return false;
  };

  ObjectWrapper.prototype.get = function get(key) {
    return this.source[key];
  };

  ObjectWrapper.prototype.each = function each(fn) {
    var source = this.source,
        key;

    for (key in source) {
      if (fn(source[key], key) === false) {
        return false;
      }
    }

    return true;
  };

  /**
   * A `StringLikeSequence` represents a sequence of characters.
   *
   * The initial sequence you get by wrapping a string with `Lazy(string)` is a
   * `StringLikeSequence`.
   *
   * All methods of `StringLikeSequence` that conceptually should return
   * something like a string return another `StringLikeSequence`.
   *
   * @public
   * @constructor
   *
   * @examples
   * function upcase(str) { return str.toUpperCase(); }
   *
   * Lazy('foo')               // instanceof Lazy.StringLikeSequence
   * Lazy('foo').toUpperCase() // instanceof Lazy.StringLikeSequence
   * Lazy('foo').reverse()     // instanceof Lazy.StringLikeSequence
   * Lazy('foo').take(2)       // instanceof Lazy.StringLikeSequence
   * Lazy('foo').drop(1)       // instanceof Lazy.StringLikeSequence
   * Lazy('foo').substring(1)  // instanceof Lazy.StringLikeSequence
   *
   * // Note that `map` does not create a `StringLikeSequence` because there's
   * // no guarantee the mapping function will return characters. In the event
   * // you do want to map a string onto a string-like sequence, use
   * // `mapString`:
   * Lazy('foo').map(Lazy.identity)       // instanceof Lazy.ArrayLikeSequence
   * Lazy('foo').mapString(Lazy.identity) // instanceof Lazy.StringLikeSequence
   */
  function StringLikeSequence() {}

  StringLikeSequence.prototype = new ArrayLikeSequence();

  /**
   * Create a new constructor function for a type inheriting from
   * `StringLikeSequence`.
   *
   * @public
   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be
   *     used for constructing the new sequence. The method will be attached to
   *     the `StringLikeSequence` prototype so that it can be chained with any other
   *     methods that return string-like sequences.
   * @param {Object} overrides An object containing function overrides for this
   *     new sequence type. Has the same requirebments as
   *     {@link ArrayLikeSequence.define}.
   * @returns {Function} A constructor for a new type inheriting from
   *     `StringLikeSequence`.
   *
   * @examples
   * Lazy.StringLikeSequence.define("zomg", {
   *   length: function() {
   *     return this.parent.length() + "!!ZOMG!!!1".length;
   *   },
   *
   *   get: function(i) {
   *     if (i < this.parent.length()) {
   *       return this.parent.get(i);
   *     }
   *     return "!!ZOMG!!!1".charAt(i - this.parent.length());
   *   }
   * });
   *
   * Lazy('foo').zomg() // sequence: "foo!!ZOMG!!!1"
   */
  StringLikeSequence.define = function define(methodName, overrides) {
    if (!overrides || typeof overrides.get !== 'function') {
      throw new Error("A custom string-like sequence must implement *at least* get!");
    }

    return defineSequenceType(StringLikeSequence, methodName, overrides);
  };

  StringLikeSequence.prototype.value = function value() {
    return this.toString();
  };

  /**
   * Returns an {@link IndexedIterator} that will step over each character in this
   * sequence one by one.
   *
   * @returns {IndexedIterator} The iterator.
   */
  StringLikeSequence.prototype.getIterator = function getIterator() {
    return new CharIterator(this);
  };

  /**
   * @constructor
   */
  function CharIterator(source) {
    this.source = Lazy(source);
    this.index = -1;
  }

  CharIterator.prototype.current = function current() {
    return this.source.charAt(this.index);
  };

  CharIterator.prototype.moveNext = function moveNext() {
    return (++this.index < this.source.length());
  };

  /**
   * Returns the character at the given index of this sequence, or the empty
   * string if the specified index lies outside the bounds of the sequence.
   *
   * @public
   * @param {number} i The index of this sequence.
   * @returns {string} The character at the specified index.
   *
   * @examples
   * Lazy("foo").charAt(0)  // => "f"
   * Lazy("foo").charAt(-1) // => ""
   * Lazy("foo").charAt(10) // => ""
   */
  StringLikeSequence.prototype.charAt = function charAt(i) {
    return this.get(i);
  };

  /**
   * Returns the character code at the given index of this sequence, or `NaN` if
   * the index lies outside the bounds of the sequence.
   *
   * @public
   * @param {number} i The index of the character whose character code you want.
   * @returns {number} The character code.
   *
   * @examples
   * Lazy("abc").charCodeAt(0)  // => 97
   * Lazy("abc").charCodeAt(-1) // => NaN
   * Lazy("abc").charCodeAt(10) // => NaN
   */
  StringLikeSequence.prototype.charCodeAt = function charCodeAt(i) {
    var char = this.charAt(i);
    if (!char) { return NaN; }

    return char.charCodeAt(0);
  };

  /**
   * Returns a {@link StringLikeSequence} comprising the characters from *this*
   * sequence starting at `start` and ending at `stop` (exclusive), or---if
   * `stop` is `undefined`, including the rest of the sequence.
   *
   * @public
   * @param {number} start The index where this sequence should begin.
   * @param {number=} stop The index (exclusive) where this sequence should end.
   * @returns {StringLikeSequence} The new sequence.
   *
   * @examples
   * Lazy("foo").substring(1)      // sequence: "oo"
   * Lazy("foo").substring(-1)     // sequence: "foo"
   * Lazy("hello").substring(1, 3) // sequence: "el"
   * Lazy("hello").substring(1, 9) // sequence: "ello"
   */
  StringLikeSequence.prototype.substring = function substring(start, stop) {
    return new StringSegment(this, start, stop);
  };

  /**
   * @constructor
   */
  function StringSegment(parent, start, stop) {
    this.parent = parent;
    this.start  = Math.max(0, start);
    this.stop   = stop;
  }

  StringSegment.prototype = new StringLikeSequence();

  StringSegment.prototype.get = function get(i) {
    return this.parent.get(i + this.start);
  };

  StringSegment.prototype.length = function length() {
    return (typeof this.stop === "number" ? this.stop : this.parent.length()) - this.start;
  };

  /**
   * An optimized version of {@link Sequence#first} that returns another
   * {@link StringLikeSequence} (or just the first character, if `count` is
   * undefined).
   *
   * @public
   * @examples
   * Lazy('foo').first()                // => 'f'
   * Lazy('fo').first(2)                // sequence: 'fo'
   * Lazy('foo').first(10)              // sequence: 'foo'
   * Lazy('foo').toUpperCase().first()  // => 'F'
   * Lazy('foo').toUpperCase().first(2) // sequence: 'FO'
   */
  StringLikeSequence.prototype.first = function first(count) {
    if (typeof count === "undefined") {
      return this.charAt(0);
    }

    return this.substring(0, count);
  };

  /**
   * An optimized version of {@link Sequence#last} that returns another
   * {@link StringLikeSequence} (or just the last character, if `count` is
   * undefined).
   *
   * @public
   * @examples
   * Lazy('foo').last()                // => 'o'
   * Lazy('foo').last(2)               // sequence: 'oo'
   * Lazy('foo').last(10)              // sequence: 'foo'
   * Lazy('foo').toUpperCase().last()  // => 'O'
   * Lazy('foo').toUpperCase().last(2) // sequence: 'OO'
   */
  StringLikeSequence.prototype.last = function last(count) {
    if (typeof count === "undefined") {
      return this.charAt(this.length() - 1);
    }

    return this.substring(this.length() - count);
  };

  StringLikeSequence.prototype.drop = function drop(count) {
    return this.substring(count);
  };

  /**
   * Finds the index of the first occurrence of the given substring within this
   * sequence, starting from the specified index (or the beginning of the
   * sequence).
   *
   * @public
   * @param {string} substring The substring to search for.
   * @param {number=} startIndex The index from which to start the search.
   * @returns {number} The first index where the given substring is found, or
   *     -1 if it isn't in the sequence.
   *
   * @examples
   * Lazy('canal').indexOf('a')    // => 1
   * Lazy('canal').indexOf('a', 2) // => 3
   * Lazy('canal').indexOf('ana')  // => 1
   * Lazy('canal').indexOf('andy') // => -1
   * Lazy('canal').indexOf('x')    // => -1
   */
  StringLikeSequence.prototype.indexOf = function indexOf(substring, startIndex) {
    return this.toString().indexOf(substring, startIndex);
  };

  /**
   * Finds the index of the last occurrence of the given substring within this
   * sequence, starting from the specified index (or the end of the sequence)
   * and working backwards.
   *
   * @public
   * @param {string} substring The substring to search for.
   * @param {number=} startIndex The index from which to start the search.
   * @returns {number} The last index where the given substring is found, or
   *     -1 if it isn't in the sequence.
   *
   * @examples
   * Lazy('canal').lastIndexOf('a')    // => 3
   * Lazy('canal').lastIndexOf('a', 2) // => 1
   * Lazy('canal').lastIndexOf('ana')  // => 1
   * Lazy('canal').lastIndexOf('andy') // => -1
   * Lazy('canal').lastIndexOf('x')    // => -1
   */
  StringLikeSequence.prototype.lastIndexOf = function lastIndexOf(substring, startIndex) {
    return this.toString().lastIndexOf(substring, startIndex);
  };

  /**
   * Checks if this sequence contains a given substring.
   *
   * @public
   * @param {string} substring The substring to check for.
   * @returns {boolean} Whether or not this sequence contains `substring`.
   *
   * @examples
   * Lazy('hello').contains('ell') // => true
   * Lazy('hello').contains('')    // => true
   * Lazy('hello').contains('abc') // => false
   */
  StringLikeSequence.prototype.contains = function contains(substring) {
    return this.indexOf(substring) !== -1;
  };

  /**
   * Checks if this sequence ends with a given suffix.
   *
   * @public
   * @param {string} suffix The suffix to check for.
   * @returns {boolean} Whether or not this sequence ends with `suffix`.
   *
   * @examples
   * Lazy('foo').endsWith('oo')  // => true
   * Lazy('foo').endsWith('')    // => true
   * Lazy('foo').endsWith('abc') // => false
   */
  StringLikeSequence.prototype.endsWith = function endsWith(suffix) {
    return this.substring(this.length() - suffix.length).toString() === suffix;
  };

  /**
   * Checks if this sequence starts with a given prefix.
   *
   * @public
   * @param {string} prefix The prefix to check for.
   * @returns {boolean} Whether or not this sequence starts with `prefix`.
   *
   * @examples
   * Lazy('foo').startsWith('fo')  // => true
   * Lazy('foo').startsWith('')    // => true
   * Lazy('foo').startsWith('abc') // => false
   */
  StringLikeSequence.prototype.startsWith = function startsWith(prefix) {
    return this.substring(0, prefix.length).toString() === prefix;
  };

  /**
   * Converts all of the characters in this string to uppercase.
   *
   * @public
   * @returns {StringLikeSequence} A new sequence with the same characters as
   *     this sequence, all uppercase.
   *
   * @examples
   * function nextLetter(a) {
   *   return String.fromCharCode(a.charCodeAt(0) + 1);
   * }
   *
   * Lazy('foo').toUpperCase()                       // sequence: 'FOO'
   * Lazy('foo').substring(1).toUpperCase()          // sequence: 'OO'
   * Lazy('abc').mapString(nextLetter).toUpperCase() // sequence: 'BCD'
   */
  StringLikeSequence.prototype.toUpperCase = function toUpperCase() {
    return this.mapString(function(char) { return char.toUpperCase(); });
  };

  /**
   * Converts all of the characters in this string to lowercase.
   *
   * @public
   * @returns {StringLikeSequence} A new sequence with the same characters as
   *     this sequence, all lowercase.
   *
   * @examples
   * function nextLetter(a) {
   *   return String.fromCharCode(a.charCodeAt(0) + 1);
   * }
   *
   * Lazy('FOO').toLowerCase()                       // sequence: 'foo'
   * Lazy('FOO').substring(1).toLowerCase()          // sequence: 'oo'
   * Lazy('ABC').mapString(nextLetter).toLowerCase() // sequence: 'bcd'
   */
  StringLikeSequence.prototype.toLowerCase = function toLowerCase() {
    return this.mapString(function(char) { return char.toLowerCase(); });
  };

  /**
   * Maps the characters of this sequence onto a new {@link StringLikeSequence}.
   *
   * @public
   * @param {Function} mapFn The function used to map characters from this
   *     sequence onto the new sequence.
   * @returns {StringLikeSequence} The new sequence.
   *
   * @examples
   * function upcase(char) { return char.toUpperCase(); }
   *
   * Lazy("foo").mapString(upcase)               // sequence: "FOO"
   * Lazy("foo").mapString(upcase).charAt(0)     // => "F"
   * Lazy("foo").mapString(upcase).charCodeAt(0) // => 70
   * Lazy("foo").mapString(upcase).substring(1)  // sequence: "OO"
   */
  StringLikeSequence.prototype.mapString = function mapString(mapFn) {
    return new MappedStringLikeSequence(this, mapFn);
  };

  /**
   * @constructor
   */
  function MappedStringLikeSequence(parent, mapFn) {
    this.parent = parent;
    this.mapFn  = mapFn;
  }

  MappedStringLikeSequence.prototype = new StringLikeSequence();
  MappedStringLikeSequence.prototype.get = IndexedMappedSequence.prototype.get;
  MappedStringLikeSequence.prototype.length = IndexedMappedSequence.prototype.length;

  /**
   * Returns a copy of this sequence that reads back to front.
   *
   * @public
   *
   * @examples
   * Lazy("abcdefg").reverse() // sequence: "gfedcba"
   */
  StringLikeSequence.prototype.reverse = function reverse() {
    return new ReversedStringLikeSequence(this);
  };

  /**
   * @constructor
   */
  function ReversedStringLikeSequence(parent) {
    this.parent = parent;
  }

  ReversedStringLikeSequence.prototype = new StringLikeSequence();
  ReversedStringLikeSequence.prototype.get = IndexedReversedSequence.prototype.get;
  ReversedStringLikeSequence.prototype.length = IndexedReversedSequence.prototype.length;

  StringLikeSequence.prototype.toString = function toString() {
    return this.join("");
  };

  /**
   * Creates a {@link Sequence} comprising all of the matches for the specified
   * pattern in the underlying string.
   *
   * @public
   * @param {RegExp} pattern The pattern to match.
   * @returns {Sequence} A sequence of all the matches.
   *
   * @examples
   * Lazy("abracadabra").match(/a[bcd]/) // sequence: ["ab", "ac", "ad", "ab"]
   * Lazy("fee fi fo fum").match(/\w+/)  // sequence: ["fee", "fi", "fo", "fum"]
   * Lazy("hello").match(/xyz/)          // sequence: []
   */
  StringLikeSequence.prototype.match = function match(pattern) {
    return new StringMatchSequence(this, pattern);
  };

  /**
   * @constructor
   */
  function StringMatchSequence(parent, pattern) {
    this.parent = parent;
    this.pattern = pattern;
  }

  StringMatchSequence.prototype = new Sequence();

  StringMatchSequence.prototype.getIterator = function getIterator() {
    return new StringMatchIterator(this.parent.toString(), this.pattern);
  };

  /**
   * @constructor
   */
  function StringMatchIterator(source, pattern) {
    this.source  = source;
    this.pattern = cloneRegex(pattern);
  }

  StringMatchIterator.prototype.current = function current() {
    return this.match[0];
  };

  StringMatchIterator.prototype.moveNext = function moveNext() {
    return !!(this.match = this.pattern.exec(this.source));
  };

  /**
   * Creates a {@link Sequence} comprising all of the substrings of this string
   * separated by the given delimiter, which can be either a string or a regular
   * expression.
   *
   * @public
   * @param {string|RegExp} delimiter The delimiter to use for recognizing
   *     substrings.
   * @returns {Sequence} A sequence of all the substrings separated by the given
   *     delimiter.
   *
   * @examples
   * Lazy("foo").split("")                      // sequence: ["f", "o", "o"]
   * Lazy("yo dawg").split(" ")                 // sequence: ["yo", "dawg"]
   * Lazy("bah bah\tblack  sheep").split(/\s+/) // sequence: ["bah", "bah", "black", "sheep"]
   */
  StringLikeSequence.prototype.split = function split(delimiter) {
    return new SplitStringSequence(this, delimiter);
  };

  /**
   * @constructor
   */
  function SplitStringSequence(parent, pattern) {
    this.parent = parent;
    this.pattern = pattern;
  }

  SplitStringSequence.prototype = new Sequence();

  SplitStringSequence.prototype.getIterator = function getIterator() {
    var source = this.parent.toString();

    if (this.pattern instanceof RegExp) {
      if (this.pattern.source === "" || this.pattern.source === "(?:)") {
        return new CharIterator(source);
      } else {
        return new SplitWithRegExpIterator(source, this.pattern);
      }
    } else if (this.pattern === "") {
      return new CharIterator(source);
    } else {
      return new SplitWithStringIterator(source, this.pattern);
    }
  };

  /**
   * @constructor
   */
  function SplitWithRegExpIterator(source, pattern) {
    this.source  = source;
    this.pattern = cloneRegex(pattern);
  }

  SplitWithRegExpIterator.prototype.current = function current() {
    return this.source.substring(this.start, this.end);
  };

  SplitWithRegExpIterator.prototype.moveNext = function moveNext() {
    if (!this.pattern) {
      return false;
    }

    var match = this.pattern.exec(this.source);

    if (match) {
      this.start = this.nextStart ? this.nextStart : 0;
      this.end = match.index;
      this.nextStart = match.index + match[0].length;
      return true;

    } else if (this.pattern) {
      this.start = this.nextStart;
      this.end = undefined;
      this.nextStart = undefined;
      this.pattern = undefined;
      return true;
    }

    return false;
  };

  /**
   * @constructor
   */
  function SplitWithStringIterator(source, delimiter) {
    this.source = source;
    this.delimiter = delimiter;
  }

  SplitWithStringIterator.prototype.current = function current() {
    return this.source.substring(this.leftIndex, this.rightIndex);
  };

  SplitWithStringIterator.prototype.moveNext = function moveNext() {
    if (!this.finished) {
      this.leftIndex = typeof this.leftIndex !== "undefined" ?
        this.rightIndex + this.delimiter.length :
        0;
      this.rightIndex = this.source.indexOf(this.delimiter, this.leftIndex);
    }

    if (this.rightIndex === -1) {
      this.finished = true;
      this.rightIndex = undefined;
      return true;
    }

    return !this.finished;
  };

  /**
   * Wraps a string exposing {@link #match} and {@link #split} methods that return
   * {@link Sequence} objects instead of arrays, improving on the efficiency of
   * JavaScript's built-in `String#split` and `String.match` methods and
   * supporting asynchronous iteration.
   *
   * @param {string} source The string to wrap.
   * @constructor
   */
  function StringWrapper(source) {
    this.source = source;
  }

  StringWrapper.prototype = new StringLikeSequence();

  StringWrapper.prototype.root = function root() {
    return this;
  };

  StringWrapper.prototype.isAsync = function isAsync() {
    return false;
  };

  StringWrapper.prototype.get = function get(i) {
    return this.source.charAt(i);
  };

  StringWrapper.prototype.length = function length() {
    return this.source.length;
  };

  StringWrapper.prototype.toString = function toString() {
    return this.source;
  };

  /**
   * A `GeneratedSequence` does not wrap an in-memory colllection but rather
   * determines its elements on-the-fly during iteration according to a generator
   * function.
   *
   * You create a `GeneratedSequence` by calling {@link Lazy.generate}.
   *
   * @public
   * @constructor
   * @param {function(number):*} generatorFn A function which accepts an index
   *     and returns a value for the element at that position in the sequence.
   * @param {number=} length The length of the sequence. If this argument is
   *     omitted, the sequence will go on forever.
   */
  function GeneratedSequence(generatorFn, length) {
    this.get = generatorFn;
    this.fixedLength = length;
  }

  GeneratedSequence.prototype = new Sequence();

  GeneratedSequence.prototype.isAsync = function isAsync() {
    return false;
  };

  /**
   * Returns the length of this sequence.
   *
   * @public
   * @returns {number} The length, or `undefined` if this is an indefinite
   *     sequence.
   */
  GeneratedSequence.prototype.length = function length() {
    return this.fixedLength;
  };

  /**
   * Iterates over the sequence produced by invoking this sequence's generator
   * function up to its specified length, or, if length is `undefined`,
   * indefinitely (in which case the sequence will go on forever--you would need
   * to call, e.g., {@link Sequence#take} to limit iteration).
   *
   * @public
   * @param {Function} fn The function to call on each output from the generator
   *     function.
   */
  GeneratedSequence.prototype.each = function each(fn) {
    var generatorFn = this.get,
        length = this.fixedLength,
        i = 0;

    while (typeof length === "undefined" || i < length) {
      if (fn(generatorFn(i), i++) === false) {
        return false;
      }
    }

    return true;
  };

  GeneratedSequence.prototype.getIterator = function getIterator() {
    return new GeneratedIterator(this);
  };

  /**
   * Iterates over a generated sequence. (This allows generated sequences to be
   * iterated asynchronously.)
   *
   * @param {GeneratedSequence} sequence The generated sequence to iterate over.
   * @constructor
   */
  function GeneratedIterator(sequence) {
    this.sequence     = sequence;
    this.index        = 0;
    this.currentValue = null;
  }

  GeneratedIterator.prototype.current = function current() {
    return this.currentValue;
  };

  GeneratedIterator.prototype.moveNext = function moveNext() {
    var sequence = this.sequence;

    if (typeof sequence.fixedLength === "number" && this.index >= sequence.fixedLength) {
      return false;
    }

    this.currentValue = sequence.get(this.index++);
    return true;
  };

  /**
   * An `AsyncSequence` iterates over its elements asynchronously when
   * {@link #each} is called.
   *
   * You get an `AsyncSequence` by calling {@link Sequence#async} on any
   * sequence. Note that some sequence types may not support asynchronous
   * iteration.
   *
   * Returning values
   * ----------------
   *
   * Because of its asynchronous nature, an `AsyncSequence` cannot be used in the
   * same way as other sequences for functions that return values directly (e.g.,
   * `reduce`, `max`, `any`, even `toArray`).
   *
   * Instead, these methods return an `AsyncHandle` whose `onComplete` method
   * accepts a callback that will be called with the final result once iteration
   * has finished.
   *
   * Defining custom asynchronous sequences
   * --------------------------------------
   *
   * There are plenty of ways to define an asynchronous sequence. Here's one.
   *
   * 1. First, implement an {@link Iterator}. This is an object whose prototype
   *    has the methods {@link Iterator#moveNext} (which returns a `boolean`) and
   *    {@link current} (which returns the current value).
   * 2. Next, create a simple wrapper that inherits from `AsyncSequence`, whose
   *    `getIterator` function returns an instance of the iterator type you just
   *    defined.
   *
   * The default implementation for {@link #each} on an `AsyncSequence` is to
   * create an iterator and then asynchronously call {@link Iterator#moveNext}
   * (using `setImmediate`, if available, otherwise `setTimeout`) until the iterator
   * can't move ahead any more.
   *
   * @public
   * @constructor
   * @param {Sequence} parent A {@link Sequence} to wrap, to expose asynchronous
   *     iteration.
   * @param {number=} interval How many milliseconds should elapse between each
   *     element when iterating over this sequence. If this argument is omitted,
   *     asynchronous iteration will be executed as fast as possible.
   */
  function AsyncSequence(parent, interval) {
    if (parent instanceof AsyncSequence) {
      throw new Error("Sequence is already asynchronous!");
    }

    this.parent         = parent;
    this.interval       = interval;
    this.onNextCallback = getOnNextCallback(interval);
    this.cancelCallback = getCancelCallback(interval);
  }

  AsyncSequence.prototype = new Sequence();

  AsyncSequence.prototype.isAsync = function isAsync() {
    return true;
  };

  /**
   * Throws an exception. You cannot manually iterate over an asynchronous
   * sequence.
   *
   * @public
   * @example
   * Lazy([1, 2, 3]).async().getIterator() // throws
   */
  AsyncSequence.prototype.getIterator = function getIterator() {
    throw new Error('An AsyncSequence does not support synchronous iteration.');
  };

  /**
   * An asynchronous version of {@link Sequence#each}.
   *
   * @public
   * @param {Function} fn The function to invoke asynchronously on each element in
   *     the sequence one by one.
   * @returns {AsyncHandle} An {@link AsyncHandle} providing the ability to
   *     cancel the asynchronous iteration (by calling `cancel()`) as well as
   *     supply callback(s) for when an error is encountered (`onError`) or when
   *     iteration is complete (`onComplete`).
   */
  AsyncSequence.prototype.each = function each(fn) {
    var iterator = this.parent.getIterator(),
        onNextCallback = this.onNextCallback,
        cancelCallback = this.cancelCallback,
        i = 0;

    var handle = new AsyncHandle(function cancel() {
      if (cancellationId) {
        cancelCallback(cancellationId);
      }
    });

    var cancellationId = onNextCallback(function iterate() {
      cancellationId = null;

      try {
        if (iterator.moveNext() && fn(iterator.current(), i++) !== false) {
          cancellationId = onNextCallback(iterate);

        } else {
          handle._resolve();
        }

      } catch (e) {
        handle._reject(e);
      }
    });

    return handle;
  };

  /**
   * An `AsyncHandle` provides a [Promises/A+](http://promises-aplus.github.io/promises-spec/)
   * compliant interface for an {@link AsyncSequence} that is currently (or was)
   * iterating over its elements.
   *
   * In addition to behaving as a promise, an `AsyncHandle` provides the ability
   * to {@link AsyncHandle#cancel} iteration (if `cancelFn` is provided)
   * and also offers convenient {@link AsyncHandle#onComplete} and
   * {@link AsyncHandle#onError} methods to attach listeners for when iteration
   * is complete or an error is thrown during iteration.
   *
   * @public
   * @param {Function} cancelFn A function to cancel asynchronous iteration.
   *     This is passed in to support different cancellation mechanisms for
   *     different forms of asynchronous sequences (e.g., timeout-based
   *     sequences, sequences based on I/O, etc.).
   * @constructor
   *
   * @example
   * // Create a sequence of 100,000 random numbers, in chunks of 100.
   * var sequence = Lazy.generate(Math.random)
   *   .chunk(100)
   *   .async()
   *   .take(1000);
   *
   * // Reduce-style operations -- i.e., operations that return a *value* (as
   * // opposed to a *sequence*) -- return an AsyncHandle for async sequences.
   * var handle = sequence.toArray();
   *
   * handle.onComplete(function(array) {
   *   // Do something w/ 1,000-element array.
   * });
   *
   * // Since an AsyncHandle is a promise, you can also use it to create
   * // subsequent promises using `then` (see the Promises/A+ spec for more
   * // info).
   * var flattened = handle.then(function(array) {
   *   return Lazy(array).flatten();
   * });
   */
  function AsyncHandle(cancelFn) {
    this.resolveListeners = [];
    this.rejectListeners = [];
    this.state = PENDING;
    this.cancelFn = cancelFn;
  }

  // Async handle states
  var PENDING  = 1,
      RESOLVED = 2,
      REJECTED = 3;

  AsyncHandle.prototype.then = function then(onFulfilled, onRejected) {
    var promise = new AsyncHandle(this.cancelFn);

    this.resolveListeners.push(function(value) {
      try {
        if (typeof onFulfilled !== 'function') {
          resolve(promise, value);
          return;
        }

        resolve(promise, onFulfilled(value));

      } catch (e) {
        promise._reject(e);
      }
    });

    this.rejectListeners.push(function(reason) {
      try {
        if (typeof onRejected !== 'function') {
          promise._reject(reason);
          return;
        }

        resolve(promise, onRejected(reason));

      } catch (e) {
        promise._reject(e);
      }
    });

    if (this.state === RESOLVED) {
      this._resolve(this.value);
    }

    if (this.state === REJECTED) {
      this._reject(this.reason);
    }

    return promise;
  };

  AsyncHandle.prototype._resolve = function _resolve(value) {
    if (this.state === REJECTED) {
      return;
    }

    if (this.state === PENDING) {
      this.state = RESOLVED;
      this.value = value;
    }

    consumeListeners(this.resolveListeners, this.value);
  };

  AsyncHandle.prototype._reject = function _reject(reason) {
    if (this.state === RESOLVED) {
      return;
    }

    if (this.state === PENDING) {
      this.state = REJECTED;
      this.reason = reason;
    }

    consumeListeners(this.rejectListeners, this.reason);
  };

  /**
   * Cancels asynchronous iteration.
   *
   * @public
   */
  AsyncHandle.prototype.cancel = function cancel() {
    if (this.cancelFn) {
      this.cancelFn();
      this.cancelFn = null;
      this._resolve(false);
    }
  };

  /**
   * Updates the handle with a callback to execute when iteration is completed.
   *
   * @public
   * @param {Function} callback The function to call when the asynchronous
   *     iteration is completed.
   * @return {AsyncHandle} A reference to the handle (for chaining).
   */
  AsyncHandle.prototype.onComplete = function onComplete(callback) {
    this.resolveListeners.push(callback);
    return this;
  };

  /**
   * Updates the handle with a callback to execute if/when any error is
   * encountered during asynchronous iteration.
   *
   * @public
   * @param {Function} callback The function to call, with any associated error
   *     object, when an error occurs.
   * @return {AsyncHandle} A reference to the handle (for chaining).
   */
  AsyncHandle.prototype.onError = function onError(callback) {
    this.rejectListeners.push(callback);
    return this;
  };

  /**
   * Promise resolution procedure:
   * http://promises-aplus.github.io/promises-spec/#the_promise_resolution_procedure
   */
  function resolve(promise, x) {
    if (promise === x) {
      promise._reject(new TypeError('Cannot resolve a promise to itself'));
      return;
    }

    if (x instanceof AsyncHandle) {
      x.then(
        function(value) { resolve(promise, value); },
        function(reason) { promise._reject(reason); }
      );
      return;
    }

    var then;
    try {
      then = (/function|object/).test(typeof x) && x != null && x.then;
    } catch (e) {
      promise._reject(e);
      return;
    }

    var thenableState = PENDING;
    if (typeof then === 'function') {
      try {
        then.call(
          x,
          function resolvePromise(value) {
            if (thenableState !== PENDING) {
              return;
            }
            thenableState = RESOLVED;
            resolve(promise, value);
          },
          function rejectPromise(reason) {
            if (thenableState !== PENDING) {
              return;
            }
            thenableState = REJECTED;
            promise._reject(reason);
          }
        );
      } catch (e) {
        if (thenableState !== PENDING) {
          return;
        }

        promise._reject(e);
      }

      return;
    }

    promise._resolve(x);
  }

  function consumeListeners(listeners, value, callback) {
    callback || (callback = getOnNextCallback());

    callback(function() {
      if (listeners.length > 0) {
        listeners.shift()(value);
        consumeListeners(listeners, value, callback);
      }
    });
  }

  function getOnNextCallback(interval) {
    if (typeof interval === "undefined") {
      if (typeof setImmediate === "function") {
        return setImmediate;
      }
    }

    interval = interval || 0;
    return function(fn) {
      return setTimeout(fn, interval);
    };
  }

  function getCancelCallback(interval) {
    if (typeof interval === "undefined") {
      if (typeof clearImmediate === "function") {
        return clearImmediate;
      }
    }

    return clearTimeout;
  }

  /**
   * Transform a value, whether the value is retrieved asynchronously or directly.
   *
   * @private
   * @param {Function} fn The function that transforms the value.
   * @param {*} value The value to be transformed. This can be an {@link AsyncHandle} when the value
   *     is retrieved asynchronously, otherwise it can be anything.
   * @returns {*} An {@link AsyncHandle} when `value` is also an {@link AsyncHandle}, otherwise
   *     whatever `fn` resulted in.
   */
  function transform(fn, value) {
    if (value instanceof AsyncHandle) {
      return value.then(function() { fn(value); });
    }
    return fn(value);
  }

  /**
   * An async version of {@link Sequence#reverse}.
   */
  AsyncSequence.prototype.reverse = function reverse() {
    return this.parent.reverse().async();
  };

  /**
   * A version of {@link Sequence#find} which returns an {@link AsyncHandle}.
   *
   * @public
   * @param {Function} predicate A function to call on (potentially) every element
   *     in the sequence.
   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to
   *     the found element, once it is detected, or else `undefined`.
   */
  AsyncSequence.prototype.find = function find(predicate) {
    var found;

    var handle = this.each(function(e, i) {
      if (predicate(e, i)) {
        found = e;
        return false;
      }
    });

    return handle.then(function() { return found; });
  };

  /**
   * A version of {@link Sequence#indexOf} which returns an {@link AsyncHandle}.
   *
   * @public
   * @param {*} value The element to search for in the sequence.
   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to
   *     the found index, once it is detected, or -1.
   */
  AsyncSequence.prototype.indexOf = function indexOf(value) {
    var foundIndex = -1;

    var handle = this.each(function(e, i) {
      if (e === value) {
        foundIndex = i;
        return false;
      }
    });

    return handle.then(function() {
      return foundIndex;
    });
  };

  /**
   * A version of {@link Sequence#contains} which returns an {@link AsyncHandle}.
   *
   * @public
   * @param {*} value The element to search for in the sequence.
   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to
   *     either `true` or `false` to indicate whether the element was found.
   */
  AsyncSequence.prototype.contains = function contains(value) {
    var found = false;

    var handle = this.each(function(e) {
      if (e === value) {
        found = true;
        return false;
      }
    });

    return handle.then(function() {
      return found;
    });
  };

  /**
   * Just return the same sequence for `AsyncSequence#async` (I see no harm in this).
   */
  AsyncSequence.prototype.async = function async() {
    return this;
  };

  /**
   * See {@link ObjectLikeSequence#watch} for docs.
   */
  ObjectWrapper.prototype.watch = function watch(propertyNames) {
    return new WatchedPropertySequence(this.source, propertyNames);
  };

  function WatchedPropertySequence(object, propertyNames) {
    this.listeners = [];

    if (!propertyNames) {
      propertyNames = Lazy(object).keys().toArray();
    } else if (!(propertyNames instanceof Array)) {
      propertyNames = [propertyNames];
    }

    var listeners = this.listeners,
        index     = 0;

    Lazy(propertyNames).each(function(propertyName) {
      var propertyValue = object[propertyName];

      Object.defineProperty(object, propertyName, {
        get: function() {
          return propertyValue;
        },

        set: function(value) {
          for (var i = listeners.length - 1; i >= 0; --i) {
            if (listeners[i]({ property: propertyName, value: value }, index) === false) {
              listeners.splice(i, 1);
            }
          }
          propertyValue = value;
          ++index;
        }
      });
    });
  }

  WatchedPropertySequence.prototype = new AsyncSequence();

  WatchedPropertySequence.prototype.each = function each(fn) {
    this.listeners.push(fn);
  };

  /**
   * A StreamLikeSequence comprises a sequence of 'chunks' of data, which are
   * typically multiline strings.
   *
   * @constructor
   */
  function StreamLikeSequence() {}

  StreamLikeSequence.prototype = new AsyncSequence();

  StreamLikeSequence.prototype.isAsync = function isAsync() {
    return true;
  };

  StreamLikeSequence.prototype.split = function split(delimiter) {
    return new SplitStreamSequence(this, delimiter);
  };

  /**
   * @constructor
   */
  function SplitStreamSequence(parent, delimiter) {
    this.parent    = parent;
    this.delimiter = delimiter;
    this.each      = this.getEachForDelimiter(delimiter);
  }

  SplitStreamSequence.prototype = new Sequence();

  SplitStreamSequence.prototype.getEachForDelimiter = function getEachForDelimiter(delimiter) {
    if (delimiter instanceof RegExp) {
      return this.regexEach;
    }

    return this.stringEach;
  };

  SplitStreamSequence.prototype.regexEach = function each(fn) {
    var delimiter = cloneRegex(this.delimiter),
        buffer = '',
        start = 0, end,
        index = 0;

    var handle = this.parent.each(function(chunk) {
      buffer += chunk;

      var match;
      while (match = delimiter.exec(buffer)) {
        end = match.index;
        if (fn(buffer.substring(start, end), index++) === false) {
          return false;
        }
        start = end + match[0].length;
      }

      buffer = buffer.substring(start);
      start = 0;
    });

    handle.onComplete(function() {
      if (buffer.length > 0) {
        fn(buffer, index++);
      }
    });

    return handle;
  };

  SplitStreamSequence.prototype.stringEach = function each(fn) {
    var delimiter  = this.delimiter,
        pieceIndex = 0,
        buffer = '',
        bufferIndex = 0;

    var handle = this.parent.each(function(chunk) {
      buffer += chunk;
      var delimiterIndex;
      while ((delimiterIndex = buffer.indexOf(delimiter)) >= 0) {
        var piece = buffer.substr(0,delimiterIndex);
        buffer = buffer.substr(delimiterIndex+delimiter.length);
        if (fn(piece,pieceIndex++) === false) {
          return false;
        }
      }
      return true;
    });

    handle.onComplete(function() {
      fn(buffer, pieceIndex++);
    });

    return handle;
  };

  StreamLikeSequence.prototype.lines = function lines() {
    return this.split("\n");
  };

  StreamLikeSequence.prototype.match = function match(pattern) {
    return new MatchedStreamSequence(this, pattern);
  };

  /**
   * @constructor
   */
  function MatchedStreamSequence(parent, pattern) {
    this.parent  = parent;
    this.pattern = cloneRegex(pattern);
  }

  MatchedStreamSequence.prototype = new AsyncSequence();

  MatchedStreamSequence.prototype.each = function each(fn) {
    var pattern = this.pattern,
        done      = false,
        i         = 0;

    return this.parent.each(function(chunk) {
      Lazy(chunk).match(pattern).each(function(match) {
        if (fn(match, i++) === false) {
          done = true;
          return false;
        }
      });

      return !done;
    });
  };

  /**
   * Defines a wrapper for custom {@link StreamLikeSequence}s. This is useful
   * if you want a way to handle a stream of events as a sequence, but you can't
   * use Lazy's existing interface (i.e., you're wrapping an object from a
   * library with its own custom events).
   *
   * This method defines a *factory*: that is, it produces a function that can
   * be used to wrap objects and return a {@link Sequence}. Hopefully the
   * example will make this clear.
   *
   * @public
   * @param {Function} initializer An initialization function called on objects
   *     created by this factory. `this` will be bound to the created object,
   *     which is an instance of {@link StreamLikeSequence}. Use `emit` to
   *     generate data for the sequence.
   * @returns {Function} A function that creates a new {@link StreamLikeSequence},
   *     initializes it using the specified function, and returns it.
   *
   * @example
   * var factory = Lazy.createWrapper(function(eventSource) {
   *   var sequence = this;
   *
   *   eventSource.handleEvent(function(data) {
   *     sequence.emit(data);
   *   });
   * });
   *
   * var eventEmitter = {
   *   triggerEvent: function(data) {
   *     eventEmitter.eventHandler(data);
   *   },
   *   handleEvent: function(handler) {
   *     eventEmitter.eventHandler = handler;
   *   },
   *   eventHandler: function() {}
   * };
   *
   * var events = [];
   *
   * factory(eventEmitter).each(function(e) {
   *   events.push(e);
   * });
   *
   * eventEmitter.triggerEvent('foo');
   * eventEmitter.triggerEvent('bar');
   *
   * events // => ['foo', 'bar']
   */
  Lazy.createWrapper = function createWrapper(initializer) {
    var ctor = function() {
      this.listeners = [];
    };

    ctor.prototype = new StreamLikeSequence();

    ctor.prototype.each = function(listener) {
      this.listeners.push(listener);
    };

    ctor.prototype.emit = function(data) {
      var listeners = this.listeners;

      for (var len = listeners.length, i = len - 1; i >= 0; --i) {
        if (listeners[i](data) === false) {
          listeners.splice(i, 1);
        }
      }
    };

    return function() {
      var sequence = new ctor();
      initializer.apply(sequence, arguments);
      return sequence;
    };
  };

  /**
   * Creates a {@link GeneratedSequence} using the specified generator function
   * and (optionally) length.
   *
   * @public
   * @param {function(number):*} generatorFn The function used to generate the
   *     sequence. This function accepts an index as a parameter and should return
   *     a value for that index in the resulting sequence.
   * @param {number=} length The length of the sequence, for sequences with a
   *     definite length.
   * @returns {GeneratedSequence} The generated sequence.
   *
   * @examples
   * var randomNumbers = Lazy.generate(Math.random);
   * var countingNumbers = Lazy.generate(function(i) { return i + 1; }, 5);
   *
   * randomNumbers          // instanceof Lazy.GeneratedSequence
   * randomNumbers.length() // => undefined
   * countingNumbers          // sequence: [1, 2, 3, 4, 5]
   * countingNumbers.length() // => 5
   */
  Lazy.generate = function generate(generatorFn, length) {
    return new GeneratedSequence(generatorFn, length);
  };

  /**
   * Creates a sequence from a given starting value, up to a specified stopping
   * value, incrementing by a given step. Invalid values for any of these
   * arguments (e.g., a step of 0) result in an empty sequence.
   *
   * @public
   * @returns {GeneratedSequence} The sequence defined by the given ranges.
   *
   * @examples
   * Lazy.range(3)         // sequence: [0, 1, 2]
   * Lazy.range(1, 4)      // sequence: [1, 2, 3]
   * Lazy.range(2, 10, 2)  // sequence: [2, 4, 6, 8]
   * Lazy.range(5, 1, 2)   // sequence: []
   * Lazy.range(5, 15, -2) // sequence: []
   * Lazy.range(3, 10, 3)  // sequence: [3, 6, 9]
   * Lazy.range(5, 2)      // sequence: [5, 4, 3]
   * Lazy.range(7, 2, -2)  // sequence: [7, 5, 3]
   * Lazy.range(3, 5, 0)   // sequence: []
   */
  Lazy.range = function range() {
    var start = arguments.length > 1 ? arguments[0] : 0,
        stop  = arguments.length > 1 ? arguments[1] : arguments[0],
        step  = arguments.length > 2 && arguments[2];

    if (step === false) {
      step = stop > start ? 1 : -1;
    }

    if (step === 0) {
      return Lazy([]);
    }

    return Lazy.generate(function(i) { return start + (step * i); })
      .take(Math.ceil((stop - start) / step));
  };

  /**
   * Creates a sequence consisting of the given value repeated a specified number
   * of times.
   *
   * @public
   * @param {*} value The value to repeat.
   * @param {number=} count The number of times the value should be repeated in
   *     the sequence. If this argument is omitted, the value will repeat forever.
   * @returns {GeneratedSequence} The sequence containing the repeated value.
   *
   * @examples
   * Lazy.repeat("hi", 3)          // sequence: ["hi", "hi", "hi"]
   * Lazy.repeat("young")          // instanceof Lazy.GeneratedSequence
   * Lazy.repeat("young").length() // => undefined
   * Lazy.repeat("young").take(3)  // sequence: ["young", "young", "young"]
   */
  Lazy.repeat = function repeat(value, count) {
    return Lazy.generate(function() { return value; }, count);
  };

  Lazy.Sequence           = Sequence;
  Lazy.ArrayLikeSequence  = ArrayLikeSequence;
  Lazy.ObjectLikeSequence = ObjectLikeSequence;
  Lazy.StringLikeSequence = StringLikeSequence;
  Lazy.StreamLikeSequence = StreamLikeSequence;
  Lazy.GeneratedSequence  = GeneratedSequence;
  Lazy.AsyncSequence      = AsyncSequence;
  Lazy.AsyncHandle        = AsyncHandle;

  /*** Useful utility methods ***/

  /**
   * Creates a shallow copy of an array or object.
   *
   * @examples
   * var array  = [1, 2, 3], clonedArray,
   *     object = { foo: 1, bar: 2 }, clonedObject;
   *
   * clonedArray = Lazy.clone(array); // => [1, 2, 3]
   * clonedArray.push(4); // clonedArray == [1, 2, 3, 4]
   * array; // => [1, 2, 3]
   *
   * clonedObject = Lazy.clone(object); // => { foo: 1, bar: 2 }
   * clonedObject.baz = 3; // clonedObject == { foo: 1, bar: 2, baz: 3 }
   * object; // => { foo: 1, bar: 2 }
   */
  Lazy.clone = function clone(target) {
    return Lazy(target).value();
  };

  /**
   * Marks a method as deprecated, so calling it will issue a console warning.
   */
  Lazy.deprecate = function deprecate(message, fn) {
    return function() {
      console.warn(message);
      return fn.apply(this, arguments);
    };
  };

  var arrayPop   = Array.prototype.pop,
      arraySlice = Array.prototype.slice;

  /**
   * Creates a callback... you know, Lo-Dash style.
   *
   * - for functions, just returns the function
   * - for strings, returns a pluck-style callback
   * - for objects, returns a where-style callback
   *
   * @private
   * @param {Function|string|Object} callback A function, string, or object to
   *     convert to a callback.
   * @param {*} defaultReturn If the callback is undefined, a default return
   *     value to use for the function.
   * @returns {Function} The callback function.
   *
   * @examples
   * createCallback(function() {})                  // instanceof Function
   * createCallback('foo')                          // instanceof Function
   * createCallback('foo')({ foo: 'bar'})           // => 'bar'
   * createCallback({ foo: 'bar' })({ foo: 'bar' }) // => true
   * createCallback({ foo: 'bar' })({ foo: 'baz' }) // => false
   */
  function createCallback(callback, defaultValue) {
    switch (typeof callback) {
      case "function":
        return callback;

      case "string":
        return function(e) {
          return e[callback];
        };

      case "object":
        return function(e) {
          return Lazy(callback).all(function(value, key) {
            return e[key] === value;
          });
        };

      case "undefined":
        return defaultValue ?
          function() { return defaultValue; } :
          Lazy.identity;

      default:
        throw new Error("Don't know how to make a callback from a " + typeof callback + "!");
    }
  }

  /**
   * Takes a function that returns a value for one argument and produces a
   * function that compares two arguments.
   *
   * @private
   * @param {Function|string|Object} callback A function, string, or object to
   *     convert to a callback using `createCallback`.
   * @returns {Function} A function that accepts two values and returns 1 if
   *     the first is greater, -1 if the second is greater, or 0 if they are
   *     equivalent.
   *
   * @examples
   * createComparator('a')({ a: 1 }, { a: 2 });       // => -1
   * createComparator('a')({ a: 6 }, { a: 2 });       // => 1
   * createComparator('a')({ a: 1 }, { a: 1 });       // => 0
   * createComparator()(3, 5);                        // => -1
   * createComparator()(7, 5);                        // => 1
   * createComparator()(3, 3);                        // => 0
   */
  function createComparator(callback, descending) {
    if (!callback) { return compare; }

    callback = createCallback(callback);

    return function(x, y) {
      return compare(callback(x), callback(y));
    };
  }

  /**
   * Takes a function and returns a function with the same logic but the
   * arguments reversed. Only applies to functions w/ arity=2 as this is private
   * and I can do what I want.
   *
   * @private
   * @param {Function} fn The function to "reverse"
   * @returns {Function} The "reversed" function
   *
   * @examples
   * reverseArguments(function(x, y) { return x + y; })('a', 'b'); // => 'ba'
   */
  function reverseArguments(fn) {
    return function(x, y) { return fn(y, x); };
  }

  /**
   * Creates a Set containing the specified values.
   *
   * @param {...Array} values One or more array(s) of values used to populate the
   *     set.
   * @returns {Set} A new set containing the values passed in.
   */
  function createSet(values) {
    var set = new Set();
    Lazy(values || []).flatten().each(function(e) {
      set.add(e);
    });
    return set;
  }

  /**
   * Compares two elements for sorting purposes.
   *
   * @private
   * @param {*} x The left element to compare.
   * @param {*} y The right element to compare.
   * @returns {number} 1 if x > y, -1 if x < y, or 0 if x and y are equal.
   *
   * @examples
   * compare(1, 2)     // => -1
   * compare(1, 1)     // => 0
   * compare(2, 1)     // => 1
   * compare('a', 'b') // => -1
   */
  function compare(x, y) {
    if (x === y) {
      return 0;
    }

    return x > y ? 1 : -1;
  }

  /**
   * Iterates over every element in an array.
   *
   * @param {Array} array The array.
   * @param {Function} fn The function to call on every element, which can return
   *     false to stop the iteration early.
   * @returns {boolean} True if every element in the entire sequence was iterated,
   *     otherwise false.
   */
  function forEach(array, fn) {
    var i = -1,
        len = array.length;

    while (++i < len) {
      if (fn(array[i], i) === false) {
        return false;
      }
    }

    return true;
  }

  function getFirst(sequence) {
    var result;
    sequence.each(function(e) {
      result = e;
      return false;
    });
    return result;
  }

  /**
   * Checks if an element exists in an array.
   *
   * @private
   * @param {Array} array
   * @param {*} element
   * @returns {boolean} Whether or not the element exists in the array.
   *
   * @examples
   * arrayContains([1, 2], 2)              // => true
   * arrayContains([1, 2], 3)              // => false
   * arrayContains([undefined], undefined) // => true
   * arrayContains([NaN], NaN)             // => true
   */
  function arrayContains(array, element) {
    var i = -1,
        length = array.length;

    // Special handling for NaN
    if (element !== element) {
      while (++i < length) {
        if (array[i] !== array[i]) {
          return true;
        }
      }
      return false;
    }

    while (++i < length) {
      if (array[i] === element) {
        return true;
      }
    }
    return false;
  }

  /**
   * Checks if an element exists in an array before a given index.
   *
   * @private
   * @param {Array} array
   * @param {*} element
   * @param {number} index
   * @param {Function} keyFn
   * @returns {boolean}
   *
   * @examples
   * arrayContainsBefore([1, 2, 3], 3, 2) // => false
   * arrayContainsBefore([1, 2, 3], 3, 3) // => true
   */
  function arrayContainsBefore(array, element, index, keyFn) {
    var i = -1;

    if (keyFn) {
      keyFn = createCallback(keyFn);
      while (++i < index) {
        if (keyFn(array[i]) === keyFn(element)) {
          return true;
        }
      }

    } else {
      while (++i < index) {
        if (array[i] === element) {
          return true;
        }
      }
    }

    return false;
  }

  /**
   * Swaps the elements at two specified positions of an array.
   *
   * @private
   * @param {Array} array
   * @param {number} i
   * @param {number} j
   *
   * @examples
   * var array = [1, 2, 3, 4, 5];
   *
   * swap(array, 2, 3) // array == [1, 2, 4, 3, 5]
   */
  function swap(array, i, j) {
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  /**
   * "Clones" a regular expression (but makes it always global).
   *
   * @private
   * @param {RegExp|string} pattern
   * @returns {RegExp}
   */
  function cloneRegex(pattern) {
    return eval("" + pattern + (!pattern.global ? "g" : ""));
  };

  /**
   * A collection of unique elements.
   *
   * @private
   * @constructor
   *
   * @examples
   * var set  = new Set(),
   *     obj1 = {},
   *     obj2 = {},
   *     fn1 = function fn1() {},
   *     fn2 = function fn2() {};
   *
   * set.add('foo')            // => true
   * set.add('foo')            // => false
   * set.add(1)                // => true
   * set.add(1)                // => false
   * set.add('1')              // => true
   * set.add('1')              // => false
   * set.add(obj1)             // => true
   * set.add(obj1)             // => false
   * set.add(obj2)             // => true
   * set.add(fn1)              // => true
   * set.add(fn2)              // => true
   * set.add(fn2)              // => false
   * set.contains('__proto__') // => false
   * set.add('__proto__')      // => true
   * set.add('__proto__')      // => false
   * set.contains('add')       // => false
   * set.add('add')            // => true
   * set.add('add')            // => false
   * set.contains(undefined)   // => false
   * set.add(undefined)        // => true
   * set.contains(undefined)   // => true
   * set.contains('undefined') // => false
   * set.add('undefined')      // => true
   * set.contains('undefined') // => true
   * set.contains(NaN)         // => false
   * set.add(NaN)              // => true
   * set.contains(NaN)         // => true
   * set.contains('NaN')       // => false
   * set.add('NaN')            // => true
   * set.contains('NaN')       // => true
   * set.contains('@foo')      // => false
   * set.add('@foo')           // => true
   * set.contains('@foo')      // => true
   */
  function Set() {
    this.table   = {};
    this.objects = [];
  }

  /**
   * Attempts to add a unique value to the set.
   *
   * @param {*} value The value to add.
   * @returns {boolean} True if the value was added to the set (meaning an equal
   *     value was not already present), or else false.
   */
  Set.prototype.add = function add(value) {
    var table = this.table,
        type  = typeof value,

        // only applies for strings
        firstChar,

        // only applies for objects
        objects;

    switch (type) {
      case "number":
      case "boolean":
      case "undefined":
        if (!table[value]) {
          table[value] = true;
          return true;
        }
        return false;

      case "string":
        // Essentially, escape the first character if it could possibly collide
        // with a number, boolean, or undefined (or a string that happens to start
        // with the escape character!), OR if it could override a special property
        // such as '__proto__' or 'constructor'.
        switch (value.charAt(0)) {
          case "_": // e.g., __proto__
          case "f": // for 'false'
          case "t": // for 'true'
          case "c": // for 'constructor'
          case "u": // for 'undefined'
          case "@": // escaped
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
          case "N": // for NaN
            value = "@" + value;
        }
        if (!table[value]) {
          table[value] = true;
          return true;
        }
        return false;

      default:
        // For objects and functions, we can't really do anything other than store
        // them in an array and do a linear search for reference equality.
        objects = this.objects;
        if (!arrayContains(objects, value)) {
          objects.push(value);
          return true;
        }
        return false;
    }
  };

  /**
   * Checks whether the set contains a value.
   *
   * @param {*} value The value to check for.
   * @returns {boolean} True if the set contains the value, or else false.
   */
  Set.prototype.contains = function contains(value) {
    var type = typeof value,

        // only applies for strings
        firstChar;

    switch (type) {
      case "number":
      case "boolean":
      case "undefined":
        return !!this.table[value];

      case "string":
        // Essentially, escape the first character if it could possibly collide
        // with a number, boolean, or undefined (or a string that happens to start
        // with the escape character!), OR if it could override a special property
        // such as '__proto__' or 'constructor'.
        switch (value.charAt(0)) {
          case "_": // e.g., __proto__
          case "f": // for 'false'
          case "t": // for 'true'
          case "c": // for 'constructor'
          case "u": // for 'undefined'
          case "@": // escaped
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
          case "N": // for NaN
            value = "@" + value;
        }
        return !!this.table[value];

      default:
        // For objects and functions, we can't really do anything other than store
        // them in an array and do a linear search for reference equality.
        return arrayContains(this.objects, value);
    }
  };

  /**
   * A "rolling" queue, with a fixed capacity. As items are added to the head,
   * excess items are dropped from the tail.
   *
   * @private
   * @constructor
   *
   * @examples
   * var queue = new Queue(3);
   *
   * queue.add(1).toArray()        // => [1]
   * queue.add(2).toArray()        // => [1, 2]
   * queue.add(3).toArray()        // => [1, 2, 3]
   * queue.add(4).toArray()        // => [2, 3, 4]
   * queue.add(5).add(6).toArray() // => [4, 5, 6]
   * queue.add(7).add(8).toArray() // => [6, 7, 8]
   *
   * // also want to check corner cases
   * new Queue(1).add('foo').add('bar').toArray() // => ['bar']
   * new Queue(0).add('foo').toArray()            // => []
   * new Queue(-1)                                // throws
   *
   * @benchmarks
   * function populateQueue(count, capacity) {
   *   var q = new Queue(capacity);
   *   for (var i = 0; i < count; ++i) {
   *     q.add(i);
   *   }
   * }
   *
   * function populateArray(count, capacity) {
   *   var arr = [];
   *   for (var i = 0; i < count; ++i) {
   *     if (arr.length === capacity) { arr.shift(); }
   *     arr.push(i);
   *   }
   * }
   *
   * populateQueue(100, 10); // populating a Queue
   * populateArray(100, 10); // populating an Array
   */
  function Queue(capacity) {
    this.contents = new Array(capacity);
    this.start    = 0;
    this.count    = 0;
  }

  /**
   * Adds an item to the queue, and returns the queue.
   */
  Queue.prototype.add = function add(element) {
    var contents = this.contents,
        capacity = contents.length,
        start    = this.start;

    if (this.count === capacity) {
      contents[start] = element;
      this.start = (start + 1) % capacity;

    } else {
      contents[this.count++] = element;
    }

    return this;
  };

  /**
   * Returns an array containing snapshot of the queue's contents.
   */
  Queue.prototype.toArray = function toArray() {
    var contents = this.contents,
        start    = this.start,
        count    = this.count;

    var snapshot = contents.slice(start, start + count);
    if (snapshot.length < count) {
      snapshot = snapshot.concat(contents.slice(0, count - snapshot.length));
    }

    return snapshot;
  };

  /**
   * Shared base method for defining new sequence types.
   */
  function defineSequenceType(base, name, overrides) {
    /** @constructor */
    var ctor = function ctor() {};

    // Make this type inherit from the specified base.
    ctor.prototype = new base();

    // Attach overrides to the new sequence type's prototype.
    for (var override in overrides) {
      ctor.prototype[override] = overrides[override];
    }

    // Define a factory method that sets the new sequence's parent to the caller
    // and (optionally) applies any additional initialization logic.
    // Expose this as a chainable method so that we can do:
    // Lazy(...).map(...).filter(...).blah(...);
    var factory = function factory() {
      var sequence = new ctor();

      // Every sequence needs a reference to its parent in order to work.
      sequence.parent = this;

      // If a custom init function was supplied, call it now.
      if (sequence.init) {
        sequence.init.apply(sequence, arguments);
      }

      return sequence;
    };

    var methodNames = typeof name === 'string' ? [name] : name;
    for (var i = 0; i < methodNames.length; ++i) {
      base.prototype[methodNames[i]] = factory;
    }

    return ctor;
  }

  return Lazy;
});

},{}],94:[function(requireb,module,exports){
(function(factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['emailjs-mime-parser', 'emailjs-stringencoding'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(requireb('emailjs-mime-parser'), requireb('emailjs-stringencoding'));
    }
})(function(MimeParser, stringencoding) {
    'use strict';

    var TextDecoder = stringencoding.TextDecoder;

    var parser = {};

    // parse the body parts and handle the results for the individual mime nodes
    parser.parse = function(bodyParts, cb) {
        var parsedCounter = 0;

        // feed each body part to the mimeparser
        bodyParts.forEach(function(bodyPart) {
            var parser = new MimeParser();

            // body part has been parsed
            parser.onend = function() {
                delete bodyPart.raw; // part has been parsed, we can remove the raw attribute

                bodyPart.content = []; // holds subparts, e.g. for encrypted and/or signed nodes

                // traverse through the parsed result
                walkMimeTree(parser.node, bodyPart);

                // we're done with a body part, are we done with all parts?
                parsedCounter++;
                if (parsedCounter < bodyParts.length) {
                    // nope, more body parts left to parse
                    return;
                }

                // we're done
                cb(bodyParts);
            };

            // parse the body part
            parser.end(bodyPart.raw);
        });
    };

    // functions that return true/false if they were able to handle a certain kind of body part
    var mimeTreeMatchers = [matchEncrypted, matchSigned, matchAttachment, matchText, matchHtml];

    // do a depth-first traversal of the body part, check for each node if it matches
    // a certain type, then poke into its child nodes. not a pure inorder traversal b/c
    // lookup is terminated when higher-up node can already be matched, e.g. encrypted/signed
    // multipart nodes
    function walkMimeTree(mimeNode, bodyPart) {
        // normalize the mime node
        normalize(mimeNode);

        // iterate through the matchers and see how to best take care of the mime node
        var i = mimeTreeMatchers.length;
        while (i--) {
            if (mimeTreeMatchers[i](mimeNode, bodyPart)) {
                return;
            }
        }

        // depth-first traverse the child nodes
        if (mimeNode._childNodes) {
            mimeNode._childNodes.forEach(function(childNode) {
                walkMimeTree(childNode, bodyPart);
            });
        }
    }

    /**
     * Matches encrypted PGP/MIME nodes
     *
     * multipart/encrypted
     * |
     * |-- application/pgp-encrypted
     * |-- application/octet-stream <-- ciphertext
     */
    function matchEncrypted(node, bodyPart) {
        var isEncrypted = /^multipart\/encrypted/i.test(node.contentType.value) && node._childNodes && node._childNodes[1];
        if (!isEncrypted) {
            return false;
        }

        // normalize the child node
        normalize(node._childNodes[1]);

        bodyPart.content = new TextDecoder('utf-8').decode(node._childNodes[1].content);
        return true;
    }

    /**
     * Matches signed PGP/MIME nodes
     *
     * multipart/signed
     * |
     * |-- *** (signed mime sub-tree)
     * |-- application/pgp-signature
     */
    function matchSigned(node, bodyPart) {
        // does the content type fit?
        var isSigned = /^multipart\/signed/i.test(node.contentType.value);

        // does the mime node have child nodes?
        isSigned = isSigned && node._childNodes && node._childNodes[0] && node._childNodes[1];

        // normalize the child nodes
        isSigned && normalize(node._childNodes[0]);
        isSigned && normalize(node._childNodes[1]);

        // do the child nodes fit?
        isSigned = isSigned && /^application\/pgp-signature/i.test(node._childNodes[1].contentType.value);

        if (!isSigned) {
            return false;
        }

        // remember the correct node to do the parsing of the nested nodes
        var part;
        if (bodyPart.type === 'signed') {
            // this mime node is the signed node we gave to the mimeparser
            part = bodyPart;
        } else {
            // this parsed mime node is part of an encrypted node
            part = {
                type: 'signed',
                content: []
            };
            bodyPart.content.push(part);
        }

        // email.js automatically converts \r\n to \n ... normalize to \r\n for signature check!
        part.signedMessage = node._childNodes[0].raw.replace(/\r/g, '').replace(/\n/g, '\r\n');
        part.signature = new TextDecoder('utf-8').decode(node._childNodes[1].content);

        // walk the mime tree to find the nested nodes
        walkMimeTree(node._childNodes[0], part);

        return true;
    }

    /**
     * Matches non-attachment text/plain nodes
     */
    function matchText(node, bodyPart) {
        var disposition = node.headers['content-disposition'],
            isText = (/^text\/plain/i.test(node.contentType.value) && (!disposition || (disposition && disposition[0].value !== 'attachment')));

        if (!isText) {
            return false;
        }

        var content = new TextDecoder('utf-8').decode(node.content).replace(/([\r]?\n)*$/g, '');
        if (bodyPart.type === 'text') {
            // this mime node is the text node we gave to the mimeparser
            bodyPart.content = content;
        } else {
            // this mime node is part of a signed or encrypted node
            bodyPart.content.push({
                type: 'text',
                content: content
            });
        }

        return true;
    }

    /**
     * Matches non-attachment text/html nodes
     */
    function matchHtml(node, bodyPart) {
        var disposition = node.headers['content-disposition'],
            isHtml = (/^text\/html/i.test(node.contentType.value) && (!disposition || (disposition && disposition[0].value !== 'attachment')));

        if (!isHtml) {
            return false;
        }

        var content = new TextDecoder('utf-8').decode(node.content).replace(/([\r]?\n)*$/g, '');
        if (bodyPart.type === 'html') {
            // this mime node is the html node we gave to the mimeparser
            bodyPart.content = content;
        } else {
            // this mime node is part of a signed or encrypted node
            bodyPart.content.push({
                type: 'html',
                content: content
            });
        }

        return true;
    }

    /**
     * Matches non-attachment text/html nodes
     */
    function matchAttachment(node, bodyPart) {
        var disposition = node.headers['content-disposition'],
            contentType = node.contentType.value,
            isTextAttachment = /^text\//i.test(contentType) && disposition && disposition[0].value === 'attachment',
            isOtherAttachment = !/^text\//i.test(contentType) && !/^multipart\//i.test(contentType);

        if (!isTextAttachment && !isOtherAttachment) {
            return false;
        }

        var part;
        if (bodyPart.type === 'attachment') {
            // this mime node is the attachment node we gave to the mimeparser
            part = bodyPart;
        } else {
            // this mime node is part of a signed or encrypted node
            part = {
                type: 'attachment'
            };
            bodyPart.content.push(part);
        }

        part.content = node.content;
        part.id = part.id || (node.headers['content-id'] && node.headers['content-id'][0].value.replace(/[<>]/g, ''));
        part.mimeType = part.mimeType || contentType;
        part.filename = part.filename || (disposition && disposition[0].params.filename) || node.contentType.params.name || 'attachment';

        return true;
    }


    /**
     * Normalizes a mime node where necessary
     * - add contentType
     * - add contentType params
     * - add content
     * - add raw
     * - normalize content-id
     * - normalize content-disposition
     */
    function normalize(node) {
        // normalize the optional content-type, fallback to 'application/octet-stream'
        node.contentType = node.contentType || {};
        node.contentType.value = node.contentType.value || 'application/octet-stream';
        node.contentType.params = node.contentType.params || {};

        // normalize the contents
        node.raw = node.raw || '';
        node.content = node.content || new Uint8Array(0);

        // optional
        if (node.headers['content-id']) {
            // node has content-id set, let's normalize it
            var cid = node.headers['content-id'][0] = node.headers['content-id'][0] || {};
            cid.value = cid.value || '';
        }

        // optional
        if (node.headers['content-disposition']) {
            // this is an attachment node, let's normalize node.headers['content-disposition']
            var disposition = node.headers['content-disposition'][0] = node.headers['content-disposition'][0] || {};
            disposition.value = disposition.value || '';
            disposition.params = disposition.params || {};
        }
    }

    return parser;
});

},{"emailjs-mime-parser":74,"emailjs-stringencoding":75}],95:[function(requireb,module,exports){
(function(factory) {
    'use strict';

    module.exports = factory(requireb('./mailreader-parser'));
})(function(parser) {
    'use strict';

    var mailreader = {};

    /**
     * Interprets an rfc block
     * @param {String} options.bodyParts Body parts for parsing, as returned by https://github.com/whiteout-io/imap-client
     * @param {Function} callback will be called the message is parsed
     */
    mailreader.parse = function(options, callback) {
        parser.parse(options.bodyParts, function(parsed) {
            callback(null, parsed);
        });
    };

    return mailreader;
});

},{"./mailreader-parser":94}],96:[function(requireb,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],97:[function(requireb,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

},{}],98:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{}],99:[function(requireb,module,exports){
'use strict';

module.exports = typeof Promise === 'function' ? Promise : requireb('pinkie');

},{"pinkie":100}],100:[function(requireb,module,exports){
'use strict';

var PENDING = 'pending';
var SETTLED = 'settled';
var FULFILLED = 'fulfilled';
var REJECTED = 'rejected';
var NOOP = function () {};
var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';

var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
var asyncQueue = [];
var asyncTimer;

function asyncFlush() {
	// run promise callbacks
	for (var i = 0; i < asyncQueue.length; i++) {
		asyncQueue[i][0](asyncQueue[i][1]);
	}

	// reset async asyncQueue
	asyncQueue = [];
	asyncTimer = false;
}

function asyncCall(callback, arg) {
	asyncQueue.push([callback, arg]);

	if (!asyncTimer) {
		asyncTimer = true;
		asyncSetTimer(asyncFlush, 0);
	}
}

function invokeResolver(resolver, promise) {
	function resolvePromise(value) {
		resolve(promise, value);
	}

	function rejectPromise(reason) {
		reject(promise, reason);
	}

	try {
		resolver(resolvePromise, rejectPromise);
	} catch (e) {
		rejectPromise(e);
	}
}

function invokeCallback(subscriber) {
	var owner = subscriber.owner;
	var settled = owner._state;
	var value = owner._data;
	var callback = subscriber[settled];
	var promise = subscriber.then;

	if (typeof callback === 'function') {
		settled = FULFILLED;
		try {
			value = callback(value);
		} catch (e) {
			reject(promise, e);
		}
	}

	if (!handleThenable(promise, value)) {
		if (settled === FULFILLED) {
			resolve(promise, value);
		}

		if (settled === REJECTED) {
			reject(promise, value);
		}
	}
}

function handleThenable(promise, value) {
	var resolved;

	try {
		if (promise === value) {
			throw new TypeError('A promises callback cannot return that same promise.');
		}

		if (value && (typeof value === 'function' || typeof value === 'object')) {
			// then should be retrieved only once
			var then = value.then;

			if (typeof then === 'function') {
				then.call(value, function (val) {
					if (!resolved) {
						resolved = true;

						if (value === val) {
							fulfill(promise, val);
						} else {
							resolve(promise, val);
						}
					}
				}, function (reason) {
					if (!resolved) {
						resolved = true;

						reject(promise, reason);
					}
				});

				return true;
			}
		}
	} catch (e) {
		if (!resolved) {
			reject(promise, e);
		}

		return true;
	}

	return false;
}

function resolve(promise, value) {
	if (promise === value || !handleThenable(promise, value)) {
		fulfill(promise, value);
	}
}

function fulfill(promise, value) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = value;

		asyncCall(publishFulfillment, promise);
	}
}

function reject(promise, reason) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = reason;

		asyncCall(publishRejection, promise);
	}
}

function publish(promise) {
	promise._then = promise._then.forEach(invokeCallback);
}

function publishFulfillment(promise) {
	promise._state = FULFILLED;
	publish(promise);
}

function publishRejection(promise) {
	promise._state = REJECTED;
	publish(promise);
	if (!promise._handled && isNode) {
		global.process.emit('unhandledRejection', promise._data, promise);
	}
}

function notifyRejectionHandled(promise) {
	global.process.emit('rejectionHandled', promise);
}

/**
 * @class
 */
function Promise(resolver) {
	if (typeof resolver !== 'function') {
		throw new TypeError('Promise resolver ' + resolver + ' is not a function');
	}

	if (this instanceof Promise === false) {
		throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
	}

	this._then = [];

	invokeResolver(resolver, this);
}

Promise.prototype = {
	constructor: Promise,

	_state: PENDING,
	_then: null,
	_data: undefined,
	_handled: false,

	then: function (onFulfillment, onRejection) {
		var subscriber = {
			owner: this,
			then: new this.constructor(NOOP),
			fulfilled: onFulfillment,
			rejected: onRejection
		};

		if ((onRejection || onFulfillment) && !this._handled) {
			this._handled = true;
			if (this._state === REJECTED && isNode) {
				asyncCall(notifyRejectionHandled, this);
			}
		}

		if (this._state === FULFILLED || this._state === REJECTED) {
			// already resolved, call callback async
			asyncCall(invokeCallback, subscriber);
		} else {
			// subscribe
			this._then.push(subscriber);
		}

		return subscriber.then;
	},

	catch: function (onRejection) {
		return this.then(null, onRejection);
	}
};

Promise.all = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.all().');
	}

	return new Promise(function (resolve, reject) {
		var results = [];
		var remaining = 0;

		function resolver(index) {
			remaining++;
			return function (value) {
				results[index] = value;
				if (!--remaining) {
					resolve(results);
				}
			};
		}

		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolver(i), reject);
			} else {
				results[i] = promise;
			}
		}

		if (!remaining) {
			resolve(results);
		}
	});
};

Promise.race = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.race().');
	}

	return new Promise(function (resolve, reject) {
		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolve, reject);
			} else {
				resolve(promise);
			}
		}
	});
};

Promise.resolve = function (value) {
	if (value && typeof value === 'object' && value.constructor === Promise) {
		return value;
	}

	return new Promise(function (resolve) {
		resolve(value);
	});
};

Promise.reject = function (reason) {
	return new Promise(function (resolve, reject) {
		reject(reason);
	});
};

module.exports = Promise;

},{}],101:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],102:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],103:[function(requireb,module,exports){
'use strict';

exports.decode = exports.parse = requireb('./decode');
exports.encode = exports.stringify = requireb('./encode');

},{"./decode":101,"./encode":102}],104:[function(requireb,module,exports){
module.exports = requireb("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":105}],105:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = requireb('core-util-is');
util.inherits = requireb('inherits');
/*</replacement>*/

var Readable = requireb('./_stream_readable');
var Writable = requireb('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":107,"./_stream_writable":109,"core-util-is":48,"inherits":91}],106:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = requireb('./_stream_transform');

/*<replacement>*/
var util = requireb('core-util-is');
util.inherits = requireb('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":108,"core-util-is":48,"inherits":91}],107:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = requireb('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = requireb('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = requireb('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = requireb('stream');

/*<replacement>*/
var util = requireb('core-util-is');
util.inherits = requireb('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = requireb('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = requireb('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = requireb('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = requireb('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = requireb('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

},{"./_stream_duplex":105,"buffer":7,"core-util-is":48,"events":87,"inherits":91,"isarray":92,"stream":151,"string_decoder/":152,"util":5}],108:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = requireb('./_stream_duplex');

/*<replacement>*/
var util = requireb('core-util-is');
util.inherits = requireb('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":105,"core-util-is":48,"inherits":91}],109:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = requireb('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = requireb('core-util-is');
util.inherits = requireb('inherits');
/*</replacement>*/

var Stream = requireb('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = requireb('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = requireb('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":105,"buffer":7,"core-util-is":48,"inherits":91,"stream":151}],110:[function(requireb,module,exports){
module.exports = requireb("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":106}],111:[function(requireb,module,exports){
exports = module.exports = requireb('./lib/_stream_readable.js');
exports.Stream = requireb('stream');
exports.Readable = exports;
exports.Writable = requireb('./lib/_stream_writable.js');
exports.Duplex = requireb('./lib/_stream_duplex.js');
exports.Transform = requireb('./lib/_stream_transform.js');
exports.PassThrough = requireb('./lib/_stream_passthrough.js');
if (!process.browser && process.env.READABLE_STREAM === 'disable') {
  module.exports = requireb('stream');
}

},{"./lib/_stream_duplex.js":105,"./lib/_stream_passthrough.js":106,"./lib/_stream_readable.js":107,"./lib/_stream_transform.js":108,"./lib/_stream_writable.js":109,"stream":151}],112:[function(requireb,module,exports){
module.exports = requireb("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":108}],113:[function(requireb,module,exports){
module.exports = requireb("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":109}],114:[function(requireb,module,exports){
module.exports = function (string) {
  return string.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&")
}

},{}],115:[function(requireb,module,exports){
"use strict";

module.exports =
{
	// Output
	ABSOLUTE:      "absolute",
	PATH_RELATIVE: "pathRelative",
	ROOT_RELATIVE: "rootRelative",
	SHORTEST:      "shortest"
};

},{}],116:[function(requireb,module,exports){
"use strict";

var constants = requireb("./constants");



function formatAuth(urlObj, options)
{
	if (urlObj.auth && !options.removeAuth && (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE))
	{
		return urlObj.auth + "@";
	}
	
	return "";
}



function formatHash(urlObj, options)
{
	return urlObj.hash ? urlObj.hash : "";
}



function formatHost(urlObj, options)
{
	if (urlObj.host.full && (urlObj.extra.relation.maximumAuth || options.output===constants.ABSOLUTE))
	{
		return urlObj.host.full;
	}
	
	return "";
}



function formatPath(urlObj, options)
{
	var str = "";
	
	var absolutePath = urlObj.path.absolute.string;
	var relativePath = urlObj.path.relative.string;
	var resource = showResource(urlObj, options);
	
	if (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE || options.output===constants.ROOT_RELATIVE)
	{
		str = absolutePath;
	}
	else if (relativePath.length<=absolutePath.length && options.output===constants.SHORTEST || options.output===constants.PATH_RELATIVE)
	{
		str = relativePath;
		
		if (str === "")
		{
			var query = showQuery(urlObj,options) && !!getQuery(urlObj,options);
			
			if (urlObj.extra.relation.maximumPath && !resource)
			{
				str = "./";
			}
			else if (urlObj.extra.relation.overridesQuery && !resource && !query)
			{
				str = "./";
			}
		}
	}
	else
	{
		str = absolutePath;
	}
	
	if ( str==="/" && !resource && options.removeRootTrailingSlash && (!urlObj.extra.relation.minimumPort || options.output===constants.ABSOLUTE) )
	{
		str = "";
	}
	
	return str;
}



function formatPort(urlObj, options)
{
	if (urlObj.port && !urlObj.extra.portIsDefault && urlObj.extra.relation.maximumHost)
	{
		return ":" + urlObj.port;
	}
	
	return "";
}



function formatQuery(urlObj, options)
{
	return showQuery(urlObj,options) ? getQuery(urlObj, options) : "";
}



function formatResource(urlObj, options)
{
	return showResource(urlObj,options) ? urlObj.resource : "";
}



function formatScheme(urlObj, options)
{
	var str = "";
	
	if (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE)
	{
		if (!urlObj.extra.relation.minimumScheme || !options.schemeRelative || options.output===constants.ABSOLUTE)
		{
			str += urlObj.scheme + "://";
		}
		else
		{
			str += "//";
		}
	}
	
	return str;
}



function formatUrl(urlObj, options)
{
	var url = "";
	
	url += formatScheme(urlObj, options);
	url += formatAuth(urlObj, options);
	url += formatHost(urlObj, options);
	url += formatPort(urlObj, options);
	url += formatPath(urlObj, options);
	url += formatResource(urlObj, options);
	url += formatQuery(urlObj, options);
	url += formatHash(urlObj, options);
	
	return url;
}



function getQuery(urlObj, options)
{
	var stripQuery = options.removeEmptyQueries && urlObj.extra.relation.minimumPort;
	
	return urlObj.query.string[ stripQuery ? "stripped" : "full" ];
}



function showQuery(urlObj, options)
{
	return !urlObj.extra.relation.minimumQuery || options.output===constants.ABSOLUTE || options.output===constants.ROOT_RELATIVE;
}



function showResource(urlObj, options)
{
	var removeIndex = options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex;
	var removeMatchingResource = urlObj.extra.relation.minimumResource && options.output!==constants.ABSOLUTE && options.output!==constants.ROOT_RELATIVE;
	
	return !!urlObj.resource && !removeMatchingResource && !removeIndex;
}



module.exports = formatUrl;

},{"./constants":115}],117:[function(requireb,module,exports){
"use strict";

var constants  = requireb("./constants");
var formatUrl  = requireb("./format");
var getOptions = requireb("./options");
var objUtils   = requireb("./util/object");
var parseUrl   = requireb("./parse");
var relateUrl  = requireb("./relate");



function RelateUrl(from, options)
{
	this.options = getOptions(options,
	{
		defaultPorts: {ftp:21, http:80, https:443},
		directoryIndexes: ["index.html"],
		ignore_www: false,
		output: RelateUrl.SHORTEST,
		rejectedSchemes: ["data","javascript","mailto"],
		removeAuth: false,
		removeDirectoryIndexes: true,
		removeEmptyQueries: false,
		removeRootTrailingSlash: true,
		schemeRelative: true,
		site: undefined,
		slashesDenoteHost: true
	});
	
	this.from = parseUrl.from(from, this.options, null);
}



/*
	Usage: instance=new RelateUrl(); instance.relate();
*/
RelateUrl.prototype.relate = function(from, to, options)
{
	// relate(to,options)
	if ( objUtils.isPlainObject(to) )
	{
		options = to;
		to = from;
		from = null;
	}
	// relate(to)
	else if (!to)
	{
		to = from;
		from = null;
	}
	
	options = getOptions(options, this.options);
	from = from || options.site;
	from = parseUrl.from(from, options, this.from);
	
	if (!from || !from.href)
	{
		throw new Error("from value not defined.");
	}
	else if (from.extra.hrefInfo.minimumPathOnly)
	{
		throw new Error("from value supplied is not absolute: "+from.href);
	}
	
	to = parseUrl.to(to, options);
	
	if (to.valid===false) return to.href;
	
	to = relateUrl(from, to, options);
	to = formatUrl(to, options);
	
	return to;
}



/*
	Usage: RelateUrl.relate();
*/
RelateUrl.relate = function(from, to, options)
{
	return new RelateUrl().relate(from, to, options);
}



// Make constants accessible from API
objUtils.shallowMerge(RelateUrl, constants);



module.exports = RelateUrl;

},{"./constants":115,"./format":116,"./options":118,"./parse":121,"./relate":128,"./util/object":130}],118:[function(requireb,module,exports){
"use strict";

var objUtils = requireb("./util/object");



function getOptions(options, defaults)
{
	if ( objUtils.isPlainObject(options) )
	{
		var newOptions = {};
		
		for (var i in defaults)
		{
			if ( defaults.hasOwnProperty(i) )
			{
				if (options[i] !== undefined)
				{
					newOptions[i] = mergeOption(options[i], defaults[i]);
				}
				else
				{
					newOptions[i] = defaults[i];
				}
			}
		}
		
		return newOptions;
	}
	else
	{
		return defaults;
	}
}



function mergeOption(newValues, defaultValues)
{
	if (defaultValues instanceof Object && newValues instanceof Object)
	{
		if (defaultValues instanceof Array && newValues instanceof Array)
		{
			return defaultValues.concat(newValues);
		}
		else
		{
			return objUtils.shallowMerge(newValues, defaultValues);
		}
	}
	
	return newValues;
}



module.exports = getOptions;

},{"./util/object":130}],119:[function(requireb,module,exports){
"use strict";

function parseHost(urlObj, options)
{
	// TWEAK :: condition only for speed optimization
	if (options.ignore_www)
	{
		var host = urlObj.host.full;
		
		if (host)
		{
			var stripped = host;
			
			if (host.indexOf("www.") === 0)
			{
				stripped = host.substr(4);
			}
			
			urlObj.host.stripped = stripped;
		}
	}
}



module.exports = parseHost;

},{}],120:[function(requireb,module,exports){
"use strict";

function hrefInfo(urlObj)
{
	var minimumPathOnly     = (!urlObj.scheme && !urlObj.auth && !urlObj.host.full && !urlObj.port);
	var minimumResourceOnly = (minimumPathOnly && !urlObj.path.absolute.string);
	var minimumQueryOnly    = (minimumResourceOnly && !urlObj.resource);
	var minimumHashOnly     = (minimumQueryOnly && !urlObj.query.string.full.length);
	var empty               = (minimumHashOnly && !urlObj.hash);
	
	urlObj.extra.hrefInfo.minimumPathOnly     = minimumPathOnly;
	urlObj.extra.hrefInfo.minimumResourceOnly = minimumResourceOnly;
	urlObj.extra.hrefInfo.minimumQueryOnly    = minimumQueryOnly;
	urlObj.extra.hrefInfo.minimumHashOnly     = minimumHashOnly;
	urlObj.extra.hrefInfo.empty = empty;
}



module.exports = hrefInfo;

},{}],121:[function(requireb,module,exports){
"use strict";

var hrefInfo   = requireb("./hrefInfo");
var parseHost  = requireb("./host");
var parsePath  = requireb("./path");
var parsePort  = requireb("./port");
var parseQuery = requireb("./query");
var parseUrlString = requireb("./urlstring");
var pathUtils      = requireb("../util/path");



function parseFromUrl(url, options, fallback)
{
	if (url)
	{
		var urlObj = parseUrl(url, options);
		
		// Because the following occurs in the relate stage for "to" URLs,
		// such had to be mostly duplicated here
		
		var pathArray = pathUtils.resolveDotSegments(urlObj.path.absolute.array);
		
		urlObj.path.absolute.array  = pathArray;
		urlObj.path.absolute.string = "/" + pathUtils.join(pathArray);
		
		return urlObj;
	}
	else
	{
		return fallback;
	}
}



function parseUrl(url, options)
{
	var urlObj = parseUrlString(url, options);
	
	if (urlObj.valid===false) return urlObj;
	
	parseHost(urlObj, options);
	parsePort(urlObj, options);
	parsePath(urlObj, options);
	parseQuery(urlObj, options);
	hrefInfo(urlObj);
	
	return urlObj;
}



module.exports =
{
	from: parseFromUrl,
	to:   parseUrl
};

},{"../util/path":131,"./host":119,"./hrefInfo":120,"./path":122,"./port":123,"./query":124,"./urlstring":125}],122:[function(requireb,module,exports){
"use strict";

function isDirectoryIndex(resource, options)
{
	var verdict = false;
	
	options.directoryIndexes.every( function(index)
	{
		if (index === resource)
		{
			verdict = true;
			return false;
		}
		
		return true;
	});
	
	return verdict;
}



function parsePath(urlObj, options)
{
	var path = urlObj.path.absolute.string;
	
	if (path)
	{
		var lastSlash = path.lastIndexOf("/");
		
		if (lastSlash > -1)
		{
			if (++lastSlash < path.length)
			{
				var resource = path.substr(lastSlash);
				
				if (resource!=="." && resource!=="..")
				{
					urlObj.resource = resource;
					path = path.substr(0, lastSlash);
				}
				else
				{
					path += "/";
				}
			}
			
			urlObj.path.absolute.string = path;
			urlObj.path.absolute.array = splitPath(path);
		}
		else if (path==="." || path==="..")
		{
			// "..?var", "..#anchor", etc ... not "..index.html"
			path += "/";
			
			urlObj.path.absolute.string = path;
			urlObj.path.absolute.array = splitPath(path);
		}
		else
		{
			// Resource-only
			urlObj.resource = path;
			urlObj.path.absolute.string = null;
		}
		
		urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);
	}
	// Else: query/hash-only or empty
}



function splitPath(path)
{
	// TWEAK :: condition only for speed optimization
	if (path !== "/")
	{
		var cleaned = [];
		
		path.split("/").forEach( function(dir)
		{
			// Cleanup -- splitting "/dir/" becomes ["","dir",""]
			if (dir !== "")
			{
				cleaned.push(dir);
			}
		});
		
		return cleaned;
	}
	else
	{
		// Faster to skip the above block and just create an array
		return [];
	}
}



module.exports = parsePath;

},{}],123:[function(requireb,module,exports){
"use strict";

function parsePort(urlObj, options)
{
	var defaultPort = -1;
	
	for (var i in options.defaultPorts)
	{
		if ( i===urlObj.scheme && options.defaultPorts.hasOwnProperty(i) )
		{
			defaultPort = options.defaultPorts[i];
			break;
		}
	}
	
	if (defaultPort > -1)
	{
		// Force same type as urlObj.port
		defaultPort = defaultPort.toString();
		
		if (urlObj.port === null)
		{
			urlObj.port = defaultPort;
		}
		
		urlObj.extra.portIsDefault = (urlObj.port === defaultPort);
	}
}



module.exports = parsePort;

},{}],124:[function(requireb,module,exports){
"use strict";
var hasOwnProperty = Object.prototype.hasOwnProperty;



function parseQuery(urlObj, options)
{
	urlObj.query.string.full = stringify(urlObj.query.object, false);
	
	// TWEAK :: condition only for speed optimization
	if (options.removeEmptyQueries)
	{
		urlObj.query.string.stripped = stringify(urlObj.query.object, true);
	}
}



function stringify(queryObj, removeEmptyQueries)
{
	var count = 0;
	var str = "";
	
	for (var i in queryObj)
	{
		if ( i!=="" && hasOwnProperty.call(queryObj, i)===true )
		{
			var value = queryObj[i];
			
			if (value !== "" || !removeEmptyQueries)
			{
				str += (++count===1) ? "?" : "&";
				
				i = encodeURIComponent(i);
				
				if (value !== "")
				{
					str += i +"="+ encodeURIComponent(value).replace(/%20/g,"+");
				}
				else
				{
					str += i;
				}
			}
		}
	}
	
	return str;
}



module.exports = parseQuery;

},{}],125:[function(requireb,module,exports){
"use strict";

var _parseUrl = requireb("url").parse;



/*
	Customize the URL object that Node generates
	because:
	
	* necessary data for later
	* urlObj.host is useless
	* urlObj.hostname is too long
	* urlObj.path is useless
	* urlObj.pathname is too long
	* urlObj.protocol is inaccurate; should be called "scheme"
	* urlObj.search is mostly useless
*/
function clean(urlObj)
{
	var scheme = urlObj.protocol;
	
	if (scheme)
	{
		// Remove ":" suffix
		if (scheme.indexOf(":") === scheme.length-1)
		{
			scheme = scheme.substr(0, scheme.length-1);
		}
	}
	
	urlObj.host =
	{
		// TODO :: unescape(encodeURIComponent(s)) ? ... http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html
		full: urlObj.hostname,
		stripped: null
	};
	
	urlObj.path =
	{
		absolute:
		{
			array: null,
			string: urlObj.pathname
		},
		relative:
		{
			array: null,
			string: null
		}
	};
	
	urlObj.query =
	{
		object: urlObj.query,
		string:
		{
			full: null,
			stripped: null
		}
	};
	
	urlObj.extra =
	{
		hrefInfo:
		{
			minimumPathOnly: null,
			minimumResourceOnly: null,
			minimumQueryOnly: null,
			minimumHashOnly: null,
			empty: null,
			
			separatorOnlyQuery: urlObj.search==="?"
		},
		portIsDefault: null,
		relation:
		{
			maximumScheme: null,
			maximumAuth: null,
			maximumHost: null,
			maximumPort: null,
			maximumPath: null,
			maximumResource: null,
			maximumQuery: null,
			maximumHash: null,
			
			minimumScheme: null,
			minimumAuth: null,
			minimumHost: null,
			minimumPort: null,
			minimumPath: null,
			minimumResource: null,
			minimumQuery: null,
			minimumHash: null,
			
			overridesQuery: null
		},
		resourceIsIndex: null,
		slashes: urlObj.slashes
	};
	
	urlObj.resource = null;
	urlObj.scheme = scheme;
	delete urlObj.hostname;
	delete urlObj.pathname;
	delete urlObj.protocol;
	delete urlObj.search;
	delete urlObj.slashes;
	
	return urlObj;
}



function validScheme(url, options)
{
	var valid = true;
	
	options.rejectedSchemes.every( function(rejectedScheme)
	{
		valid = !(url.indexOf(rejectedScheme+":") === 0);
		
		// Break loop
		return valid;
	});
	
	return valid;
}



function parseUrlString(url, options)
{
	if ( validScheme(url,options) )
	{
		return clean( _parseUrl(url, true, options.slashesDenoteHost) );
	}
	else
	{
		return {href:url, valid:false};
	}
}



module.exports = parseUrlString;

},{"url":"url"}],126:[function(requireb,module,exports){
"use strict";

var findRelation = requireb("./findRelation");
var objUtils     = requireb("../util/object");
var pathUtils    = requireb("../util/path");



function absolutize(urlObj, siteUrlObj, options)
{
	findRelation.upToPath(urlObj, siteUrlObj, options);
	
	// Fill in relative URLs
	if (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;
	if (urlObj.extra.relation.minimumAuth)   urlObj.auth   = siteUrlObj.auth;
	if (urlObj.extra.relation.minimumHost)   urlObj.host   = objUtils.clone(siteUrlObj.host);
	if (urlObj.extra.relation.minimumPort)   copyPort(urlObj, siteUrlObj);
	if (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj);
	
	// Check remaining relativeness now that path has been copied and/or resolved
	findRelation.pathOn(urlObj, siteUrlObj, options);
	
	// Fill in relative URLs
	if (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);
	if (urlObj.extra.relation.minimumQuery)    urlObj.query = objUtils.clone(siteUrlObj.query);
	if (urlObj.extra.relation.minimumHash)     urlObj.hash  = siteUrlObj.hash;
}



/*
	Get an absolute path that's relative to site url.
*/
function copyPath(urlObj, siteUrlObj)
{
	if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly)
	{
		var pathArray = urlObj.path.absolute.array;
		var pathString = "/";
		
		// If not erroneous URL
		if (pathArray)
		{
			// If is relative path
			if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf("/")!==0)
			{
				// Append path to site path
				pathArray = siteUrlObj.path.absolute.array.concat(pathArray);
			}
			
			pathArray   = pathUtils.resolveDotSegments(pathArray);
			pathString += pathUtils.join(pathArray);
		}
		else
		{
			pathArray = [];
		}
		
		urlObj.path.absolute.array  = pathArray;
		urlObj.path.absolute.string = pathString;
	}
	else
	{
		// Resource-, query- or hash-only or empty
		urlObj.path = objUtils.clone(siteUrlObj.path);
	}
}



function copyPort(urlObj, siteUrlObj)
{
	urlObj.port = siteUrlObj.port;
	
	urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;
}



function copyResource(urlObj, siteUrlObj)
{
	urlObj.resource = siteUrlObj.resource;
	
	urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;
}



module.exports = absolutize;

},{"../util/object":130,"../util/path":131,"./findRelation":127}],127:[function(requireb,module,exports){
"use strict";

function findRelation_upToPath(urlObj, siteUrlObj, options)
{
	// Path- or root-relative URL
	var pathOnly = urlObj.extra.hrefInfo.minimumPathOnly;
	
	// Matching scheme, scheme-relative or path-only
	var minimumScheme = (urlObj.scheme===siteUrlObj.scheme || !urlObj.scheme);
	
	// Matching auth, ignoring auth or path-only
	var minimumAuth = minimumScheme && (urlObj.auth===siteUrlObj.auth || options.removeAuth || pathOnly);
	
	// Matching host or path-only
	var www = options.ignore_www ? "stripped" : "full";
	var minimumHost = minimumAuth && (urlObj.host[www]===siteUrlObj.host[www] || pathOnly);
	
	// Matching port or path-only
	var minimumPort = minimumHost && (urlObj.port===siteUrlObj.port || pathOnly);
	
	urlObj.extra.relation.minimumScheme = minimumScheme;
	urlObj.extra.relation.minimumAuth   = minimumAuth;
	urlObj.extra.relation.minimumHost   = minimumHost;
	urlObj.extra.relation.minimumPort   = minimumPort;
	
	urlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;
	urlObj.extra.relation.maximumAuth   = !minimumScheme || minimumScheme && !minimumHost;
	urlObj.extra.relation.maximumHost   = !minimumScheme || minimumScheme && !minimumPort;
}



function findRelation_pathOn(urlObj, siteUrlObj, options)
{
	var queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;
	var hashOnly  = urlObj.extra.hrefInfo.minimumHashOnly;
	var empty     = urlObj.extra.hrefInfo.empty;	// not requirebd, but self-documenting
	
	// From upToPath()
	var minimumPort   = urlObj.extra.relation.minimumPort;
	var minimumScheme = urlObj.extra.relation.minimumScheme;
	
	// Matching port and path
	var minimumPath = minimumPort && urlObj.path.absolute.string===siteUrlObj.path.absolute.string;
	
	// Matching resource or query/hash-only or empty
	var matchingResource = (urlObj.resource===siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex) || (options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource);
	var minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty);
	
	// Matching query or hash-only/empty
	var query = options.removeEmptyQueries ? "stripped" : "full";
	var urlQuery = urlObj.query.string[query];
	var siteUrlQuery = siteUrlObj.query.string[query];
	var minimumQuery = (minimumResource && !!urlQuery && urlQuery===siteUrlQuery) || ((hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery);
	
	var minimumHash = minimumQuery && urlObj.hash===siteUrlObj.hash;
	
	urlObj.extra.relation.minimumPath     = minimumPath;
	urlObj.extra.relation.minimumResource = minimumResource;
	urlObj.extra.relation.minimumQuery    = minimumQuery;
	urlObj.extra.relation.minimumHash     = minimumHash;
	
	urlObj.extra.relation.maximumPort     = !minimumScheme || minimumScheme && !minimumPath;
	urlObj.extra.relation.maximumPath     = !minimumScheme || minimumScheme && !minimumResource;
	urlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;
	urlObj.extra.relation.maximumQuery    = !minimumScheme || minimumScheme && !minimumHash;
	urlObj.extra.relation.maximumHash     = !minimumScheme || minimumScheme && !minimumHash;	// there's nothing after hash, so it's the same as maximumQuery
	
	// Matching path and/or resource with existing but non-matching site query
	urlObj.extra.relation.overridesQuery  = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;
}



module.exports =
{
	pathOn:   findRelation_pathOn,
	upToPath: findRelation_upToPath
};

},{}],128:[function(requireb,module,exports){
"use strict";

var absolutize = requireb("./absolutize");
var relativize = requireb("./relativize");



function relateUrl(siteUrlObj, urlObj, options)
{
	absolutize(urlObj, siteUrlObj, options);
	relativize(urlObj, siteUrlObj, options);
	
	return urlObj;
}



module.exports = relateUrl;

},{"./absolutize":126,"./relativize":129}],129:[function(requireb,module,exports){
"use strict";

var pathUtils = requireb("../util/path");



/*
	Get a path relative to the site path.
*/
function relatePath(absolutePath, siteAbsolutePath)
{
	var relativePath = [];
	
	// At this point, it's related to the host/port
	var related = true;
	var parentIndex = -1;
	
	// Find parents
	siteAbsolutePath.forEach( function(siteAbsoluteDir, i)
	{
		if (related)
		{
			if (absolutePath[i] !== siteAbsoluteDir)
			{
				related = false;
			}
			else
			{
				parentIndex = i;
			}
		}
		
		if (!related)
		{
			// Up one level
			relativePath.push("..");
		}
	});
	
	// Form path
	absolutePath.forEach( function(dir, i)
	{
		if (i > parentIndex)
		{
			relativePath.push(dir);
		}
	});
	
	return relativePath;
}



function relativize(urlObj, siteUrlObj, options)
{
	if (urlObj.extra.relation.minimumScheme)
	{
		var pathArray = relatePath(urlObj.path.absolute.array, siteUrlObj.path.absolute.array);
		
		urlObj.path.relative.array  = pathArray;
		urlObj.path.relative.string = pathUtils.join(pathArray);
	}
}



module.exports = relativize;

},{"../util/path":131}],130:[function(requireb,module,exports){
"use strict";

/*
	Deep-clone an object.
*/
function clone(obj)
{
	if (obj instanceof Object)
	{
		var clonedObj = (obj instanceof Array) ? [] : {};
		
		for (var i in obj)
		{
			if ( obj.hasOwnProperty(i) )
			{
				clonedObj[i] = clone( obj[i] );
			}
		}
		
		return clonedObj;
	}
	
	return obj;
}



/*
	https://github.com/jonschlinkert/is-plain-object
*/
function isPlainObject(obj)
{
	return !!obj && typeof obj==="object" && obj.constructor===Object;
}



/*
	Shallow-merge two objects.
*/
function shallowMerge(target, source)
{
	if (target instanceof Object && source instanceof Object)
	{
		for (var i in source)
		{
			if ( source.hasOwnProperty(i) )
			{
				target[i] = source[i];
			}
		}
	}
	
	return target;
}



module.exports =
{
	clone: clone,
	isPlainObject: isPlainObject,
	shallowMerge: shallowMerge
};

},{}],131:[function(requireb,module,exports){
"use strict";

function joinPath(pathArray)
{
	if (pathArray.length > 0)
	{
		return pathArray.join("/") + "/";
	}
	else
	{
		return "";
	}
}



function resolveDotSegments(pathArray)
{
	var pathAbsolute = [];
	
	pathArray.forEach( function(dir)
	{
		if (dir !== "..")
		{
			if (dir !== ".")
			{
				pathAbsolute.push(dir);
			}
		}
		else
		{
			// Remove parent
			if (pathAbsolute.length > 0)
			{
				pathAbsolute.splice(pathAbsolute.length-1, 1);
			}
		}
	});
	
	return pathAbsolute;
}



module.exports =
{
	join: joinPath,
	resolveDotSegments: resolveDotSegments
};

},{}],132:[function(requireb,module,exports){
var htmlparser = requireb('htmlparser2');
var extend = requireb('xtend');
var quoteRegexp = requireb('regexp-quote');

function each(obj, cb) {
  if (obj) Object.keys(obj).forEach(function (key) {
    cb(obj[key], key);
  });
}

// Avoid false positives with .__proto__, .hasOwnProperty, etc.
function has(obj, key) {
  return ({}).hasOwnProperty.call(obj, key);
}

module.exports = sanitizeHtml;

// Ignore the _recursing flag; it's there for recursive
// invocation as a guard against this exploit:
// https://github.com/fb55/htmlparser2/issues/105

function sanitizeHtml(html, options, _recursing) {
  var result = '';

  function Frame(tag, attribs) {
    var that = this;
    this.tag = tag;
    this.attribs = attribs || {};
    this.tagPosition = result.length;
    this.text = ''; // Node inner text

    this.updateParentNodeText = function() {
      if (stack.length) {
          var parentFrame = stack[stack.length - 1];
          parentFrame.text += that.text;
      }
    };
  }

  if (!options) {
    options = sanitizeHtml.defaults;
    options.parser = htmlParserDefaults;
  } else {
    options = extend(sanitizeHtml.defaults, options);
    if (options.parser) {
      options.parser = extend(htmlParserDefaults, options.parser);
    } else {
      options.parser = htmlParserDefaults;
    }
  }

  // Tags that contain something other than HTML, or where discarding
  // the text when the tag is disallowed makes sense for other reasons.
  // If we are not allowing these tags, we should drop their content too.
  // For other tags you would drop the tag but keep its content.
  var nonTextTagsArray = options.nonTextTags || [ 'script', 'style', 'textarea' ];
  var allowedAttributesMap;
  var allowedAttributesGlobMap;
  if(options.allowedAttributes) {
    allowedAttributesMap = {};
    allowedAttributesGlobMap = {};
    each(options.allowedAttributes, function(attributes, tag) {
      allowedAttributesMap[tag] = [];
      var globRegex = [];
      attributes.forEach(function(name) {
        if(name.indexOf('*') >= 0) {
          globRegex.push(quoteRegexp(name).replace(/\\\*/g, '.*'));
        } else {
          allowedAttributesMap[tag].push(name);
        }
      });
      allowedAttributesGlobMap[tag] = new RegExp('^(' + globRegex.join('|') + ')$');
    });
  }
  var allowedClassesMap = {};
  each(options.allowedClasses, function(classes, tag) {
    // Implicitly allows the class attribute
    if(allowedAttributesMap) {
      if (!has(allowedAttributesMap, tag)) {
        allowedAttributesMap[tag] = [];
      }
      allowedAttributesMap[tag].push('class');
    }

    allowedClassesMap[tag] = classes;
  });

  var transformTagsMap = {};
  var transformTagsAll;
  each(options.transformTags, function(transform, tag) {
    var transFun;
    if (typeof transform === 'function') {
      transFun = transform;
    } else if (typeof transform === "string") {
      transFun = sanitizeHtml.simpleTransform(transform);
    }
    if (tag === '*') {
      transformTagsAll = transFun;
    } else {
      transformTagsMap[tag] = transFun;
    }
  });

  var depth = 0;
  var stack = [];
  var skipMap = {};
  var transformMap = {};
  var skipText = false;
  var skipTextDepth = 0;

  var parser = new htmlparser.Parser({
    onopentag: function(name, attribs) {
      if (skipText) {
        skipTextDepth++;
        return;
      }
      var frame = new Frame(name, attribs);
      stack.push(frame);

      var skip = false;
      var hasText = frame.text ? true : false;
      var transformedTag;
      if (has(transformTagsMap, name)) {
        transformedTag = transformTagsMap[name](name, attribs);

        frame.attribs = attribs = transformedTag.attribs;

        if (transformedTag.text !== undefined) {
          frame.innerText = transformedTag.text;
        }

        if (name !== transformedTag.tagName) {
          frame.name = name = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }
      if (transformTagsAll) {
        transformedTag = transformTagsAll(name, attribs);

        frame.attribs = attribs = transformedTag.attribs;
        if (name !== transformedTag.tagName) {
          frame.name = name = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }

      if (options.allowedTags && options.allowedTags.indexOf(name) === -1) {
        skip = true;
        if (nonTextTagsArray.indexOf(name) !== -1) {
          skipText = true;
          skipTextDepth = 1;
        }
        skipMap[depth] = true;
      }
      depth++;
      if (skip) {
        // We want the contents but not this tag
        return;
      }
      result += '<' + name;
      if (!allowedAttributesMap || has(allowedAttributesMap, name) || allowedAttributesMap['*']) {
        each(attribs, function(value, a) {
          if (!allowedAttributesMap ||
              (has(allowedAttributesMap, name) && allowedAttributesMap[name].indexOf(a) !== -1 ) ||
              (allowedAttributesMap['*'] && allowedAttributesMap['*'].indexOf(a) !== -1 ) ||
              (has(allowedAttributesGlobMap, name) && allowedAttributesGlobMap[name].test(a)) ||
              (allowedAttributesGlobMap['*'] && allowedAttributesGlobMap['*'].test(a))) {
            if ((a === 'href') || (a === 'src')) {
              if (naughtyHref(name, value)) {
                delete frame.attribs[a];
                return;
              }
            }
            if (a === 'class') {
              value = filterClasses(value, allowedClassesMap[name]);
              if (!value.length) {
                delete frame.attribs[a];
                return;
              }
            }
            result += ' ' + a;
            if (value.length) {
              result += '="' + escapeHtml(value) + '"';
            }
          } else {
            delete frame.attribs[a];
          }
        });
      }
      if (options.selfClosing.indexOf(name) !== -1) {
        result += " />";
      } else {
        result += ">";
        if (frame.innerText && !hasText && !options.textFilter) {
          result += frame.innerText;
        }
      }
    },
    ontext: function(text) {
      if (skipText) {
        return;
      }
      var lastFrame = stack[stack.length-1];
      var tag;

      if (lastFrame) {
        tag = lastFrame.tag;
        // If inner text was set by transform function then let's use it
        text = lastFrame.innerText !== undefined ? lastFrame.innerText : text;
      }

      if ((tag === 'script') || (tag === 'style')) {
        // htmlparser2 gives us these as-is. Escaping them ruins the content. Allowing
        // script tags is, by definition, game over for XSS protection, so if that's
        // your concern, don't allow them. The same is essentially true for style tags
        // which have their own collection of XSS vectors.
        result += text;
      } else {
        var escaped = escapeHtml(text);
        if (options.textFilter) {
          result += options.textFilter(escaped);
        } else {
          result += escaped;
        }
      }
      if (stack.length) {
           var frame = stack[stack.length - 1];
           frame.text += text;
      }
    },
    onclosetag: function(name) {

      if (skipText) {
        skipTextDepth--;
        if (!skipTextDepth) {
          skipText = false;
        } else {
          return;
        }
      }

      var frame = stack.pop();
      if (!frame) {
        // Do not crash on bad markup
        return;
      }
      skipText = false;
      depth--;
      if (skipMap[depth]) {
        delete skipMap[depth];
        frame.updateParentNodeText();
        return;
      }

      if (transformMap[depth]) {
        name = transformMap[depth];
        delete transformMap[depth];
      }

      if (options.exclusiveFilter && options.exclusiveFilter(frame)) {
         result = result.substr(0, frame.tagPosition);
         return;
      }

      frame.updateParentNodeText();

      if (options.selfClosing.indexOf(name) !== -1) {
         // Already output />
         return;
      }

      result += "</" + name + ">";
    }
  }, options.parser);
  parser.write(html);
  parser.end();

  return result;

  function escapeHtml(s) {
    if (typeof(s) !== 'string') {
      s = s + '';
    }
    return s.replace(/\&/g, '&amp;').replace(/</g, '&lt;').replace(/\>/g, '&gt;').replace(/\"/g, '&quot;');
  }

  function naughtyHref(name, href) {
    // Browsers ignore character codes of 32 (space) and below in a surprising
    // number of situations. Start reading here:
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab
    href = href.replace(/[\x00-\x20]+/g, '');
    // Clobber any comments in URLs, which the browser might
    // interpret inside an XML data island, allowing
    // a javascript: URL to be snuck through
    href = href.replace(/<\!\-\-.*?\-\-\>/g, '');
    // Case insensitive so we don't get faked out by JAVASCRIPT #1
    var matches = href.match(/^([a-zA-Z]+)\:/);
    if (!matches) {
      // Protocol-relative URL: "//some.evil.com/nasty"
      if (href.match(/^\/\//)) {
        return !options.allowProtocolRelative;
      }

      // No scheme
      return false;
    }
    var scheme = matches[1].toLowerCase();

    if (has(options.allowedSchemesByTag, name)) {
      return options.allowedSchemesByTag[name].indexOf(scheme) === -1;
    }

    return !options.allowedSchemes || options.allowedSchemes.indexOf(scheme) === -1;
  }

  function filterClasses(classes, allowed) {
    if (!allowed) {
      // The class attribute is allowed without filtering on this tag
      return classes;
    }
    classes = classes.split(/\s+/);
    return classes.filter(function(clss) {
      return allowed.indexOf(clss) !== -1;
    }).join(' ');
  }
}

// Defaults are accessible to you so that you can use them as a starting point
// programmatically if you wish

var htmlParserDefaults = {
  decodeEntities: true
};
sanitizeHtml.defaults = {
  allowedTags: [ 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',
    'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',
    'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre' ],
  allowedAttributes: {
    a: [ 'href', 'name', 'target' ],
    // We don't currently allow img itself by default, but this
    // would make sense if we did
    img: [ 'src' ]
  },
  // Lots of these won't come up by default because we don't allow them
  selfClosing: [ 'img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta' ],
  // URL schemes we permit
  allowedSchemes: [ 'http', 'https', 'ftp', 'mailto' ],
  allowedSchemesByTag: {},
  allowProtocolRelative: true
};

sanitizeHtml.simpleTransform = function(newTagName, newAttribs, merge) {
  merge = (merge === undefined) ? true : merge;
  newAttribs = newAttribs || {};

  return function(tagName, attribs) {
    var attrib;
    if (merge) {
      for (attrib in newAttribs) {
        attribs[attrib] = newAttribs[attrib];
      }
    } else {
      attribs = newAttribs;
    }

    return {
      tagName: newTagName,
      attribs: attribs
    };
  };
};

},{"htmlparser2":140,"regexp-quote":114,"xtend":168}],133:[function(requireb,module,exports){
module.exports = CollectingHandler;

function CollectingHandler(cbs){
	this._cbs = cbs || {};
	this.events = [];
}

var EVENTS = requireb("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(){
			this.events.push([name]);
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a){
			this.events.push([name, a]);
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a, b){
			this.events.push([name, a, b]);
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

CollectingHandler.prototype.onreset = function(){
	this.events = [];
	if(this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function(){
	if(this._cbs.onreset) this._cbs.onreset();

	for(var i = 0, len = this.events.length; i < len; i++){
		if(this._cbs[this.events[i][0]]){

			var num = this.events[i].length;

			if(num === 1){
				this._cbs[this.events[i][0]]();
			} else if(num === 2){
				this._cbs[this.events[i][0]](this.events[i][1]);
			} else {
				this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
			}
		}
	}
};

},{"./":140}],134:[function(requireb,module,exports){
var index = requireb("./index.js"),
    DomHandler = index.DomHandler,
    DomUtils = index.DomUtils;

//TODO: make this a streamable handler
function FeedHandler(callback, options){
	this.init(callback, options);
}

requireb("inherits")(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where){
	return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where){
	return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse){
	return DomUtils.getText(
		DomUtils.getElementsByTagName(what, where, recurse, 1)
	).trim();
}

function addConditionally(obj, prop, what, where, recurse){
	var tmp = fetch(what, where, recurse);
	if(tmp) obj[prop] = tmp;
}

var isValidFeed = function(value){
	return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function(){
	var feed = {},
	    feedRoot = getOneElement(isValidFeed, this.dom),
	    tmp, childs;

	if(feedRoot){
		if(feedRoot.name === "feed"){
			childs = feedRoot.children;

			feed.type = "atom";
			addConditionally(feed, "id", "id", childs);
			addConditionally(feed, "title", "title", childs);
			if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
			addConditionally(feed, "description", "subtitle", childs);
			if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "email", childs, true);

			feed.items = getElements("entry", childs).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "id", item);
				addConditionally(entry, "title", "title", item);
				if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
				if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
				if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		} else {
			childs = getOneElement("channel", feedRoot.children).children;

			feed.type = feedRoot.name.substr(0, 3);
			feed.id = "";
			addConditionally(feed, "title", "title", childs);
			addConditionally(feed, "link", "link", childs);
			addConditionally(feed, "description", "description", childs);
			if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "managingEditor", childs, true);

			feed.items = getElements("item", feedRoot.children).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "guid", item);
				addConditionally(entry, "title", "title", item);
				addConditionally(entry, "link", "link", item);
				addConditionally(entry, "description", "description", item);
				if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		}
	}
	this.dom = feed;
	DomHandler.prototype._handleCallback.call(
		this, feedRoot ? null : Error("couldn't find root of feed")
	);
};

module.exports = FeedHandler;

},{"./index.js":140,"inherits":91}],135:[function(requireb,module,exports){
var Tokenizer = requireb("./Tokenizer.js");

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
	input: true,
	option: true,
	optgroup: true,
	select: true,
	button: true,
	datalist: true,
	textarea: true
};

var openImpliesClose = {
	tr      : { tr:true, th:true, td:true },
	th      : { th:true },
	td      : { thead:true, th:true, td:true },
	body    : { head:true, link:true, script:true },
	li      : { li:true },
	p       : { p:true },
	h1      : { p:true },
	h2      : { p:true },
	h3      : { p:true },
	h4      : { p:true },
	h5      : { p:true },
	h6      : { p:true },
	select  : formTags,
	input   : formTags,
	output  : formTags,
	button  : formTags,
	datalist: formTags,
	textarea: formTags,
	option  : { option:true },
	optgroup: { optgroup:true }
};

var voidElements = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	command: true,
	embed: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	keygen: true,
	link: true,
	meta: true,
	param: true,
	source: true,
	track: true,
	wbr: true,

	//common self closing svg elements
	path: true,
	circle: true,
	ellipse: true,
	line: true,
	rect: true,
	use: true,
	stop: true,
	polyline: true,
	polygon: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];

	this.startIndex = 0;
	this.endIndex = null;

	this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
									!!this._options.lowerCaseTags :
									!this._options.xmlMode;
	this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
									!!this._options.lowerCaseAttributeNames :
									!this._options.xmlMode;

	if(this._options.Tokenizer) {
		Tokenizer = this._options.Tokenizer;
	}
	this._tokenizer = new Tokenizer(this._options, this);

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
}

requireb("inherits")(Parser, requireb("events").EventEmitter);

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		if(this._tokenizer._sectionStart <= initialOffset){
			this.startIndex = 0;
		} else {
			this.startIndex = this._tokenizer._sectionStart - initialOffset;
		}
	}
	else this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if(!this._options.xmlMode && name in openImpliesClose) {
		for(
			var el;
			(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
			this.onclosetag(el)
		);
	}

	if(this._options.xmlMode || !(name in voidElements)){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);

	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}

	if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
		this._cbs.onclosetag(this._tagname);
	}

	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
		var pos = this._stack.lastIndexOf(name);
		if(pos !== -1){
			if(this._cbs.onclosetag){
				pos = this._stack.length - pos;
				while(pos--) this._cbs.onclosetag(this._stack.pop());
			}
			else this._stack.length = pos;
		} else if(name === "p" && !this._options.xmlMode){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	} else if(!this._options.xmlMode && (name === "br" || name === "p")){
		this.onopentagname(name);
		this._closeCurrentTag();
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode || this._options.recognizeSelfClosing){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length - 1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(this._lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value){
	var idx = value.search(re_nameEnd),
	    name = idx < 0 ? value : value.substr(0, idx);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	return name;
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode || this._options.recognizeCDATA){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	this._tokenizer.end(chunk);
};

Parser.prototype.pause = function(){
	this._tokenizer.pause();
};

Parser.prototype.resume = function(){
	this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;

},{"./Tokenizer.js":138,"events":87,"inherits":91}],136:[function(requireb,module,exports){
module.exports = ProxyHandler;

function ProxyHandler(cbs){
	this._cbs = cbs || {};
}

var EVENTS = requireb("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(){
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a){
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a, b){
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});
},{"./":140}],137:[function(requireb,module,exports){
module.exports = Stream;

var Parser = requireb("./WritableStream.js");

function Stream(options){
	Parser.call(this, new Cbs(this), options);
}

requireb("inherits")(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope){
	this.scope = scope;
}

var EVENTS = requireb("../").EVENTS;

Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		Cbs.prototype["on" + name] = function(){
			this.scope.emit(name);
		};
	} else if(EVENTS[name] === 1){
		Cbs.prototype["on" + name] = function(a){
			this.scope.emit(name, a);
		};
	} else if(EVENTS[name] === 2){
		Cbs.prototype["on" + name] = function(a, b){
			this.scope.emit(name, a, b);
		};
	} else {
		throw Error("wrong number of arguments!");
	}
});
},{"../":140,"./WritableStream.js":139,"inherits":91}],138:[function(requireb,module,exports){
module.exports = Tokenizer;

var decodeCodePoint = requireb("entities/lib/decode_codepoint.js"),
    entityMap = requireb("entities/maps/entities.json"),
    legacyMap = requireb("entities/maps/legacy.json"),
    xmlMap    = requireb("entities/maps/xml.json"),

    i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++, // [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function characterState(char, SUCCESS){
	return function(c){
		if(c === char) this._state = SUCCESS;
	};
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			if(c === lower){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	} else {
		return function(c){
			if(c === lower || c === upper){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._bufferOffset = 0; //chars removed from _buffer
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._ended = false;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		this._cbs.onattribname(this._getSection());
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
		this._index--; //reconsume token
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c){
	if(c === "-"){
		this._state = AFTER_COMMENT_2;
	} else {
		this._state = IN_COMMENT;
	}
};

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
		this._index--;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xmlMap : entityMap;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacyMap.hasOwnProperty(entity)){
			this._emitPartial(legacyMap[entity]);
			this._sectionStart += limit + 1;
			return;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._sectionStart + 1 === this._index);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
			}
		} else {
			this._parseLegacyEntity();
		}

		this._state = this._baseState;
		this._index--;
	}
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		this._emitPartial(decodeCodePoint(parsed));
		this._sectionStart = this._index;
	} else {
		this._sectionStart--;
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function (){
	if(this._sectionStart < 0){
		this._buffer = "";
		this._bufferOffset += this._index;
		this._index = 0;
	} else if(this._running){
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
			this._bufferOffset += this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".write() after done!"));

	this._buffer += chunk;
	this._parse();
};

Tokenizer.prototype._parse = function(){
	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;

	if(this._index < this._buffer.length){
		this._parse();
	}
	if(this._ended){
		this._finish();
	}
};

Tokenizer.prototype.end = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".end() after done!"));
	if(chunk) this.write(chunk);

	this._ended = true;

	if(this._running) this._finish();
};

Tokenizer.prototype._finish = function(){
	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(
		this._state !== IN_TAG_NAME &&
		this._state !== BEFORE_ATTRIBUTE_NAME &&
		this._state !== BEFORE_ATTRIBUTE_VALUE &&
		this._state !== AFTER_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_VALUE_SQ &&
		this._state !== IN_ATTRIBUTE_VALUE_DQ &&
		this._state !== IN_ATTRIBUTE_VALUE_NQ &&
		this._state !== IN_CLOSING_TAG_NAME
	){
		this._cbs.ontext(data);
	}
	//else, ignore remaining data
	//TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function(){
	return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	this._cbs[name](this._getSection());
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};

},{"entities/lib/decode_codepoint.js":81,"entities/maps/entities.json":84,"entities/maps/legacy.json":85,"entities/maps/xml.json":86}],139:[function(requireb,module,exports){
module.exports = Stream;

var Parser = requireb("./Parser.js"),
    WritableStream = requireb("stream").Writable || requireb("readable-stream").Writable,
    StringDecoder = requireb("string_decoder").StringDecoder,
    Buffer = requireb("buffer").Buffer;

function Stream(cbs, options){
	var parser = this._parser = new Parser(cbs, options);
	var decoder = this._decoder = new StringDecoder();

	WritableStream.call(this, {decodeStrings: false});

	this.once("finish", function(){
		parser.end(decoder.end());
	});
}

requireb("inherits")(Stream, WritableStream);

WritableStream.prototype._write = function(chunk, encoding, cb){
	if(chunk instanceof Buffer) chunk = this._decoder.write(chunk);
	this._parser.write(chunk);
	cb();
};
},{"./Parser.js":135,"buffer":7,"inherits":91,"readable-stream":5,"stream":151,"string_decoder":152}],140:[function(requireb,module,exports){
var Parser = requireb("./Parser.js"),
    DomHandler = requireb("domhandler");

function defineProp(name, value){
	delete module.exports[name];
	module.exports[name] = value;
	return value;
}

module.exports = {
	Parser: Parser,
	Tokenizer: requireb("./Tokenizer.js"),
	ElementType: requireb("domelementtype"),
	DomHandler: DomHandler,
	get FeedHandler(){
		return defineProp("FeedHandler", requireb("./FeedHandler.js"));
	},
	get Stream(){
		return defineProp("Stream", requireb("./Stream.js"));
	},
	get WritableStream(){
		return defineProp("WritableStream", requireb("./WritableStream.js"));
	},
	get ProxyHandler(){
		return defineProp("ProxyHandler", requireb("./ProxyHandler.js"));
	},
	get DomUtils(){
		return defineProp("DomUtils", requireb("domutils"));
	},
	get CollectingHandler(){
		return defineProp("CollectingHandler", requireb("./CollectingHandler.js"));
	},
	// For legacy support
	DefaultHandler: DomHandler,
	get RssHandler(){
		return defineProp("RssHandler", this.FeedHandler);
	},
	//helper methods
	parseDOM: function(data, options){
		var handler = new DomHandler(options);
		new Parser(handler, options).end(data);
		return handler.dom;
	},
	parseFeed: function(feed, options){
		var handler = new module.exports.FeedHandler(options);
		new Parser(handler, options).end(feed);
		return handler.dom;
	},
	createDomStream: function(cb, options, elementCb){
		var handler = new DomHandler(cb, options, elementCb);
		return new Parser(handler, options);
	},
	// List of all events that the parser emits
	EVENTS: { /* Format: eventname: number of arguments */
		attribute: 2,
		cdatastart: 0,
		cdataend: 0,
		text: 1,
		processinginstruction: 2,
		comment: 1,
		commentend: 0,
		closetag: 1,
		opentag: 2,
		opentagname: 1,
		error: 1,
		end: 0
	}
};

},{"./CollectingHandler.js":133,"./FeedHandler.js":134,"./Parser.js":135,"./ProxyHandler.js":136,"./Stream.js":137,"./Tokenizer.js":138,"./WritableStream.js":139,"domelementtype":52,"domhandler":53,"domutils":56}],141:[function(requireb,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = requireb('./source-map/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = requireb('./source-map/source-map-consumer').SourceMapConsumer;
exports.SourceNode = requireb('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":147,"./source-map/source-map-generator":148,"./source-map/source-node":149}],142:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var util = requireb('./util');

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = {};
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var isDuplicate = this.has(aStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[util.toSetString(aStr)] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr));
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (this.has(aStr)) {
      return this._set[util.toSetString(aStr)];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;

});

},{"./util":150,"amdefine":1}],143:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var base64 = requireb('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aOutParam) {
    var i = 0;
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (i >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charAt(i++));
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aStr.slice(i);
  };

});

},{"./base64":144,"amdefine":1}],144:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var charToIntMap = {};
  var intToCharMap = {};

  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    .split('')
    .forEach(function (ch, index) {
      charToIntMap[ch] = index;
      intToCharMap[index] = ch;
    });

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function base64_encode(aNumber) {
    if (aNumber in intToCharMap) {
      return intToCharMap[aNumber];
    }
    throw new TypeError("Must be between 0 and 63: " + aNumber);
  };

  /**
   * Decode a single base 64 digit to an integer.
   */
  exports.decode = function base64_decode(aChar) {
    if (aChar in charToIntMap) {
      return charToIntMap[aChar];
    }
    throw new TypeError("Not a valid base 64 digit: " + aChar);
  };

});

},{"amdefine":1}],145:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next closest element that is less than that element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element which is less than the one we are searching for, so we
    //      return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // aHaystack[mid] is greater than our needle.
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
      }
      // We did not find an exact match, return the next closest one
      // (termination case 2).
      return mid;
    }
    else {
      // aHaystack[mid] is less than our needle.
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
      }
      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (2) or (3) and return the appropriate thing.
      return aLow < 0 ? -1 : aLow;
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of next lowest value checked if there is no exact hit. This is
   * because mappings between original and generated line/col pairs are single
   * points, and there is an implicit region between each of them, so a miss
   * just means that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare) {
    if (aHaystack.length === 0) {
      return -1;
    }
    return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
  };

});

},{"amdefine":1}],146:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var util = requireb('./util');

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositions(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    var mapping;
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositions);
      this._sorted = true;
    }
    return this._array;
  };

  exports.MappingList = MappingList;

});

},{"./util":150,"amdefine":1}],147:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var util = requireb('./util');
  var binarySearch = requireb('./binary-search');
  var ArraySet = requireb('./array-set').ArraySet;
  var base64VLQ = requireb('./base64-vlq');

  /**
   * A SourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requirebs the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    sources = sources.map(util.normalize);

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  /**
   * Create a SourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns SourceMapConsumer
   */
  SourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(SourceMapConsumer.prototype);

      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
      smc.__originalMappings = aSourceMap._mappings.toArray().slice()
        .sort(util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._nextCharIsMappingSeparator =
    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
      var c = aStr.charAt(0);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var str = aStr;
      var temp = {};
      var mapping;

      while (str.length > 0) {
        if (str.charAt(0) === ';') {
          generatedLine++;
          str = str.slice(1);
          previousGeneratedColumn = 0;
        }
        else if (str.charAt(0) === ',') {
          str = str.slice(1);
        }
        else {
          mapping = {};
          mapping.generatedLine = generatedLine;

          // Generated column.
          base64VLQ.decode(str, temp);
          mapping.generatedColumn = previousGeneratedColumn + temp.value;
          previousGeneratedColumn = mapping.generatedColumn;
          str = temp.rest;

          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
            // Original source.
            base64VLQ.decode(str, temp);
            mapping.source = this._sources.at(previousSource + temp.value);
            previousSource += temp.value;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source, but no line and column');
            }

            // Original line.
            base64VLQ.decode(str, temp);
            mapping.originalLine = previousOriginalLine + temp.value;
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source and line, but no column');
            }

            // Original column.
            base64VLQ.decode(str, temp);
            mapping.originalColumn = previousOriginalColumn + temp.value;
            previousOriginalColumn = mapping.originalColumn;
            str = temp.rest;

            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
              // Original name.
              base64VLQ.decode(str, temp);
              mapping.name = this._names.at(previousName + temp.value);
              previousName += temp.value;
              str = temp.rest;
            }
          }

          this.__generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            this.__originalMappings.push(mapping);
          }
        }
      }

      this.__generatedMappings.sort(util.compareByGeneratedPositions);
      this.__originalMappings.sort(util.compareByOriginalPositions);
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  SourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  SourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  SourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(needle,
                                    this._generatedMappings,
                                    "generatedLine",
                                    "generatedColumn",
                                    util.compareByGeneratedPositions);

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source != null && this.sourceRoot != null) {
            source = util.join(this.sourceRoot, source);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: util.getArg(mapping, 'name', null)
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  SourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      throw new Error('"' + aSource + '" is not in the SourceMap.');
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions);

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  /**
   * Returns all generated line and column information for the original source
   * and line provided. The only argument is an object with the following
   * properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      // When there is no exact match, SourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to Infinity, we thus find the last
      // mapping for the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: Infinity
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        while (mapping && mapping.originalLine === needle.originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[--index];
        }
      }

      return mappings.reverse();
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source;
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name
        };
      }).forEach(aCallback, context);
    };

  exports.SourceMapConsumer = SourceMapConsumer;

});

},{"./array-set":142,"./base64-vlq":143,"./binary-search":145,"./util":150,"amdefine":1}],148:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var base64VLQ = requireb('./base64-vlq');
  var util = requireb('./util');
  var ArraySet = requireb('./array-set').ArraySet;
  var MappingList = requireb('./mapping-list').MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requirebs either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      var mappings = this._mappings.toArray();

      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this);
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":142,"./base64-vlq":143,"./mapping-list":146,"./util":150,"amdefine":1}],149:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var SourceMapGenerator = requireb('./source-map-generator').SourceMapGenerator;
  var util = requireb('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":148,"./util":150,"amdefine":1}],150:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a requirebd argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // XXX: It is possible to remove this block, and the tests still pass!
    var url = urlParse(aRoot);
    if (aPath.charAt(0) == "/" && url && url.path == "/") {
      return aPath.slice(1);
    }

    return aPath.indexOf(aRoot + '/') === 0
      ? aPath.substr(aRoot.length + 1)
      : aPath;
  }
  exports.relative = relative;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  function strcmp(aStr1, aStr2) {
    var s1 = aStr1 || "";
    var s2 = aStr2 || "";
    return (s1 > s2) - (s1 < s2);
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp;

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp || onlyCompareOriginal) {
      return cmp;
    }

    cmp = strcmp(mappingA.name, mappingB.name);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    return mappingA.generatedColumn - mappingB.generatedColumn;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings where the generated positions are
   * compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
    var cmp;

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositions = compareByGeneratedPositions;

});

},{"amdefine":1}],151:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = requireb('events').EventEmitter;
var inherits = requireb('inherits');

inherits(Stream, EE);
Stream.Readable = requireb('readable-stream/readable.js');
Stream.Writable = requireb('readable-stream/writable.js');
Stream.Duplex = requireb('readable-stream/duplex.js');
Stream.Transform = requireb('readable-stream/transform.js');
Stream.PassThrough = requireb('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":87,"inherits":91,"readable-stream/duplex.js":104,"readable-stream/passthrough.js":110,"readable-stream/readable.js":111,"readable-stream/transform.js":112,"readable-stream/writable.js":113}],152:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = requireb('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may requireb up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":7}],153:[function(requireb,module,exports){
/****
 * The MIT License
 *
 * Copyright (c) 2015 Marco Ziccardi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 ****/
(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    define('timsort', ['exports'], factory);
  } else if (typeof exports !== 'undefined') {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.timsort = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  exports.__esModule = true;
  exports.sort = sort;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var DEFAULT_MIN_MERGE = 32;

  var DEFAULT_MIN_GALLOPING = 7;

  var DEFAULT_TMP_STORAGE_LENGTH = 256;

  var POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];

  function log10(x) {
    if (x < 1e5) {
      if (x < 1e2) {
        return x < 1e1 ? 0 : 1;
      }

      if (x < 1e4) {
        return x < 1e3 ? 2 : 3;
      }

      return 4;
    }

    if (x < 1e7) {
      return x < 1e6 ? 5 : 6;
    }

    if (x < 1e9) {
      return x < 1e8 ? 7 : 8;
    }

    return 9;
  }

  function alphabeticalCompare(a, b) {
    if (a === b) {
      return 0;
    }

    if (~ ~a === a && ~ ~b === b) {
      if (a === 0 || b === 0) {
        return a < b ? -1 : 1;
      }

      if (a < 0 || b < 0) {
        if (b >= 0) {
          return -1;
        }

        if (a >= 0) {
          return 1;
        }

        a = -a;
        b = -b;
      }

      var al = log10(a);
      var bl = log10(b);

      var t = 0;

      if (al < bl) {
        a *= POWERS_OF_TEN[bl - al - 1];
        b /= 10;
        t = -1;
      } else if (al > bl) {
        b *= POWERS_OF_TEN[al - bl - 1];
        a /= 10;
        t = 1;
      }

      if (a === b) {
        return t;
      }

      return a < b ? -1 : 1;
    }

    var aStr = String(a);
    var bStr = String(b);

    if (aStr === bStr) {
      return 0;
    }

    return aStr < bStr ? -1 : 1;
  }

  function minRunLength(n) {
    var r = 0;

    while (n >= DEFAULT_MIN_MERGE) {
      r |= n & 1;
      n >>= 1;
    }

    return n + r;
  }

  function makeAscendingRun(array, lo, hi, compare) {
    var runHi = lo + 1;

    if (runHi === hi) {
      return 1;
    }

    if (compare(array[runHi++], array[lo]) < 0) {
      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
        runHi++;
      }

      reverseRun(array, lo, runHi);
    } else {
      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
        runHi++;
      }
    }

    return runHi - lo;
  }

  function reverseRun(array, lo, hi) {
    hi--;

    while (lo < hi) {
      var t = array[lo];
      array[lo++] = array[hi];
      array[hi--] = t;
    }
  }

  function binaryInsertionSort(array, lo, hi, start, compare) {
    if (start === lo) {
      start++;
    }

    for (; start < hi; start++) {
      var pivot = array[start];

      var left = lo;
      var right = start;

      while (left < right) {
        var mid = left + right >>> 1;

        if (compare(pivot, array[mid]) < 0) {
          right = mid;
        } else {
          left = mid + 1;
        }
      }

      var n = start - left;

      switch (n) {
        case 3:
          array[left + 3] = array[left + 2];

        case 2:
          array[left + 2] = array[left + 1];

        case 1:
          array[left + 1] = array[left];
          break;
        default:
          while (n > 0) {
            array[left + n] = array[left + n - 1];
            n--;
          }
      }

      array[left] = pivot;
    }
  }

  function gallopLeft(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;

    if (compare(value, array[start + hint]) > 0) {
      maxOffset = length - hint;

      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      lastOffset += hint;
      offset += hint;
    } else {
      maxOffset = hint + 1;
      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }
      if (offset > maxOffset) {
        offset = maxOffset;
      }

      var tmp = lastOffset;
      lastOffset = hint - offset;
      offset = hint - tmp;
    }

    lastOffset++;
    while (lastOffset < offset) {
      var m = lastOffset + (offset - lastOffset >>> 1);

      if (compare(value, array[start + m]) > 0) {
        lastOffset = m + 1;
      } else {
        offset = m;
      }
    }
    return offset;
  }

  function gallopRight(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;

    if (compare(value, array[start + hint]) < 0) {
      maxOffset = hint + 1;

      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      var tmp = lastOffset;
      lastOffset = hint - offset;
      offset = hint - tmp;
    } else {
      maxOffset = length - hint;

      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      lastOffset += hint;
      offset += hint;
    }

    lastOffset++;

    while (lastOffset < offset) {
      var m = lastOffset + (offset - lastOffset >>> 1);

      if (compare(value, array[start + m]) < 0) {
        offset = m;
      } else {
        lastOffset = m + 1;
      }
    }

    return offset;
  }

  var TimSort = (function () {
    function TimSort(array, compare) {
      _classCallCheck(this, TimSort);

      this.array = null;
      this.compare = null;
      this.minGallop = DEFAULT_MIN_GALLOPING;
      this.length = 0;
      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
      this.stackLength = 0;
      this.runStart = null;
      this.runLength = null;
      this.stackSize = 0;

      this.array = array;
      this.compare = compare;

      this.length = array.length;

      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
        this.tmpStorageLength = this.length >>> 1;
      }

      this.tmp = new Array(this.tmpStorageLength);

      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;

      this.runStart = new Array(this.stackLength);
      this.runLength = new Array(this.stackLength);
    }

    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {
      this.runStart[this.stackSize] = runStart;
      this.runLength[this.stackSize] = runLength;
      this.stackSize += 1;
    };

    TimSort.prototype.mergeRuns = function mergeRuns() {
      while (this.stackSize > 1) {
        var n = this.stackSize - 2;

        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {

          if (this.runLength[n - 1] < this.runLength[n + 1]) {
            n--;
          }
        } else if (this.runLength[n] > this.runLength[n + 1]) {
          break;
        }
        this.mergeAt(n);
      }
    };

    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {
      while (this.stackSize > 1) {
        var n = this.stackSize - 2;

        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {
          n--;
        }

        this.mergeAt(n);
      }
    };

    TimSort.prototype.mergeAt = function mergeAt(i) {
      var compare = this.compare;
      var array = this.array;

      var start1 = this.runStart[i];
      var length1 = this.runLength[i];
      var start2 = this.runStart[i + 1];
      var length2 = this.runLength[i + 1];

      this.runLength[i] = length1 + length2;

      if (i === this.stackSize - 3) {
        this.runStart[i + 1] = this.runStart[i + 2];
        this.runLength[i + 1] = this.runLength[i + 2];
      }

      this.stackSize--;

      var k = gallopRight(array[start2], array, start1, length1, 0, compare);
      start1 += k;
      length1 -= k;

      if (length1 === 0) {
        return;
      }

      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

      if (length2 === 0) {
        return;
      }

      if (length1 <= length2) {
        this.mergeLow(start1, length1, start2, length2);
      } else {
        this.mergeHigh(start1, length1, start2, length2);
      }
    };

    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {

      var compare = this.compare;
      var array = this.array;
      var tmp = this.tmp;
      var i = 0;

      for (i = 0; i < length1; i++) {
        tmp[i] = array[start1 + i];
      }

      var cursor1 = 0;
      var cursor2 = start2;
      var dest = start1;

      array[dest++] = array[cursor2++];

      if (--length2 === 0) {
        for (i = 0; i < length1; i++) {
          array[dest + i] = tmp[cursor1 + i];
        }
        return;
      }

      if (length1 === 1) {
        for (i = 0; i < length2; i++) {
          array[dest + i] = array[cursor2 + i];
        }
        array[dest + length2] = tmp[cursor1];
        return;
      }

      var minGallop = this.minGallop;

      while (true) {
        var count1 = 0;
        var count2 = 0;
        var exit = false;

        do {
          if (compare(array[cursor2], tmp[cursor1]) < 0) {
            array[dest++] = array[cursor2++];
            count2++;
            count1 = 0;

            if (--length2 === 0) {
              exit = true;
              break;
            }
          } else {
            array[dest++] = tmp[cursor1++];
            count1++;
            count2 = 0;
            if (--length1 === 1) {
              exit = true;
              break;
            }
          }
        } while ((count1 | count2) < minGallop);

        if (exit) {
          break;
        }

        do {
          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

          if (count1 !== 0) {
            for (i = 0; i < count1; i++) {
              array[dest + i] = tmp[cursor1 + i];
            }

            dest += count1;
            cursor1 += count1;
            length1 -= count1;
            if (length1 <= 1) {
              exit = true;
              break;
            }
          }

          array[dest++] = array[cursor2++];

          if (--length2 === 0) {
            exit = true;
            break;
          }

          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

          if (count2 !== 0) {
            for (i = 0; i < count2; i++) {
              array[dest + i] = array[cursor2 + i];
            }

            dest += count2;
            cursor2 += count2;
            length2 -= count2;

            if (length2 === 0) {
              exit = true;
              break;
            }
          }
          array[dest++] = tmp[cursor1++];

          if (--length1 === 1) {
            exit = true;
            break;
          }

          minGallop--;
        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

        if (exit) {
          break;
        }

        if (minGallop < 0) {
          minGallop = 0;
        }

        minGallop += 2;
      }

      this.minGallop = minGallop;

      if (minGallop < 1) {
        this.minGallop = 1;
      }

      if (length1 === 1) {
        for (i = 0; i < length2; i++) {
          array[dest + i] = array[cursor2 + i];
        }
        array[dest + length2] = tmp[cursor1];
      } else if (length1 === 0) {
        throw new Error('mergeLow preconditions were not respected');
      } else {
        for (i = 0; i < length1; i++) {
          array[dest + i] = tmp[cursor1 + i];
        }
      }
    };

    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {
      var compare = this.compare;
      var array = this.array;
      var tmp = this.tmp;
      var i = 0;

      for (i = 0; i < length2; i++) {
        tmp[i] = array[start2 + i];
      }

      var cursor1 = start1 + length1 - 1;
      var cursor2 = length2 - 1;
      var dest = start2 + length2 - 1;
      var customCursor = 0;
      var customDest = 0;

      array[dest--] = array[cursor1--];

      if (--length1 === 0) {
        customCursor = dest - (length2 - 1);

        for (i = 0; i < length2; i++) {
          array[customCursor + i] = tmp[i];
        }

        return;
      }

      if (length2 === 1) {
        dest -= length1;
        cursor1 -= length1;
        customDest = dest + 1;
        customCursor = cursor1 + 1;

        for (i = length1 - 1; i >= 0; i--) {
          array[customDest + i] = array[customCursor + i];
        }

        array[dest] = tmp[cursor2];
        return;
      }

      var minGallop = this.minGallop;

      while (true) {
        var count1 = 0;
        var count2 = 0;
        var exit = false;

        do {
          if (compare(tmp[cursor2], array[cursor1]) < 0) {
            array[dest--] = array[cursor1--];
            count1++;
            count2 = 0;
            if (--length1 === 0) {
              exit = true;
              break;
            }
          } else {
            array[dest--] = tmp[cursor2--];
            count2++;
            count1 = 0;
            if (--length2 === 1) {
              exit = true;
              break;
            }
          }
        } while ((count1 | count2) < minGallop);

        if (exit) {
          break;
        }

        do {
          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

          if (count1 !== 0) {
            dest -= count1;
            cursor1 -= count1;
            length1 -= count1;
            customDest = dest + 1;
            customCursor = cursor1 + 1;

            for (i = count1 - 1; i >= 0; i--) {
              array[customDest + i] = array[customCursor + i];
            }

            if (length1 === 0) {
              exit = true;
              break;
            }
          }

          array[dest--] = tmp[cursor2--];

          if (--length2 === 1) {
            exit = true;
            break;
          }

          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

          if (count2 !== 0) {
            dest -= count2;
            cursor2 -= count2;
            length2 -= count2;
            customDest = dest + 1;
            customCursor = cursor2 + 1;

            for (i = 0; i < count2; i++) {
              array[customDest + i] = tmp[customCursor + i];
            }

            if (length2 <= 1) {
              exit = true;
              break;
            }
          }

          array[dest--] = array[cursor1--];

          if (--length1 === 0) {
            exit = true;
            break;
          }

          minGallop--;
        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

        if (exit) {
          break;
        }

        if (minGallop < 0) {
          minGallop = 0;
        }

        minGallop += 2;
      }

      this.minGallop = minGallop;

      if (minGallop < 1) {
        this.minGallop = 1;
      }

      if (length2 === 1) {
        dest -= length1;
        cursor1 -= length1;
        customDest = dest + 1;
        customCursor = cursor1 + 1;

        for (i = length1 - 1; i >= 0; i--) {
          array[customDest + i] = array[customCursor + i];
        }

        array[dest] = tmp[cursor2];
      } else if (length2 === 0) {
        throw new Error('mergeHigh preconditions were not respected');
      } else {
        customCursor = dest - (length2 - 1);
        for (i = 0; i < length2; i++) {
          array[customCursor + i] = tmp[i];
        }
      }
    };

    return TimSort;
  })();

  function sort(array, compare, lo, hi) {
    if (!Array.isArray(array)) {
      throw new TypeError('Can only sort arrays');
    }

    if (!compare) {
      compare = alphabeticalCompare;
    } else if (typeof compare !== 'function') {
      hi = lo;
      lo = compare;
      compare = alphabeticalCompare;
    }

    if (!lo) {
      lo = 0;
    }
    if (!hi) {
      hi = array.length;
    }

    var remaining = hi - lo;

    if (remaining < 2) {
      return;
    }

    var runLength = 0;

    if (remaining < DEFAULT_MIN_MERGE) {
      runLength = makeAscendingRun(array, lo, hi, compare);
      binaryInsertionSort(array, lo, hi, lo + runLength, compare);
      return;
    }

    var ts = new TimSort(array, compare);

    var minRun = minRunLength(remaining);

    do {
      runLength = makeAscendingRun(array, lo, hi, compare);
      if (runLength < minRun) {
        var force = remaining;
        if (force > minRun) {
          force = minRun;
        }

        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
        runLength = force;
      }

      ts.pushRun(lo, runLength);
      ts.mergeRuns();

      remaining -= runLength;
      lo += runLength;
    } while (remaining !== 0);

    ts.forceMergeRuns();
  }
});

},{}],154:[function(requireb,module,exports){
module.exports = requireb('./build/timsort.js');
},{"./build/timsort.js":153}],155:[function(requireb,module,exports){
arguments[4][141][0].apply(exports,arguments)
},{"./source-map/source-map-consumer":160,"./source-map/source-map-generator":161,"./source-map/source-node":162,"dup":141}],156:[function(requireb,module,exports){
arguments[4][142][0].apply(exports,arguments)
},{"./util":163,"amdefine":1,"dup":142}],157:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var base64 = requireb('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * is placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * is placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string.
   */
  exports.decode = function base64VLQ_decode(aStr) {
    var i = 0;
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (i >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charAt(i++));
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    return {
      value: fromVLQSigned(result),
      rest: aStr.slice(i)
    };
  };

});

},{"./base64":158,"amdefine":1}],158:[function(requireb,module,exports){
arguments[4][144][0].apply(exports,arguments)
},{"amdefine":1,"dup":144}],159:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the next
    //      closest element that is less than that element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element which is less than the one we are searching for, so we
    //      return null.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return aHaystack[mid];
    }
    else if (cmp > 0) {
      // aHaystack[mid] is greater than our needle.
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
      }
      // We did not find an exact match, return the next closest one
      // (termination case 2).
      return aHaystack[mid];
    }
    else {
      // aHaystack[mid] is less than our needle.
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
      }
      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (2) or (3) and return the appropriate thing.
      return aLow < 0
        ? null
        : aHaystack[aLow];
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the next lowest value checked if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare) {
    return aHaystack.length > 0
      ? recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
      : null;
  };

});

},{"amdefine":1}],160:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var util = requireb('./util');
  var binarySearch = requireb('./binary-search');
  var ArraySet = requireb('./array-set').ArraySet;
  var base64VLQ = requireb('./base64-vlq');

  /**
   * A SourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requirebs the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  /**
   * Create a SourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns SourceMapConsumer
   */
  SourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(SourceMapConsumer.prototype);

      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      smc.__generatedMappings = aSourceMap._mappings.slice()
        .sort(util.compareByGeneratedPositions);
      smc.__originalMappings = aSourceMap._mappings.slice()
        .sort(util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var mappingSeparator = /^[,;]/;
      var str = aStr;
      var mapping;
      var temp;

      while (str.length > 0) {
        if (str.charAt(0) === ';') {
          generatedLine++;
          str = str.slice(1);
          previousGeneratedColumn = 0;
        }
        else if (str.charAt(0) === ',') {
          str = str.slice(1);
        }
        else {
          mapping = {};
          mapping.generatedLine = generatedLine;

          // Generated column.
          temp = base64VLQ.decode(str);
          mapping.generatedColumn = previousGeneratedColumn + temp.value;
          previousGeneratedColumn = mapping.generatedColumn;
          str = temp.rest;

          if (str.length > 0 && !mappingSeparator.test(str.charAt(0))) {
            // Original source.
            temp = base64VLQ.decode(str);
            mapping.source = this._sources.at(previousSource + temp.value);
            previousSource += temp.value;
            str = temp.rest;
            if (str.length === 0 || mappingSeparator.test(str.charAt(0))) {
              throw new Error('Found a source, but no line and column');
            }

            // Original line.
            temp = base64VLQ.decode(str);
            mapping.originalLine = previousOriginalLine + temp.value;
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;
            str = temp.rest;
            if (str.length === 0 || mappingSeparator.test(str.charAt(0))) {
              throw new Error('Found a source and line, but no column');
            }

            // Original column.
            temp = base64VLQ.decode(str);
            mapping.originalColumn = previousOriginalColumn + temp.value;
            previousOriginalColumn = mapping.originalColumn;
            str = temp.rest;

            if (str.length > 0 && !mappingSeparator.test(str.charAt(0))) {
              // Original name.
              temp = base64VLQ.decode(str);
              mapping.name = this._names.at(previousName + temp.value);
              previousName += temp.value;
              str = temp.rest;
            }
          }

          this.__generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            this.__originalMappings.push(mapping);
          }
        }
      }

      this.__generatedMappings.sort(util.compareByGeneratedPositions);
      this.__originalMappings.sort(util.compareByOriginalPositions);
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  SourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator);
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  SourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var mapping = this._findMapping(needle,
                                      this._generatedMappings,
                                      "generatedLine",
                                      "generatedColumn",
                                      util.compareByGeneratedPositions);

      if (mapping && mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source && this.sourceRoot) {
          source = util.join(this.sourceRoot, source);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: util.getArg(mapping, 'name', null)
        };
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  SourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      throw new Error('"' + aSource + '" is not in the SourceMap.');
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      if (this.sourceRoot) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var mapping = this._findMapping(needle,
                                      this._originalMappings,
                                      "originalLine",
                                      "originalColumn",
                                      util.compareByOriginalPositions);

      if (mapping) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null)
        };
      }

      return {
        line: null,
        column: null
      };
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source;
        if (source && sourceRoot) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name
        };
      }).forEach(aCallback, context);
    };

  exports.SourceMapConsumer = SourceMapConsumer;

});

},{"./array-set":156,"./base64-vlq":157,"./binary-search":159,"./util":163,"amdefine":1}],161:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var base64VLQ = requireb('./base64-vlq');
  var util = requireb('./util');
  var ArraySet = requireb('./array-set').ArraySet;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = [];
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source) {
          newMapping.source = mapping.source;
          if (sourceRoot) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      this._validateMapping(generated, original, source, name);

      if (source && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.push({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent !== null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (!aSourceFile) {
        if (!aSourceMapConsumer.file) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requirebs either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        aSourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "aSourceFile" relative if an absolute Url is passed.
      if (sourceRoot) {
        aSourceFile = util.relative(sourceRoot, aSourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "aSourceFile"
      this._mappings.forEach(function (mapping) {
        if (mapping.source === aSourceFile && mapping.originalLine) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source !== null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name !== null && mapping.name !== null) {
              // Only use the identifier name if it's an identifier
              // in both SourceMaps
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content) {
          if (aSourceMapPath) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      // The mappings must be guaranteed to be in sorted order before we start
      // serializing them or else the generated line numbers (which are defined
      // via the ';' separators) will be all messed up. Note: it might be more
      // performant to maintain the sorting as we insert them, rather than as we
      // serialize them, but the big O is the same either way.
      this._mappings.sort(util.compareByGeneratedPositions);

      for (var i = 0, len = this._mappings.length; i < len; i++) {
        mapping = this._mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositions(mapping, this._mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        file: this._file,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._sourceRoot) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this);
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":156,"./base64-vlq":157,"./util":163,"amdefine":1}],162:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  var SourceMapGenerator = requireb('./source-map-generator').SourceMapGenerator;
  var util = requireb('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/g;

  // Matches a Windows-style newline, or any character.
  var REGEX_CHARACTER = /\r\n|[\s\S]/g;

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine === undefined ? null : aLine;
    this.column = aColumn === undefined ? null : aColumn;
    this.source = aSource === undefined ? null : aSource;
    this.name = aName === undefined ? null : aName;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content) {
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  mapping.source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk instanceof SourceNode || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk instanceof SourceNode || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk instanceof SourceNode) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild instanceof SourceNode) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i] instanceof SourceNode) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      chunk.match(REGEX_CHARACTER).forEach(function (ch, idx, array) {
        if (REGEX_NEWLINE.test(ch)) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === array.length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column += ch.length;
        }
      });
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":161,"./util":163,"amdefine":1}],163:[function(requireb,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = requireb('amdefine')(module, requireb);
}
define(function (requireb, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a requirebd argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  function relative(aRoot, aPath) {
    aRoot = aRoot.replace(/\/$/, '');

    var url = urlParse(aRoot);
    if (aPath.charAt(0) == "/" && url && url.path == "/") {
      return aPath.slice(1);
    }

    return aPath.indexOf(aRoot + '/') === 0
      ? aPath.substr(aRoot.length + 1)
      : aPath;
  }
  exports.relative = relative;

  function strcmp(aStr1, aStr2) {
    var s1 = aStr1 || "";
    var s2 = aStr2 || "";
    return (s1 > s2) - (s1 < s2);
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp;

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp || onlyCompareOriginal) {
      return cmp;
    }

    cmp = strcmp(mappingA.name, mappingB.name);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    return mappingA.generatedColumn - mappingB.generatedColumn;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings where the generated positions are
   * compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
    var cmp;

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositions = compareByGeneratedPositions;

});

},{"amdefine":1}],164:[function(requireb,module,exports){
var sys = requireb("util");
var MOZ_SourceMap = requireb("source-map");
var UglifyJS = exports;
/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function array_to_hash(a) {
    var ret = Object.create(null);
    for (var i = 0; i < a.length; ++i)
        ret[a[i]] = true;
    return ret;
};

function slice(a, start) {
    return Array.prototype.slice.call(a, start || 0);
};

function characters(str) {
    return str.split("");
};

function member(name, array) {
    for (var i = array.length; --i >= 0;)
        if (array[i] == name)
            return true;
    return false;
};

function find_if(func, array) {
    for (var i = 0, n = array.length; i < n; ++i) {
        if (func(array[i]))
            return array[i];
    }
};

function repeat_string(str, i) {
    if (i <= 0) return "";
    if (i == 1) return str;
    var d = repeat_string(str, i >> 1);
    d += d;
    if (i & 1) d += str;
    return d;
};

function DefaultsError(msg, defs) {
    Error.call(this, msg);
    this.msg = msg;
    this.defs = defs;
};
DefaultsError.prototype = Object.create(Error.prototype);
DefaultsError.prototype.constructor = DefaultsError;

DefaultsError.croak = function(msg, defs) {
    throw new DefaultsError(msg, defs);
};

function defaults(args, defs, croak) {
    if (args === true)
        args = {};
    var ret = args || {};
    if (croak) for (var i in ret) if (ret.hasOwnProperty(i) && !defs.hasOwnProperty(i))
        DefaultsError.croak("`" + i + "` is not a supported option", defs);
    for (var i in defs) if (defs.hasOwnProperty(i)) {
        ret[i] = (args && args.hasOwnProperty(i)) ? args[i] : defs[i];
    }
    return ret;
};

function merge(obj, ext) {
    var count = 0;
    for (var i in ext) if (ext.hasOwnProperty(i)) {
        obj[i] = ext[i];
        count++;
    }
    return count;
};

function noop() {};

var MAP = (function(){
    function MAP(a, f, backwards) {
        var ret = [], top = [], i;
        function doit() {
            var val = f(a[i], i);
            var is_last = val instanceof Last;
            if (is_last) val = val.v;
            if (val instanceof AtTop) {
                val = val.v;
                if (val instanceof Splice) {
                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);
                } else {
                    top.push(val);
                }
            }
            else if (val !== skip) {
                if (val instanceof Splice) {
                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);
                } else {
                    ret.push(val);
                }
            }
            return is_last;
        };
        if (a instanceof Array) {
            if (backwards) {
                for (i = a.length; --i >= 0;) if (doit()) break;
                ret.reverse();
                top.reverse();
            } else {
                for (i = 0; i < a.length; ++i) if (doit()) break;
            }
        }
        else {
            for (i in a) if (a.hasOwnProperty(i)) if (doit()) break;
        }
        return top.concat(ret);
    };
    MAP.at_top = function(val) { return new AtTop(val) };
    MAP.splice = function(val) { return new Splice(val) };
    MAP.last = function(val) { return new Last(val) };
    var skip = MAP.skip = {};
    function AtTop(val) { this.v = val };
    function Splice(val) { this.v = val };
    function Last(val) { this.v = val };
    return MAP;
})();

function push_uniq(array, el) {
    if (array.indexOf(el) < 0)
        array.push(el);
};

function string_template(text, props) {
    return text.replace(/\{(.+?)\}/g, function(str, p){
        return props[p];
    });
};

function remove(array, el) {
    for (var i = array.length; --i >= 0;) {
        if (array[i] === el) array.splice(i, 1);
    }
};

function mergeSort(array, cmp) {
    if (array.length < 2) return array.slice();
    function merge(a, b) {
        var r = [], ai = 0, bi = 0, i = 0;
        while (ai < a.length && bi < b.length) {
            cmp(a[ai], b[bi]) <= 0
                ? r[i++] = a[ai++]
                : r[i++] = b[bi++];
        }
        if (ai < a.length) r.push.apply(r, a.slice(ai));
        if (bi < b.length) r.push.apply(r, b.slice(bi));
        return r;
    };
    function _ms(a) {
        if (a.length <= 1)
            return a;
        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);
        left = _ms(left);
        right = _ms(right);
        return merge(left, right);
    };
    return _ms(array);
};

function set_difference(a, b) {
    return a.filter(function(el){
        return b.indexOf(el) < 0;
    });
};

function set_intersection(a, b) {
    return a.filter(function(el){
        return b.indexOf(el) >= 0;
    });
};

// this function is taken from Acorn [1], written by Marijn Haverbeke
// [1] https://github.com/marijnh/acorn
function makePredicate(words) {
    if (!(words instanceof Array)) words = words.split(" ");
    var f = "", cats = [];
    out: for (var i = 0; i < words.length; ++i) {
        for (var j = 0; j < cats.length; ++j)
            if (cats[j][0].length == words[i].length) {
                cats[j].push(words[i]);
                continue out;
            }
        cats.push([words[i]]);
    }
    function compareTo(arr) {
        if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";
        f += "switch(str){";
        for (var i = 0; i < arr.length; ++i) f += "case " + JSON.stringify(arr[i]) + ":";
        f += "return true}return false;";
    }
    // When there are more than three length categories, an outer
    // switch first dispatches on the lengths, to save on comparisons.
    if (cats.length > 3) {
        cats.sort(function(a, b) {return b.length - a.length;});
        f += "switch(str.length){";
        for (var i = 0; i < cats.length; ++i) {
            var cat = cats[i];
            f += "case " + cat[0].length + ":";
            compareTo(cat);
        }
        f += "}";
        // Otherwise, simply generate a flat `switch` statement.
    } else {
        compareTo(words);
    }
    return new Function("str", f);
};

function all(array, predicate) {
    for (var i = array.length; --i >= 0;)
        if (!predicate(array[i]))
            return false;
    return true;
};

function Dictionary() {
    this._values = Object.create(null);
    this._size = 0;
};
Dictionary.prototype = {
    set: function(key, val) {
        if (!this.has(key)) ++this._size;
        this._values["$" + key] = val;
        return this;
    },
    add: function(key, val) {
        if (this.has(key)) {
            this.get(key).push(val);
        } else {
            this.set(key, [ val ]);
        }
        return this;
    },
    get: function(key) { return this._values["$" + key] },
    del: function(key) {
        if (this.has(key)) {
            --this._size;
            delete this._values["$" + key];
        }
        return this;
    },
    has: function(key) { return ("$" + key) in this._values },
    each: function(f) {
        for (var i in this._values)
            f(this._values[i], i.substr(1));
    },
    size: function() {
        return this._size;
    },
    map: function(f) {
        var ret = [];
        for (var i in this._values)
            ret.push(f(this._values[i], i.substr(1)));
        return ret;
    },
    toObject: function() { return this._values }
};
Dictionary.fromObject = function(obj) {
    var dict = new Dictionary();
    dict._size = merge(dict._values, obj);
    return dict;
};

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function DEFNODE(type, props, methods, base) {
    if (arguments.length < 4) base = AST_Node;
    if (!props) props = [];
    else props = props.split(/\s+/);
    var self_props = props;
    if (base && base.PROPS)
        props = props.concat(base.PROPS);
    var code = "return function AST_" + type + "(props){ if (props) { ";
    for (var i = props.length; --i >= 0;) {
        code += "this." + props[i] + " = props." + props[i] + ";";
    }
    var proto = base && new base;
    if (proto && proto.initialize || (methods && methods.initialize))
        code += "this.initialize();";
    code += "}}";
    var ctor = new Function(code)();
    if (proto) {
        ctor.prototype = proto;
        ctor.BASE = base;
    }
    if (base) base.SUBCLASSES.push(ctor);
    ctor.prototype.CTOR = ctor;
    ctor.PROPS = props || null;
    ctor.SELF_PROPS = self_props;
    ctor.SUBCLASSES = [];
    if (type) {
        ctor.prototype.TYPE = ctor.TYPE = type;
    }
    if (methods) for (i in methods) if (methods.hasOwnProperty(i)) {
        if (/^\$/.test(i)) {
            ctor[i.substr(1)] = methods[i];
        } else {
            ctor.prototype[i] = methods[i];
        }
    }
    ctor.DEFMETHOD = function(name, method) {
        this.prototype[name] = method;
    };
    return ctor;
};

var AST_Token = DEFNODE("Token", "type value line col pos endline endcol endpos nlb comments_before file", {
}, null);

var AST_Node = DEFNODE("Node", "start end", {
    clone: function() {
        return new this.CTOR(this);
    },
    $documentation: "Base class of all AST nodes",
    $propdoc: {
        start: "[AST_Token] The first token of this node",
        end: "[AST_Token] The last token of this node"
    },
    _walk: function(visitor) {
        return visitor._visit(this);
    },
    walk: function(visitor) {
        return this._walk(visitor); // not sure the indirection will be any help
    }
}, null);

AST_Node.warn_function = null;
AST_Node.warn = function(txt, props) {
    if (AST_Node.warn_function)
        AST_Node.warn_function(string_template(txt, props));
};

/* -----[ statements ]----- */

var AST_Statement = DEFNODE("Statement", null, {
    $documentation: "Base class of all statements",
});

var AST_Debugger = DEFNODE("Debugger", null, {
    $documentation: "Represents a debugger statement",
}, AST_Statement);

var AST_Directive = DEFNODE("Directive", "value scope quote", {
    $documentation: "Represents a directive, like \"use strict\";",
    $propdoc: {
        value: "[string] The value of this directive as a plain string (it's not an AST_String!)",
        scope: "[AST_Scope/S] The scope that this directive affects",
        quote: "[string] the original quote character"
    },
}, AST_Statement);

var AST_SimpleStatement = DEFNODE("SimpleStatement", "body", {
    $documentation: "A statement consisting of an expression, i.e. a = 1 + 2",
    $propdoc: {
        body: "[AST_Node] an expression node (should not be instanceof AST_Statement)"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.body._walk(visitor);
        });
    }
}, AST_Statement);

function walk_body(node, visitor) {
    if (node.body instanceof AST_Statement) {
        node.body._walk(visitor);
    }
    else node.body.forEach(function(stat){
        stat._walk(visitor);
    });
};

var AST_Block = DEFNODE("Block", "body", {
    $documentation: "A body of statements (usually bracketed)",
    $propdoc: {
        body: "[AST_Statement*] an array of statements"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            walk_body(this, visitor);
        });
    }
}, AST_Statement);

var AST_BlockStatement = DEFNODE("BlockStatement", null, {
    $documentation: "A block statement",
}, AST_Block);

var AST_EmptyStatement = DEFNODE("EmptyStatement", null, {
    $documentation: "The empty statement (empty block or simply a semicolon)",
    _walk: function(visitor) {
        return visitor._visit(this);
    }
}, AST_Statement);

var AST_StatementWithBody = DEFNODE("StatementWithBody", "body", {
    $documentation: "Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",
    $propdoc: {
        body: "[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.body._walk(visitor);
        });
    }
}, AST_Statement);

var AST_LabeledStatement = DEFNODE("LabeledStatement", "label", {
    $documentation: "Statement with a label",
    $propdoc: {
        label: "[AST_Label] a label definition"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.label._walk(visitor);
            this.body._walk(visitor);
        });
    }
}, AST_StatementWithBody);

var AST_IterationStatement = DEFNODE("IterationStatement", null, {
    $documentation: "Internal class.  All loops inherit from it."
}, AST_StatementWithBody);

var AST_DWLoop = DEFNODE("DWLoop", "condition", {
    $documentation: "Base class for do/while statements",
    $propdoc: {
        condition: "[AST_Node] the loop condition.  Should not be instanceof AST_Statement"
    }
}, AST_IterationStatement);

var AST_Do = DEFNODE("Do", null, {
    $documentation: "A `do` statement",
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.body._walk(visitor);
            this.condition._walk(visitor);
        });
    }
}, AST_DWLoop);

var AST_While = DEFNODE("While", null, {
    $documentation: "A `while` statement",
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.condition._walk(visitor);
            this.body._walk(visitor);
        });
    }
}, AST_DWLoop);

var AST_For = DEFNODE("For", "init condition step", {
    $documentation: "A `for` statement",
    $propdoc: {
        init: "[AST_Node?] the `for` initialization code, or null if empty",
        condition: "[AST_Node?] the `for` termination clause, or null if empty",
        step: "[AST_Node?] the `for` update clause, or null if empty"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            if (this.init) this.init._walk(visitor);
            if (this.condition) this.condition._walk(visitor);
            if (this.step) this.step._walk(visitor);
            this.body._walk(visitor);
        });
    }
}, AST_IterationStatement);

var AST_ForIn = DEFNODE("ForIn", "init name object", {
    $documentation: "A `for ... in` statement",
    $propdoc: {
        init: "[AST_Node] the `for/in` initialization code",
        name: "[AST_SymbolRef?] the loop variable, only if `init` is AST_Var",
        object: "[AST_Node] the object that we're looping through"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.init._walk(visitor);
            this.object._walk(visitor);
            this.body._walk(visitor);
        });
    }
}, AST_IterationStatement);

var AST_With = DEFNODE("With", "expression", {
    $documentation: "A `with` statement",
    $propdoc: {
        expression: "[AST_Node] the `with` expression"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
            this.body._walk(visitor);
        });
    }
}, AST_StatementWithBody);

/* -----[ scope and functions ]----- */

var AST_Scope = DEFNODE("Scope", "directives variables functions uses_with uses_eval parent_scope enclosed cname", {
    $documentation: "Base class for all statements introducing a lexical scope",
    $propdoc: {
        directives: "[string*/S] an array of directives declared in this scope",
        variables: "[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope",
        functions: "[Object/S] like `variables`, but only lists function declarations",
        uses_with: "[boolean/S] tells whether this scope uses the `with` statement",
        uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",
        parent_scope: "[AST_Scope?/S] link to the parent scope",
        enclosed: "[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes",
        cname: "[integer/S] current index for mangling variables (used internally by the mangler)",
    },
}, AST_Block);

var AST_Toplevel = DEFNODE("Toplevel", "globals", {
    $documentation: "The toplevel scope",
    $propdoc: {
        globals: "[Object/S] a map of name -> SymbolDef for all undeclared names",
    },
    wrap_enclose: function(arg_parameter_pairs) {
        var self = this;
        var args = [];
        var parameters = [];

        arg_parameter_pairs.forEach(function(pair) {
            var splitAt = pair.lastIndexOf(":");

            args.push(pair.substr(0, splitAt));
            parameters.push(pair.substr(splitAt + 1));
        });

        var wrapped_tl = "(function(" + parameters.join(",") + "){ '$ORIG'; })(" + args.join(",") + ")";
        wrapped_tl = parse(wrapped_tl);
        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){
            if (node instanceof AST_Directive && node.value == "$ORIG") {
                return MAP.splice(self.body);
            }
        }));
        return wrapped_tl;
    },
    wrap_commonjs: function(name, export_all) {
        var self = this;
        var to_export = [];
        if (export_all) {
            self.figure_out_scope();
            self.walk(new TreeWalker(function(node){
                if (node instanceof AST_SymbolDeclaration && node.definition().global) {
                    if (!find_if(function(n){ return n.name == node.name }, to_export))
                        to_export.push(node);
                }
            }));
        }
        var wrapped_tl = "(function(exports, global){ global['" + name + "'] = exports; '$ORIG'; '$EXPORTS'; }({}, (function(){return this}())))";
        wrapped_tl = parse(wrapped_tl);
        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){
            if (node instanceof AST_SimpleStatement) {
                node = node.body;
                if (node instanceof AST_String) switch (node.getValue()) {
                  case "$ORIG":
                    return MAP.splice(self.body);
                  case "$EXPORTS":
                    var body = [];
                    to_export.forEach(function(sym){
                        body.push(new AST_SimpleStatement({
                            body: new AST_Assign({
                                left: new AST_Sub({
                                    expression: new AST_SymbolRef({ name: "exports" }),
                                    property: new AST_String({ value: sym.name }),
                                }),
                                operator: "=",
                                right: new AST_SymbolRef(sym),
                            }),
                        }));
                    });
                    return MAP.splice(body);
                }
            }
        }));
        return wrapped_tl;
    }
}, AST_Scope);

var AST_Lambda = DEFNODE("Lambda", "name argnames uses_arguments", {
    $documentation: "Base class for functions",
    $propdoc: {
        name: "[AST_SymbolDeclaration?] the name of this function",
        argnames: "[AST_SymbolFunarg*] array of function arguments",
        uses_arguments: "[boolean/S] tells whether this function accesses the arguments array"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            if (this.name) this.name._walk(visitor);
            this.argnames.forEach(function(arg){
                arg._walk(visitor);
            });
            walk_body(this, visitor);
        });
    }
}, AST_Scope);

var AST_Accessor = DEFNODE("Accessor", null, {
    $documentation: "A setter/getter function.  The `name` property is always null."
}, AST_Lambda);

var AST_Function = DEFNODE("Function", null, {
    $documentation: "A function expression"
}, AST_Lambda);

var AST_Defun = DEFNODE("Defun", null, {
    $documentation: "A function definition"
}, AST_Lambda);

/* -----[ JUMPS ]----- */

var AST_Jump = DEFNODE("Jump", null, {
    $documentation: "Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)"
}, AST_Statement);

var AST_Exit = DEFNODE("Exit", "value", {
    $documentation: "Base class for “exits” (`return` and `throw`)",
    $propdoc: {
        value: "[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"
    },
    _walk: function(visitor) {
        return visitor._visit(this, this.value && function(){
            this.value._walk(visitor);
        });
    }
}, AST_Jump);

var AST_Return = DEFNODE("Return", null, {
    $documentation: "A `return` statement"
}, AST_Exit);

var AST_Throw = DEFNODE("Throw", null, {
    $documentation: "A `throw` statement"
}, AST_Exit);

var AST_LoopControl = DEFNODE("LoopControl", "label", {
    $documentation: "Base class for loop control statements (`break` and `continue`)",
    $propdoc: {
        label: "[AST_LabelRef?] the label, or null if none",
    },
    _walk: function(visitor) {
        return visitor._visit(this, this.label && function(){
            this.label._walk(visitor);
        });
    }
}, AST_Jump);

var AST_Break = DEFNODE("Break", null, {
    $documentation: "A `break` statement"
}, AST_LoopControl);

var AST_Continue = DEFNODE("Continue", null, {
    $documentation: "A `continue` statement"
}, AST_LoopControl);

/* -----[ IF ]----- */

var AST_If = DEFNODE("If", "condition alternative", {
    $documentation: "A `if` statement",
    $propdoc: {
        condition: "[AST_Node] the `if` condition",
        alternative: "[AST_Statement?] the `else` part, or null if not present"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.condition._walk(visitor);
            this.body._walk(visitor);
            if (this.alternative) this.alternative._walk(visitor);
        });
    }
}, AST_StatementWithBody);

/* -----[ SWITCH ]----- */

var AST_Switch = DEFNODE("Switch", "expression", {
    $documentation: "A `switch` statement",
    $propdoc: {
        expression: "[AST_Node] the `switch` “discriminant”"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
            walk_body(this, visitor);
        });
    }
}, AST_Block);

var AST_SwitchBranch = DEFNODE("SwitchBranch", null, {
    $documentation: "Base class for `switch` branches",
}, AST_Block);

var AST_Default = DEFNODE("Default", null, {
    $documentation: "A `default` switch branch",
}, AST_SwitchBranch);

var AST_Case = DEFNODE("Case", "expression", {
    $documentation: "A `case` switch branch",
    $propdoc: {
        expression: "[AST_Node] the `case` expression"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
            walk_body(this, visitor);
        });
    }
}, AST_SwitchBranch);

/* -----[ EXCEPTIONS ]----- */

var AST_Try = DEFNODE("Try", "bcatch bfinally", {
    $documentation: "A `try` statement",
    $propdoc: {
        bcatch: "[AST_Catch?] the catch block, or null if not present",
        bfinally: "[AST_Finally?] the finally block, or null if not present"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            walk_body(this, visitor);
            if (this.bcatch) this.bcatch._walk(visitor);
            if (this.bfinally) this.bfinally._walk(visitor);
        });
    }
}, AST_Block);

var AST_Catch = DEFNODE("Catch", "argname", {
    $documentation: "A `catch` node; only makes sense as part of a `try` statement",
    $propdoc: {
        argname: "[AST_SymbolCatch] symbol for the exception"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.argname._walk(visitor);
            walk_body(this, visitor);
        });
    }
}, AST_Block);

var AST_Finally = DEFNODE("Finally", null, {
    $documentation: "A `finally` node; only makes sense as part of a `try` statement"
}, AST_Block);

/* -----[ VAR/CONST ]----- */

var AST_Definitions = DEFNODE("Definitions", "definitions", {
    $documentation: "Base class for `var` or `const` nodes (variable declarations/initializations)",
    $propdoc: {
        definitions: "[AST_VarDef*] array of variable definitions"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.definitions.forEach(function(def){
                def._walk(visitor);
            });
        });
    }
}, AST_Statement);

var AST_Var = DEFNODE("Var", null, {
    $documentation: "A `var` statement"
}, AST_Definitions);

var AST_Const = DEFNODE("Const", null, {
    $documentation: "A `const` statement"
}, AST_Definitions);

var AST_VarDef = DEFNODE("VarDef", "name value", {
    $documentation: "A variable declaration; only appears in a AST_Definitions node",
    $propdoc: {
        name: "[AST_SymbolVar|AST_SymbolConst] name of the variable",
        value: "[AST_Node?] initializer, or null of there's no initializer"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.name._walk(visitor);
            if (this.value) this.value._walk(visitor);
        });
    }
});

/* -----[ OTHER ]----- */

var AST_Call = DEFNODE("Call", "expression args", {
    $documentation: "A function call expression",
    $propdoc: {
        expression: "[AST_Node] expression to invoke as function",
        args: "[AST_Node*] array of arguments"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
            this.args.forEach(function(arg){
                arg._walk(visitor);
            });
        });
    }
});

var AST_New = DEFNODE("New", null, {
    $documentation: "An object instantiation.  Derives from a function call since it has exactly the same properties"
}, AST_Call);

var AST_Seq = DEFNODE("Seq", "car cdr", {
    $documentation: "A sequence expression (two comma-separated expressions)",
    $propdoc: {
        car: "[AST_Node] first element in sequence",
        cdr: "[AST_Node] second element in sequence"
    },
    $cons: function(x, y) {
        var seq = new AST_Seq(x);
        seq.car = x;
        seq.cdr = y;
        return seq;
    },
    $from_array: function(array) {
        if (array.length == 0) return null;
        if (array.length == 1) return array[0].clone();
        var list = null;
        for (var i = array.length; --i >= 0;) {
            list = AST_Seq.cons(array[i], list);
        }
        var p = list;
        while (p) {
            if (p.cdr && !p.cdr.cdr) {
                p.cdr = p.cdr.car;
                break;
            }
            p = p.cdr;
        }
        return list;
    },
    to_array: function() {
        var p = this, a = [];
        while (p) {
            a.push(p.car);
            if (p.cdr && !(p.cdr instanceof AST_Seq)) {
                a.push(p.cdr);
                break;
            }
            p = p.cdr;
        }
        return a;
    },
    add: function(node) {
        var p = this;
        while (p) {
            if (!(p.cdr instanceof AST_Seq)) {
                var cell = AST_Seq.cons(p.cdr, node);
                return p.cdr = cell;
            }
            p = p.cdr;
        }
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.car._walk(visitor);
            if (this.cdr) this.cdr._walk(visitor);
        });
    }
});

var AST_PropAccess = DEFNODE("PropAccess", "expression property", {
    $documentation: "Base class for property access expressions, i.e. `a.foo` or `a[\"foo\"]`",
    $propdoc: {
        expression: "[AST_Node] the “container” expression",
        property: "[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node"
    }
});

var AST_Dot = DEFNODE("Dot", null, {
    $documentation: "A dotted property access expression",
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
        });
    }
}, AST_PropAccess);

var AST_Sub = DEFNODE("Sub", null, {
    $documentation: "Index-style property access, i.e. `a[\"foo\"]`",
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
            this.property._walk(visitor);
        });
    }
}, AST_PropAccess);

var AST_Unary = DEFNODE("Unary", "operator expression", {
    $documentation: "Base class for unary expressions",
    $propdoc: {
        operator: "[string] the operator",
        expression: "[AST_Node] expression that this unary operator applies to"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.expression._walk(visitor);
        });
    }
});

var AST_UnaryPrefix = DEFNODE("UnaryPrefix", null, {
    $documentation: "Unary prefix expression, i.e. `typeof i` or `++i`"
}, AST_Unary);

var AST_UnaryPostfix = DEFNODE("UnaryPostfix", null, {
    $documentation: "Unary postfix expression, i.e. `i++`"
}, AST_Unary);

var AST_Binary = DEFNODE("Binary", "left operator right", {
    $documentation: "Binary expression, i.e. `a + b`",
    $propdoc: {
        left: "[AST_Node] left-hand side expression",
        operator: "[string] the operator",
        right: "[AST_Node] right-hand side expression"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.left._walk(visitor);
            this.right._walk(visitor);
        });
    }
});

var AST_Conditional = DEFNODE("Conditional", "condition consequent alternative", {
    $documentation: "Conditional expression using the ternary operator, i.e. `a ? b : c`",
    $propdoc: {
        condition: "[AST_Node]",
        consequent: "[AST_Node]",
        alternative: "[AST_Node]"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.condition._walk(visitor);
            this.consequent._walk(visitor);
            this.alternative._walk(visitor);
        });
    }
});

var AST_Assign = DEFNODE("Assign", null, {
    $documentation: "An assignment expression — `a = b + 5`",
}, AST_Binary);

/* -----[ LITERALS ]----- */

var AST_Array = DEFNODE("Array", "elements", {
    $documentation: "An array literal",
    $propdoc: {
        elements: "[AST_Node*] array of elements"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.elements.forEach(function(el){
                el._walk(visitor);
            });
        });
    }
});

var AST_Object = DEFNODE("Object", "properties", {
    $documentation: "An object literal",
    $propdoc: {
        properties: "[AST_ObjectProperty*] array of properties"
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.properties.forEach(function(prop){
                prop._walk(visitor);
            });
        });
    }
});

var AST_ObjectProperty = DEFNODE("ObjectProperty", "key value", {
    $documentation: "Base class for literal object properties",
    $propdoc: {
        key: "[string] the property name converted to a string for ObjectKeyVal.  For setters and getters this is an arbitrary AST_Node.",
        value: "[AST_Node] property value.  For setters and getters this is an AST_Function."
    },
    _walk: function(visitor) {
        return visitor._visit(this, function(){
            this.value._walk(visitor);
        });
    }
});

var AST_ObjectKeyVal = DEFNODE("ObjectKeyVal", "quote", {
    $documentation: "A key: value object property",
    $propdoc: {
        quote: "[string] the original quote character"
    }
}, AST_ObjectProperty);

var AST_ObjectSetter = DEFNODE("ObjectSetter", null, {
    $documentation: "An object setter property",
}, AST_ObjectProperty);

var AST_ObjectGetter = DEFNODE("ObjectGetter", null, {
    $documentation: "An object getter property",
}, AST_ObjectProperty);

var AST_Symbol = DEFNODE("Symbol", "scope name thedef", {
    $propdoc: {
        name: "[string] name of this symbol",
        scope: "[AST_Scope/S] the current scope (not necessarily the definition scope)",
        thedef: "[SymbolDef/S] the definition of this symbol"
    },
    $documentation: "Base class for all symbols",
});

var AST_SymbolAccessor = DEFNODE("SymbolAccessor", null, {
    $documentation: "The name of a property accessor (setter/getter function)"
}, AST_Symbol);

var AST_SymbolDeclaration = DEFNODE("SymbolDeclaration", "init", {
    $documentation: "A declaration symbol (symbol in var/const, function name or argument, symbol in catch)",
    $propdoc: {
        init: "[AST_Node*/S] array of initializers for this declaration."
    }
}, AST_Symbol);

var AST_SymbolVar = DEFNODE("SymbolVar", null, {
    $documentation: "Symbol defining a variable",
}, AST_SymbolDeclaration);

var AST_SymbolConst = DEFNODE("SymbolConst", null, {
    $documentation: "A constant declaration"
}, AST_SymbolDeclaration);

var AST_SymbolFunarg = DEFNODE("SymbolFunarg", null, {
    $documentation: "Symbol naming a function argument",
}, AST_SymbolVar);

var AST_SymbolDefun = DEFNODE("SymbolDefun", null, {
    $documentation: "Symbol defining a function",
}, AST_SymbolDeclaration);

var AST_SymbolLambda = DEFNODE("SymbolLambda", null, {
    $documentation: "Symbol naming a function expression",
}, AST_SymbolDeclaration);

var AST_SymbolCatch = DEFNODE("SymbolCatch", null, {
    $documentation: "Symbol naming the exception in catch",
}, AST_SymbolDeclaration);

var AST_Label = DEFNODE("Label", "references", {
    $documentation: "Symbol naming a label (declaration)",
    $propdoc: {
        references: "[AST_LoopControl*] a list of nodes referring to this label"
    },
    initialize: function() {
        this.references = [];
        this.thedef = this;
    }
}, AST_Symbol);

var AST_SymbolRef = DEFNODE("SymbolRef", null, {
    $documentation: "Reference to some symbol (not definition/declaration)",
}, AST_Symbol);

var AST_LabelRef = DEFNODE("LabelRef", null, {
    $documentation: "Reference to a label symbol",
}, AST_Symbol);

var AST_This = DEFNODE("This", null, {
    $documentation: "The `this` symbol",
}, AST_Symbol);

var AST_Constant = DEFNODE("Constant", null, {
    $documentation: "Base class for all constants",
    getValue: function() {
        return this.value;
    }
});

var AST_String = DEFNODE("String", "value quote", {
    $documentation: "A string literal",
    $propdoc: {
        value: "[string] the contents of this string",
        quote: "[string] the original quote character"
    }
}, AST_Constant);

var AST_Number = DEFNODE("Number", "value", {
    $documentation: "A number literal",
    $propdoc: {
        value: "[number] the numeric value"
    }
}, AST_Constant);

var AST_RegExp = DEFNODE("RegExp", "value", {
    $documentation: "A regexp literal",
    $propdoc: {
        value: "[RegExp] the actual regexp"
    }
}, AST_Constant);

var AST_Atom = DEFNODE("Atom", null, {
    $documentation: "Base class for atoms",
}, AST_Constant);

var AST_Null = DEFNODE("Null", null, {
    $documentation: "The `null` atom",
    value: null
}, AST_Atom);

var AST_NaN = DEFNODE("NaN", null, {
    $documentation: "The impossible value",
    value: 0/0
}, AST_Atom);

var AST_Undefined = DEFNODE("Undefined", null, {
    $documentation: "The `undefined` value",
    value: (function(){}())
}, AST_Atom);

var AST_Hole = DEFNODE("Hole", null, {
    $documentation: "A hole in an array",
    value: (function(){}())
}, AST_Atom);

var AST_Infinity = DEFNODE("Infinity", null, {
    $documentation: "The `Infinity` value",
    value: 1/0
}, AST_Atom);

var AST_Boolean = DEFNODE("Boolean", null, {
    $documentation: "Base class for booleans",
}, AST_Atom);

var AST_False = DEFNODE("False", null, {
    $documentation: "The `false` atom",
    value: false
}, AST_Boolean);

var AST_True = DEFNODE("True", null, {
    $documentation: "The `true` atom",
    value: true
}, AST_Boolean);

/* -----[ TreeWalker ]----- */

function TreeWalker(callback) {
    this.visit = callback;
    this.stack = [];
};
TreeWalker.prototype = {
    _visit: function(node, descend) {
        this.stack.push(node);
        var ret = this.visit(node, descend ? function(){
            descend.call(node);
        } : noop);
        if (!ret && descend) {
            descend.call(node);
        }
        this.stack.pop();
        return ret;
    },
    parent: function(n) {
        return this.stack[this.stack.length - 2 - (n || 0)];
    },
    push: function (node) {
        this.stack.push(node);
    },
    pop: function() {
        return this.stack.pop();
    },
    self: function() {
        return this.stack[this.stack.length - 1];
    },
    find_parent: function(type) {
        var stack = this.stack;
        for (var i = stack.length; --i >= 0;) {
            var x = stack[i];
            if (x instanceof type) return x;
        }
    },
    has_directive: function(type) {
        return this.find_parent(AST_Scope).has_directive(type);
    },
    in_boolean_context: function() {
        var stack = this.stack;
        var i = stack.length, self = stack[--i];
        while (i > 0) {
            var p = stack[--i];
            if ((p instanceof AST_If           && p.condition === self) ||
                (p instanceof AST_Conditional  && p.condition === self) ||
                (p instanceof AST_DWLoop       && p.condition === self) ||
                (p instanceof AST_For          && p.condition === self) ||
                (p instanceof AST_UnaryPrefix  && p.operator == "!" && p.expression === self))
            {
                return true;
            }
            if (!(p instanceof AST_Binary && (p.operator == "&&" || p.operator == "||")))
                return false;
            self = p;
        }
    },
    loopcontrol_target: function(label) {
        var stack = this.stack;
        if (label) for (var i = stack.length; --i >= 0;) {
            var x = stack[i];
            if (x instanceof AST_LabeledStatement && x.label.name == label.name) {
                return x.body;
            }
        } else for (var i = stack.length; --i >= 0;) {
            var x = stack[i];
            if (x instanceof AST_Switch || x instanceof AST_IterationStatement)
                return x;
        }
    }
};

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>
    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

var KEYWORDS = 'break case catch const continue debugger default delete do else finally for function if in instanceof new return switch throw try typeof var void while with';
var KEYWORDS_ATOM = 'false null true';
var RESERVED_WORDS = 'abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized this throws transient volatile yield'
    + " " + KEYWORDS_ATOM + " " + KEYWORDS;
var KEYWORDS_BEFORE_EXPRESSION = 'return new delete throw else case';

KEYWORDS = makePredicate(KEYWORDS);
RESERVED_WORDS = makePredicate(RESERVED_WORDS);
KEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);
KEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);

var OPERATOR_CHARS = makePredicate(characters("+-*&%=<>!?|~^"));

var RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;
var RE_OCT_NUMBER = /^0[0-7]+$/;
var RE_DEC_NUMBER = /^\d*\.?\d*(?:e[+-]?\d*(?:\d\.?|\.?\d)\d*)?$/i;

var OPERATORS = makePredicate([
    "in",
    "instanceof",
    "typeof",
    "new",
    "void",
    "delete",
    "++",
    "--",
    "+",
    "-",
    "!",
    "~",
    "&",
    "|",
    "^",
    "*",
    "/",
    "%",
    ">>",
    "<<",
    ">>>",
    "<",
    ">",
    "<=",
    ">=",
    "==",
    "===",
    "!=",
    "!==",
    "?",
    "=",
    "+=",
    "-=",
    "/=",
    "*=",
    "%=",
    ">>=",
    "<<=",
    ">>>=",
    "|=",
    "^=",
    "&=",
    "&&",
    "||"
]);

var WHITESPACE_CHARS = makePredicate(characters(" \u00a0\n\r\t\f\u000b\u200b\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\uFEFF"));

var PUNC_BEFORE_EXPRESSION = makePredicate(characters("[{(,.;:"));

var PUNC_CHARS = makePredicate(characters("[]{}(),;:"));

var REGEXP_MODIFIERS = makePredicate(characters("gmsiy"));

/* -----[ Tokenizer ]----- */

// regexps adapted from http://xregexp.com/plugins/#unicode
var UNICODE = {
    letter: new RegExp("[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),
    digit: new RegExp("[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]"),
    non_spacing_mark: new RegExp("[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065E\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0900-\\u0902\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0955\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F90-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFD-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26]"),
    space_combining_mark: new RegExp("[\\u0903\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]"),
    connector_punctuation: new RegExp("[\\u005F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]")
};

function is_letter(code) {
    return (code >= 97 && code <= 122)
        || (code >= 65 && code <= 90)
        || (code >= 0xaa && UNICODE.letter.test(String.fromCharCode(code)));
};

function is_digit(code) {
    return code >= 48 && code <= 57;
};

function is_alphanumeric_char(code) {
    return is_digit(code) || is_letter(code);
};

function is_unicode_digit(code) {
    return UNICODE.digit.test(String.fromCharCode(code));
}

function is_unicode_combining_mark(ch) {
    return UNICODE.non_spacing_mark.test(ch) || UNICODE.space_combining_mark.test(ch);
};

function is_unicode_connector_punctuation(ch) {
    return UNICODE.connector_punctuation.test(ch);
};

function is_identifier(name) {
    return !RESERVED_WORDS(name) && /^[a-z_$][a-z0-9_$]*$/i.test(name);
};

function is_identifier_start(code) {
    return code == 36 || code == 95 || is_letter(code);
};

function is_identifier_char(ch) {
    var code = ch.charCodeAt(0);
    return is_identifier_start(code)
        || is_digit(code)
        || code == 8204 // \u200c: zero-width non-joiner <ZWNJ>
        || code == 8205 // \u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)
        || is_unicode_combining_mark(ch)
        || is_unicode_connector_punctuation(ch)
        || is_unicode_digit(code)
    ;
};

function is_identifier_string(str){
    return /^[a-z_$][a-z0-9_$]*$/i.test(str);
};

function parse_js_number(num) {
    if (RE_HEX_NUMBER.test(num)) {
        return parseInt(num.substr(2), 16);
    } else if (RE_OCT_NUMBER.test(num)) {
        return parseInt(num.substr(1), 8);
    } else if (RE_DEC_NUMBER.test(num)) {
        return parseFloat(num);
    }
};

function JS_Parse_Error(message, filename, line, col, pos) {
    this.message = message;
    this.filename = filename;
    this.line = line;
    this.col = col;
    this.pos = pos;
    this.stack = new Error().stack;
};

JS_Parse_Error.prototype.toString = function() {
    return this.message + " (line: " + this.line + ", col: " + this.col + ", pos: " + this.pos + ")" + "\n\n" + this.stack;
};

function js_error(message, filename, line, col, pos) {
    throw new JS_Parse_Error(message, filename, line, col, pos);
};

function is_token(token, type, val) {
    return token.type == type && (val == null || token.value == val);
};

var EX_EOF = {};

function tokenizer($TEXT, filename, html5_comments) {

    var S = {
        text            : $TEXT,
        filename        : filename,
        pos             : 0,
        tokpos          : 0,
        line            : 1,
        tokline         : 0,
        col             : 0,
        tokcol          : 0,
        newline_before  : false,
        regex_allowed   : false,
        comments_before : []
    };

    function peek() { return S.text.charAt(S.pos); };

    function next(signal_eof, in_string) {
        var ch = S.text.charAt(S.pos++);
        if (signal_eof && !ch)
            throw EX_EOF;
        if ("\r\n\u2028\u2029".indexOf(ch) >= 0) {
            S.newline_before = S.newline_before || !in_string;
            ++S.line;
            S.col = 0;
            if (!in_string && ch == "\r" && peek() == "\n") {
                // treat a \r\n sequence as a single \n
                ++S.pos;
                ch = "\n";
            }
        } else {
            ++S.col;
        }
        return ch;
    };

    function forward(i) {
        while (i-- > 0) next();
    };

    function looking_at(str) {
        return S.text.substr(S.pos, str.length) == str;
    };

    function find(what, signal_eof) {
        var pos = S.text.indexOf(what, S.pos);
        if (signal_eof && pos == -1) throw EX_EOF;
        return pos;
    };

    function start_token() {
        S.tokline = S.line;
        S.tokcol = S.col;
        S.tokpos = S.pos;
    };

    var prev_was_dot = false;
    function token(type, value, is_comment) {
        S.regex_allowed = ((type == "operator" && !UNARY_POSTFIX(value)) ||
                           (type == "keyword" && KEYWORDS_BEFORE_EXPRESSION(value)) ||
                           (type == "punc" && PUNC_BEFORE_EXPRESSION(value)));
        prev_was_dot = (type == "punc" && value == ".");
        var ret = {
            type    : type,
            value   : value,
            line    : S.tokline,
            col     : S.tokcol,
            pos     : S.tokpos,
            endline : S.line,
            endcol  : S.col,
            endpos  : S.pos,
            nlb     : S.newline_before,
            file    : filename
        };
        if (!is_comment) {
            ret.comments_before = S.comments_before;
            S.comments_before = [];
            // make note of any newlines in the comments that came before
            for (var i = 0, len = ret.comments_before.length; i < len; i++) {
                ret.nlb = ret.nlb || ret.comments_before[i].nlb;
            }
        }
        S.newline_before = false;
        return new AST_Token(ret);
    };

    function skip_whitespace() {
        var ch;
        while (WHITESPACE_CHARS(ch = peek()) || ch == "\u2028" || ch == "\u2029")
            next();
    };

    function read_while(pred) {
        var ret = "", ch, i = 0;
        while ((ch = peek()) && pred(ch, i++))
            ret += next();
        return ret;
    };

    function parse_error(err) {
        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);
    };

    function read_num(prefix) {
        var has_e = false, after_e = false, has_x = false, has_dot = prefix == ".";
        var num = read_while(function(ch, i){
            var code = ch.charCodeAt(0);
            switch (code) {
              case 120: case 88: // xX
                return has_x ? false : (has_x = true);
              case 101: case 69: // eE
                return has_x ? true : has_e ? false : (has_e = after_e = true);
              case 45: // -
                return after_e || (i == 0 && !prefix);
              case 43: // +
                return after_e;
              case (after_e = false, 46): // .
                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;
            }
            return is_alphanumeric_char(code);
        });
        if (prefix) num = prefix + num;
        var valid = parse_js_number(num);
        if (!isNaN(valid)) {
            return token("num", valid);
        } else {
            parse_error("Invalid syntax: " + num);
        }
    };

    function read_escaped_char(in_string) {
        var ch = next(true, in_string);
        switch (ch.charCodeAt(0)) {
          case 110 : return "\n";
          case 114 : return "\r";
          case 116 : return "\t";
          case 98  : return "\b";
          case 118 : return "\u000b"; // \v
          case 102 : return "\f";
          case 48  : return "\0";
          case 120 : return String.fromCharCode(hex_bytes(2)); // \x
          case 117 : return String.fromCharCode(hex_bytes(4)); // \u
          case 10  : return ""; // newline
          case 13  :            // \r
            if (peek() == "\n") { // DOS newline
                next(true, in_string);
                return "";
            }
        }
        return ch;
    };

    function hex_bytes(n) {
        var num = 0;
        for (; n > 0; --n) {
            var digit = parseInt(next(true), 16);
            if (isNaN(digit))
                parse_error("Invalid hex-character pattern in string");
            num = (num << 4) | digit;
        }
        return num;
    };

    var read_string = with_eof_error("Unterminated string constant", function(quote_char){
        var quote = next(), ret = "";
        for (;;) {
            var ch = next(true, true);
            if (ch == "\\") {
                // read OctalEscapeSequence (XXX: deprecated if "strict mode")
                // https://github.com/mishoo/UglifyJS/issues/178
                var octal_len = 0, first = null;
                ch = read_while(function(ch){
                    if (ch >= "0" && ch <= "7") {
                        if (!first) {
                            first = ch;
                            return ++octal_len;
                        }
                        else if (first <= "3" && octal_len <= 2) return ++octal_len;
                        else if (first >= "4" && octal_len <= 1) return ++octal_len;
                    }
                    return false;
                });
                if (octal_len > 0) ch = String.fromCharCode(parseInt(ch, 8));
                else ch = read_escaped_char(true);
            }
            else if (ch == quote) break;
            ret += ch;
        }
        var tok = token("string", ret);
        tok.quote = quote_char;
        return tok;
    });

    function skip_line_comment(type) {
        var regex_allowed = S.regex_allowed;
        var i = find("\n"), ret;
        if (i == -1) {
            ret = S.text.substr(S.pos);
            S.pos = S.text.length;
        } else {
            ret = S.text.substring(S.pos, i);
            S.pos = i;
        }
        S.col = S.tokcol + (S.pos - S.tokpos);
        S.comments_before.push(token(type, ret, true));
        S.regex_allowed = regex_allowed;
        return next_token();
    };

    var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function(){
        var regex_allowed = S.regex_allowed;
        var i = find("*/", true);
        var text = S.text.substring(S.pos, i);
        var a = text.split("\n"), n = a.length;
        // update stream position
        S.pos = i + 2;
        S.line += n - 1;
        if (n > 1) S.col = a[n - 1].length;
        else S.col += a[n - 1].length;
        S.col += 2;
        var nlb = S.newline_before = S.newline_before || text.indexOf("\n") >= 0;
        S.comments_before.push(token("comment2", text, true));
        S.regex_allowed = regex_allowed;
        S.newline_before = nlb;
        return next_token();
    });

    function read_name() {
        var backslash = false, name = "", ch, escaped = false, hex;
        while ((ch = peek()) != null) {
            if (!backslash) {
                if (ch == "\\") escaped = backslash = true, next();
                else if (is_identifier_char(ch)) name += next();
                else break;
            }
            else {
                if (ch != "u") parse_error("Expecting UnicodeEscapeSequence -- uXXXX");
                ch = read_escaped_char();
                if (!is_identifier_char(ch)) parse_error("Unicode char: " + ch.charCodeAt(0) + " is not valid in identifier");
                name += ch;
                backslash = false;
            }
        }
        if (KEYWORDS(name) && escaped) {
            hex = name.charCodeAt(0).toString(16).toUpperCase();
            name = "\\u" + "0000".substr(hex.length) + hex + name.slice(1);
        }
        return name;
    };

    var read_regexp = with_eof_error("Unterminated regular expression", function(regexp){
        var prev_backslash = false, ch, in_class = false;
        while ((ch = next(true))) if (prev_backslash) {
            regexp += "\\" + ch;
            prev_backslash = false;
        } else if (ch == "[") {
            in_class = true;
            regexp += ch;
        } else if (ch == "]" && in_class) {
            in_class = false;
            regexp += ch;
        } else if (ch == "/" && !in_class) {
            break;
        } else if (ch == "\\") {
            prev_backslash = true;
        } else {
            regexp += ch;
        }
        var mods = read_name();
        return token("regexp", new RegExp(regexp, mods));
    });

    function read_operator(prefix) {
        function grow(op) {
            if (!peek()) return op;
            var bigger = op + peek();
            if (OPERATORS(bigger)) {
                next();
                return grow(bigger);
            } else {
                return op;
            }
        };
        return token("operator", grow(prefix || next()));
    };

    function handle_slash() {
        next();
        switch (peek()) {
          case "/":
            next();
            return skip_line_comment("comment1");
          case "*":
            next();
            return skip_multiline_comment();
        }
        return S.regex_allowed ? read_regexp("") : read_operator("/");
    };

    function handle_dot() {
        next();
        return is_digit(peek().charCodeAt(0))
            ? read_num(".")
            : token("punc", ".");
    };

    function read_word() {
        var word = read_name();
        if (prev_was_dot) return token("name", word);
        return KEYWORDS_ATOM(word) ? token("atom", word)
            : !KEYWORDS(word) ? token("name", word)
            : OPERATORS(word) ? token("operator", word)
            : token("keyword", word);
    };

    function with_eof_error(eof_error, cont) {
        return function(x) {
            try {
                return cont(x);
            } catch(ex) {
                if (ex === EX_EOF) parse_error(eof_error);
                else throw ex;
            }
        };
    };

    function next_token(force_regexp) {
        if (force_regexp != null)
            return read_regexp(force_regexp);
        skip_whitespace();
        start_token();
        if (html5_comments) {
            if (looking_at("<!--")) {
                forward(4);
                return skip_line_comment("comment3");
            }
            if (looking_at("-->") && S.newline_before) {
                forward(3);
                return skip_line_comment("comment4");
            }
        }
        var ch = peek();
        if (!ch) return token("eof");
        var code = ch.charCodeAt(0);
        switch (code) {
          case 34: case 39: return read_string(ch);
          case 46: return handle_dot();
          case 47: return handle_slash();
        }
        if (is_digit(code)) return read_num();
        if (PUNC_CHARS(ch)) return token("punc", next());
        if (OPERATOR_CHARS(ch)) return read_operator();
        if (code == 92 || is_identifier_start(code)) return read_word();
        parse_error("Unexpected character '" + ch + "'");
    };

    next_token.context = function(nc) {
        if (nc) S = nc;
        return S;
    };

    return next_token;

};

/* -----[ Parser (constants) ]----- */

var UNARY_PREFIX = makePredicate([
    "typeof",
    "void",
    "delete",
    "--",
    "++",
    "!",
    "~",
    "-",
    "+"
]);

var UNARY_POSTFIX = makePredicate([ "--", "++" ]);

var ASSIGNMENT = makePredicate([ "=", "+=", "-=", "/=", "*=", "%=", ">>=", "<<=", ">>>=", "|=", "^=", "&=" ]);

var PRECEDENCE = (function(a, ret){
    for (var i = 0; i < a.length; ++i) {
        var b = a[i];
        for (var j = 0; j < b.length; ++j) {
            ret[b[j]] = i + 1;
        }
    }
    return ret;
})(
    [
        ["||"],
        ["&&"],
        ["|"],
        ["^"],
        ["&"],
        ["==", "===", "!=", "!=="],
        ["<", ">", "<=", ">=", "in", "instanceof"],
        [">>", "<<", ">>>"],
        ["+", "-"],
        ["*", "/", "%"]
    ],
    {}
);

var STATEMENTS_WITH_LABELS = array_to_hash([ "fo" + "r", "do", "while", "switch" ]);

var ATOMIC_START_TOKEN = array_to_hash([ "atom", "num", "string", "regexp", "name" ]);

/* -----[ Parser ]----- */

function parse($TEXT, options) {

    options = defaults(options, {
        strict         : false,
        filename       : null,
        toplevel       : null,
        expression     : false,
        html5_comments : true,
        bare_returns   : false,
    });

    var S = {
        input         : (typeof $TEXT == "string"
                         ? tokenizer($TEXT, options.filename,
                                     options.html5_comments)
                         : $TEXT),
        token         : null,
        prev          : null,
        peeked        : null,
        in_function   : 0,
        in_directives : true,
        in_loop       : 0,
        labels        : []
    };

    S.token = next();

    function is(type, value) {
        return is_token(S.token, type, value);
    };

    function peek() { return S.peeked || (S.peeked = S.input()); };

    function next() {
        S.prev = S.token;
        if (S.peeked) {
            S.token = S.peeked;
            S.peeked = null;
        } else {
            S.token = S.input();
        }
        S.in_directives = S.in_directives && (
            S.token.type == "string" || is("punc", ";")
        );
        return S.token;
    };

    function prev() {
        return S.prev;
    };

    function croak(msg, line, col, pos) {
        var ctx = S.input.context();
        js_error(msg,
                 ctx.filename,
                 line != null ? line : ctx.tokline,
                 col != null ? col : ctx.tokcol,
                 pos != null ? pos : ctx.tokpos);
    };

    function token_error(token, msg) {
        croak(msg, token.line, token.col);
    };

    function unexpected(token) {
        if (token == null)
            token = S.token;
        token_error(token, "Unexpected token: " + token.type + " (" + token.value + ")");
    };

    function expect_token(type, val) {
        if (is(type, val)) {
            return next();
        }
        token_error(S.token, "Unexpected token " + S.token.type + " «" + S.token.value + "»" + ", expected " + type + " «" + val + "»");
    };

    function expect(punc) { return expect_token("punc", punc); };

    function can_insert_semicolon() {
        return !options.strict && (
            S.token.nlb || is("eof") || is("punc", "}")
        );
    };

    function semicolon() {
        if (is("punc", ";")) next();
        else if (!can_insert_semicolon()) unexpected();
    };

    function parenthesised() {
        expect("(");
        var exp = expression(true);
        expect(")");
        return exp;
    };

    function embed_tokens(parser) {
        return function() {
            var start = S.token;
            var expr = parser();
            var end = prev();
            expr.start = start;
            expr.end = end;
            return expr;
        };
    };

    function handle_regexp() {
        if (is("operator", "/") || is("operator", "/=")) {
            S.peeked = null;
            S.token = S.input(S.token.value.substr(1)); // force regexp
        }
    };

    var statement = embed_tokens(function() {
        var tmp;
        handle_regexp();
        switch (S.token.type) {
          case "string":
            var dir = S.in_directives, stat = simple_statement();
            // XXXv2: decide how to fix directives
            if (dir && stat.body instanceof AST_String && !is("punc", ",")) {
                return new AST_Directive({
                    start : stat.body.start,
                    end   : stat.body.end,
                    quote : stat.body.quote,
                    value : stat.body.value,
                });
            }
            return stat;
          case "num":
          case "regexp":
          case "operator":
          case "atom":
            return simple_statement();

          case "name":
            return is_token(peek(), "punc", ":")
                ? labeled_statement()
                : simple_statement();

          case "punc":
            switch (S.token.value) {
              case "{":
                return new AST_BlockStatement({
                    start : S.token,
                    body  : block_(),
                    end   : prev()
                });
              case "[":
              case "(":
                return simple_statement();
              case ";":
                next();
                return new AST_EmptyStatement();
              default:
                unexpected();
            }

          case "keyword":
            switch (tmp = S.token.value, next(), tmp) {
              case "break":
                return break_cont(AST_Break);

              case "continue":
                return break_cont(AST_Continue);

              case "debugger":
                semicolon();
                return new AST_Debugger();

              case "do":
                return new AST_Do({
                    body      : in_loop(statement),
                    condition : (expect_token("keyword", "while"), tmp = parenthesised(), semicolon(), tmp)
                });

              case "while":
                return new AST_While({
                    condition : parenthesised(),
                    body      : in_loop(statement)
                });

              case "fo" + "r":
                return for_();

              case "function":
                return function_(AST_Defun);

              case "if":
                return if_();

              case "return":
                if (S.in_function == 0 && !options.bare_returns)
                    croak("'return' outside of function");
                return new AST_Return({
                    value: ( is("punc", ";")
                             ? (next(), null)
                             : can_insert_semicolon()
                             ? null
                             : (tmp = expression(true), semicolon(), tmp) )
                });

              case "switch":
                return new AST_Switch({
                    expression : parenthesised(),
                    body       : in_loop(switch_body_)
                });

              case "throw":
                if (S.token.nlb)
                    croak("Illegal newline after 'throw'");
                return new AST_Throw({
                    value: (tmp = expression(true), semicolon(), tmp)
                });

              case "try":
                return try_();

              case "var":
                return tmp = var_(), semicolon(), tmp;

              case "const":
                return tmp = const_(), semicolon(), tmp;

              case "with":
                return new AST_With({
                    expression : parenthesised(),
                    body       : statement()
                });

              default:
                unexpected();
            }
        }
    });

    function labeled_statement() {
        var label = as_symbol(AST_Label);
        if (find_if(function(l){ return l.name == label.name }, S.labels)) {
            // ECMA-262, 12.12: An ECMAScript program is considered
            // syntactically incorrect if it contains a
            // LabelledStatement that is enclosed by a
            // LabelledStatement with the same Identifier as label.
            croak("Label " + label.name + " defined twice");
        }
        expect(":");
        S.labels.push(label);
        var stat = statement();
        S.labels.pop();
        if (!(stat instanceof AST_IterationStatement)) {
            // check for `continue` that refers to this label.
            // those should be reported as syntax errors.
            // https://github.com/mishoo/UglifyJS2/issues/287
            label.references.forEach(function(ref){
                if (ref instanceof AST_Continue) {
                    ref = ref.label.start;
                    croak("Continue label `" + label.name + "` refers to non-IterationStatement.",
                          ref.line, ref.col, ref.pos);
                }
            });
        }
        return new AST_LabeledStatement({ body: stat, label: label });
    };

    function simple_statement(tmp) {
        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });
    };

    function break_cont(type) {
        var label = null, ldef;
        if (!can_insert_semicolon()) {
            label = as_symbol(AST_LabelRef, true);
        }
        if (label != null) {
            ldef = find_if(function(l){ return l.name == label.name }, S.labels);
            if (!ldef)
                croak("Undefined label " + label.name);
            label.thedef = ldef;
        }
        else if (S.in_loop == 0)
            croak(type.TYPE + " not inside a loop or switch");
        semicolon();
        var stat = new type({ label: label });
        if (ldef) ldef.references.push(stat);
        return stat;
    };

    function for_() {
        expect("(");
        var init = null;
        if (!is("punc", ";")) {
            init = is("keyword", "var")
                ? (next(), var_(true))
                : expression(true, true);
            if (is("operator", "in")) {
                if (init instanceof AST_Var && init.definitions.length > 1)
                    croak("Only one variable declaration allowed in for..in loop");
                next();
                return for_in(init);
            }
        }
        return regular_for(init);
    };

    function regular_for(init) {
        expect(";");
        var test = is("punc", ";") ? null : expression(true);
        expect(";");
        var step = is("punc", ")") ? null : expression(true);
        expect(")");
        return new AST_For({
            init      : init,
            condition : test,
            step      : step,
            body      : in_loop(statement)
        });
    };

    function for_in(init) {
        var lhs = init instanceof AST_Var ? init.definitions[0].name : null;
        var obj = expression(true);
        expect(")");
        return new AST_ForIn({
            init   : init,
            name   : lhs,
            object : obj,
            body   : in_loop(statement)
        });
    };

    var function_ = function(ctor) {
        var in_statement = ctor === AST_Defun;
        var name = is("name") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;
        if (in_statement && !name)
            unexpected();
        expect("(");
        return new ctor({
            name: name,
            argnames: (function(first, a){
                while (!is("punc", ")")) {
                    if (first) first = false; else expect(",");
                    a.push(as_symbol(AST_SymbolFunarg));
                }
                next();
                return a;
            })(true, []),
            body: (function(loop, labels){
                ++S.in_function;
                S.in_directives = true;
                S.in_loop = 0;
                S.labels = [];
                var a = block_();
                --S.in_function;
                S.in_loop = loop;
                S.labels = labels;
                return a;
            })(S.in_loop, S.labels)
        });
    };

    function if_() {
        var cond = parenthesised(), body = statement(), belse = null;
        if (is("keyword", "else")) {
            next();
            belse = statement();
        }
        return new AST_If({
            condition   : cond,
            body        : body,
            alternative : belse
        });
    };

    function block_() {
        expect("{");
        var a = [];
        while (!is("punc", "}")) {
            if (is("eof")) unexpected();
            a.push(statement());
        }
        next();
        return a;
    };

    function switch_body_() {
        expect("{");
        var a = [], cur = null, branch = null, tmp;
        while (!is("punc", "}")) {
            if (is("eof")) unexpected();
            if (is("keyword", "case")) {
                if (branch) branch.end = prev();
                cur = [];
                branch = new AST_Case({
                    start      : (tmp = S.token, next(), tmp),
                    expression : expression(true),
                    body       : cur
                });
                a.push(branch);
                expect(":");
            }
            else if (is("keyword", "default")) {
                if (branch) branch.end = prev();
                cur = [];
                branch = new AST_Default({
                    start : (tmp = S.token, next(), expect(":"), tmp),
                    body  : cur
                });
                a.push(branch);
            }
            else {
                if (!cur) unexpected();
                cur.push(statement());
            }
        }
        if (branch) branch.end = prev();
        next();
        return a;
    };

    function try_() {
        var body = block_(), bcatch = null, bfinally = null;
        if (is("keyword", "catch")) {
            var start = S.token;
            next();
            expect("(");
            var name = as_symbol(AST_SymbolCatch);
            expect(")");
            bcatch = new AST_Catch({
                start   : start,
                argname : name,
                body    : block_(),
                end     : prev()
            });
        }
        if (is("keyword", "finally")) {
            var start = S.token;
            next();
            bfinally = new AST_Finally({
                start : start,
                body  : block_(),
                end   : prev()
            });
        }
        if (!bcatch && !bfinally)
            croak("Missing catch/finally blocks");
        return new AST_Try({
            body     : body,
            bcatch   : bcatch,
            bfinally : bfinally
        });
    };

    function vardefs(no_in, in_const) {
        var a = [];
        for (;;) {
            a.push(new AST_VarDef({
                start : S.token,
                name  : as_symbol(in_const ? AST_SymbolConst : AST_SymbolVar),
                value : is("operator", "=") ? (next(), expression(false, no_in)) : null,
                end   : prev()
            }));
            if (!is("punc", ","))
                break;
            next();
        }
        return a;
    };

    var var_ = function(no_in) {
        return new AST_Var({
            start       : prev(),
            definitions : vardefs(no_in, false),
            end         : prev()
        });
    };

    var const_ = function() {
        return new AST_Const({
            start       : prev(),
            definitions : vardefs(false, true),
            end         : prev()
        });
    };

    var new_ = function() {
        var start = S.token;
        expect_token("operator", "new");
        var newexp = expr_atom(false), args;
        if (is("punc", "(")) {
            next();
            args = expr_list(")");
        } else {
            args = [];
        }
        return subscripts(new AST_New({
            start      : start,
            expression : newexp,
            args       : args,
            end        : prev()
        }), true);
    };

    function as_atom_node() {
        var tok = S.token, ret;
        switch (tok.type) {
          case "name":
          case "keyword":
            ret = _make_symbol(AST_SymbolRef);
            break;
          case "num":
            ret = new AST_Number({ start: tok, end: tok, value: tok.value });
            break;
          case "string":
            ret = new AST_String({
                start : tok,
                end   : tok,
                value : tok.value,
                quote : tok.quote
            });
            break;
          case "regexp":
            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });
            break;
          case "atom":
            switch (tok.value) {
              case "false":
                ret = new AST_False({ start: tok, end: tok });
                break;
              case "true":
                ret = new AST_True({ start: tok, end: tok });
                break;
              case "null":
                ret = new AST_Null({ start: tok, end: tok });
                break;
            }
            break;
        }
        next();
        return ret;
    };

    var expr_atom = function(allow_calls) {
        if (is("operator", "new")) {
            return new_();
        }
        var start = S.token;
        if (is("punc")) {
            switch (start.value) {
              case "(":
                next();
                var ex = expression(true);
                ex.start = start;
                ex.end = S.token;
                expect(")");
                return subscripts(ex, allow_calls);
              case "[":
                return subscripts(array_(), allow_calls);
              case "{":
                return subscripts(object_(), allow_calls);
            }
            unexpected();
        }
        if (is("keyword", "function")) {
            next();
            var func = function_(AST_Function);
            func.start = start;
            func.end = prev();
            return subscripts(func, allow_calls);
        }
        if (ATOMIC_START_TOKEN[S.token.type]) {
            return subscripts(as_atom_node(), allow_calls);
        }
        unexpected();
    };

    function expr_list(closing, allow_trailing_comma, allow_empty) {
        var first = true, a = [];
        while (!is("punc", closing)) {
            if (first) first = false; else expect(",");
            if (allow_trailing_comma && is("punc", closing)) break;
            if (is("punc", ",") && allow_empty) {
                a.push(new AST_Hole({ start: S.token, end: S.token }));
            } else {
                a.push(expression(false));
            }
        }
        next();
        return a;
    };

    var array_ = embed_tokens(function() {
        expect("[");
        return new AST_Array({
            elements: expr_list("]", !options.strict, true)
        });
    });

    var object_ = embed_tokens(function() {
        expect("{");
        var first = true, a = [];
        while (!is("punc", "}")) {
            if (first) first = false; else expect(",");
            if (!options.strict && is("punc", "}"))
                // allow trailing comma
                break;
            var start = S.token;
            var type = start.type;
            var name = as_property_name();
            if (type == "name" && !is("punc", ":")) {
                if (name == "get") {
                    a.push(new AST_ObjectGetter({
                        start : start,
                        key   : as_atom_node(),
                        value : function_(AST_Accessor),
                        end   : prev()
                    }));
                    continue;
                }
                if (name == "set") {
                    a.push(new AST_ObjectSetter({
                        start : start,
                        key   : as_atom_node(),
                        value : function_(AST_Accessor),
                        end   : prev()
                    }));
                    continue;
                }
            }
            expect(":");
            a.push(new AST_ObjectKeyVal({
                start : start,
                quote : start.quote,
                key   : name,
                value : expression(false),
                end   : prev()
            }));
        }
        next();
        return new AST_Object({ properties: a });
    });

    function as_property_name() {
        var tmp = S.token;
        next();
        switch (tmp.type) {
          case "num":
          case "string":
          case "name":
          case "operator":
          case "keyword":
          case "atom":
            return tmp.value;
          default:
            unexpected();
        }
    };

    function as_name() {
        var tmp = S.token;
        next();
        switch (tmp.type) {
          case "name":
          case "operator":
          case "keyword":
          case "atom":
            return tmp.value;
          default:
            unexpected();
        }
    };

    function _make_symbol(type) {
        var name = S.token.value;
        return new (name == "this" ? AST_This : type)({
            name  : String(name),
            start : S.token,
            end   : S.token
        });
    };

    function as_symbol(type, noerror) {
        if (!is("name")) {
            if (!noerror) croak("Name expected");
            return null;
        }
        var sym = _make_symbol(type);
        next();
        return sym;
    };

    var subscripts = function(expr, allow_calls) {
        var start = expr.start;
        if (is("punc", ".")) {
            next();
            return subscripts(new AST_Dot({
                start      : start,
                expression : expr,
                property   : as_name(),
                end        : prev()
            }), allow_calls);
        }
        if (is("punc", "[")) {
            next();
            var prop = expression(true);
            expect("]");
            return subscripts(new AST_Sub({
                start      : start,
                expression : expr,
                property   : prop,
                end        : prev()
            }), allow_calls);
        }
        if (allow_calls && is("punc", "(")) {
            next();
            return subscripts(new AST_Call({
                start      : start,
                expression : expr,
                args       : expr_list(")"),
                end        : prev()
            }), true);
        }
        return expr;
    };

    var maybe_unary = function(allow_calls) {
        var start = S.token;
        if (is("operator") && UNARY_PREFIX(start.value)) {
            next();
            handle_regexp();
            var ex = make_unary(AST_UnaryPrefix, start.value, maybe_unary(allow_calls));
            ex.start = start;
            ex.end = prev();
            return ex;
        }
        var val = expr_atom(allow_calls);
        while (is("operator") && UNARY_POSTFIX(S.token.value) && !S.token.nlb) {
            val = make_unary(AST_UnaryPostfix, S.token.value, val);
            val.start = start;
            val.end = S.token;
            next();
        }
        return val;
    };

    function make_unary(ctor, op, expr) {
        if ((op == "++" || op == "--") && !is_assignable(expr))
            croak("Invalid use of " + op + " operator");
        return new ctor({ operator: op, expression: expr });
    };

    var expr_op = function(left, min_prec, no_in) {
        var op = is("operator") ? S.token.value : null;
        if (op == "in" && no_in) op = null;
        var prec = op != null ? PRECEDENCE[op] : null;
        if (prec != null && prec > min_prec) {
            next();
            var right = expr_op(maybe_unary(true), prec, no_in);
            return expr_op(new AST_Binary({
                start    : left.start,
                left     : left,
                operator : op,
                right    : right,
                end      : right.end
            }), min_prec, no_in);
        }
        return left;
    };

    function expr_ops(no_in) {
        return expr_op(maybe_unary(true), 0, no_in);
    };

    var maybe_conditional = function(no_in) {
        var start = S.token;
        var expr = expr_ops(no_in);
        if (is("operator", "?")) {
            next();
            var yes = expression(false);
            expect(":");
            return new AST_Conditional({
                start       : start,
                condition   : expr,
                consequent  : yes,
                alternative : expression(false, no_in),
                end         : prev()
            });
        }
        return expr;
    };

    function is_assignable(expr) {
        if (!options.strict) return true;
        if (expr instanceof AST_This) return false;
        return (expr instanceof AST_PropAccess || expr instanceof AST_Symbol);
    };

    var maybe_assign = function(no_in) {
        var start = S.token;
        var left = maybe_conditional(no_in), val = S.token.value;
        if (is("operator") && ASSIGNMENT(val)) {
            if (is_assignable(left)) {
                next();
                return new AST_Assign({
                    start    : start,
                    left     : left,
                    operator : val,
                    right    : maybe_assign(no_in),
                    end      : prev()
                });
            }
            croak("Invalid assignment");
        }
        return left;
    };

    var expression = function(commas, no_in) {
        var start = S.token;
        var expr = maybe_assign(no_in);
        if (commas && is("punc", ",")) {
            next();
            return new AST_Seq({
                start  : start,
                car    : expr,
                cdr    : expression(true, no_in),
                end    : peek()
            });
        }
        return expr;
    };

    function in_loop(cont) {
        ++S.in_loop;
        var ret = cont();
        --S.in_loop;
        return ret;
    };

    if (options.expression) {
        return expression(true);
    }

    return (function(){
        var start = S.token;
        var body = [];
        while (!is("eof"))
            body.push(statement());
        var end = prev();
        var toplevel = options.toplevel;
        if (toplevel) {
            toplevel.body = toplevel.body.concat(body);
            toplevel.end = end;
        } else {
            toplevel = new AST_Toplevel({ start: start, body: body, end: end });
        }
        return toplevel;
    })();

};

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

// Tree transformer helpers.

function TreeTransformer(before, after) {
    TreeWalker.call(this);
    this.before = before;
    this.after = after;
}
TreeTransformer.prototype = new TreeWalker;

(function(undefined){

    function _(node, descend) {
        node.DEFMETHOD("transform", function(tw, in_list){
            var x, y;
            tw.push(this);
            if (tw.before) x = tw.before(this, descend, in_list);
            if (x === undefined) {
                if (!tw.after) {
                    x = this;
                    descend(x, tw);
                } else {
                    tw.stack[tw.stack.length - 1] = x = this.clone();
                    descend(x, tw);
                    y = tw.after(x, in_list);
                    if (y !== undefined) x = y;
                }
            }
            tw.pop();
            return x;
        });
    };

    function do_list(list, tw) {
        return MAP(list, function(node){
            return node.transform(tw, true);
        });
    };

    _(AST_Node, noop);

    _(AST_LabeledStatement, function(self, tw){
        self.label = self.label.transform(tw);
        self.body = self.body.transform(tw);
    });

    _(AST_SimpleStatement, function(self, tw){
        self.body = self.body.transform(tw);
    });

    _(AST_Block, function(self, tw){
        self.body = do_list(self.body, tw);
    });

    _(AST_DWLoop, function(self, tw){
        self.condition = self.condition.transform(tw);
        self.body = self.body.transform(tw);
    });

    _(AST_For, function(self, tw){
        if (self.init) self.init = self.init.transform(tw);
        if (self.condition) self.condition = self.condition.transform(tw);
        if (self.step) self.step = self.step.transform(tw);
        self.body = self.body.transform(tw);
    });

    _(AST_ForIn, function(self, tw){
        self.init = self.init.transform(tw);
        self.object = self.object.transform(tw);
        self.body = self.body.transform(tw);
    });

    _(AST_With, function(self, tw){
        self.expression = self.expression.transform(tw);
        self.body = self.body.transform(tw);
    });

    _(AST_Exit, function(self, tw){
        if (self.value) self.value = self.value.transform(tw);
    });

    _(AST_LoopControl, function(self, tw){
        if (self.label) self.label = self.label.transform(tw);
    });

    _(AST_If, function(self, tw){
        self.condition = self.condition.transform(tw);
        self.body = self.body.transform(tw);
        if (self.alternative) self.alternative = self.alternative.transform(tw);
    });

    _(AST_Switch, function(self, tw){
        self.expression = self.expression.transform(tw);
        self.body = do_list(self.body, tw);
    });

    _(AST_Case, function(self, tw){
        self.expression = self.expression.transform(tw);
        self.body = do_list(self.body, tw);
    });

    _(AST_Try, function(self, tw){
        self.body = do_list(self.body, tw);
        if (self.bcatch) self.bcatch = self.bcatch.transform(tw);
        if (self.bfinally) self.bfinally = self.bfinally.transform(tw);
    });

    _(AST_Catch, function(self, tw){
        self.argname = self.argname.transform(tw);
        self.body = do_list(self.body, tw);
    });

    _(AST_Definitions, function(self, tw){
        self.definitions = do_list(self.definitions, tw);
    });

    _(AST_VarDef, function(self, tw){
        self.name = self.name.transform(tw);
        if (self.value) self.value = self.value.transform(tw);
    });

    _(AST_Lambda, function(self, tw){
        if (self.name) self.name = self.name.transform(tw);
        self.argnames = do_list(self.argnames, tw);
        self.body = do_list(self.body, tw);
    });

    _(AST_Call, function(self, tw){
        self.expression = self.expression.transform(tw);
        self.args = do_list(self.args, tw);
    });

    _(AST_Seq, function(self, tw){
        self.car = self.car.transform(tw);
        self.cdr = self.cdr.transform(tw);
    });

    _(AST_Dot, function(self, tw){
        self.expression = self.expression.transform(tw);
    });

    _(AST_Sub, function(self, tw){
        self.expression = self.expression.transform(tw);
        self.property = self.property.transform(tw);
    });

    _(AST_Unary, function(self, tw){
        self.expression = self.expression.transform(tw);
    });

    _(AST_Binary, function(self, tw){
        self.left = self.left.transform(tw);
        self.right = self.right.transform(tw);
    });

    _(AST_Conditional, function(self, tw){
        self.condition = self.condition.transform(tw);
        self.consequent = self.consequent.transform(tw);
        self.alternative = self.alternative.transform(tw);
    });

    _(AST_Array, function(self, tw){
        self.elements = do_list(self.elements, tw);
    });

    _(AST_Object, function(self, tw){
        self.properties = do_list(self.properties, tw);
    });

    _(AST_ObjectProperty, function(self, tw){
        self.value = self.value.transform(tw);
    });

})();

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function SymbolDef(scope, index, orig) {
    this.name = orig.name;
    this.orig = [ orig ];
    this.scope = scope;
    this.references = [];
    this.global = false;
    this.mangled_name = null;
    this.undeclared = false;
    this.constant = false;
    this.index = index;
};

SymbolDef.prototype = {
    unmangleable: function(options) {
        if (!options) options = {};

        return (this.global && !options.toplevel)
            || this.undeclared
            || (!options.eval && (this.scope.uses_eval || this.scope.uses_with))
            || (options.keep_fnames
                && (this.orig[0] instanceof AST_SymbolLambda
                    || this.orig[0] instanceof AST_SymbolDefun));
    },
    mangle: function(options) {
        var cache = options.cache && options.cache.props;
        if (this.global && cache && cache.has(this.name)) {
            this.mangled_name = cache.get(this.name);
        }
        else if (!this.mangled_name && !this.unmangleable(options)) {
            var s = this.scope;
            if (!options.screw_ie8 && this.orig[0] instanceof AST_SymbolLambda)
                s = s.parent_scope;
            this.mangled_name = s.next_mangled(options, this);
            if (this.global && cache) {
                cache.set(this.name, this.mangled_name);
            }
        }
    }
};

AST_Toplevel.DEFMETHOD("figure_out_scope", function(options){
    options = defaults(options, {
        screw_ie8: false,
        cache: null
    });

    // pass 1: setup scope chaining and handle definitions
    var self = this;
    var scope = self.parent_scope = null;
    var defun = null;
    var nesting = 0;
    var tw = new TreeWalker(function(node, descend){
        if (options.screw_ie8 && node instanceof AST_Catch) {
            var save_scope = scope;
            scope = new AST_Scope(node);
            scope.init_scope_vars(nesting);
            scope.parent_scope = save_scope;
            descend();
            scope = save_scope;
            return true;
        }
        if (node instanceof AST_Scope) {
            node.init_scope_vars(nesting);
            var save_scope = node.parent_scope = scope;
            var save_defun = defun;
            defun = scope = node;
            ++nesting; descend(); --nesting;
            scope = save_scope;
            defun = save_defun;
            return true;        // don't descend again in TreeWalker
        }
        if (node instanceof AST_Directive) {
            node.scope = scope;
            push_uniq(scope.directives, node.value);
            return true;
        }
        if (node instanceof AST_With) {
            for (var s = scope; s; s = s.parent_scope)
                s.uses_with = true;
            return;
        }
        if (node instanceof AST_Symbol) {
            node.scope = scope;
        }
        if (node instanceof AST_SymbolLambda) {
            defun.def_function(node);
        }
        else if (node instanceof AST_SymbolDefun) {
            // Careful here, the scope where this should be defined is
            // the parent scope.  The reason is that we enter a new
            // scope when we encounter the AST_Defun node (which is
            // instanceof AST_Scope) but we get to the symbol a bit
            // later.
            (node.scope = defun.parent_scope).def_function(node);
        }
        else if (node instanceof AST_SymbolVar
                 || node instanceof AST_SymbolConst) {
            var def = defun.def_variable(node);
            def.constant = node instanceof AST_SymbolConst;
            def.init = tw.parent().value;
        }
        else if (node instanceof AST_SymbolCatch) {
            (options.screw_ie8 ? scope : defun)
                .def_variable(node);
        }
    });
    self.walk(tw);

    // pass 2: find back references and eval
    var func = null;
    var globals = self.globals = new Dictionary();
    var tw = new TreeWalker(function(node, descend){
        if (node instanceof AST_Lambda) {
            var prev_func = func;
            func = node;
            descend();
            func = prev_func;
            return true;
        }
        if (node instanceof AST_SymbolRef) {
            var name = node.name;
            var sym = node.scope.find_variable(name);
            if (!sym) {
                var g;
                if (globals.has(name)) {
                    g = globals.get(name);
                } else {
                    g = new SymbolDef(self, globals.size(), node);
                    g.undeclared = true;
                    g.global = true;
                    globals.set(name, g);
                }
                node.thedef = g;
                if (name == "eval" && tw.parent() instanceof AST_Call) {
                    for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope)
                        s.uses_eval = true;
                }
                if (func && name == "arguments") {
                    func.uses_arguments = true;
                }
            } else {
                node.thedef = sym;
            }
            node.reference();
            return true;
        }
    });
    self.walk(tw);

    if (options.cache) {
        this.cname = options.cache.cname;
    }
});

AST_Scope.DEFMETHOD("init_scope_vars", function(nesting){
    this.directives = [];     // contains the directives defined in this scope, i.e. "use strict"
    this.variables = new Dictionary(); // map name to AST_SymbolVar (variables defined in this scope; includes functions)
    this.functions = new Dictionary(); // map name to AST_SymbolDefun (functions defined in this scope)
    this.uses_with = false;   // will be set to true if this or some nested scope uses the `with` statement
    this.uses_eval = false;   // will be set to true if this or nested scope uses the global `eval`
    this.parent_scope = null; // the parent scope
    this.enclosed = [];       // a list of variables from this or outer scope(s) that are referenced from this or inner scopes
    this.cname = -1;          // the current index for mangling functions/variables
    this.nesting = nesting;   // the nesting level of this scope (0 means toplevel)
});

AST_Scope.DEFMETHOD("strict", function(){
    return this.has_directive("use strict");
});

AST_Lambda.DEFMETHOD("init_scope_vars", function(){
    AST_Scope.prototype.init_scope_vars.apply(this, arguments);
    this.uses_arguments = false;
});

AST_SymbolRef.DEFMETHOD("reference", function() {
    var def = this.definition();
    def.references.push(this);
    var s = this.scope;
    while (s) {
        push_uniq(s.enclosed, def);
        if (s === def.scope) break;
        s = s.parent_scope;
    }
    this.frame = this.scope.nesting - def.scope.nesting;
});

AST_Scope.DEFMETHOD("find_variable", function(name){
    if (name instanceof AST_Symbol) name = name.name;
    return this.variables.get(name)
        || (this.parent_scope && this.parent_scope.find_variable(name));
});

AST_Scope.DEFMETHOD("has_directive", function(value){
    return this.parent_scope && this.parent_scope.has_directive(value)
        || (this.directives.indexOf(value) >= 0 ? this : null);
});

AST_Scope.DEFMETHOD("def_function", function(symbol){
    this.functions.set(symbol.name, this.def_variable(symbol));
});

AST_Scope.DEFMETHOD("def_variable", function(symbol){
    var def;
    if (!this.variables.has(symbol.name)) {
        def = new SymbolDef(this, this.variables.size(), symbol);
        this.variables.set(symbol.name, def);
        def.global = !this.parent_scope;
    } else {
        def = this.variables.get(symbol.name);
        def.orig.push(symbol);
    }
    return symbol.thedef = def;
});

AST_Scope.DEFMETHOD("next_mangled", function(options){
    var ext = this.enclosed;
    out: while (true) {
        var m = base54(++this.cname);
        if (!is_identifier(m)) continue; // skip over "do"

        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not
        // shadow a name excepted from mangling.
        if (options.except.indexOf(m) >= 0) continue;

        // we must ensure that the mangled name does not shadow a name
        // from some parent scope that is referenced in this or in
        // inner scopes.
        for (var i = ext.length; --i >= 0;) {
            var sym = ext[i];
            var name = sym.mangled_name || (sym.unmangleable(options) && sym.name);
            if (m == name) continue out;
        }
        return m;
    }
});

AST_Function.DEFMETHOD("next_mangled", function(options, def){
    // #179, #326
    // in Safari strict mode, something like (function x(x){...}) is a syntax error;
    // a function expression's argument cannot shadow the function expression's name

    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();
    while (true) {
        var name = AST_Lambda.prototype.next_mangled.call(this, options, def);
        if (!(tricky_def && tricky_def.mangled_name == name))
            return name;
    }
});

AST_Scope.DEFMETHOD("references", function(sym){
    if (sym instanceof AST_Symbol) sym = sym.definition();
    return this.enclosed.indexOf(sym) < 0 ? null : sym;
});

AST_Symbol.DEFMETHOD("unmangleable", function(options){
    return this.definition().unmangleable(options);
});

// property accessors are not mangleable
AST_SymbolAccessor.DEFMETHOD("unmangleable", function(){
    return true;
});

// labels are always mangleable
AST_Label.DEFMETHOD("unmangleable", function(){
    return false;
});

AST_Symbol.DEFMETHOD("unreferenced", function(){
    return this.definition().references.length == 0
        && !(this.scope.uses_eval || this.scope.uses_with);
});

AST_Symbol.DEFMETHOD("undeclared", function(){
    return this.definition().undeclared;
});

AST_LabelRef.DEFMETHOD("undeclared", function(){
    return false;
});

AST_Label.DEFMETHOD("undeclared", function(){
    return false;
});

AST_Symbol.DEFMETHOD("definition", function(){
    return this.thedef;
});

AST_Symbol.DEFMETHOD("global", function(){
    return this.definition().global;
});

AST_Toplevel.DEFMETHOD("_default_mangler_options", function(options){
    return defaults(options, {
        except      : [],
        eval        : false,
        sort        : false,
        toplevel    : false,
        screw_ie8   : false,
        keep_fnames : false
    });
});

AST_Toplevel.DEFMETHOD("mangle_names", function(options){
    options = this._default_mangler_options(options);
    // We only need to mangle declaration nodes.  Special logic wired
    // into the code generator will display the mangled name if it's
    // present (and for AST_SymbolRef-s it'll use the mangled name of
    // the AST_SymbolDeclaration that it points to).
    var lname = -1;
    var to_mangle = [];

    if (options.cache) {
        this.globals.each(function(symbol){
            if (options.except.indexOf(symbol.name) < 0) {
                to_mangle.push(symbol);
            }
        });
    }

    var tw = new TreeWalker(function(node, descend){
        if (node instanceof AST_LabeledStatement) {
            // lname is incremented when we get to the AST_Label
            var save_nesting = lname;
            descend();
            lname = save_nesting;
            return true;        // don't descend again in TreeWalker
        }
        if (node instanceof AST_Scope) {
            var p = tw.parent(), a = [];
            node.variables.each(function(symbol){
                if (options.except.indexOf(symbol.name) < 0) {
                    a.push(symbol);
                }
            });
            if (options.sort) a.sort(function(a, b){
                return b.references.length - a.references.length;
            });
            to_mangle.push.apply(to_mangle, a);
            return;
        }
        if (node instanceof AST_Label) {
            var name;
            do name = base54(++lname); while (!is_identifier(name));
            node.mangled_name = name;
            return true;
        }
        if (options.screw_ie8 && node instanceof AST_SymbolCatch) {
            to_mangle.push(node.definition());
            return;
        }
    });
    this.walk(tw);
    to_mangle.forEach(function(def){ def.mangle(options) });

    if (options.cache) {
        options.cache.cname = this.cname;
    }
});

AST_Toplevel.DEFMETHOD("compute_char_frequency", function(options){
    options = this._default_mangler_options(options);
    var tw = new TreeWalker(function(node){
        if (node instanceof AST_Constant)
            base54.consider(node.print_to_string());
        else if (node instanceof AST_Return)
            base54.consider("return");
        else if (node instanceof AST_Throw)
            base54.consider("throw");
        else if (node instanceof AST_Continue)
            base54.consider("continue");
        else if (node instanceof AST_Break)
            base54.consider("break");
        else if (node instanceof AST_Debugger)
            base54.consider("debugger");
        else if (node instanceof AST_Directive)
            base54.consider(node.value);
        else if (node instanceof AST_While)
            base54.consider("while");
        else if (node instanceof AST_Do)
            base54.consider("do while");
        else if (node instanceof AST_If) {
            base54.consider("if");
            if (node.alternative) base54.consider("else");
        }
        else if (node instanceof AST_Var)
            base54.consider("var");
        else if (node instanceof AST_Const)
            base54.consider("const");
        else if (node instanceof AST_Lambda)
            base54.consider("function");
        else if (node instanceof AST_For)
            base54.consider("fo" + "r");
        else if (node instanceof AST_ForIn)
            base54.consider("for in");
        else if (node instanceof AST_Switch)
            base54.consider("switch");
        else if (node instanceof AST_Case)
            base54.consider("case");
        else if (node instanceof AST_Default)
            base54.consider("default");
        else if (node instanceof AST_With)
            base54.consider("with");
        else if (node instanceof AST_ObjectSetter)
            base54.consider("set" + node.key);
        else if (node instanceof AST_ObjectGetter)
            base54.consider("get" + node.key);
        else if (node instanceof AST_ObjectKeyVal)
            base54.consider(node.key);
        else if (node instanceof AST_New)
            base54.consider("new");
        else if (node instanceof AST_This)
            base54.consider("this");
        else if (node instanceof AST_Try)
            base54.consider("try");
        else if (node instanceof AST_Catch)
            base54.consider("catch");
        else if (node instanceof AST_Finally)
            base54.consider("finally");
        else if (node instanceof AST_Symbol && node.unmangleable(options))
            base54.consider(node.name);
        else if (node instanceof AST_Unary || node instanceof AST_Binary)
            base54.consider(node.operator);
        else if (node instanceof AST_Dot)
            base54.consider(node.property);
    });
    this.walk(tw);
    base54.sort();
});

var base54 = (function() {
    var string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_0123456789";
    var chars, frequency;
    function reset() {
        frequency = Object.create(null);
        chars = string.split("").map(function(ch){ return ch.charCodeAt(0) });
        chars.forEach(function(ch){ frequency[ch] = 0 });
    }
    base54.consider = function(str){
        for (var i = str.length; --i >= 0;) {
            var code = str.charCodeAt(i);
            if (code in frequency) ++frequency[code];
        }
    };
    base54.sort = function() {
        chars = mergeSort(chars, function(a, b){
            if (is_digit(a) && !is_digit(b)) return 1;
            if (is_digit(b) && !is_digit(a)) return -1;
            return frequency[b] - frequency[a];
        });
    };
    base54.reset = reset;
    reset();
    base54.get = function(){ return chars };
    base54.freq = function(){ return frequency };
    function base54(num) {
        var ret = "", base = 54;
        num++;
        do {
            num--;
            ret += String.fromCharCode(chars[num % base]);
            num = Math.floor(num / base);
            base = 64;
        } while (num > 0);
        return ret;
    };
    return base54;
})();

AST_Toplevel.DEFMETHOD("scope_warnings", function(options){
    options = defaults(options, {
        undeclared       : false, // this makes a lot of noise
        unreferenced     : true,
        assign_to_global : true,
        func_arguments   : true,
        nested_defuns    : true,
        eval             : true
    });
    var tw = new TreeWalker(function(node){
        if (options.undeclared
            && node instanceof AST_SymbolRef
            && node.undeclared())
        {
            // XXX: this also warns about JS standard names,
            // i.e. Object, Array, parseInt etc.  Should add a list of
            // exceptions.
            AST_Node.warn("Undeclared symbol: {name} [{file}:{line},{col}]", {
                name: node.name,
                file: node.start.file,
                line: node.start.line,
                col: node.start.col
            });
        }
        if (options.assign_to_global)
        {
            var sym = null;
            if (node instanceof AST_Assign && node.left instanceof AST_SymbolRef)
                sym = node.left;
            else if (node instanceof AST_ForIn && node.init instanceof AST_SymbolRef)
                sym = node.init;
            if (sym
                && (sym.undeclared()
                    || (sym.global() && sym.scope !== sym.definition().scope))) {
                AST_Node.warn("{msg}: {name} [{file}:{line},{col}]", {
                    msg: sym.undeclared() ? "Accidental global?" : "Assignment to global",
                    name: sym.name,
                    file: sym.start.file,
                    line: sym.start.line,
                    col: sym.start.col
                });
            }
        }
        if (options.eval
            && node instanceof AST_SymbolRef
            && node.undeclared()
            && node.name == "eval") {
            AST_Node.warn("Eval is used [{file}:{line},{col}]", node.start);
        }
        if (options.unreferenced
            && (node instanceof AST_SymbolDeclaration || node instanceof AST_Label)
            && !(node instanceof AST_SymbolCatch)
            && node.unreferenced()) {
            AST_Node.warn("{type} {name} is declared but not referenced [{file}:{line},{col}]", {
                type: node instanceof AST_Label ? "Label" : "Symbol",
                name: node.name,
                file: node.start.file,
                line: node.start.line,
                col: node.start.col
            });
        }
        if (options.func_arguments
            && node instanceof AST_Lambda
            && node.uses_arguments) {
            AST_Node.warn("arguments used in function {name} [{file}:{line},{col}]", {
                name: node.name ? node.name.name : "anonymous",
                file: node.start.file,
                line: node.start.line,
                col: node.start.col
            });
        }
        if (options.nested_defuns
            && node instanceof AST_Defun
            && !(tw.parent() instanceof AST_Scope)) {
            AST_Node.warn("Function {name} declared in nested statement \"{type}\" [{file}:{line},{col}]", {
                name: node.name.name,
                type: tw.parent().TYPE,
                file: node.start.file,
                line: node.start.line,
                col: node.start.col
            });
        }
    });
    this.walk(tw);
});

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function OutputStream(options) {

    options = defaults(options, {
        indent_start     : 0,
        indent_level     : 4,
        quote_keys       : false,
        space_colon      : true,
        ascii_only       : false,
        unescape_regexps : false,
        inline_script    : false,
        width            : 80,
        max_line_len     : 32000,
        beautify         : false,
        source_map       : null,
        bracketize       : false,
        semicolons       : true,
        comments         : false,
        preserve_line    : false,
        screw_ie8        : false,
        preamble         : null,
        quote_style      : 0
    }, true);

    var indentation = 0;
    var current_col = 0;
    var current_line = 1;
    var current_pos = 0;
    var OUTPUT = "";

    function to_ascii(str, identifier) {
        return str.replace(/[\u0080-\uffff]/g, function(ch) {
            var code = ch.charCodeAt(0).toString(16);
            if (code.length <= 2 && !identifier) {
                while (code.length < 2) code = "0" + code;
                return "\\x" + code;
            } else {
                while (code.length < 4) code = "0" + code;
                return "\\u" + code;
            }
        });
    };

    function make_string(str, quote) {
        var dq = 0, sq = 0;
        str = str.replace(/[\\\b\f\n\r\t\x22\x27\u2028\u2029\0\ufeff]/g, function(s){
            switch (s) {
              case "\\": return "\\\\";
              case "\b": return "\\b";
              case "\f": return "\\f";
              case "\n": return "\\n";
              case "\r": return "\\r";
              case "\u2028": return "\\u2028";
              case "\u2029": return "\\u2029";
              case '"': ++dq; return '"';
              case "'": ++sq; return "'";
              case "\0": return "\\x00";
              case "\ufeff": return "\\ufeff";
            }
            return s;
        });
        function quote_single() {
            return "'" + str.replace(/\x27/g, "\\'") + "'";
        }
        function quote_double() {
            return '"' + str.replace(/\x22/g, '\\"') + '"';
        }
        if (options.ascii_only) str = to_ascii(str);
        switch (options.quote_style) {
          case 1:
            return quote_single();
          case 2:
            return quote_double();
          case 3:
            return quote == "'" ? quote_single() : quote_double();
          default:
            return dq > sq ? quote_single() : quote_double();
        }
    };

    function encode_string(str, quote) {
        var ret = make_string(str, quote);
        if (options.inline_script)
            ret = ret.replace(/<\x2fscript([>\/\t\n\f\r ])/gi, "<\\/script$1");
        return ret;
    };

    function make_name(name) {
        name = name.toString();
        if (options.ascii_only)
            name = to_ascii(name, true);
        return name;
    };

    function make_indent(back) {
        return repeat_string(" ", options.indent_start + indentation - back * options.indent_level);
    };

    /* -----[ beautification/minification ]----- */

    var might_need_space = false;
    var might_need_semicolon = false;
    var last = null;

    function last_char() {
        return last.charAt(last.length - 1);
    };

    function maybe_newline() {
        if (options.max_line_len && current_col > options.max_line_len)
            print("\n");
    };

    var requirebSemicolonChars = makePredicate("( [ + * / - , .");

    function print(str) {
        str = String(str);
        var ch = str.charAt(0);
        if (might_need_semicolon) {
            if ((!ch || ";}".indexOf(ch) < 0) && !/[;]$/.test(last)) {
                if (options.semicolons || requirebSemicolonChars(ch)) {
                    OUTPUT += ";";
                    current_col++;
                    current_pos++;
                } else {
                    OUTPUT += "\n";
                    current_pos++;
                    current_line++;
                    current_col = 0;
                }
                if (!options.beautify)
                    might_need_space = false;
            }
            might_need_semicolon = false;
        }

        if (!options.beautify && options.preserve_line && stack[stack.length - 1]) {
            var target_line = stack[stack.length - 1].start.line;
            while (current_line < target_line) {
                OUTPUT += "\n";
                current_pos++;
                current_line++;
                current_col = 0;
                might_need_space = false;
            }
        }

        if (might_need_space) {
            var prev = last_char();
            if ((is_identifier_char(prev)
                 && (is_identifier_char(ch) || ch == "\\"))
                || (/^[\+\-\/]$/.test(ch) && ch == prev))
            {
                OUTPUT += " ";
                current_col++;
                current_pos++;
            }
            might_need_space = false;
        }
        var a = str.split(/\r?\n/), n = a.length - 1;
        current_line += n;
        if (n == 0) {
            current_col += a[n].length;
        } else {
            current_col = a[n].length;
        }
        current_pos += str.length;
        last = str;
        OUTPUT += str;
    };

    var space = options.beautify ? function() {
        print(" ");
    } : function() {
        might_need_space = true;
    };

    var indent = options.beautify ? function(half) {
        if (options.beautify) {
            print(make_indent(half ? 0.5 : 0));
        }
    } : noop;

    var with_indent = options.beautify ? function(col, cont) {
        if (col === true) col = next_indent();
        var save_indentation = indentation;
        indentation = col;
        var ret = cont();
        indentation = save_indentation;
        return ret;
    } : function(col, cont) { return cont() };

    var newline = options.beautify ? function() {
        print("\n");
    } : maybe_newline;

    var semicolon = options.beautify ? function() {
        print(";");
    } : function() {
        might_need_semicolon = true;
    };

    function force_semicolon() {
        might_need_semicolon = false;
        print(";");
    };

    function next_indent() {
        return indentation + options.indent_level;
    };

    function with_block(cont) {
        var ret;
        print("{");
        newline();
        with_indent(next_indent(), function(){
            ret = cont();
        });
        indent();
        print("}");
        return ret;
    };

    function with_parens(cont) {
        print("(");
        //XXX: still nice to have that for argument lists
        //var ret = with_indent(current_col, cont);
        var ret = cont();
        print(")");
        return ret;
    };

    function with_square(cont) {
        print("[");
        //var ret = with_indent(current_col, cont);
        var ret = cont();
        print("]");
        return ret;
    };

    function comma() {
        print(",");
        space();
    };

    function colon() {
        print(":");
        if (options.space_colon) space();
    };

    var add_mapping = options.source_map ? function(token, name) {
        try {
            if (token) options.source_map.add(
                token.file || "?",
                current_line, current_col,
                token.line, token.col,
                (!name && token.type == "name") ? token.value : name
            );
        } catch(ex) {
            AST_Node.warn("Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]", {
                file: token.file,
                line: token.line,
                col: token.col,
                cline: current_line,
                ccol: current_col,
                name: name || ""
            })
        }
    } : noop;

    function get() {
        return OUTPUT;
    };

    if (options.preamble) {
        print(options.preamble.replace(/\r\n?|[\n\u2028\u2029]|\s*$/g, "\n"));
    }

    var stack = [];
    return {
        get             : get,
        toString        : get,
        indent          : indent,
        indentation     : function() { return indentation },
        current_width   : function() { return current_col - indentation },
        should_break    : function() { return options.width && this.current_width() >= options.width },
        newline         : newline,
        print           : print,
        space           : space,
        comma           : comma,
        colon           : colon,
        last            : function() { return last },
        semicolon       : semicolon,
        force_semicolon : force_semicolon,
        to_ascii        : to_ascii,
        print_name      : function(name) { print(make_name(name)) },
        print_string    : function(str, quote) { print(encode_string(str, quote)) },
        next_indent     : next_indent,
        with_indent     : with_indent,
        with_block      : with_block,
        with_parens     : with_parens,
        with_square     : with_square,
        add_mapping     : add_mapping,
        option          : function(opt) { return options[opt] },
        line            : function() { return current_line },
        col             : function() { return current_col },
        pos             : function() { return current_pos },
        push_node       : function(node) { stack.push(node) },
        pop_node        : function() { return stack.pop() },
        stack           : function() { return stack },
        parent          : function(n) {
            return stack[stack.length - 2 - (n || 0)];
        }
    };

};

/* -----[ code generators ]----- */

(function(){

    /* -----[ utils ]----- */

    function DEFPRINT(nodetype, generator) {
        nodetype.DEFMETHOD("_codegen", generator);
    };

    AST_Node.DEFMETHOD("print", function(stream, force_parens){
        var self = this, generator = self._codegen;
        function doit() {
            self.add_comments(stream);
            self.add_source_map(stream);
            generator(self, stream);
        }
        stream.push_node(self);
        if (force_parens || self.needs_parens(stream)) {
            stream.with_parens(doit);
        } else {
            doit();
        }
        stream.pop_node();
    });

    AST_Node.DEFMETHOD("print_to_string", function(options){
        var s = OutputStream(options);
        this.print(s);
        return s.get();
    });

    /* -----[ comments ]----- */

    AST_Node.DEFMETHOD("add_comments", function(output){
        var c = output.option("comments"), self = this;
        if (c) {
            var start = self.start;
            if (start && !start._comments_dumped) {
                start._comments_dumped = true;
                var comments = start.comments_before || [];

                // XXX: ugly fix for https://github.com/mishoo/UglifyJS2/issues/112
                //               and https://github.com/mishoo/UglifyJS2/issues/372
                if (self instanceof AST_Exit && self.value) {
                    self.value.walk(new TreeWalker(function(node){
                        if (node.start && node.start.comments_before) {
                            comments = comments.concat(node.start.comments_before);
                            node.start.comments_before = [];
                        }
                        if (node instanceof AST_Function ||
                            node instanceof AST_Array ||
                            node instanceof AST_Object)
                        {
                            return true; // don't go inside.
                        }
                    }));
                }

                if (c.test) {
                    comments = comments.filter(function(comment){
                        return c.test(comment.value);
                    });
                } else if (typeof c == "function") {
                    comments = comments.filter(function(comment){
                        return c(self, comment);
                    });
                }

                // Keep single line comments after nlb, after nlb
                if (!output.option("beautify") && comments.length > 0 &&
                    /comment[134]/.test(comments[0].type) &&
                    output.col() !== 0 && comments[0].nlb)
                {
                    output.print("\n");
                }

                comments.forEach(function(c){
                    if (/comment[134]/.test(c.type)) {
                        output.print("//" + c.value + "\n");
                        output.indent();
                    }
                    else if (c.type == "comment2") {
                        output.print("/*" + c.value + "*/");
                        if (start.nlb) {
                            output.print("\n");
                            output.indent();
                        } else {
                            output.space();
                        }
                    }
                });
            }
        }
    });

    /* -----[ PARENTHESES ]----- */

    function PARENS(nodetype, func) {
        if (Array.isArray(nodetype)) {
            nodetype.forEach(function(nodetype){
                PARENS(nodetype, func);
            });
        } else {
            nodetype.DEFMETHOD("needs_parens", func);
        }
    };

    PARENS(AST_Node, function(){
        return false;
    });

    // a function expression needs parens around it when it's provably
    // the first token to appear in a statement.
    PARENS(AST_Function, function(output){
        return first_in_statement(output);
    });

    // same goes for an object literal, because otherwise it would be
    // interpreted as a block of code.
    PARENS(AST_Object, function(output){
        return first_in_statement(output);
    });

    PARENS([ AST_Unary, AST_Undefined ], function(output){
        var p = output.parent();
        return p instanceof AST_PropAccess && p.expression === this;
    });

    PARENS(AST_Seq, function(output){
        var p = output.parent();
        return p instanceof AST_Call             // (foo, bar)() or foo(1, (2, 3), 4)
            || p instanceof AST_Unary            // !(foo, bar, baz)
            || p instanceof AST_Binary           // 1 + (2, 3) + 4 ==> 8
            || p instanceof AST_VarDef           // var a = (1, 2), b = a + a; ==> b == 4
            || p instanceof AST_PropAccess       // (1, {foo:2}).foo or (1, {foo:2})["foo"] ==> 2
            || p instanceof AST_Array            // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]
            || p instanceof AST_ObjectProperty   // { foo: (1, 2) }.foo ==> 2
            || p instanceof AST_Conditional      /* (false, true) ? (a = 10, b = 20) : (c = 30)
                                                  * ==> 20 (side effect, set a := 10 and b := 20) */
        ;
    });

    PARENS(AST_Binary, function(output){
        var p = output.parent();
        // (foo && bar)()
        if (p instanceof AST_Call && p.expression === this)
            return true;
        // typeof (foo && bar)
        if (p instanceof AST_Unary)
            return true;
        // (foo && bar)["prop"], (foo && bar).prop
        if (p instanceof AST_PropAccess && p.expression === this)
            return true;
        // this deals with precedence: 3 * (2 + 1)
        if (p instanceof AST_Binary) {
            var po = p.operator, pp = PRECEDENCE[po];
            var so = this.operator, sp = PRECEDENCE[so];
            if (pp > sp
                || (pp == sp
                    && this === p.right)) {
                return true;
            }
        }
    });

    PARENS(AST_PropAccess, function(output){
        var p = output.parent();
        if (p instanceof AST_New && p.expression === this) {
            // i.e. new (foo.bar().baz)
            //
            // if there's one call into this subtree, then we need
            // parens around it too, otherwise the call will be
            // interpreted as passing the arguments to the upper New
            // expression.
            try {
                this.walk(new TreeWalker(function(node){
                    if (node instanceof AST_Call) throw p;
                }));
            } catch(ex) {
                if (ex !== p) throw ex;
                return true;
            }
        }
    });

    PARENS(AST_Call, function(output){
        var p = output.parent(), p1;
        if (p instanceof AST_New && p.expression === this)
            return true;

        // workaround for Safari bug.
        // https://bugs.webkit.org/show_bug.cgi?id=123506
        return this.expression instanceof AST_Function
            && p instanceof AST_PropAccess
            && p.expression === this
            && (p1 = output.parent(1)) instanceof AST_Assign
            && p1.left === p;
    });

    PARENS(AST_New, function(output){
        var p = output.parent();
        if (no_constructor_parens(this, output)
            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)["getTime"]()
                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)
            return true;
    });

    PARENS(AST_Number, function(output){
        var p = output.parent();
        if (this.getValue() < 0 && p instanceof AST_PropAccess && p.expression === this)
            return true;
    });

    PARENS([ AST_Assign, AST_Conditional ], function (output){
        var p = output.parent();
        // !(a = false) → true
        if (p instanceof AST_Unary)
            return true;
        // 1 + (a = 2) + 3 → 6, side effect setting a = 2
        if (p instanceof AST_Binary && !(p instanceof AST_Assign))
            return true;
        // (a = func)() —or— new (a = Object)()
        if (p instanceof AST_Call && p.expression === this)
            return true;
        // (a = foo) ? bar : baz
        if (p instanceof AST_Conditional && p.condition === this)
            return true;
        // (a = foo)["prop"] —or— (a = foo).prop
        if (p instanceof AST_PropAccess && p.expression === this)
            return true;
    });

    /* -----[ PRINTERS ]----- */

    DEFPRINT(AST_Directive, function(self, output){
        output.print_string(self.value, self.quote);
        output.semicolon();
    });
    DEFPRINT(AST_Debugger, function(self, output){
        output.print("debugger");
        output.semicolon();
    });

    /* -----[ statements ]----- */

    function display_body(body, is_toplevel, output) {
        var last = body.length - 1;
        body.forEach(function(stmt, i){
            if (!(stmt instanceof AST_EmptyStatement)) {
                output.indent();
                stmt.print(output);
                if (!(i == last && is_toplevel)) {
                    output.newline();
                    if (is_toplevel) output.newline();
                }
            }
        });
    };

    AST_StatementWithBody.DEFMETHOD("_do_print_body", function(output){
        force_statement(this.body, output);
    });

    DEFPRINT(AST_Statement, function(self, output){
        self.body.print(output);
        output.semicolon();
    });
    DEFPRINT(AST_Toplevel, function(self, output){
        display_body(self.body, true, output);
        output.print("");
    });
    DEFPRINT(AST_LabeledStatement, function(self, output){
        self.label.print(output);
        output.colon();
        self.body.print(output);
    });
    DEFPRINT(AST_SimpleStatement, function(self, output){
        self.body.print(output);
        output.semicolon();
    });
    function print_bracketed(body, output) {
        if (body.length > 0) output.with_block(function(){
            display_body(body, false, output);
        });
        else output.print("{}");
    };
    DEFPRINT(AST_BlockStatement, function(self, output){
        print_bracketed(self.body, output);
    });
    DEFPRINT(AST_EmptyStatement, function(self, output){
        output.semicolon();
    });
    DEFPRINT(AST_Do, function(self, output){
        output.print("do");
        output.space();
        self._do_print_body(output);
        output.space();
        output.print("while");
        output.space();
        output.with_parens(function(){
            self.condition.print(output);
        });
        output.semicolon();
    });
    DEFPRINT(AST_While, function(self, output){
        output.print("while");
        output.space();
        output.with_parens(function(){
            self.condition.print(output);
        });
        output.space();
        self._do_print_body(output);
    });
    DEFPRINT(AST_For, function(self, output){
        output.print("fo" + "r");
        output.space();
        output.with_parens(function(){
            if (self.init && !(self.init instanceof AST_EmptyStatement)) {
                if (self.init instanceof AST_Definitions) {
                    self.init.print(output);
                } else {
                    parenthesize_for_noin(self.init, output, true);
                }
                output.print(";");
                output.space();
            } else {
                output.print(";");
            }
            if (self.condition) {
                self.condition.print(output);
                output.print(";");
                output.space();
            } else {
                output.print(";");
            }
            if (self.step) {
                self.step.print(output);
            }
        });
        output.space();
        self._do_print_body(output);
    });
    DEFPRINT(AST_ForIn, function(self, output){
        output.print("fo" + "r");
        output.space();
        output.with_parens(function(){
            self.init.print(output);
            output.space();
            output.print("in");
            output.space();
            self.object.print(output);
        });
        output.space();
        self._do_print_body(output);
    });
    DEFPRINT(AST_With, function(self, output){
        output.print("with");
        output.space();
        output.with_parens(function(){
            self.expression.print(output);
        });
        output.space();
        self._do_print_body(output);
    });

    /* -----[ functions ]----- */
    AST_Lambda.DEFMETHOD("_do_print", function(output, nokeyword){
        var self = this;
        if (!nokeyword) {
            output.print("function");
        }
        if (self.name) {
            output.space();
            self.name.print(output);
        }
        output.with_parens(function(){
            self.argnames.forEach(function(arg, i){
                if (i) output.comma();
                arg.print(output);
            });
        });
        output.space();
        print_bracketed(self.body, output);
    });
    DEFPRINT(AST_Lambda, function(self, output){
        self._do_print(output);
    });

    /* -----[ exits ]----- */
    AST_Exit.DEFMETHOD("_do_print", function(output, kind){
        output.print(kind);
        if (this.value) {
            output.space();
            this.value.print(output);
        }
        output.semicolon();
    });
    DEFPRINT(AST_Return, function(self, output){
        self._do_print(output, "return");
    });
    DEFPRINT(AST_Throw, function(self, output){
        self._do_print(output, "throw");
    });

    /* -----[ loop control ]----- */
    AST_LoopControl.DEFMETHOD("_do_print", function(output, kind){
        output.print(kind);
        if (this.label) {
            output.space();
            this.label.print(output);
        }
        output.semicolon();
    });
    DEFPRINT(AST_Break, function(self, output){
        self._do_print(output, "break");
    });
    DEFPRINT(AST_Continue, function(self, output){
        self._do_print(output, "continue");
    });

    /* -----[ if ]----- */
    function make_then(self, output) {
        if (output.option("bracketize")) {
            make_block(self.body, output);
            return;
        }
        // The squeezer replaces "block"-s that contain only a single
        // statement with the statement itself; technically, the AST
        // is correct, but this can create problems when we output an
        // IF having an ELSE clause where the THEN clause ends in an
        // IF *without* an ELSE block (then the outer ELSE would refer
        // to the inner IF).  This function checks for this case and
        // adds the block brackets if needed.
        if (!self.body)
            return output.force_semicolon();
        if (self.body instanceof AST_Do
            && !output.option("screw_ie8")) {
            // https://github.com/mishoo/UglifyJS/issues/#issue/57 IE
            // croaks with "syntax error" on code like this: if (foo)
            // do ... while(cond); else ...  we need block brackets
            // around do/while
            make_block(self.body, output);
            return;
        }
        var b = self.body;
        while (true) {
            if (b instanceof AST_If) {
                if (!b.alternative) {
                    make_block(self.body, output);
                    return;
                }
                b = b.alternative;
            }
            else if (b instanceof AST_StatementWithBody) {
                b = b.body;
            }
            else break;
        }
        force_statement(self.body, output);
    };
    DEFPRINT(AST_If, function(self, output){
        output.print("if");
        output.space();
        output.with_parens(function(){
            self.condition.print(output);
        });
        output.space();
        if (self.alternative) {
            make_then(self, output);
            output.space();
            output.print("else");
            output.space();
            force_statement(self.alternative, output);
        } else {
            self._do_print_body(output);
        }
    });

    /* -----[ switch ]----- */
    DEFPRINT(AST_Switch, function(self, output){
        output.print("switch");
        output.space();
        output.with_parens(function(){
            self.expression.print(output);
        });
        output.space();
        if (self.body.length > 0) output.with_block(function(){
            self.body.forEach(function(stmt, i){
                if (i) output.newline();
                output.indent(true);
                stmt.print(output);
            });
        });
        else output.print("{}");
    });
    AST_SwitchBranch.DEFMETHOD("_do_print_body", function(output){
        if (this.body.length > 0) {
            output.newline();
            this.body.forEach(function(stmt){
                output.indent();
                stmt.print(output);
                output.newline();
            });
        }
    });
    DEFPRINT(AST_Default, function(self, output){
        output.print("default:");
        self._do_print_body(output);
    });
    DEFPRINT(AST_Case, function(self, output){
        output.print("case");
        output.space();
        self.expression.print(output);
        output.print(":");
        self._do_print_body(output);
    });

    /* -----[ exceptions ]----- */
    DEFPRINT(AST_Try, function(self, output){
        output.print("try");
        output.space();
        print_bracketed(self.body, output);
        if (self.bcatch) {
            output.space();
            self.bcatch.print(output);
        }
        if (self.bfinally) {
            output.space();
            self.bfinally.print(output);
        }
    });
    DEFPRINT(AST_Catch, function(self, output){
        output.print("catch");
        output.space();
        output.with_parens(function(){
            self.argname.print(output);
        });
        output.space();
        print_bracketed(self.body, output);
    });
    DEFPRINT(AST_Finally, function(self, output){
        output.print("finally");
        output.space();
        print_bracketed(self.body, output);
    });

    /* -----[ var/const ]----- */
    AST_Definitions.DEFMETHOD("_do_print", function(output, kind){
        output.print(kind);
        output.space();
        this.definitions.forEach(function(def, i){
            if (i) output.comma();
            def.print(output);
        });
        var p = output.parent();
        var in_for = p instanceof AST_For || p instanceof AST_ForIn;
        var avoid_semicolon = in_for && p.init === this;
        if (!avoid_semicolon)
            output.semicolon();
    });
    DEFPRINT(AST_Var, function(self, output){
        self._do_print(output, "var");
    });
    DEFPRINT(AST_Const, function(self, output){
        self._do_print(output, "const");
    });

    function parenthesize_for_noin(node, output, noin) {
        if (!noin) node.print(output);
        else try {
            // need to take some precautions here:
            //    https://github.com/mishoo/UglifyJS2/issues/60
            node.walk(new TreeWalker(function(node){
                if (node instanceof AST_Binary && node.operator == "in")
                    throw output;
            }));
            node.print(output);
        } catch(ex) {
            if (ex !== output) throw ex;
            node.print(output, true);
        }
    };

    DEFPRINT(AST_VarDef, function(self, output){
        self.name.print(output);
        if (self.value) {
            output.space();
            output.print("=");
            output.space();
            var p = output.parent(1);
            var noin = p instanceof AST_For || p instanceof AST_ForIn;
            parenthesize_for_noin(self.value, output, noin);
        }
    });

    /* -----[ other expressions ]----- */
    DEFPRINT(AST_Call, function(self, output){
        self.expression.print(output);
        if (self instanceof AST_New && no_constructor_parens(self, output))
            return;
        output.with_parens(function(){
            self.args.forEach(function(expr, i){
                if (i) output.comma();
                expr.print(output);
            });
        });
    });
    DEFPRINT(AST_New, function(self, output){
        output.print("new");
        output.space();
        AST_Call.prototype._codegen(self, output);
    });

    AST_Seq.DEFMETHOD("_do_print", function(output){
        this.car.print(output);
        if (this.cdr) {
            output.comma();
            if (output.should_break()) {
                output.newline();
                output.indent();
            }
            this.cdr.print(output);
        }
    });
    DEFPRINT(AST_Seq, function(self, output){
        self._do_print(output);
        // var p = output.parent();
        // if (p instanceof AST_Statement) {
        //     output.with_indent(output.next_indent(), function(){
        //         self._do_print(output);
        //     });
        // } else {
        //     self._do_print(output);
        // }
    });
    DEFPRINT(AST_Dot, function(self, output){
        var expr = self.expression;
        expr.print(output);
        if (expr instanceof AST_Number && expr.getValue() >= 0) {
            if (!/[xa-f.]/i.test(output.last())) {
                output.print(".");
            }
        }
        output.print(".");
        // the name after dot would be mapped about here.
        output.add_mapping(self.end);
        output.print_name(self.property);
    });
    DEFPRINT(AST_Sub, function(self, output){
        self.expression.print(output);
        output.print("[");
        self.property.print(output);
        output.print("]");
    });
    DEFPRINT(AST_UnaryPrefix, function(self, output){
        var op = self.operator;
        output.print(op);
        if (/^[a-z]/i.test(op)
            || (/[+-]$/.test(op)
                && self.expression instanceof AST_UnaryPrefix
                && /^[+-]/.test(self.expression.operator))) {
            output.space();
        }
        self.expression.print(output);
    });
    DEFPRINT(AST_UnaryPostfix, function(self, output){
        self.expression.print(output);
        output.print(self.operator);
    });
    DEFPRINT(AST_Binary, function(self, output){
        self.left.print(output);
        output.space();
        output.print(self.operator);
        if (self.operator == "<"
            && self.right instanceof AST_UnaryPrefix
            && self.right.operator == "!"
            && self.right.expression instanceof AST_UnaryPrefix
            && self.right.expression.operator == "--") {
            // space is mandatory to avoid outputting <!--
            // http://javascript.spec.whatwg.org/#comment-syntax
            output.print(" ");
        } else {
            // the space is optional depending on "beautify"
            output.space();
        }
        self.right.print(output);
    });
    DEFPRINT(AST_Conditional, function(self, output){
        self.condition.print(output);
        output.space();
        output.print("?");
        output.space();
        self.consequent.print(output);
        output.space();
        output.colon();
        self.alternative.print(output);
    });

    /* -----[ literals ]----- */
    DEFPRINT(AST_Array, function(self, output){
        output.with_square(function(){
            var a = self.elements, len = a.length;
            if (len > 0) output.space();
            a.forEach(function(exp, i){
                if (i) output.comma();
                exp.print(output);
                // If the final element is a hole, we need to make sure it
                // doesn't look like a trailing comma, by inserting an actual
                // trailing comma.
                if (i === len - 1 && exp instanceof AST_Hole)
                  output.comma();
            });
            if (len > 0) output.space();
        });
    });
    DEFPRINT(AST_Object, function(self, output){
        if (self.properties.length > 0) output.with_block(function(){
            self.properties.forEach(function(prop, i){
                if (i) {
                    output.print(",");
                    output.newline();
                }
                output.indent();
                prop.print(output);
            });
            output.newline();
        });
        else output.print("{}");
    });
    DEFPRINT(AST_ObjectKeyVal, function(self, output){
        var key = self.key;
        var quote = self.quote;
        if (output.option("quote_keys")) {
            output.print_string(key + "");
        } else if ((typeof key == "number"
                    || !output.option("beautify")
                    && +key + "" == key)
                   && parseFloat(key) >= 0) {
            output.print(make_num(key));
        } else if (RESERVED_WORDS(key) ? output.option("screw_ie8") : is_identifier_string(key)) {
            output.print_name(key);
        } else {
            output.print_string(key, quote);
        }
        output.colon();
        self.value.print(output);
    });
    DEFPRINT(AST_ObjectSetter, function(self, output){
        output.print("set");
        output.space();
        self.key.print(output);
        self.value._do_print(output, true);
    });
    DEFPRINT(AST_ObjectGetter, function(self, output){
        output.print("get");
        output.space();
        self.key.print(output);
        self.value._do_print(output, true);
    });
    DEFPRINT(AST_Symbol, function(self, output){
        var def = self.definition();
        output.print_name(def ? def.mangled_name || def.name : self.name);
    });
    DEFPRINT(AST_Undefined, function(self, output){
        output.print("void 0");
    });
    DEFPRINT(AST_Hole, noop);
    DEFPRINT(AST_Infinity, function(self, output){
        output.print("Infinity");
    });
    DEFPRINT(AST_NaN, function(self, output){
        output.print("NaN");
    });
    DEFPRINT(AST_This, function(self, output){
        output.print("this");
    });
    DEFPRINT(AST_Constant, function(self, output){
        output.print(self.getValue());
    });
    DEFPRINT(AST_String, function(self, output){
        output.print_string(self.getValue(), self.quote);
    });
    DEFPRINT(AST_Number, function(self, output){
        output.print(make_num(self.getValue()));
    });

    function regexp_safe_literal(code) {
        return [
            0x5c   , // \
            0x2f   , // /
            0x2e   , // .
            0x2b   , // +
            0x2a   , // *
            0x3f   , // ?
            0x28   , // (
            0x29   , // )
            0x5b   , // [
            0x5d   , // ]
            0x7b   , // {
            0x7d   , // }
            0x24   , // $
            0x5e   , // ^
            0x3a   , // :
            0x7c   , // |
            0x21   , // !
            0x0a   , // \n
            0x0d   , // \r
            0x00   , // \0
            0xfeff , // Unicode BOM
            0x2028 , // unicode "line separator"
            0x2029 , // unicode "paragraph separator"
        ].indexOf(code) < 0;
    };

    DEFPRINT(AST_RegExp, function(self, output){
        var str = self.getValue().toString();
        if (output.option("ascii_only")) {
            str = output.to_ascii(str);
        } else if (output.option("unescape_regexps")) {
            str = str.split("\\\\").map(function(str){
                return str.replace(/\\u[0-9a-fA-F]{4}|\\x[0-9a-fA-F]{2}/g, function(s){
                    var code = parseInt(s.substr(2), 16);
                    return regexp_safe_literal(code) ? String.fromCharCode(code) : s;
                });
            }).join("\\\\");
        }
        output.print(str);
        var p = output.parent();
        if (p instanceof AST_Binary && /^in/.test(p.operator) && p.left === self)
            output.print(" ");
    });

    function force_statement(stat, output) {
        if (output.option("bracketize")) {
            if (!stat || stat instanceof AST_EmptyStatement)
                output.print("{}");
            else if (stat instanceof AST_BlockStatement)
                stat.print(output);
            else output.with_block(function(){
                output.indent();
                stat.print(output);
                output.newline();
            });
        } else {
            if (!stat || stat instanceof AST_EmptyStatement)
                output.force_semicolon();
            else
                stat.print(output);
        }
    };

    // return true if the node at the top of the stack (that means the
    // innermost node in the current output) is lexically the first in
    // a statement.
    function first_in_statement(output) {
        var a = output.stack(), i = a.length, node = a[--i], p = a[--i];
        while (i > 0) {
            if (p instanceof AST_Statement && p.body === node)
                return true;
            if ((p instanceof AST_Seq           && p.car === node        ) ||
                (p instanceof AST_Call          && p.expression === node && !(p instanceof AST_New) ) ||
                (p instanceof AST_Dot           && p.expression === node ) ||
                (p instanceof AST_Sub           && p.expression === node ) ||
                (p instanceof AST_Conditional   && p.condition === node  ) ||
                (p instanceof AST_Binary        && p.left === node       ) ||
                (p instanceof AST_UnaryPostfix  && p.expression === node ))
            {
                node = p;
                p = a[--i];
            } else {
                return false;
            }
        }
    };

    // self should be AST_New.  decide if we want to show parens or not.
    function no_constructor_parens(self, output) {
        return self.args.length == 0 && !output.option("beautify");
    };

    function best_of(a) {
        var best = a[0], len = best.length;
        for (var i = 1; i < a.length; ++i) {
            if (a[i].length < len) {
                best = a[i];
                len = best.length;
            }
        }
        return best;
    };

    function make_num(num) {
        var str = num.toString(10), a = [ str.replace(/^0\./, ".").replace('e+', 'e') ], m;
        if (Math.floor(num) === num) {
            if (num >= 0) {
                a.push("0x" + num.toString(16).toLowerCase(), // probably pointless
                       "0" + num.toString(8)); // same.
            } else {
                a.push("-0x" + (-num).toString(16).toLowerCase(), // probably pointless
                       "-0" + (-num).toString(8)); // same.
            }
            if ((m = /^(.*?)(0+)$/.exec(num))) {
                a.push(m[1] + "e" + m[2].length);
            }
        } else if ((m = /^0?\.(0+)(.*)$/.exec(num))) {
            a.push(m[2] + "e-" + (m[1].length + m[2].length),
                   str.substr(str.indexOf(".")));
        }
        return best_of(a);
    };

    function make_block(stmt, output) {
        if (stmt instanceof AST_BlockStatement) {
            stmt.print(output);
            return;
        }
        output.with_block(function(){
            output.indent();
            stmt.print(output);
            output.newline();
        });
    };

    /* -----[ source map generators ]----- */

    function DEFMAP(nodetype, generator) {
        nodetype.DEFMETHOD("add_source_map", function(stream){
            generator(this, stream);
        });
    };

    // We could easily add info for ALL nodes, but it seems to me that
    // would be quite wasteful, hence this noop in the base class.
    DEFMAP(AST_Node, noop);

    function basic_sourcemap_gen(self, output) {
        output.add_mapping(self.start);
    };

    // XXX: I'm not exactly sure if we need it for all of these nodes,
    // or if we should add even more.

    DEFMAP(AST_Directive, basic_sourcemap_gen);
    DEFMAP(AST_Debugger, basic_sourcemap_gen);
    DEFMAP(AST_Symbol, basic_sourcemap_gen);
    DEFMAP(AST_Jump, basic_sourcemap_gen);
    DEFMAP(AST_StatementWithBody, basic_sourcemap_gen);
    DEFMAP(AST_LabeledStatement, noop); // since the label symbol will mark it
    DEFMAP(AST_Lambda, basic_sourcemap_gen);
    DEFMAP(AST_Switch, basic_sourcemap_gen);
    DEFMAP(AST_SwitchBranch, basic_sourcemap_gen);
    DEFMAP(AST_BlockStatement, basic_sourcemap_gen);
    DEFMAP(AST_Toplevel, noop);
    DEFMAP(AST_New, basic_sourcemap_gen);
    DEFMAP(AST_Try, basic_sourcemap_gen);
    DEFMAP(AST_Catch, basic_sourcemap_gen);
    DEFMAP(AST_Finally, basic_sourcemap_gen);
    DEFMAP(AST_Definitions, basic_sourcemap_gen);
    DEFMAP(AST_Constant, basic_sourcemap_gen);
    DEFMAP(AST_ObjectProperty, function(self, output){
        output.add_mapping(self.start, self.key);
    });

})();

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function Compressor(options, false_by_default) {
    if (!(this instanceof Compressor))
        return new Compressor(options, false_by_default);
    TreeTransformer.call(this, this.before, this.after);
    this.options = defaults(options, {
        sequences     : !false_by_default,
        properties    : !false_by_default,
        dead_code     : !false_by_default,
        drop_debugger : !false_by_default,
        unsafe        : false,
        unsafe_comps  : false,
        conditionals  : !false_by_default,
        comparisons   : !false_by_default,
        evaluate      : !false_by_default,
        booleans      : !false_by_default,
        loops         : !false_by_default,
        unused        : !false_by_default,
        hoist_funs    : !false_by_default,
        keep_fargs    : false,
        keep_fnames   : false,
        hoist_vars    : false,
        if_return     : !false_by_default,
        join_vars     : !false_by_default,
        cascade       : !false_by_default,
        side_effects  : !false_by_default,
        pure_getters  : false,
        pure_funcs    : null,
        negate_iife   : !false_by_default,
        screw_ie8     : false,
        drop_console  : false,
        angular       : false,

        warnings      : true,
        global_defs   : {}
    }, true);
};

Compressor.prototype = new TreeTransformer;
merge(Compressor.prototype, {
    option: function(key) { return this.options[key] },
    warn: function() {
        if (this.options.warnings)
            AST_Node.warn.apply(AST_Node, arguments);
    },
    before: function(node, descend, in_list) {
        if (node._squeezed) return node;
        var was_scope = false;
        if (node instanceof AST_Scope) {
            node = node.hoist_declarations(this);
            was_scope = true;
        }
        descend(node, this);
        node = node.optimize(this);
        if (was_scope && node instanceof AST_Scope) {
            node.drop_unused(this);
            descend(node, this);
        }
        node._squeezed = true;
        return node;
    }
});

(function(){

    function OPT(node, optimizer) {
        node.DEFMETHOD("optimize", function(compressor){
            var self = this;
            if (self._optimized) return self;
            var opt = optimizer(self, compressor);
            opt._optimized = true;
            if (opt === self) return opt;
            return opt.transform(compressor);
        });
    };

    OPT(AST_Node, function(self, compressor){
        return self;
    });

    AST_Node.DEFMETHOD("equivalent_to", function(node){
        // XXX: this is a rather expensive way to test two node's equivalence:
        return this.print_to_string() == node.print_to_string();
    });

    function make_node(ctor, orig, props) {
        if (!props) props = {};
        if (orig) {
            if (!props.start) props.start = orig.start;
            if (!props.end) props.end = orig.end;
        }
        return new ctor(props);
    };

    function make_node_from_constant(compressor, val, orig) {
        // XXX: WIP.
        // if (val instanceof AST_Node) return val.transform(new TreeTransformer(null, function(node){
        //     if (node instanceof AST_SymbolRef) {
        //         var scope = compressor.find_parent(AST_Scope);
        //         var def = scope.find_variable(node);
        //         node.thedef = def;
        //         return node;
        //     }
        // })).transform(compressor);

        if (val instanceof AST_Node) return val.transform(compressor);
        switch (typeof val) {
          case "string":
            return make_node(AST_String, orig, {
                value: val
            }).optimize(compressor);
          case "number":
            return make_node(isNaN(val) ? AST_NaN : AST_Number, orig, {
                value: val
            }).optimize(compressor);
          case "boolean":
            return make_node(val ? AST_True : AST_False, orig).optimize(compressor);
          case "undefined":
            return make_node(AST_Undefined, orig).optimize(compressor);
          default:
            if (val === null) {
                return make_node(AST_Null, orig, { value: null }).optimize(compressor);
            }
            if (val instanceof RegExp) {
                return make_node(AST_RegExp, orig, { value: val }).optimize(compressor);
            }
            throw new Error(string_template("Can't handle constant of type: {type}", {
                type: typeof val
            }));
        }
    };

    function as_statement_array(thing) {
        if (thing === null) return [];
        if (thing instanceof AST_BlockStatement) return thing.body;
        if (thing instanceof AST_EmptyStatement) return [];
        if (thing instanceof AST_Statement) return [ thing ];
        throw new Error("Can't convert thing to statement array");
    };

    function is_empty(thing) {
        if (thing === null) return true;
        if (thing instanceof AST_EmptyStatement) return true;
        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;
        return false;
    };

    function loop_body(x) {
        if (x instanceof AST_Switch) return x;
        if (x instanceof AST_For || x instanceof AST_ForIn || x instanceof AST_DWLoop) {
            return (x.body instanceof AST_BlockStatement ? x.body : x);
        }
        return x;
    };

    function tighten_body(statements, compressor) {
        var CHANGED;
        do {
            CHANGED = false;
            if (compressor.option("angular")) {
                statements = process_for_angular(statements);
            }
            statements = eliminate_spurious_blocks(statements);
            if (compressor.option("dead_code")) {
                statements = eliminate_dead_code(statements, compressor);
            }
            if (compressor.option("if_return")) {
                statements = handle_if_return(statements, compressor);
            }
            if (compressor.option("sequences")) {
                statements = sequencesize(statements, compressor);
            }
            if (compressor.option("join_vars")) {
                statements = join_consecutive_vars(statements, compressor);
            }
        } while (CHANGED);

        if (compressor.option("negate_iife")) {
            negate_iifes(statements, compressor);
        }

        return statements;

        function process_for_angular(statements) {
            function has_inject(comment) {
                return /@ngInject/.test(comment.value);
            }
            function make_arguments_names_list(func) {
                return func.argnames.map(function(sym){
                    return make_node(AST_String, sym, { value: sym.name });
                });
            }
            function make_array(orig, elements) {
                return make_node(AST_Array, orig, { elements: elements });
            }
            function make_injector(func, name) {
                return make_node(AST_SimpleStatement, func, {
                    body: make_node(AST_Assign, func, {
                        operator: "=",
                        left: make_node(AST_Dot, name, {
                            expression: make_node(AST_SymbolRef, name, name),
                            property: "$inject"
                        }),
                        right: make_array(func, make_arguments_names_list(func))
                    })
                });
            }
            function check_expression(body) {
                if (body && body.args) {
                    // if this is a function call check all of arguments passed
                    body.args.forEach(function(argument, index, array) {
                        var comments = argument.start.comments_before;
                        // if the argument is function preceded by @ngInject
                        if (argument instanceof AST_Lambda && comments.length && has_inject(comments[0])) {
                            // replace the function with an array of names of its parameters and function at the end
                            array[index] = make_array(argument, make_arguments_names_list(argument).concat(argument));
                        }
                    });
                    // if this is chained call check previous one recursively
                    if (body.expression && body.expression.expression) {
                        check_expression(body.expression.expression);
                    }
                }
            }
            return statements.reduce(function(a, stat){
                a.push(stat);

                if (stat.body && stat.body.args) {
                    check_expression(stat.body);
                } else {
                    var token = stat.start;
                    var comments = token.comments_before;
                    if (comments && comments.length > 0) {
                        var last = comments.pop();
                        if (has_inject(last)) {
                            // case 1: defun
                            if (stat instanceof AST_Defun) {
                                a.push(make_injector(stat, stat.name));
                            }
                            else if (stat instanceof AST_Definitions) {
                                stat.definitions.forEach(function(def) {
                                    if (def.value && def.value instanceof AST_Lambda) {
                                        a.push(make_injector(def.value, def.name));
                                    }
                                });
                            }
                            else {
                                compressor.warn("Unknown statement marked with @ngInject [{file}:{line},{col}]", token);
                            }
                        }
                    }
                }

                return a;
            }, []);
        }

        function eliminate_spurious_blocks(statements) {
            var seen_dirs = [];
            return statements.reduce(function(a, stat){
                if (stat instanceof AST_BlockStatement) {
                    CHANGED = true;
                    a.push.apply(a, eliminate_spurious_blocks(stat.body));
                } else if (stat instanceof AST_EmptyStatement) {
                    CHANGED = true;
                } else if (stat instanceof AST_Directive) {
                    if (seen_dirs.indexOf(stat.value) < 0) {
                        a.push(stat);
                        seen_dirs.push(stat.value);
                    } else {
                        CHANGED = true;
                    }
                } else {
                    a.push(stat);
                }
                return a;
            }, []);
        };

        function handle_if_return(statements, compressor) {
            var self = compressor.self();
            var in_lambda = self instanceof AST_Lambda;
            var ret = [];
            loop: for (var i = statements.length; --i >= 0;) {
                var stat = statements[i];
                switch (true) {
                  case (in_lambda && stat instanceof AST_Return && !stat.value && ret.length == 0):
                    CHANGED = true;
                    // note, ret.length is probably always zero
                    // because we drop unreachable code before this
                    // step.  nevertheless, it's good to check.
                    continue loop;
                  case stat instanceof AST_If:
                    if (stat.body instanceof AST_Return) {
                        //---
                        // pretty silly case, but:
                        // if (foo()) return; return; ==> foo(); return;
                        if (((in_lambda && ret.length == 0)
                             || (ret[0] instanceof AST_Return && !ret[0].value))
                            && !stat.body.value && !stat.alternative) {
                            CHANGED = true;
                            var cond = make_node(AST_SimpleStatement, stat.condition, {
                                body: stat.condition
                            });
                            ret.unshift(cond);
                            continue loop;
                        }
                        //---
                        // if (foo()) return x; return y; ==> return foo() ? x : y;
                        if (ret[0] instanceof AST_Return && stat.body.value && ret[0].value && !stat.alternative) {
                            CHANGED = true;
                            stat = stat.clone();
                            stat.alternative = ret[0];
                            ret[0] = stat.transform(compressor);
                            continue loop;
                        }
                        //---
                        // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;
                        if ((ret.length == 0 || ret[0] instanceof AST_Return) && stat.body.value && !stat.alternative && in_lambda) {
                            CHANGED = true;
                            stat = stat.clone();
                            stat.alternative = ret[0] || make_node(AST_Return, stat, {
                                value: make_node(AST_Undefined, stat)
                            });
                            ret[0] = stat.transform(compressor);
                            continue loop;
                        }
                        //---
                        // if (foo()) return; [ else x... ]; y... ==> if (!foo()) { x...; y... }
                        if (!stat.body.value && in_lambda) {
                            CHANGED = true;
                            stat = stat.clone();
                            stat.condition = stat.condition.negate(compressor);
                            stat.body = make_node(AST_BlockStatement, stat, {
                                body: as_statement_array(stat.alternative).concat(ret)
                            });
                            stat.alternative = null;
                            ret = [ stat.transform(compressor) ];
                            continue loop;
                        }
                        //---
                        if (ret.length == 1 && in_lambda && ret[0] instanceof AST_SimpleStatement
                            && (!stat.alternative || stat.alternative instanceof AST_SimpleStatement)) {
                            CHANGED = true;
                            ret.push(make_node(AST_Return, ret[0], {
                                value: make_node(AST_Undefined, ret[0])
                            }).transform(compressor));
                            ret = as_statement_array(stat.alternative).concat(ret);
                            ret.unshift(stat);
                            continue loop;
                        }
                    }

                    var ab = aborts(stat.body);
                    var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab.label) : null;
                    if (ab && ((ab instanceof AST_Return && !ab.value && in_lambda)
                               || (ab instanceof AST_Continue && self === loop_body(lct))
                               || (ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct))) {
                        if (ab.label) {
                            remove(ab.label.thedef.references, ab);
                        }
                        CHANGED = true;
                        var body = as_statement_array(stat.body).slice(0, -1);
                        stat = stat.clone();
                        stat.condition = stat.condition.negate(compressor);
                        stat.body = make_node(AST_BlockStatement, stat, {
                            body: as_statement_array(stat.alternative).concat(ret)
                        });
                        stat.alternative = make_node(AST_BlockStatement, stat, {
                            body: body
                        });
                        ret = [ stat.transform(compressor) ];
                        continue loop;
                    }

                    var ab = aborts(stat.alternative);
                    var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab.label) : null;
                    if (ab && ((ab instanceof AST_Return && !ab.value && in_lambda)
                               || (ab instanceof AST_Continue && self === loop_body(lct))
                               || (ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct))) {
                        if (ab.label) {
                            remove(ab.label.thedef.references, ab);
                        }
                        CHANGED = true;
                        stat = stat.clone();
                        stat.body = make_node(AST_BlockStatement, stat.body, {
                            body: as_statement_array(stat.body).concat(ret)
                        });
                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {
                            body: as_statement_array(stat.alternative).slice(0, -1)
                        });
                        ret = [ stat.transform(compressor) ];
                        continue loop;
                    }

                    ret.unshift(stat);
                    break;
                  default:
                    ret.unshift(stat);
                    break;
                }
            }
            return ret;
        };

        function eliminate_dead_code(statements, compressor) {
            var has_quit = false;
            var orig = statements.length;
            var self = compressor.self();
            statements = statements.reduce(function(a, stat){
                if (has_quit) {
                    extract_declarations_from_unreachable_code(compressor, stat, a);
                } else {
                    if (stat instanceof AST_LoopControl) {
                        var lct = compressor.loopcontrol_target(stat.label);
                        if ((stat instanceof AST_Break
                             && lct instanceof AST_BlockStatement
                             && loop_body(lct) === self) || (stat instanceof AST_Continue
                                                             && loop_body(lct) === self)) {
                            if (stat.label) {
                                remove(stat.label.thedef.references, stat);
                            }
                        } else {
                            a.push(stat);
                        }
                    } else {
                        a.push(stat);
                    }
                    if (aborts(stat)) has_quit = true;
                }
                return a;
            }, []);
            CHANGED = statements.length != orig;
            return statements;
        };

        function sequencesize(statements, compressor) {
            if (statements.length < 2) return statements;
            var seq = [], ret = [];
            function push_seq() {
                seq = AST_Seq.from_array(seq);
                if (seq) ret.push(make_node(AST_SimpleStatement, seq, {
                    body: seq
                }));
                seq = [];
            };
            statements.forEach(function(stat){
                if (stat instanceof AST_SimpleStatement && seq.length < 2000) seq.push(stat.body);
                else push_seq(), ret.push(stat);
            });
            push_seq();
            ret = sequencesize_2(ret, compressor);
            CHANGED = ret.length != statements.length;
            return ret;
        };

        function sequencesize_2(statements, compressor) {
            function cons_seq(right) {
                ret.pop();
                var left = prev.body;
                if (left instanceof AST_Seq) {
                    left.add(right);
                } else {
                    left = AST_Seq.cons(left, right);
                }
                return left.transform(compressor);
            };
            var ret = [], prev = null;
            statements.forEach(function(stat){
                if (prev) {
                    if (stat instanceof AST_For) {
                        var opera = {};
                        try {
                            prev.body.walk(new TreeWalker(function(node){
                                if (node instanceof AST_Binary && node.operator == "in")
                                    throw opera;
                            }));
                            if (stat.init && !(stat.init instanceof AST_Definitions)) {
                                stat.init = cons_seq(stat.init);
                            }
                            else if (!stat.init) {
                                stat.init = prev.body;
                                ret.pop();
                            }
                        } catch(ex) {
                            if (ex !== opera) throw ex;
                        }
                    }
                    else if (stat instanceof AST_If) {
                        stat.condition = cons_seq(stat.condition);
                    }
                    else if (stat instanceof AST_With) {
                        stat.expression = cons_seq(stat.expression);
                    }
                    else if (stat instanceof AST_Exit && stat.value) {
                        stat.value = cons_seq(stat.value);
                    }
                    else if (stat instanceof AST_Exit) {
                        stat.value = cons_seq(make_node(AST_Undefined, stat));
                    }
                    else if (stat instanceof AST_Switch) {
                        stat.expression = cons_seq(stat.expression);
                    }
                }
                ret.push(stat);
                prev = stat instanceof AST_SimpleStatement ? stat : null;
            });
            return ret;
        };

        function join_consecutive_vars(statements, compressor) {
            var prev = null;
            return statements.reduce(function(a, stat){
                if (stat instanceof AST_Definitions && prev && prev.TYPE == stat.TYPE) {
                    prev.definitions = prev.definitions.concat(stat.definitions);
                    CHANGED = true;
                }
                else if (stat instanceof AST_For
                         && prev instanceof AST_Definitions
                         && (!stat.init || stat.init.TYPE == prev.TYPE)) {
                    CHANGED = true;
                    a.pop();
                    if (stat.init) {
                        stat.init.definitions = prev.definitions.concat(stat.init.definitions);
                    } else {
                        stat.init = prev;
                    }
                    a.push(stat);
                    prev = stat;
                }
                else {
                    prev = stat;
                    a.push(stat);
                }
                return a;
            }, []);
        };

        function negate_iifes(statements, compressor) {
            statements.forEach(function(stat){
                if (stat instanceof AST_SimpleStatement) {
                    stat.body = (function transform(thing) {
                        return thing.transform(new TreeTransformer(function(node){
                            if (node instanceof AST_Call && node.expression instanceof AST_Function) {
                                return make_node(AST_UnaryPrefix, node, {
                                    operator: "!",
                                    expression: node
                                });
                            }
                            else if (node instanceof AST_Call) {
                                node.expression = transform(node.expression);
                            }
                            else if (node instanceof AST_Seq) {
                                node.car = transform(node.car);
                            }
                            else if (node instanceof AST_Conditional) {
                                var expr = transform(node.condition);
                                if (expr !== node.condition) {
                                    // it has been negated, reverse
                                    node.condition = expr;
                                    var tmp = node.consequent;
                                    node.consequent = node.alternative;
                                    node.alternative = tmp;
                                }
                            }
                            return node;
                        }));
                    })(stat.body);
                }
            });
        };

    };

    function extract_declarations_from_unreachable_code(compressor, stat, target) {
        compressor.warn("Dropping unreachable code [{file}:{line},{col}]", stat.start);
        stat.walk(new TreeWalker(function(node){
            if (node instanceof AST_Definitions) {
                compressor.warn("Declarations in unreachable code! [{file}:{line},{col}]", node.start);
                node.remove_initializers();
                target.push(node);
                return true;
            }
            if (node instanceof AST_Defun) {
                target.push(node);
                return true;
            }
            if (node instanceof AST_Scope) {
                return true;
            }
        }));
    };

    /* -----[ boolean/negation helpers ]----- */

    // methods to determine whether an expression has a boolean result type
    (function (def){
        var unary_bool = [ "!", "delete" ];
        var binary_bool = [ "in", "instanceof", "==", "!=", "===", "!==", "<", "<=", ">=", ">" ];
        def(AST_Node, function(){ return false });
        def(AST_UnaryPrefix, function(){
            return member(this.operator, unary_bool);
        });
        def(AST_Binary, function(){
            return member(this.operator, binary_bool) ||
                ( (this.operator == "&&" || this.operator == "||") &&
                  this.left.is_boolean() && this.right.is_boolean() );
        });
        def(AST_Conditional, function(){
            return this.consequent.is_boolean() && this.alternative.is_boolean();
        });
        def(AST_Assign, function(){
            return this.operator == "=" && this.right.is_boolean();
        });
        def(AST_Seq, function(){
            return this.cdr.is_boolean();
        });
        def(AST_True, function(){ return true });
        def(AST_False, function(){ return true });
    })(function(node, func){
        node.DEFMETHOD("is_boolean", func);
    });

    // methods to determine if an expression has a string result type
    (function (def){
        def(AST_Node, function(){ return false });
        def(AST_String, function(){ return true });
        def(AST_UnaryPrefix, function(){
            return this.operator == "typeof";
        });
        def(AST_Binary, function(compressor){
            return this.operator == "+" &&
                (this.left.is_string(compressor) || this.right.is_string(compressor));
        });
        def(AST_Assign, function(compressor){
            return (this.operator == "=" || this.operator == "+=") && this.right.is_string(compressor);
        });
        def(AST_Seq, function(compressor){
            return this.cdr.is_string(compressor);
        });
        def(AST_Conditional, function(compressor){
            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);
        });
        def(AST_Call, function(compressor){
            return compressor.option("unsafe")
                && this.expression instanceof AST_SymbolRef
                && this.expression.name == "String"
                && this.expression.undeclared();
        });
    })(function(node, func){
        node.DEFMETHOD("is_string", func);
    });

    function best_of(ast1, ast2) {
        return ast1.print_to_string().length >
            ast2.print_to_string().length
            ? ast2 : ast1;
    };

    // methods to evaluate a constant expression
    (function (def){
        // The evaluate method returns an array with one or two
        // elements.  If the node has been successfully reduced to a
        // constant, then the second element tells us the value;
        // otherwise the second element is missing.  The first element
        // of the array is always an AST_Node descendant; if
        // evaluation was successful it's a node that represents the
        // constant; otherwise it's the original or a replacement node.
        AST_Node.DEFMETHOD("evaluate", function(compressor){
            if (!compressor.option("evaluate")) return [ this ];
            try {
                var val = this._eval(compressor);
                return [ best_of(make_node_from_constant(compressor, val, this), this), val ];
            } catch(ex) {
                if (ex !== def) throw ex;
                return [ this ];
            }
        });
        def(AST_Statement, function(){
            throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]", this.start));
        });
        def(AST_Function, function(){
            // XXX: AST_Function inherits from AST_Scope, which itself
            // inherits from AST_Statement; however, an AST_Function
            // isn't really a statement.  This could byte in other
            // places too. :-( Wish JS had multiple inheritance.
            throw def;
        });
        function ev(node, compressor) {
            if (!compressor) throw new Error("Compressor must be passed");

            return node._eval(compressor);
        };
        def(AST_Node, function(){
            throw def;          // not constant
        });
        def(AST_Constant, function(){
            return this.getValue();
        });
        def(AST_UnaryPrefix, function(compressor){
            var e = this.expression;
            switch (this.operator) {
              case "!": return !ev(e, compressor);
              case "typeof":
                // Function would be evaluated to an array and so typeof would
                // incorrectly return 'object'. Hence making is a special case.
                if (e instanceof AST_Function) return typeof function(){};

                e = ev(e, compressor);

                // typeof <RegExp> returns "object" or "function" on different platforms
                // so cannot evaluate reliably
                if (e instanceof RegExp) throw def;

                return typeof e;
              case "void": return void ev(e, compressor);
              case "~": return ~ev(e, compressor);
              case "-":
                e = ev(e, compressor);
                if (e === 0) throw def;
                return -e;
              case "+": return +ev(e, compressor);
            }
            throw def;
        });
        def(AST_Binary, function(c){
            var left = this.left, right = this.right;
            switch (this.operator) {
              case "&&"         : return ev(left, c) &&         ev(right, c);
              case "||"         : return ev(left, c) ||         ev(right, c);
              case "|"          : return ev(left, c) |          ev(right, c);
              case "&"          : return ev(left, c) &          ev(right, c);
              case "^"          : return ev(left, c) ^          ev(right, c);
              case "+"          : return ev(left, c) +          ev(right, c);
              case "*"          : return ev(left, c) *          ev(right, c);
              case "/"          : return ev(left, c) /          ev(right, c);
              case "%"          : return ev(left, c) %          ev(right, c);
              case "-"          : return ev(left, c) -          ev(right, c);
              case "<<"         : return ev(left, c) <<         ev(right, c);
              case ">>"         : return ev(left, c) >>         ev(right, c);
              case ">>>"        : return ev(left, c) >>>        ev(right, c);
              case "=="         : return ev(left, c) ==         ev(right, c);
              case "==="        : return ev(left, c) ===        ev(right, c);
              case "!="         : return ev(left, c) !=         ev(right, c);
              case "!=="        : return ev(left, c) !==        ev(right, c);
              case "<"          : return ev(left, c) <          ev(right, c);
              case "<="         : return ev(left, c) <=         ev(right, c);
              case ">"          : return ev(left, c) >          ev(right, c);
              case ">="         : return ev(left, c) >=         ev(right, c);
              case "in"         : return ev(left, c) in         ev(right, c);
              case "instanceof" : return ev(left, c) instanceof ev(right, c);
            }
            throw def;
        });
        def(AST_Conditional, function(compressor){
            return ev(this.condition, compressor)
                ? ev(this.consequent, compressor)
                : ev(this.alternative, compressor);
        });
        def(AST_SymbolRef, function(compressor){
            var d = this.definition();
            if (d && d.constant && d.init) return ev(d.init, compressor);
            throw def;
        });
        def(AST_Dot, function(compressor){
            if (compressor.option("unsafe") && this.property == "length") {
                var str = ev(this.expression, compressor);
                if (typeof str == "string")
                    return str.length;
            }
            throw def;
        });
    })(function(node, func){
        node.DEFMETHOD("_eval", func);
    });

    // method to negate an expression
    (function(def){
        function basic_negation(exp) {
            return make_node(AST_UnaryPrefix, exp, {
                operator: "!",
                expression: exp
            });
        };
        def(AST_Node, function(){
            return basic_negation(this);
        });
        def(AST_Statement, function(){
            throw new Error("Cannot negate a statement");
        });
        def(AST_Function, function(){
            return basic_negation(this);
        });
        def(AST_UnaryPrefix, function(){
            if (this.operator == "!")
                return this.expression;
            return basic_negation(this);
        });
        def(AST_Seq, function(compressor){
            var self = this.clone();
            self.cdr = self.cdr.negate(compressor);
            return self;
        });
        def(AST_Conditional, function(compressor){
            var self = this.clone();
            self.consequent = self.consequent.negate(compressor);
            self.alternative = self.alternative.negate(compressor);
            return best_of(basic_negation(this), self);
        });
        def(AST_Binary, function(compressor){
            var self = this.clone(), op = this.operator;
            if (compressor.option("unsafe_comps")) {
                switch (op) {
                  case "<=" : self.operator = ">"  ; return self;
                  case "<"  : self.operator = ">=" ; return self;
                  case ">=" : self.operator = "<"  ; return self;
                  case ">"  : self.operator = "<=" ; return self;
                }
            }
            switch (op) {
              case "==" : self.operator = "!="; return self;
              case "!=" : self.operator = "=="; return self;
              case "===": self.operator = "!=="; return self;
              case "!==": self.operator = "==="; return self;
              case "&&":
                self.operator = "||";
                self.left = self.left.negate(compressor);
                self.right = self.right.negate(compressor);
                return best_of(basic_negation(this), self);
              case "||":
                self.operator = "&&";
                self.left = self.left.negate(compressor);
                self.right = self.right.negate(compressor);
                return best_of(basic_negation(this), self);
            }
            return basic_negation(this);
        });
    })(function(node, func){
        node.DEFMETHOD("negate", function(compressor){
            return func.call(this, compressor);
        });
    });

    // determine if expression has side effects
    (function(def){
        def(AST_Node, function(compressor){ return true });

        def(AST_EmptyStatement, function(compressor){ return false });
        def(AST_Constant, function(compressor){ return false });
        def(AST_This, function(compressor){ return false });

        def(AST_Call, function(compressor){
            var pure = compressor.option("pure_funcs");
            if (!pure) return true;
            return pure.indexOf(this.expression.print_to_string()) < 0;
        });

        def(AST_Block, function(compressor){
            for (var i = this.body.length; --i >= 0;) {
                if (this.body[i].has_side_effects(compressor))
                    return true;
            }
            return false;
        });

        def(AST_SimpleStatement, function(compressor){
            return this.body.has_side_effects(compressor);
        });
        def(AST_Defun, function(compressor){ return true });
        def(AST_Function, function(compressor){ return false });
        def(AST_Binary, function(compressor){
            return this.left.has_side_effects(compressor)
                || this.right.has_side_effects(compressor);
        });
        def(AST_Assign, function(compressor){ return true });
        def(AST_Conditional, function(compressor){
            return this.condition.has_side_effects(compressor)
                || this.consequent.has_side_effects(compressor)
                || this.alternative.has_side_effects(compressor);
        });
        def(AST_Unary, function(compressor){
            return this.operator == "delete"
                || this.operator == "++"
                || this.operator == "--"
                || this.expression.has_side_effects(compressor);
        });
        def(AST_SymbolRef, function(compressor){
            return this.global() && this.undeclared();
        });
        def(AST_Object, function(compressor){
            for (var i = this.properties.length; --i >= 0;)
                if (this.properties[i].has_side_effects(compressor))
                    return true;
            return false;
        });
        def(AST_ObjectProperty, function(compressor){
            return this.value.has_side_effects(compressor);
        });
        def(AST_Array, function(compressor){
            for (var i = this.elements.length; --i >= 0;)
                if (this.elements[i].has_side_effects(compressor))
                    return true;
            return false;
        });
        def(AST_Dot, function(compressor){
            if (!compressor.option("pure_getters")) return true;
            return this.expression.has_side_effects(compressor);
        });
        def(AST_Sub, function(compressor){
            if (!compressor.option("pure_getters")) return true;
            return this.expression.has_side_effects(compressor)
                || this.property.has_side_effects(compressor);
        });
        def(AST_PropAccess, function(compressor){
            return !compressor.option("pure_getters");
        });
        def(AST_Seq, function(compressor){
            return this.car.has_side_effects(compressor)
                || this.cdr.has_side_effects(compressor);
        });
    })(function(node, func){
        node.DEFMETHOD("has_side_effects", func);
    });

    // tell me if a statement aborts
    function aborts(thing) {
        return thing && thing.aborts();
    };
    (function(def){
        def(AST_Statement, function(){ return null });
        def(AST_Jump, function(){ return this });
        function block_aborts(){
            var n = this.body.length;
            return n > 0 && aborts(this.body[n - 1]);
        };
        def(AST_BlockStatement, block_aborts);
        def(AST_SwitchBranch, block_aborts);
        def(AST_If, function(){
            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;
        });
    })(function(node, func){
        node.DEFMETHOD("aborts", func);
    });

    /* -----[ optimizers ]----- */

    OPT(AST_Directive, function(self, compressor){
        if (self.scope.has_directive(self.value) !== self.scope) {
            return make_node(AST_EmptyStatement, self);
        }
        return self;
    });

    OPT(AST_Debugger, function(self, compressor){
        if (compressor.option("drop_debugger"))
            return make_node(AST_EmptyStatement, self);
        return self;
    });

    OPT(AST_LabeledStatement, function(self, compressor){
        if (self.body instanceof AST_Break
            && compressor.loopcontrol_target(self.body.label) === self.body) {
            return make_node(AST_EmptyStatement, self);
        }
        return self.label.references.length == 0 ? self.body : self;
    });

    OPT(AST_Block, function(self, compressor){
        self.body = tighten_body(self.body, compressor);
        return self;
    });

    OPT(AST_BlockStatement, function(self, compressor){
        self.body = tighten_body(self.body, compressor);
        switch (self.body.length) {
          case 1: return self.body[0];
          case 0: return make_node(AST_EmptyStatement, self);
        }
        return self;
    });

    AST_Scope.DEFMETHOD("drop_unused", function(compressor){
        var self = this;
        if (compressor.option("unused")
            && !(self instanceof AST_Toplevel)
            && !self.uses_eval
           ) {
            var in_use = [];
            var initializations = new Dictionary();
            // pass 1: find out which symbols are directly used in
            // this scope (not in nested scopes).
            var scope = this;
            var tw = new TreeWalker(function(node, descend){
                if (node !== self) {
                    if (node instanceof AST_Defun) {
                        initializations.add(node.name.name, node);
                        return true; // don't go in nested scopes
                    }
                    if (node instanceof AST_Definitions && scope === self) {
                        node.definitions.forEach(function(def){
                            if (def.value) {
                                initializations.add(def.name.name, def.value);
                                if (def.value.has_side_effects(compressor)) {
                                    def.value.walk(tw);
                                }
                            }
                        });
                        return true;
                    }
                    if (node instanceof AST_SymbolRef) {
                        push_uniq(in_use, node.definition());
                        return true;
                    }
                    if (node instanceof AST_Scope) {
                        var save_scope = scope;
                        scope = node;
                        descend();
                        scope = save_scope;
                        return true;
                    }
                }
            });
            self.walk(tw);
            // pass 2: for every used symbol we need to walk its
            // initialization code to figure out if it uses other
            // symbols (that may not be in_use).
            for (var i = 0; i < in_use.length; ++i) {
                in_use[i].orig.forEach(function(decl){
                    // undeclared globals will be instanceof AST_SymbolRef
                    var init = initializations.get(decl.name);
                    if (init) init.forEach(function(init){
                        var tw = new TreeWalker(function(node){
                            if (node instanceof AST_SymbolRef) {
                                push_uniq(in_use, node.definition());
                            }
                        });
                        init.walk(tw);
                    });
                });
            }
            // pass 3: we should drop declarations not in_use
            var tt = new TreeTransformer(
                function before(node, descend, in_list) {
                    if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {
                        if (compressor.option("unsafe") && !compressor.option("keep_fargs")) {
                            for (var a = node.argnames, i = a.length; --i >= 0;) {
                                var sym = a[i];
                                if (sym.unreferenced()) {
                                    a.pop();
                                    compressor.warn("Dropping unused function argument {name} [{file}:{line},{col}]", {
                                        name : sym.name,
                                        file : sym.start.file,
                                        line : sym.start.line,
                                        col  : sym.start.col
                                    });
                                }
                                else break;
                            }
                        }
                    }
                    if (node instanceof AST_Defun && node !== self) {
                        if (!member(node.name.definition(), in_use)) {
                            compressor.warn("Dropping unused function {name} [{file}:{line},{col}]", {
                                name : node.name.name,
                                file : node.name.start.file,
                                line : node.name.start.line,
                                col  : node.name.start.col
                            });
                            return make_node(AST_EmptyStatement, node);
                        }
                        return node;
                    }
                    if (node instanceof AST_Definitions && !(tt.parent() instanceof AST_ForIn)) {
                        var def = node.definitions.filter(function(def){
                            if (member(def.name.definition(), in_use)) return true;
                            var w = {
                                name : def.name.name,
                                file : def.name.start.file,
                                line : def.name.start.line,
                                col  : def.name.start.col
                            };
                            if (def.value && def.value.has_side_effects(compressor)) {
                                def._unused_side_effects = true;
                                compressor.warn("Side effects in initialization of unused variable {name} [{file}:{line},{col}]", w);
                                return true;
                            }
                            compressor.warn("Dropping unused variable {name} [{file}:{line},{col}]", w);
                            return false;
                        });
                        // place uninitialized names at the start
                        def = mergeSort(def, function(a, b){
                            if (!a.value && b.value) return -1;
                            if (!b.value && a.value) return 1;
                            return 0;
                        });
                        // for unused names whose initialization has
                        // side effects, we can cascade the init. code
                        // into the next one, or next statement.
                        var side_effects = [];
                        for (var i = 0; i < def.length;) {
                            var x = def[i];
                            if (x._unused_side_effects) {
                                side_effects.push(x.value);
                                def.splice(i, 1);
                            } else {
                                if (side_effects.length > 0) {
                                    side_effects.push(x.value);
                                    x.value = AST_Seq.from_array(side_effects);
                                    side_effects = [];
                                }
                                ++i;
                            }
                        }
                        if (side_effects.length > 0) {
                            side_effects = make_node(AST_BlockStatement, node, {
                                body: [ make_node(AST_SimpleStatement, node, {
                                    body: AST_Seq.from_array(side_effects)
                                }) ]
                            });
                        } else {
                            side_effects = null;
                        }
                        if (def.length == 0 && !side_effects) {
                            return make_node(AST_EmptyStatement, node);
                        }
                        if (def.length == 0) {
                            return in_list ? MAP.splice(side_effects.body) : side_effects;
                        }
                        node.definitions = def;
                        if (side_effects) {
                            side_effects.body.unshift(node);
                            return in_list ? MAP.splice(side_effects.body) : side_effects;
                        }
                        return node;
                    }
                    if (node instanceof AST_For) {
                        descend(node, this);

                        if (node.init instanceof AST_BlockStatement) {
                            // certain combination of unused name + side effect leads to:
                            //    https://github.com/mishoo/UglifyJS2/issues/44
                            // that's an invalid AST.
                            // We fix it at this stage by moving the `var` outside the `for`.

                            var body = node.init.body.slice(0, -1);
                            node.init = node.init.body.slice(-1)[0].body;
                            body.push(node);

                            return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {
                                body: body
                            });
                        }
                    }
                    if (node instanceof AST_Scope && node !== self)
                        return node;
                }
            );
            self.transform(tt);
        }
    });

    AST_Scope.DEFMETHOD("hoist_declarations", function(compressor){
        var hoist_funs = compressor.option("hoist_funs");
        var hoist_vars = compressor.option("hoist_vars");
        var self = this;
        if (hoist_funs || hoist_vars) {
            var dirs = [];
            var hoisted = [];
            var vars = new Dictionary(), vars_found = 0, var_decl = 0;
            // let's count var_decl first, we seem to waste a lot of
            // space if we hoist `var` when there's only one.
            self.walk(new TreeWalker(function(node){
                if (node instanceof AST_Scope && node !== self)
                    return true;
                if (node instanceof AST_Var) {
                    ++var_decl;
                    return true;
                }
            }));
            hoist_vars = hoist_vars && var_decl > 1;
            var tt = new TreeTransformer(
                function before(node) {
                    if (node !== self) {
                        if (node instanceof AST_Directive) {
                            dirs.push(node);
                            return make_node(AST_EmptyStatement, node);
                        }
                        if (node instanceof AST_Defun && hoist_funs) {
                            hoisted.push(node);
                            return make_node(AST_EmptyStatement, node);
                        }
                        if (node instanceof AST_Var && hoist_vars) {
                            node.definitions.forEach(function(def){
                                vars.set(def.name.name, def);
                                ++vars_found;
                            });
                            var seq = node.to_assignments();
                            var p = tt.parent();
                            if (p instanceof AST_ForIn && p.init === node) {
                                if (seq == null) return node.definitions[0].name;
                                return seq;
                            }
                            if (p instanceof AST_For && p.init === node) {
                                return seq;
                            }
                            if (!seq) return make_node(AST_EmptyStatement, node);
                            return make_node(AST_SimpleStatement, node, {
                                body: seq
                            });
                        }
                        if (node instanceof AST_Scope)
                            return node; // to avoid descending in nested scopes
                    }
                }
            );
            self = self.transform(tt);
            if (vars_found > 0) {
                // collect only vars which don't show up in self's arguments list
                var defs = [];
                vars.each(function(def, name){
                    if (self instanceof AST_Lambda
                        && find_if(function(x){ return x.name == def.name.name },
                                   self.argnames)) {
                        vars.del(name);
                    } else {
                        def = def.clone();
                        def.value = null;
                        defs.push(def);
                        vars.set(name, def);
                    }
                });
                if (defs.length > 0) {
                    // try to merge in assignments
                    for (var i = 0; i < self.body.length;) {
                        if (self.body[i] instanceof AST_SimpleStatement) {
                            var expr = self.body[i].body, sym, assign;
                            if (expr instanceof AST_Assign
                                && expr.operator == "="
                                && (sym = expr.left) instanceof AST_Symbol
                                && vars.has(sym.name))
                            {
                                var def = vars.get(sym.name);
                                if (def.value) break;
                                def.value = expr.right;
                                remove(defs, def);
                                defs.push(def);
                                self.body.splice(i, 1);
                                continue;
                            }
                            if (expr instanceof AST_Seq
                                && (assign = expr.car) instanceof AST_Assign
                                && assign.operator == "="
                                && (sym = assign.left) instanceof AST_Symbol
                                && vars.has(sym.name))
                            {
                                var def = vars.get(sym.name);
                                if (def.value) break;
                                def.value = assign.right;
                                remove(defs, def);
                                defs.push(def);
                                self.body[i].body = expr.cdr;
                                continue;
                            }
                        }
                        if (self.body[i] instanceof AST_EmptyStatement) {
                            self.body.splice(i, 1);
                            continue;
                        }
                        if (self.body[i] instanceof AST_BlockStatement) {
                            var tmp = [ i, 1 ].concat(self.body[i].body);
                            self.body.splice.apply(self.body, tmp);
                            continue;
                        }
                        break;
                    }
                    defs = make_node(AST_Var, self, {
                        definitions: defs
                    });
                    hoisted.push(defs);
                };
            }
            self.body = dirs.concat(hoisted, self.body);
        }
        return self;
    });

    OPT(AST_SimpleStatement, function(self, compressor){
        if (compressor.option("side_effects")) {
            if (!self.body.has_side_effects(compressor)) {
                compressor.warn("Dropping side-effect-free statement [{file}:{line},{col}]", self.start);
                return make_node(AST_EmptyStatement, self);
            }
        }
        return self;
    });

    OPT(AST_DWLoop, function(self, compressor){
        var cond = self.condition.evaluate(compressor);
        self.condition = cond[0];
        if (!compressor.option("loops")) return self;
        if (cond.length > 1) {
            if (cond[1]) {
                return make_node(AST_For, self, {
                    body: self.body
                });
            } else if (self instanceof AST_While) {
                if (compressor.option("dead_code")) {
                    var a = [];
                    extract_declarations_from_unreachable_code(compressor, self.body, a);
                    return make_node(AST_BlockStatement, self, { body: a });
                }
            }
        }
        return self;
    });

    function if_break_in_loop(self, compressor) {
        function drop_it(rest) {
            rest = as_statement_array(rest);
            if (self.body instanceof AST_BlockStatement) {
                self.body = self.body.clone();
                self.body.body = rest.concat(self.body.body.slice(1));
                self.body = self.body.transform(compressor);
            } else {
                self.body = make_node(AST_BlockStatement, self.body, {
                    body: rest
                }).transform(compressor);
            }
            if_break_in_loop(self, compressor);
        }
        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;
        if (first instanceof AST_If) {
            if (first.body instanceof AST_Break
                && compressor.loopcontrol_target(first.body.label) === self) {
                if (self.condition) {
                    self.condition = make_node(AST_Binary, self.condition, {
                        left: self.condition,
                        operator: "&&",
                        right: first.condition.negate(compressor),
                    });
                } else {
                    self.condition = first.condition.negate(compressor);
                }
                drop_it(first.alternative);
            }
            else if (first.alternative instanceof AST_Break
                     && compressor.loopcontrol_target(first.alternative.label) === self) {
                if (self.condition) {
                    self.condition = make_node(AST_Binary, self.condition, {
                        left: self.condition,
                        operator: "&&",
                        right: first.condition,
                    });
                } else {
                    self.condition = first.condition;
                }
                drop_it(first.body);
            }
        }
    };

    OPT(AST_While, function(self, compressor) {
        if (!compressor.option("loops")) return self;
        self = AST_DWLoop.prototype.optimize.call(self, compressor);
        if (self instanceof AST_While) {
            if_break_in_loop(self, compressor);
            self = make_node(AST_For, self, self).transform(compressor);
        }
        return self;
    });

    OPT(AST_For, function(self, compressor){
        var cond = self.condition;
        if (cond) {
            cond = cond.evaluate(compressor);
            self.condition = cond[0];
        }
        if (!compressor.option("loops")) return self;
        if (cond) {
            if (cond.length > 1 && !cond[1]) {
                if (compressor.option("dead_code")) {
                    var a = [];
                    if (self.init instanceof AST_Statement) {
                        a.push(self.init);
                    }
                    else if (self.init) {
                        a.push(make_node(AST_SimpleStatement, self.init, {
                            body: self.init
                        }));
                    }
                    extract_declarations_from_unreachable_code(compressor, self.body, a);
                    return make_node(AST_BlockStatement, self, { body: a });
                }
            }
        }
        if_break_in_loop(self, compressor);
        return self;
    });

    OPT(AST_If, function(self, compressor){
        if (!compressor.option("conditionals")) return self;
        // if condition can be statically determined, warn and drop
        // one of the blocks.  note, statically determined implies
        // “has no side effects”; also it doesn't work for cases like
        // `x && true`, though it probably should.
        var cond = self.condition.evaluate(compressor);
        self.condition = cond[0];
        if (cond.length > 1) {
            if (cond[1]) {
                compressor.warn("Condition always true [{file}:{line},{col}]", self.condition.start);
                if (compressor.option("dead_code")) {
                    var a = [];
                    if (self.alternative) {
                        extract_declarations_from_unreachable_code(compressor, self.alternative, a);
                    }
                    a.push(self.body);
                    return make_node(AST_BlockStatement, self, { body: a }).transform(compressor);
                }
            } else {
                compressor.warn("Condition always false [{file}:{line},{col}]", self.condition.start);
                if (compressor.option("dead_code")) {
                    var a = [];
                    extract_declarations_from_unreachable_code(compressor, self.body, a);
                    if (self.alternative) a.push(self.alternative);
                    return make_node(AST_BlockStatement, self, { body: a }).transform(compressor);
                }
            }
        }
        if (is_empty(self.alternative)) self.alternative = null;
        var negated = self.condition.negate(compressor);
        var negated_is_best = best_of(self.condition, negated) === negated;
        if (self.alternative && negated_is_best) {
            negated_is_best = false; // because we already do the switch here.
            self.condition = negated;
            var tmp = self.body;
            self.body = self.alternative || make_node(AST_EmptyStatement);
            self.alternative = tmp;
        }
        if (is_empty(self.body) && is_empty(self.alternative)) {
            return make_node(AST_SimpleStatement, self.condition, {
                body: self.condition
            }).transform(compressor);
        }
        if (self.body instanceof AST_SimpleStatement
            && self.alternative instanceof AST_SimpleStatement) {
            return make_node(AST_SimpleStatement, self, {
                body: make_node(AST_Conditional, self, {
                    condition   : self.condition,
                    consequent  : self.body.body,
                    alternative : self.alternative.body
                })
            }).transform(compressor);
        }
        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {
            if (negated_is_best) return make_node(AST_SimpleStatement, self, {
                body: make_node(AST_Binary, self, {
                    operator : "||",
                    left     : negated,
                    right    : self.body.body
                })
            }).transform(compressor);
            return make_node(AST_SimpleStatement, self, {
                body: make_node(AST_Binary, self, {
                    operator : "&&",
                    left     : self.condition,
                    right    : self.body.body
                })
            }).transform(compressor);
        }
        if (self.body instanceof AST_EmptyStatement
            && self.alternative
            && self.alternative instanceof AST_SimpleStatement) {
            return make_node(AST_SimpleStatement, self, {
                body: make_node(AST_Binary, self, {
                    operator : "||",
                    left     : self.condition,
                    right    : self.alternative.body
                })
            }).transform(compressor);
        }
        if (self.body instanceof AST_Exit
            && self.alternative instanceof AST_Exit
            && self.body.TYPE == self.alternative.TYPE) {
            return make_node(self.body.CTOR, self, {
                value: make_node(AST_Conditional, self, {
                    condition   : self.condition,
                    consequent  : self.body.value || make_node(AST_Undefined, self.body).optimize(compressor),
                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative).optimize(compressor)
                })
            }).transform(compressor);
        }
        if (self.body instanceof AST_If
            && !self.body.alternative
            && !self.alternative) {
            self.condition = make_node(AST_Binary, self.condition, {
                operator: "&&",
                left: self.condition,
                right: self.body.condition
            }).transform(compressor);
            self.body = self.body.body;
        }
        if (aborts(self.body)) {
            if (self.alternative) {
                var alt = self.alternative;
                self.alternative = null;
                return make_node(AST_BlockStatement, self, {
                    body: [ self, alt ]
                }).transform(compressor);
            }
        }
        if (aborts(self.alternative)) {
            var body = self.body;
            self.body = self.alternative;
            self.condition = negated_is_best ? negated : self.condition.negate(compressor);
            self.alternative = null;
            return make_node(AST_BlockStatement, self, {
                body: [ self, body ]
            }).transform(compressor);
        }
        return self;
    });

    OPT(AST_Switch, function(self, compressor){
        if (self.body.length == 0 && compressor.option("conditionals")) {
            return make_node(AST_SimpleStatement, self, {
                body: self.expression
            }).transform(compressor);
        }
        for(;;) {
            var last_branch = self.body[self.body.length - 1];
            if (last_branch) {
                var stat = last_branch.body[last_branch.body.length - 1]; // last statement
                if (stat instanceof AST_Break && loop_body(compressor.loopcontrol_target(stat.label)) === self)
                    last_branch.body.pop();
                if (last_branch instanceof AST_Default && last_branch.body.length == 0) {
                    self.body.pop();
                    continue;
                }
            }
            break;
        }
        var exp = self.expression.evaluate(compressor);
        out: if (exp.length == 2) try {
            // constant expression
            self.expression = exp[0];
            if (!compressor.option("dead_code")) break out;
            var value = exp[1];
            var in_if = false;
            var in_block = false;
            var started = false;
            var stopped = false;
            var ruined = false;
            var tt = new TreeTransformer(function(node, descend, in_list){
                if (node instanceof AST_Lambda || node instanceof AST_SimpleStatement) {
                    // no need to descend these node types
                    return node;
                }
                else if (node instanceof AST_Switch && node === self) {
                    node = node.clone();
                    descend(node, this);
                    return ruined ? node : make_node(AST_BlockStatement, node, {
                        body: node.body.reduce(function(a, branch){
                            return a.concat(branch.body);
                        }, [])
                    }).transform(compressor);
                }
                else if (node instanceof AST_If || node instanceof AST_Try) {
                    var save = in_if;
                    in_if = !in_block;
                    descend(node, this);
                    in_if = save;
                    return node;
                }
                else if (node instanceof AST_StatementWithBody || node instanceof AST_Switch) {
                    var save = in_block;
                    in_block = true;
                    descend(node, this);
                    in_block = save;
                    return node;
                }
                else if (node instanceof AST_Break && this.loopcontrol_target(node.label) === self) {
                    if (in_if) {
                        ruined = true;
                        return node;
                    }
                    if (in_block) return node;
                    stopped = true;
                    return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);
                }
                else if (node instanceof AST_SwitchBranch && this.parent() === self) {
                    if (stopped) return MAP.skip;
                    if (node instanceof AST_Case) {
                        var exp = node.expression.evaluate(compressor);
                        if (exp.length < 2) {
                            // got a case with non-constant expression, baling out
                            throw self;
                        }
                        if (exp[1] === value || started) {
                            started = true;
                            if (aborts(node)) stopped = true;
                            descend(node, this);
                            return node;
                        }
                        return MAP.skip;
                    }
                    descend(node, this);
                    return node;
                }
            });
            tt.stack = compressor.stack.slice(); // so that's able to see parent nodes
            self = self.transform(tt);
        } catch(ex) {
            if (ex !== self) throw ex;
        }
        return self;
    });

    OPT(AST_Case, function(self, compressor){
        self.body = tighten_body(self.body, compressor);
        return self;
    });

    OPT(AST_Try, function(self, compressor){
        self.body = tighten_body(self.body, compressor);
        return self;
    });

    AST_Definitions.DEFMETHOD("remove_initializers", function(){
        this.definitions.forEach(function(def){ def.value = null });
    });

    AST_Definitions.DEFMETHOD("to_assignments", function(){
        var assignments = this.definitions.reduce(function(a, def){
            if (def.value) {
                var name = make_node(AST_SymbolRef, def.name, def.name);
                a.push(make_node(AST_Assign, def, {
                    operator : "=",
                    left     : name,
                    right    : def.value
                }));
            }
            return a;
        }, []);
        if (assignments.length == 0) return null;
        return AST_Seq.from_array(assignments);
    });

    OPT(AST_Definitions, function(self, compressor){
        if (self.definitions.length == 0)
            return make_node(AST_EmptyStatement, self);
        return self;
    });

    OPT(AST_Function, function(self, compressor){
        self = AST_Lambda.prototype.optimize.call(self, compressor);
        if (compressor.option("unused") && !compressor.option("keep_fnames")) {
            if (self.name && self.name.unreferenced()) {
                self.name = null;
            }
        }
        return self;
    });

    OPT(AST_Call, function(self, compressor){
        if (compressor.option("unsafe")) {
            var exp = self.expression;
            if (exp instanceof AST_SymbolRef && exp.undeclared()) {
                switch (exp.name) {
                  case "Array":
                    if (self.args.length != 1) {
                        return make_node(AST_Array, self, {
                            elements: self.args
                        }).transform(compressor);
                    }
                    break;
                  case "Object":
                    if (self.args.length == 0) {
                        return make_node(AST_Object, self, {
                            properties: []
                        });
                    }
                    break;
                  case "String":
                    if (self.args.length == 0) return make_node(AST_String, self, {
                        value: ""
                    });
                    if (self.args.length <= 1) return make_node(AST_Binary, self, {
                        left: self.args[0],
                        operator: "+",
                        right: make_node(AST_String, self, { value: "" })
                    }).transform(compressor);
                    break;
                  case "Number":
                    if (self.args.length == 0) return make_node(AST_Number, self, {
                        value: 0
                    });
                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {
                        expression: self.args[0],
                        operator: "+"
                    }).transform(compressor);
                  case "Boolean":
                    if (self.args.length == 0) return make_node(AST_False, self);
                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {
                        expression: make_node(AST_UnaryPrefix, null, {
                            expression: self.args[0],
                            operator: "!"
                        }),
                        operator: "!"
                    }).transform(compressor);
                    break;
                  case "Function":
                    // new Function() => function(){}
                    if (self.args.length == 0) return make_node(AST_Function, self, {
                        argnames: [],
                        body: []
                    });
                    if (all(self.args, function(x){ return x instanceof AST_String })) {
                        // quite a corner-case, but we can handle it:
                        //   https://github.com/mishoo/UglifyJS2/issues/203
                        // if the code argument is a constant, then we can minify it.
                        try {
                            var code = "(function(" + self.args.slice(0, -1).map(function(arg){
                                return arg.value;
                            }).join(",") + "){" + self.args[self.args.length - 1].value + "})()";
                            var ast = parse(code);
                            ast.figure_out_scope({ screw_ie8: compressor.option("screw_ie8") });
                            var comp = new Compressor(compressor.options);
                            ast = ast.transform(comp);
                            ast.figure_out_scope({ screw_ie8: compressor.option("screw_ie8") });
                            ast.mangle_names();
                            var fun;
                            try {
                                ast.walk(new TreeWalker(function(node){
                                    if (node instanceof AST_Lambda) {
                                        fun = node;
                                        throw ast;
                                    }
                                }));
                            } catch(ex) {
                                if (ex !== ast) throw ex;
                            };
                            if (!fun) return self;
                            var args = fun.argnames.map(function(arg, i){
                                return make_node(AST_String, self.args[i], {
                                    value: arg.print_to_string()
                                });
                            });
                            var code = OutputStream();
                            AST_BlockStatement.prototype._codegen.call(fun, fun, code);
                            code = code.toString().replace(/^\{|\}$/g, "");
                            args.push(make_node(AST_String, self.args[self.args.length - 1], {
                                value: code
                            }));
                            self.args = args;
                            return self;
                        } catch(ex) {
                            if (ex instanceof JS_Parse_Error) {
                                compressor.warn("Error parsing code passed to new Function [{file}:{line},{col}]", self.args[self.args.length - 1].start);
                                compressor.warn(ex.toString());
                            } else {
                                console.log(ex);
                                throw ex;
                            }
                        }
                    }
                    break;
                }
            }
            else if (exp instanceof AST_Dot && exp.property == "toString" && self.args.length == 0) {
                return make_node(AST_Binary, self, {
                    left: make_node(AST_String, self, { value: "" }),
                    operator: "+",
                    right: exp.expression
                }).transform(compressor);
            }
            else if (exp instanceof AST_Dot && exp.expression instanceof AST_Array && exp.property == "join") EXIT: {
                var separator = self.args.length == 0 ? "," : self.args[0].evaluate(compressor)[1];
                if (separator == null) break EXIT; // not a constant
                var elements = exp.expression.elements.reduce(function(a, el){
                    el = el.evaluate(compressor);
                    if (a.length == 0 || el.length == 1) {
                        a.push(el);
                    } else {
                        var last = a[a.length - 1];
                        if (last.length == 2) {
                            // it's a constant
                            var val = "" + last[1] + separator + el[1];
                            a[a.length - 1] = [ make_node_from_constant(compressor, val, last[0]), val ];
                        } else {
                            a.push(el);
                        }
                    }
                    return a;
                }, []);
                if (elements.length == 0) return make_node(AST_String, self, { value: "" });
                if (elements.length == 1) return elements[0][0];
                if (separator == "") {
                    var first;
                    if (elements[0][0] instanceof AST_String
                        || elements[1][0] instanceof AST_String) {
                        first = elements.shift()[0];
                    } else {
                        first = make_node(AST_String, self, { value: "" });
                    }
                    return elements.reduce(function(prev, el){
                        return make_node(AST_Binary, el[0], {
                            operator : "+",
                            left     : prev,
                            right    : el[0],
                        });
                    }, first).transform(compressor);
                }
                // need this awkward cloning to not affect original element
                // best_of will decide which one to get through.
                var node = self.clone();
                node.expression = node.expression.clone();
                node.expression.expression = node.expression.expression.clone();
                node.expression.expression.elements = elements.map(function(el){
                    return el[0];
                });
                return best_of(self, node);
            }
        }
        if (compressor.option("side_effects")) {
            if (self.expression instanceof AST_Function
                && self.args.length == 0
                && !AST_Block.prototype.has_side_effects.call(self.expression, compressor)) {
                return make_node(AST_Undefined, self).transform(compressor);
            }
        }
        if (compressor.option("drop_console")) {
            if (self.expression instanceof AST_PropAccess) {
                var name = self.expression.expression;
                while (name.expression) {
                    name = name.expression;
                }
                if (name instanceof AST_SymbolRef
                    && name.name == "console"
                    && name.undeclared()) {
                    return make_node(AST_Undefined, self).transform(compressor);
                }
            }
        }
        return self.evaluate(compressor)[0];
    });

    OPT(AST_New, function(self, compressor){
        if (compressor.option("unsafe")) {
            var exp = self.expression;
            if (exp instanceof AST_SymbolRef && exp.undeclared()) {
                switch (exp.name) {
                  case "Object":
                  case "RegExp":
                  case "Function":
                  case "Error":
                  case "Array":
                    return make_node(AST_Call, self, self).transform(compressor);
                }
            }
        }
        return self;
    });

    OPT(AST_Seq, function(self, compressor){
        if (!compressor.option("side_effects"))
            return self;
        if (!self.car.has_side_effects(compressor)) {
            // we shouldn't compress (1,eval)(something) to
            // eval(something) because that changes the meaning of
            // eval (becomes lexical instead of global).
            var p;
            if (!(self.cdr instanceof AST_SymbolRef
                  && self.cdr.name == "eval"
                  && self.cdr.undeclared()
                  && (p = compressor.parent()) instanceof AST_Call
                  && p.expression === self)) {
                return self.cdr;
            }
        }
        if (compressor.option("cascade")) {
            if (self.car instanceof AST_Assign
                && !self.car.left.has_side_effects(compressor)) {
                if (self.car.left.equivalent_to(self.cdr)) {
                    return self.car;
                }
                if (self.cdr instanceof AST_Call
                    && self.cdr.expression.equivalent_to(self.car.left)) {
                    self.cdr.expression = self.car;
                    return self.cdr;
                }
            }
            if (!self.car.has_side_effects(compressor)
                && !self.cdr.has_side_effects(compressor)
                && self.car.equivalent_to(self.cdr)) {
                return self.car;
            }
        }
        if (self.cdr instanceof AST_UnaryPrefix
            && self.cdr.operator == "void"
            && !self.cdr.expression.has_side_effects(compressor)) {
            self.cdr.expression = self.car;
            return self.cdr;
        }
        if (self.cdr instanceof AST_Undefined) {
            return make_node(AST_UnaryPrefix, self, {
                operator   : "void",
                expression : self.car
            });
        }
        return self;
    });

    AST_Unary.DEFMETHOD("lift_sequences", function(compressor){
        if (compressor.option("sequences")) {
            if (this.expression instanceof AST_Seq) {
                var seq = this.expression;
                var x = seq.to_array();
                this.expression = x.pop();
                x.push(this);
                seq = AST_Seq.from_array(x).transform(compressor);
                return seq;
            }
        }
        return this;
    });

    OPT(AST_UnaryPostfix, function(self, compressor){
        return self.lift_sequences(compressor);
    });

    OPT(AST_UnaryPrefix, function(self, compressor){
        self = self.lift_sequences(compressor);
        var e = self.expression;
        if (compressor.option("booleans") && compressor.in_boolean_context()) {
            switch (self.operator) {
              case "!":
                if (e instanceof AST_UnaryPrefix && e.operator == "!") {
                    // !!foo ==> foo, if we're in boolean context
                    return e.expression;
                }
                break;
              case "typeof":
                // typeof always returns a non-empty string, thus it's
                // always true in booleans
                compressor.warn("Boolean expression always true [{file}:{line},{col}]", self.start);
                return make_node(AST_True, self);
            }
            if (e instanceof AST_Binary && self.operator == "!") {
                self = best_of(self, e.negate(compressor));
            }
        }
        return self.evaluate(compressor)[0];
    });

    function has_side_effects_or_prop_access(node, compressor) {
        var save_pure_getters = compressor.option("pure_getters");
        compressor.options.pure_getters = false;
        var ret = node.has_side_effects(compressor);
        compressor.options.pure_getters = save_pure_getters;
        return ret;
    }

    AST_Binary.DEFMETHOD("lift_sequences", function(compressor){
        if (compressor.option("sequences")) {
            if (this.left instanceof AST_Seq) {
                var seq = this.left;
                var x = seq.to_array();
                this.left = x.pop();
                x.push(this);
                seq = AST_Seq.from_array(x).transform(compressor);
                return seq;
            }
            if (this.right instanceof AST_Seq
                && this instanceof AST_Assign
                && !has_side_effects_or_prop_access(this.left, compressor)) {
                var seq = this.right;
                var x = seq.to_array();
                this.right = x.pop();
                x.push(this);
                seq = AST_Seq.from_array(x).transform(compressor);
                return seq;
            }
        }
        return this;
    });

    var commutativeOperators = makePredicate("== === != !== * & | ^");

    OPT(AST_Binary, function(self, compressor){
        var reverse = compressor.has_directive("use asm") ? noop
            : function(op, force) {
                if (force || !(self.left.has_side_effects(compressor) || self.right.has_side_effects(compressor))) {
                    if (op) self.operator = op;
                    var tmp = self.left;
                    self.left = self.right;
                    self.right = tmp;
                }
            };
        if (commutativeOperators(self.operator)) {
            if (self.right instanceof AST_Constant
                && !(self.left instanceof AST_Constant)) {
                // if right is a constant, whatever side effects the
                // left side might have could not influence the
                // result.  hence, force switch.

                if (!(self.left instanceof AST_Binary
                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {
                    reverse(null, true);
                }
            }
            if (/^[!=]==?$/.test(self.operator)) {
                if (self.left instanceof AST_SymbolRef && self.right instanceof AST_Conditional) {
                    if (self.right.consequent instanceof AST_SymbolRef
                        && self.right.consequent.definition() === self.left.definition()) {
                        if (/^==/.test(self.operator)) return self.right.condition;
                        if (/^!=/.test(self.operator)) return self.right.condition.negate(compressor);
                    }
                    if (self.right.alternative instanceof AST_SymbolRef
                        && self.right.alternative.definition() === self.left.definition()) {
                        if (/^==/.test(self.operator)) return self.right.condition.negate(compressor);
                        if (/^!=/.test(self.operator)) return self.right.condition;
                    }
                }
                if (self.right instanceof AST_SymbolRef && self.left instanceof AST_Conditional) {
                    if (self.left.consequent instanceof AST_SymbolRef
                        && self.left.consequent.definition() === self.right.definition()) {
                        if (/^==/.test(self.operator)) return self.left.condition;
                        if (/^!=/.test(self.operator)) return self.left.condition.negate(compressor);
                    }
                    if (self.left.alternative instanceof AST_SymbolRef
                        && self.left.alternative.definition() === self.right.definition()) {
                        if (/^==/.test(self.operator)) return self.left.condition.negate(compressor);
                        if (/^!=/.test(self.operator)) return self.left.condition;
                    }
                }
            }
        }
        self = self.lift_sequences(compressor);
        if (compressor.option("comparisons")) switch (self.operator) {
          case "===":
          case "!==":
            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||
                (self.left.is_boolean() && self.right.is_boolean())) {
                self.operator = self.operator.substr(0, 2);
            }
            // XXX: intentionally falling down to the next case
          case "==":
          case "!=":
            if (self.left instanceof AST_String
                && self.left.value == "undefined"
                && self.right instanceof AST_UnaryPrefix
                && self.right.operator == "typeof"
                && compressor.option("unsafe")) {
                if (!(self.right.expression instanceof AST_SymbolRef)
                    || !self.right.expression.undeclared()) {
                    self.right = self.right.expression;
                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);
                    if (self.operator.length == 2) self.operator += "=";
                }
            }
            break;
        }
        if (compressor.option("conditionals")) {
            if (self.operator == "&&") {
                var ll = self.left.evaluate(compressor);
                var rr = self.right.evaluate(compressor);
                if (ll.length > 1) {
                    if (ll[1]) {
                        compressor.warn("Condition left of && always true [{file}:{line},{col}]", self.start);
                        return rr[0];
                    } else {
                        compressor.warn("Condition left of && always false [{file}:{line},{col}]", self.start);
                        return ll[0];
                    }
                }
            }
            else if (self.operator == "||") {
                var ll = self.left.evaluate(compressor);
                var rr = self.right.evaluate(compressor);
                if (ll.length > 1) {
                    if (ll[1]) {
                        compressor.warn("Condition left of || always true [{file}:{line},{col}]", self.start);
                        return ll[0];
                    } else {
                        compressor.warn("Condition left of || always false [{file}:{line},{col}]", self.start);
                        return rr[0];
                    }
                }
            }
        }
        if (compressor.option("booleans") && compressor.in_boolean_context()) switch (self.operator) {
          case "&&":
            var ll = self.left.evaluate(compressor);
            var rr = self.right.evaluate(compressor);
            if ((ll.length > 1 && !ll[1]) || (rr.length > 1 && !rr[1])) {
                compressor.warn("Boolean && always false [{file}:{line},{col}]", self.start);
                if (self.left.has_side_effects(compressor)) {
                    return make_node(AST_Seq, self, {
                        car: self.left,
                        cdr: make_node(AST_False)
                    }).optimize(compressor);
                }
                return make_node(AST_False, self);
            }
            if (ll.length > 1 && ll[1]) {
                return rr[0];
            }
            if (rr.length > 1 && rr[1]) {
                return ll[0];
            }
            break;
          case "||":
            var ll = self.left.evaluate(compressor);
            var rr = self.right.evaluate(compressor);
            if ((ll.length > 1 && ll[1]) || (rr.length > 1 && rr[1])) {
                compressor.warn("Boolean || always true [{file}:{line},{col}]", self.start);
                if (self.left.has_side_effects(compressor)) {
                    return make_node(AST_Seq, self, {
                        car: self.left,
                        cdr: make_node(AST_True)
                    }).optimize(compressor);
                }
                return make_node(AST_True, self);
            }
            if (ll.length > 1 && !ll[1]) {
                return rr[0];
            }
            if (rr.length > 1 && !rr[1]) {
                return ll[0];
            }
            break;
          case "+":
            var ll = self.left.evaluate(compressor);
            var rr = self.right.evaluate(compressor);
            if ((ll.length > 1 && ll[0] instanceof AST_String && ll[1]) ||
                (rr.length > 1 && rr[0] instanceof AST_String && rr[1])) {
                compressor.warn("+ in boolean context always true [{file}:{line},{col}]", self.start);
                return make_node(AST_True, self);
            }
            break;
        }
        if (compressor.option("comparisons") && self.is_boolean()) {
            if (!(compressor.parent() instanceof AST_Binary)
                || compressor.parent() instanceof AST_Assign) {
                var negated = make_node(AST_UnaryPrefix, self, {
                    operator: "!",
                    expression: self.negate(compressor)
                });
                self = best_of(self, negated);
            }
            switch (self.operator) {
              case "<": reverse(">"); break;
              case "<=": reverse(">="); break;
            }
        }
        if (self.operator == "+" && self.right instanceof AST_String
            && self.right.getValue() === "" && self.left instanceof AST_Binary
            && self.left.operator == "+" && self.left.is_string(compressor)) {
            return self.left;
        }
        if (compressor.option("evaluate")) {
            if (self.operator == "+") {
                if (self.left instanceof AST_Constant
                    && self.right instanceof AST_Binary
                    && self.right.operator == "+"
                    && self.right.left instanceof AST_Constant
                    && self.right.is_string(compressor)) {
                    self = make_node(AST_Binary, self, {
                        operator: "+",
                        left: make_node(AST_String, null, {
                            value: "" + self.left.getValue() + self.right.left.getValue(),
                            start: self.left.start,
                            end: self.right.left.end
                        }),
                        right: self.right.right
                    });
                }
                if (self.right instanceof AST_Constant
                    && self.left instanceof AST_Binary
                    && self.left.operator == "+"
                    && self.left.right instanceof AST_Constant
                    && self.left.is_string(compressor)) {
                    self = make_node(AST_Binary, self, {
                        operator: "+",
                        left: self.left.left,
                        right: make_node(AST_String, null, {
                            value: "" + self.left.right.getValue() + self.right.getValue(),
                            start: self.left.right.start,
                            end: self.right.end
                        })
                    });
                }
                if (self.left instanceof AST_Binary
                    && self.left.operator == "+"
                    && self.left.is_string(compressor)
                    && self.left.right instanceof AST_Constant
                    && self.right instanceof AST_Binary
                    && self.right.operator == "+"
                    && self.right.left instanceof AST_Constant
                    && self.right.is_string(compressor)) {
                    self = make_node(AST_Binary, self, {
                        operator: "+",
                        left: make_node(AST_Binary, self.left, {
                            operator: "+",
                            left: self.left.left,
                            right: make_node(AST_String, null, {
                                value: "" + self.left.right.getValue() + self.right.left.getValue(),
                                start: self.left.right.start,
                                end: self.right.left.end
                            })
                        }),
                        right: self.right.right
                    });
                }
            }
        }
        // x && (y && z)  ==>  x && y && z
        // x || (y || z)  ==>  x || y || z
        if (self.right instanceof AST_Binary
            && self.right.operator == self.operator
            && (self.operator == "&&" || self.operator == "||"))
        {
            self.left = make_node(AST_Binary, self.left, {
                operator : self.operator,
                left     : self.left,
                right    : self.right.left
            });
            self.right = self.right.right;
            return self.transform(compressor);
        }
        return self.evaluate(compressor)[0];
    });

    OPT(AST_SymbolRef, function(self, compressor){
        if (self.undeclared()) {
            var defines = compressor.option("global_defs");
            if (defines && defines.hasOwnProperty(self.name)) {
                return make_node_from_constant(compressor, defines[self.name], self);
            }
            switch (self.name) {
              case "undefined":
                return make_node(AST_Undefined, self);
              case "NaN":
                return make_node(AST_NaN, self).transform(compressor);
              case "Infinity":
                return make_node(AST_Infinity, self).transform(compressor);
            }
        }
        return self;
    });

    OPT(AST_Infinity, function (self, compressor) {
        return make_node(AST_Binary, self, {
            operator : '/',
            left     : make_node(AST_Number, self, {value: 1}),
            right    : make_node(AST_Number, self, {value: 0})
        });
    });

    OPT(AST_Undefined, function(self, compressor){
        if (compressor.option("unsafe")) {
            var scope = compressor.find_parent(AST_Scope);
            var undef = scope.find_variable("undefined");
            if (undef) {
                var ref = make_node(AST_SymbolRef, self, {
                    name   : "undefined",
                    scope  : scope,
                    thedef : undef
                });
                ref.reference();
                return ref;
            }
        }
        return self;
    });

    var ASSIGN_OPS = [ '+', '-', '/', '*', '%', '>>', '<<', '>>>', '|', '^', '&' ];
    OPT(AST_Assign, function(self, compressor){
        self = self.lift_sequences(compressor);
        if (self.operator == "="
            && self.left instanceof AST_SymbolRef
            && self.right instanceof AST_Binary
            && self.right.left instanceof AST_SymbolRef
            && self.right.left.name == self.left.name
            && member(self.right.operator, ASSIGN_OPS)) {
            self.operator = self.right.operator + "=";
            self.right = self.right.right;
        }
        return self;
    });

    OPT(AST_Conditional, function(self, compressor){
        if (!compressor.option("conditionals")) return self;
        if (self.condition instanceof AST_Seq) {
            var car = self.condition.car;
            self.condition = self.condition.cdr;
            return AST_Seq.cons(car, self);
        }
        var cond = self.condition.evaluate(compressor);
        if (cond.length > 1) {
            if (cond[1]) {
                compressor.warn("Condition always true [{file}:{line},{col}]", self.start);
                return self.consequent;
            } else {
                compressor.warn("Condition always false [{file}:{line},{col}]", self.start);
                return self.alternative;
            }
        }
        var negated = cond[0].negate(compressor);
        if (best_of(cond[0], negated) === negated) {
            self = make_node(AST_Conditional, self, {
                condition: negated,
                consequent: self.alternative,
                alternative: self.consequent
            });
        }
        var consequent = self.consequent;
        var alternative = self.alternative;
        if (consequent instanceof AST_Assign
            && alternative instanceof AST_Assign
            && consequent.operator == alternative.operator
            && consequent.left.equivalent_to(alternative.left)
            && !consequent.left.has_side_effects(compressor)
           ) {
            /*
             * Stuff like this:
             * if (foo) exp = something; else exp = something_else;
             * ==>
             * exp = foo ? something : something_else;
             */
            return make_node(AST_Assign, self, {
                operator: consequent.operator,
                left: consequent.left,
                right: make_node(AST_Conditional, self, {
                    condition: self.condition,
                    consequent: consequent.right,
                    alternative: alternative.right
                })
            });
        }
        if (consequent instanceof AST_Call
            && alternative.TYPE === consequent.TYPE
            && consequent.args.length == alternative.args.length
            && !consequent.expression.has_side_effects(compressor)
            && consequent.expression.equivalent_to(alternative.expression)) {
            if (consequent.args.length == 0) {
                return make_node(AST_Seq, self, {
                    car: self.condition,
                    cdr: consequent
                });
            }
            if (consequent.args.length == 1) {
                consequent.args[0] = make_node(AST_Conditional, self, {
                    condition: self.condition,
                    consequent: consequent.args[0],
                    alternative: alternative.args[0]
                });
                return consequent;
            }
        }
        // x?y?z:a:a --> x&&y?z:a
        if (consequent instanceof AST_Conditional
            && consequent.alternative.equivalent_to(alternative)) {
            return make_node(AST_Conditional, self, {
                condition: make_node(AST_Binary, self, {
                    left: self.condition,
                    operator: "&&",
                    right: consequent.condition
                }),
                consequent: consequent.consequent,
                alternative: alternative
            });
        }
        // x=y?1:1 --> x=1
        if (consequent instanceof AST_Constant
            && alternative instanceof AST_Constant
            && consequent.equivalent_to(alternative)) {
            if (self.condition.has_side_effects(compressor)) {
                return AST_Seq.from_array([self.condition, make_node_from_constant(compressor, consequent.value, self)]);
            } else {
                return make_node_from_constant(compressor, consequent.value, self);

            }
        }
        // x=y?true:false --> x=!!y
        if (consequent instanceof AST_True
            && alternative instanceof AST_False) {
            self.condition = self.condition.negate(compressor);
            return make_node(AST_UnaryPrefix, self.condition, {
                operator: "!",
                expression: self.condition
            });
        }
        // x=y?false:true --> x=!y
        if (consequent instanceof AST_False
            && alternative instanceof AST_True) {
            return self.condition.negate(compressor)
        }
        return self;
    });

    OPT(AST_Boolean, function(self, compressor){
        if (compressor.option("booleans")) {
            var p = compressor.parent();
            if (p instanceof AST_Binary && (p.operator == "=="
                                            || p.operator == "!=")) {
                compressor.warn("Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]", {
                    operator : p.operator,
                    value    : self.value,
                    file     : p.start.file,
                    line     : p.start.line,
                    col      : p.start.col,
                });
                return make_node(AST_Number, self, {
                    value: +self.value
                });
            }
            return make_node(AST_UnaryPrefix, self, {
                operator: "!",
                expression: make_node(AST_Number, self, {
                    value: 1 - self.value
                })
            });
        }
        return self;
    });

    OPT(AST_Sub, function(self, compressor){
        var prop = self.property;
        if (prop instanceof AST_String && compressor.option("properties")) {
            prop = prop.getValue();
            if (RESERVED_WORDS(prop) ? compressor.option("screw_ie8") : is_identifier_string(prop)) {
                return make_node(AST_Dot, self, {
                    expression : self.expression,
                    property   : prop
                }).optimize(compressor);
            }
            var v = parseFloat(prop);
            if (!isNaN(v) && v.toString() == prop) {
                self.property = make_node(AST_Number, self.property, {
                    value: v
                });
            }
        }
        return self;
    });

    OPT(AST_Dot, function(self, compressor){
        var prop = self.property;
        if (RESERVED_WORDS(prop) && !compressor.option("screw_ie8")) {
            return make_node(AST_Sub, self, {
                expression : self.expression,
                property   : make_node(AST_String, self, {
                    value: prop
                })
            }).optimize(compressor);
        }
        return self.evaluate(compressor)[0];
    });

    function literals_in_boolean_context(self, compressor) {
        if (compressor.option("booleans") && compressor.in_boolean_context() && !self.has_side_effects(compressor)) {
            return make_node(AST_True, self);
        }
        return self;
    };
    OPT(AST_Array, literals_in_boolean_context);
    OPT(AST_Object, literals_in_boolean_context);
    OPT(AST_RegExp, literals_in_boolean_context);

})();

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

// a small wrapper around fitzgen's source-map library
function SourceMap(options) {
    options = defaults(options, {
        file : null,
        root : null,
        orig : null,

        orig_line_diff : 0,
        dest_line_diff : 0,
    });
    var orig_map = options.orig && new MOZ_SourceMap.SourceMapConsumer(options.orig);
    var generator;
    if (orig_map) {
      generator = MOZ_SourceMap.SourceMapGenerator.fromSourceMap(orig_map);
    } else {
        generator = new MOZ_SourceMap.SourceMapGenerator({
            file       : options.file,
            sourceRoot : options.root
        });
    }
    function add(source, gen_line, gen_col, orig_line, orig_col, name) {
        if (orig_map) {
            var info = orig_map.originalPositionFor({
                line: orig_line,
                column: orig_col
            });
            if (info.source === null) {
                return;
            }
            source = info.source;
            orig_line = info.line;
            orig_col = info.column;
            name = info.name || name;
        }
        generator.addMapping({
            generated : { line: gen_line + options.dest_line_diff, column: gen_col },
            original  : { line: orig_line + options.orig_line_diff, column: orig_col },
            source    : source,
            name      : name
        });
    }
    return {
        add        : add,
        get        : function() { return generator },
        toString   : function() { return JSON.stringify(generator.toJSON()); }
    };
};

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

(function(){

    var MOZ_TO_ME = {
        ExpressionStatement: function(M) {
            var expr = M.expression;
            if (expr.type === "Literal" && typeof expr.value === "string") {
                return new AST_Directive({
                    start: my_start_token(M),
                    end: my_end_token(M),
                    value: expr.value
                });
            }
            return new AST_SimpleStatement({
                start: my_start_token(M),
                end: my_end_token(M),
                body: from_moz(expr)
            });
        },
        TryStatement: function(M) {
            var handlers = M.handlers || [M.handler];
            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {
                throw new Error("Multiple catch clauses are not supported.");
            }
            return new AST_Try({
                start    : my_start_token(M),
                end      : my_end_token(M),
                body     : from_moz(M.block).body,
                bcatch   : from_moz(handlers[0]),
                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null
            });
        },
        Property: function(M) {
            var key = M.key;
            var name = key.type == "Identifier" ? key.name : key.value;
            var args = {
                start    : my_start_token(key),
                end      : my_end_token(M.value),
                key      : name,
                value    : from_moz(M.value)
            };
            switch (M.kind) {
              case "init":
                return new AST_ObjectKeyVal(args);
              case "set":
                args.value.name = from_moz(key);
                return new AST_ObjectSetter(args);
              case "get":
                args.value.name = from_moz(key);
                return new AST_ObjectGetter(args);
            }
        },
        ObjectExpression: function(M) {
            return new AST_Object({
                start      : my_start_token(M),
                end        : my_end_token(M),
                properties : M.properties.map(function(prop){
                    prop.type = "Property";
                    return from_moz(prop)
                })
            });
        },
        SequenceExpression: function(M) {
            return AST_Seq.from_array(M.expressions.map(from_moz));
        },
        MemberExpression: function(M) {
            return new (M.computed ? AST_Sub : AST_Dot)({
                start      : my_start_token(M),
                end        : my_end_token(M),
                property   : M.computed ? from_moz(M.property) : M.property.name,
                expression : from_moz(M.object)
            });
        },
        SwitchCase: function(M) {
            return new (M.test ? AST_Case : AST_Default)({
                start      : my_start_token(M),
                end        : my_end_token(M),
                expression : from_moz(M.test),
                body       : M.consequent.map(from_moz)
            });
        },
        VariableDeclaration: function(M) {
            return new (M.kind === "const" ? AST_Const : AST_Var)({
                start       : my_start_token(M),
                end         : my_end_token(M),
                definitions : M.declarations.map(from_moz)
            });
        },
        Literal: function(M) {
            var val = M.value, args = {
                start  : my_start_token(M),
                end    : my_end_token(M)
            };
            if (val === null) return new AST_Null(args);
            switch (typeof val) {
              case "string":
                args.value = val;
                return new AST_String(args);
              case "number":
                args.value = val;
                return new AST_Number(args);
              case "boolean":
                return new (val ? AST_True : AST_False)(args);
              default:
                args.value = val;
                return new AST_RegExp(args);
            }
        },
        Identifier: function(M) {
            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];
            return new (  p.type == "LabeledStatement" ? AST_Label
                        : p.type == "VariableDeclarator" && p.id === M ? (p.kind == "const" ? AST_SymbolConst : AST_SymbolVar)
                        : p.type == "FunctionExpression" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)
                        : p.type == "FunctionDeclaration" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)
                        : p.type == "CatchClause" ? AST_SymbolCatch
                        : p.type == "BreakStatement" || p.type == "ContinueStatement" ? AST_LabelRef
                        : AST_SymbolRef)({
                            start : my_start_token(M),
                            end   : my_end_token(M),
                            name  : M.name
                        });
        }
    };

    MOZ_TO_ME.UpdateExpression =
    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {
        var prefix = "prefix" in M ? M.prefix
            : M.type == "UnaryExpression" ? true : false;
        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({
            start      : my_start_token(M),
            end        : my_end_token(M),
            operator   : M.operator,
            expression : from_moz(M.argument)
        });
    };

    map("Program", AST_Toplevel, "body@body");
    map("EmptyStatement", AST_EmptyStatement);
    map("BlockStatement", AST_BlockStatement, "body@body");
    map("IfStatement", AST_If, "test>condition, consequent>body, alternate>alternative");
    map("LabeledStatement", AST_LabeledStatement, "label>label, body>body");
    map("BreakStatement", AST_Break, "label>label");
    map("ContinueStatement", AST_Continue, "label>label");
    map("WithStatement", AST_With, "object>expression, body>body");
    map("SwitchStatement", AST_Switch, "discriminant>expression, cases@body");
    map("ReturnStatement", AST_Return, "argument>value");
    map("ThrowStatement", AST_Throw, "argument>value");
    map("WhileStatement", AST_While, "test>condition, body>body");
    map("DoWhileStatement", AST_Do, "test>condition, body>body");
    map("ForStatement", AST_For, "init>init, test>condition, update>step, body>body");
    map("ForInStatement", AST_ForIn, "left>init, right>object, body>body");
    map("DebuggerStatement", AST_Debugger);
    map("FunctionDeclaration", AST_Defun, "id>name, params@argnames, body%body");
    map("VariableDeclarator", AST_VarDef, "id>name, init>value");
    map("CatchClause", AST_Catch, "param>argname, body%body");

    map("ThisExpression", AST_This);
    map("ArrayExpression", AST_Array, "elements@elements");
    map("FunctionExpression", AST_Function, "id>name, params@argnames, body%body");
    map("BinaryExpression", AST_Binary, "operator=operator, left>left, right>right");
    map("LogicalExpression", AST_Binary, "operator=operator, left>left, right>right");
    map("AssignmentExpression", AST_Assign, "operator=operator, left>left, right>right");
    map("ConditionalExpression", AST_Conditional, "test>condition, consequent>consequent, alternate>alternative");
    map("NewExpression", AST_New, "callee>expression, arguments@args");
    map("CallExpression", AST_Call, "callee>expression, arguments@args");

    def_to_moz(AST_Directive, function To_Moz_Directive(M) {
        return {
            type: "ExpressionStatement",
            expression: {
                type: "Literal",
                value: M.value
            }
        };
    });

    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {
        return {
            type: "ExpressionStatement",
            expression: to_moz(M.body)
        };
    });

    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {
        return {
            type: "SwitchCase",
            test: to_moz(M.expression),
            consequent: M.body.map(to_moz)
        };
    });

    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {
        return {
            type: "TryStatement",
            block: to_moz_block(M),
            handler: to_moz(M.bcatch),
            guardedHandlers: [],
            finalizer: to_moz(M.bfinally)
        };
    });

    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {
        return {
            type: "CatchClause",
            param: to_moz(M.argname),
            guard: null,
            body: to_moz_block(M)
        };
    });

    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {
        return {
            type: "VariableDeclaration",
            kind: M instanceof AST_Const ? "const" : "var",
            declarations: M.definitions.map(to_moz)
        };
    });

    def_to_moz(AST_Seq, function To_Moz_SequenceExpression(M) {
        return {
            type: "SequenceExpression",
            expressions: M.to_array().map(to_moz)
        };
    });

    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {
        var isComputed = M instanceof AST_Sub;
        return {
            type: "MemberExpression",
            object: to_moz(M.expression),
            computed: isComputed,
            property: isComputed ? to_moz(M.property) : {type: "Identifier", name: M.property}
        };
    });

    def_to_moz(AST_Unary, function To_Moz_Unary(M) {
        return {
            type: M.operator == "++" || M.operator == "--" ? "UpdateExpression" : "UnaryExpression",
            operator: M.operator,
            prefix: M instanceof AST_UnaryPrefix,
            argument: to_moz(M.expression)
        };
    });

    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {
        return {
            type: M.operator == "&&" || M.operator == "||" ? "LogicalExpression" : "BinaryExpression",
            left: to_moz(M.left),
            operator: M.operator,
            right: to_moz(M.right)
        };
    });

    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {
        return {
            type: "ObjectExpression",
            properties: M.properties.map(to_moz)
        };
    });

    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M) {
        var key = (
            is_identifier(M.key)
            ? {type: "Identifier", name: M.key}
            : {type: "Literal", value: M.key}
        );
        var kind;
        if (M instanceof AST_ObjectKeyVal) {
            kind = "init";
        } else
        if (M instanceof AST_ObjectGetter) {
            kind = "get";
        } else
        if (M instanceof AST_ObjectSetter) {
            kind = "set";
        }
        return {
            type: "Property",
            kind: kind,
            key: key,
            value: to_moz(M.value)
        };
    });

    def_to_moz(AST_Symbol, function To_Moz_Identifier(M) {
        var def = M.definition();
        return {
            type: "Identifier",
            name: def ? def.mangled_name || def.name : M.name
        };
    });

    def_to_moz(AST_Constant, function To_Moz_Literal(M) {
        var value = M.value;
        if (typeof value === 'number' && (value < 0 || (value === 0 && 1 / value < 0))) {
            return {
                type: "UnaryExpression",
                operator: "-",
                prefix: true,
                argument: {
                    type: "Literal",
                    value: -value
                }
            };
        }
        return {
            type: "Literal",
            value: value
        };
    });

    def_to_moz(AST_Atom, function To_Moz_Atom(M) {
        return {
            type: "Identifier",
            name: String(M.value)
        };
    });

    AST_Boolean.DEFMETHOD("to_mozilla_ast", AST_Constant.prototype.to_mozilla_ast);
    AST_Null.DEFMETHOD("to_mozilla_ast", AST_Constant.prototype.to_mozilla_ast);
    AST_Hole.DEFMETHOD("to_mozilla_ast", function To_Moz_ArrayHole() { return null });

    AST_Block.DEFMETHOD("to_mozilla_ast", AST_BlockStatement.prototype.to_mozilla_ast);
    AST_Lambda.DEFMETHOD("to_mozilla_ast", AST_Function.prototype.to_mozilla_ast);

    /* -----[ tools ]----- */

    function my_start_token(moznode) {
        var loc = moznode.loc, start = loc && loc.start;
        var range = moznode.range;
        return new AST_Token({
            file    : loc && loc.source,
            line    : start && start.line,
            col     : start && start.column,
            pos     : range ? range[0] : moznode.start,
            endline : start && start.line,
            endcol  : start && start.column,
            endpos  : range ? range[0] : moznode.start
        });
    };

    function my_end_token(moznode) {
        var loc = moznode.loc, end = loc && loc.end;
        var range = moznode.range;
        return new AST_Token({
            file    : loc && loc.source,
            line    : end && end.line,
            col     : end && end.column,
            pos     : range ? range[1] : moznode.end,
            endline : end && end.line,
            endcol  : end && end.column,
            endpos  : range ? range[1] : moznode.end
        });
    };

    function map(moztype, mytype, propmap) {
        var moz_to_me = "function From_Moz_" + moztype + "(M){\n";
        moz_to_me += "return new " + mytype.name + "({\n" +
            "start: my_start_token(M),\n" +
            "end: my_end_token(M)";

        var me_to_moz = "function To_Moz_" + moztype + "(M){\n";
        me_to_moz += "return {\n" +
            "type: " + JSON.stringify(moztype);

        if (propmap) propmap.split(/\s*,\s*/).forEach(function(prop){
            var m = /([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(prop);
            if (!m) throw new Error("Can't understand property map: " + prop);
            var moz = m[1], how = m[2], my = m[3];
            moz_to_me += ",\n" + my + ": ";
            me_to_moz += ",\n" + moz + ": ";
            switch (how) {
                case "@":
                    moz_to_me += "M." + moz + ".map(from_moz)";
                    me_to_moz += "M." +  my + ".map(to_moz)";
                    break;
                case ">":
                    moz_to_me += "from_moz(M." + moz + ")";
                    me_to_moz += "to_moz(M." + my + ")";
                    break;
                case "=":
                    moz_to_me += "M." + moz;
                    me_to_moz += "M." + my;
                    break;
                case "%":
                    moz_to_me += "from_moz(M." + moz + ").body";
                    me_to_moz += "to_moz_block(M)";
                    break;
                default:
                    throw new Error("Can't understand operator in propmap: " + prop);
            }
        });

        moz_to_me += "\n})\n}";
        me_to_moz += "\n}\n}";

        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });
        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });
        //console.log(moz_to_me);

        moz_to_me = new Function("my_start_token", "my_end_token", "from_moz", "return(" + moz_to_me + ")")(
            my_start_token, my_end_token, from_moz
        );
        me_to_moz = new Function("to_moz", "to_moz_block", "return(" + me_to_moz + ")")(
            to_moz, to_moz_block
        );
        MOZ_TO_ME[moztype] = moz_to_me;
        def_to_moz(mytype, me_to_moz);
    };

    var FROM_MOZ_STACK = null;

    function from_moz(node) {
        FROM_MOZ_STACK.push(node);
        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;
        FROM_MOZ_STACK.pop();
        return ret;
    };

    AST_Node.from_mozilla_ast = function(node){
        var save_stack = FROM_MOZ_STACK;
        FROM_MOZ_STACK = [];
        var ast = from_moz(node);
        FROM_MOZ_STACK = save_stack;
        return ast;
    };

    function set_moz_loc(mynode, moznode, myparent) {
        var start = mynode.start;
        var end = mynode.end;
        if (start.pos != null && end.endpos != null) {
            moznode.range = [start.pos, end.endpos];
        }
        if (start.line) {
            moznode.loc = {
                start: {line: start.line, column: start.col},
                end: end.endline ? {line: end.endline, column: end.endcol} : null
            };
            if (start.file) {
                moznode.loc.source = start.file;
            }
        }
        return moznode;
    };

    function def_to_moz(mytype, handler) {
        mytype.DEFMETHOD("to_mozilla_ast", function() {
            return set_moz_loc(this, handler(this));
        });
    };

    function to_moz(node) {
        return node != null ? node.to_mozilla_ast() : null;
    };

    function to_moz_block(node) {
        return {
            type: "BlockStatement",
            body: node.body.map(to_moz)
        };
    };

})();

/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function find_builtins() {
    var a = [];
    [ Object, Array, Function, Number,
      String, Boolean, Error, Math,
      Date, RegExp
    ].forEach(function(ctor){
        Object.getOwnPropertyNames(ctor).map(add);
        if (ctor.prototype) {
            Object.getOwnPropertyNames(ctor.prototype).map(add);
        }
    });
    function add(name) {
        push_uniq(a, name);
    }
    return a;
}

function mangle_properties(ast, options) {
    options = defaults(options, {
        reserved : null,
        cache : null,
        only_cache : false,
        regex : null
    });

    var reserved = options.reserved;
    if (reserved == null)
        reserved = find_builtins();

    var cache = options.cache;
    if (cache == null) {
        cache = {
            cname: -1,
            props: new Dictionary()
        };
    }

    var regex = options.regex;

    var names_to_mangle = [];

    // step 1: find candidates to mangle
    ast.walk(new TreeWalker(function(node){
        if (node instanceof AST_ObjectKeyVal) {
            add(node.key);
        }
        else if (node instanceof AST_ObjectProperty) {
            // setter or getter, since KeyVal is handled above
            add(node.key.name);
        }
        else if (node instanceof AST_Dot) {
            if (this.parent() instanceof AST_Assign) {
                add(node.property);
            }
        }
        else if (node instanceof AST_Sub) {
            if (this.parent() instanceof AST_Assign) {
                addStrings(node.property);
            }
        }
    }));

    // step 2: transform the tree, renaming properties
    return ast.transform(new TreeTransformer(function(node){
        if (node instanceof AST_ObjectKeyVal) {
            if (should_mangle(node.key)) {
                node.key = mangle(node.key);
            }
        }
        else if (node instanceof AST_ObjectProperty) {
            // setter or getter
            if (should_mangle(node.key.name)) {
                node.key.name = mangle(node.key.name);
            }
        }
        else if (node instanceof AST_Dot) {
            if (should_mangle(node.property)) {
                node.property = mangle(node.property);
            }
        }
        else if (node instanceof AST_Sub) {
            node.property = mangleStrings(node.property);
        }
        // else if (node instanceof AST_String) {
        //     if (should_mangle(node.value)) {
        //         AST_Node.warn(
        //             "Found \"{prop}\" property candidate for mangling in an arbitrary string [{file}:{line},{col}]", {
        //                 file : node.start.file,
        //                 line : node.start.line,
        //                 col  : node.start.col,
        //                 prop : node.value
        //             }
        //         );
        //     }
        // }
    }));

    // only function declarations after this line

    function can_mangle(name) {
        if (reserved.indexOf(name) >= 0) return false;
        if (options.only_cache) {
            return cache.props.has(name);
        }
        if (/^[0-9.]+$/.test(name)) return false;
        return true;
    }

    function should_mangle(name) {
        if (regex && !regex.test(name)) return false;
        if (reserved.indexOf(name) >= 0) return false;
        return cache.props.has(name)
            || names_to_mangle.indexOf(name) >= 0;
    }

    function add(name) {
        if (can_mangle(name))
            push_uniq(names_to_mangle, name);
    }

    function mangle(name) {
        var mangled = cache.props.get(name);
        if (!mangled) {
            do {
                mangled = base54(++cache.cname);
            } while (!can_mangle(mangled));
            cache.props.set(name, mangled);
        }
        return mangled;
    }

    function addStrings(node) {
        var out = {};
        try {
            (function walk(node){
                node.walk(new TreeWalker(function(node){
                    if (node instanceof AST_Seq) {
                        walk(node.cdr);
                        return true;
                    }
                    if (node instanceof AST_String) {
                        add(node.value);
                        return true;
                    }
                    if (node instanceof AST_Conditional) {
                        walk(node.consequent);
                        walk(node.alternative);
                        return true;
                    }
                    throw out;
                }));
            })(node);
        } catch(ex) {
            if (ex !== out) throw ex;
        }
    }

    function mangleStrings(node) {
        return node.transform(new TreeTransformer(function(node){
            if (node instanceof AST_Seq) {
                node.cdr = mangleStrings(node.cdr);
            }
            else if (node instanceof AST_String) {
                if (should_mangle(node.value)) {
                    node.value = mangle(node.value);
                }
            }
            else if (node instanceof AST_Conditional) {
                node.consequent = mangleStrings(node.consequent);
                node.alternative = mangleStrings(node.alternative);
            }
            return node;
        }));
    }

}


exports.sys = sys;
exports.MOZ_SourceMap = MOZ_SourceMap;
exports.UglifyJS = UglifyJS;
exports.array_to_hash = array_to_hash;
exports.slice = slice;
exports.characters = characters;
exports.member = member;
exports.find_if = find_if;
exports.repeat_string = repeat_string;
exports.DefaultsError = DefaultsError;
exports.defaults = defaults;
exports.merge = merge;
exports.noop = noop;
exports.MAP = MAP;
exports.push_uniq = push_uniq;
exports.string_template = string_template;
exports.remove = remove;
exports.mergeSort = mergeSort;
exports.set_difference = set_difference;
exports.set_intersection = set_intersection;
exports.makePredicate = makePredicate;
exports.all = all;
exports.Dictionary = Dictionary;
exports.DEFNODE = DEFNODE;
exports.AST_Token = AST_Token;
exports.AST_Node = AST_Node;
exports.AST_Statement = AST_Statement;
exports.AST_Debugger = AST_Debugger;
exports.AST_Directive = AST_Directive;
exports.AST_SimpleStatement = AST_SimpleStatement;
exports.walk_body = walk_body;
exports.AST_Block = AST_Block;
exports.AST_BlockStatement = AST_BlockStatement;
exports.AST_EmptyStatement = AST_EmptyStatement;
exports.AST_StatementWithBody = AST_StatementWithBody;
exports.AST_LabeledStatement = AST_LabeledStatement;
exports.AST_IterationStatement = AST_IterationStatement;
exports.AST_DWLoop = AST_DWLoop;
exports.AST_Do = AST_Do;
exports.AST_While = AST_While;
exports.AST_For = AST_For;
exports.AST_ForIn = AST_ForIn;
exports.AST_With = AST_With;
exports.AST_Scope = AST_Scope;
exports.AST_Toplevel = AST_Toplevel;
exports.AST_Lambda = AST_Lambda;
exports.AST_Accessor = AST_Accessor;
exports.AST_Function = AST_Function;
exports.AST_Defun = AST_Defun;
exports.AST_Jump = AST_Jump;
exports.AST_Exit = AST_Exit;
exports.AST_Return = AST_Return;
exports.AST_Throw = AST_Throw;
exports.AST_LoopControl = AST_LoopControl;
exports.AST_Break = AST_Break;
exports.AST_Continue = AST_Continue;
exports.AST_If = AST_If;
exports.AST_Switch = AST_Switch;
exports.AST_SwitchBranch = AST_SwitchBranch;
exports.AST_Default = AST_Default;
exports.AST_Case = AST_Case;
exports.AST_Try = AST_Try;
exports.AST_Catch = AST_Catch;
exports.AST_Finally = AST_Finally;
exports.AST_Definitions = AST_Definitions;
exports.AST_Var = AST_Var;
exports.AST_Const = AST_Const;
exports.AST_VarDef = AST_VarDef;
exports.AST_Call = AST_Call;
exports.AST_New = AST_New;
exports.AST_Seq = AST_Seq;
exports.AST_PropAccess = AST_PropAccess;
exports.AST_Dot = AST_Dot;
exports.AST_Sub = AST_Sub;
exports.AST_Unary = AST_Unary;
exports.AST_UnaryPrefix = AST_UnaryPrefix;
exports.AST_UnaryPostfix = AST_UnaryPostfix;
exports.AST_Binary = AST_Binary;
exports.AST_Conditional = AST_Conditional;
exports.AST_Assign = AST_Assign;
exports.AST_Array = AST_Array;
exports.AST_Object = AST_Object;
exports.AST_ObjectProperty = AST_ObjectProperty;
exports.AST_ObjectKeyVal = AST_ObjectKeyVal;
exports.AST_ObjectSetter = AST_ObjectSetter;
exports.AST_ObjectGetter = AST_ObjectGetter;
exports.AST_Symbol = AST_Symbol;
exports.AST_SymbolAccessor = AST_SymbolAccessor;
exports.AST_SymbolDeclaration = AST_SymbolDeclaration;
exports.AST_SymbolVar = AST_SymbolVar;
exports.AST_SymbolConst = AST_SymbolConst;
exports.AST_SymbolFunarg = AST_SymbolFunarg;
exports.AST_SymbolDefun = AST_SymbolDefun;
exports.AST_SymbolLambda = AST_SymbolLambda;
exports.AST_SymbolCatch = AST_SymbolCatch;
exports.AST_Label = AST_Label;
exports.AST_SymbolRef = AST_SymbolRef;
exports.AST_LabelRef = AST_LabelRef;
exports.AST_This = AST_This;
exports.AST_Constant = AST_Constant;
exports.AST_String = AST_String;
exports.AST_Number = AST_Number;
exports.AST_RegExp = AST_RegExp;
exports.AST_Atom = AST_Atom;
exports.AST_Null = AST_Null;
exports.AST_NaN = AST_NaN;
exports.AST_Undefined = AST_Undefined;
exports.AST_Hole = AST_Hole;
exports.AST_Infinity = AST_Infinity;
exports.AST_Boolean = AST_Boolean;
exports.AST_False = AST_False;
exports.AST_True = AST_True;
exports.TreeWalker = TreeWalker;
exports.KEYWORDS = KEYWORDS;
exports.KEYWORDS_ATOM = KEYWORDS_ATOM;
exports.RESERVED_WORDS = RESERVED_WORDS;
exports.KEYWORDS_BEFORE_EXPRESSION = KEYWORDS_BEFORE_EXPRESSION;
exports.OPERATOR_CHARS = OPERATOR_CHARS;
exports.RE_HEX_NUMBER = RE_HEX_NUMBER;
exports.RE_OCT_NUMBER = RE_OCT_NUMBER;
exports.RE_DEC_NUMBER = RE_DEC_NUMBER;
exports.OPERATORS = OPERATORS;
exports.WHITESPACE_CHARS = WHITESPACE_CHARS;
exports.PUNC_BEFORE_EXPRESSION = PUNC_BEFORE_EXPRESSION;
exports.PUNC_CHARS = PUNC_CHARS;
exports.REGEXP_MODIFIERS = REGEXP_MODIFIERS;
exports.UNICODE = UNICODE;
exports.is_letter = is_letter;
exports.is_digit = is_digit;
exports.is_alphanumeric_char = is_alphanumeric_char;
exports.is_unicode_digit = is_unicode_digit;
exports.is_unicode_combining_mark = is_unicode_combining_mark;
exports.is_unicode_connector_punctuation = is_unicode_connector_punctuation;
exports.is_identifier = is_identifier;
exports.is_identifier_start = is_identifier_start;
exports.is_identifier_char = is_identifier_char;
exports.is_identifier_string = is_identifier_string;
exports.parse_js_number = parse_js_number;
exports.JS_Parse_Error = JS_Parse_Error;
exports.js_error = js_error;
exports.is_token = is_token;
exports.EX_EOF = EX_EOF;
exports.tokenizer = tokenizer;
exports.UNARY_PREFIX = UNARY_PREFIX;
exports.UNARY_POSTFIX = UNARY_POSTFIX;
exports.ASSIGNMENT = ASSIGNMENT;
exports.PRECEDENCE = PRECEDENCE;
exports.STATEMENTS_WITH_LABELS = STATEMENTS_WITH_LABELS;
exports.ATOMIC_START_TOKEN = ATOMIC_START_TOKEN;
exports.parse = parse;
exports.TreeTransformer = TreeTransformer;
exports.SymbolDef = SymbolDef;
exports.base54 = base54;
exports.OutputStream = OutputStream;
exports.Compressor = Compressor;
exports.SourceMap = SourceMap;
exports.find_builtins = find_builtins;
exports.mangle_properties = mangle_properties;

exports.AST_Node.warn_function = function (txt) { if (typeof console != "undefined" && typeof console.warn === "function") console.warn(txt) }

exports.minify = function (files, options) {
    options = UglifyJS.defaults(options, {
        spidermonkey : false,
        outSourceMap : null,
        sourceRoot   : null,
        inSourceMap  : null,
        fromString   : false,
        warnings     : false,
        mangle       : {},
        output       : null,
        compress     : {}
    });
    UglifyJS.base54.reset();

    // 1. parse
    var toplevel = null,
        sourcesContent = {};

    if (options.spidermonkey) {
        toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);
    } else {
        if (typeof files == "string")
            files = [ files ];
        files.forEach(function(file){
            var code = options.fromString
                ? file
                : fs.readFileSync(file, "utf8");
            sourcesContent[file] = code;
            toplevel = UglifyJS.parse(code, {
                filename: options.fromString ? "?" : file,
                toplevel: toplevel
            });
        });
    }

    // 2. compress
    if (options.compress) {
        var compress = { warnings: options.warnings };
        UglifyJS.merge(compress, options.compress);
        toplevel.figure_out_scope();
        var sq = UglifyJS.Compressor(compress);
        toplevel = toplevel.transform(sq);
    }

    // 3. mangle
    if (options.mangle) {
        toplevel.figure_out_scope(options.mangle);
        toplevel.compute_char_frequency(options.mangle);
        toplevel.mangle_names(options.mangle);
    }

    // 4. output
    var inMap = options.inSourceMap;
    var output = {};
    if (typeof options.inSourceMap == "string") {
        inMap = fs.readFileSync(options.inSourceMap, "utf8");
    }
    if (options.outSourceMap) {
        output.source_map = UglifyJS.SourceMap({
            file: options.outSourceMap,
            orig: inMap,
            root: options.sourceRoot
        });
        if (options.sourceMapIncludeSources) {
            for (var file in sourcesContent) {
                if (sourcesContent.hasOwnProperty(file)) {
                    output.source_map.get().setSourceContent(file, sourcesContent[file]);
                }
            }
        }

    }
    if (options.output) {
        UglifyJS.merge(output, options.output);
    }
    var stream = UglifyJS.OutputStream(output);
    toplevel.print(stream);

    if(options.outSourceMap){
        stream += "\n//# sourceMappingURL=" + options.outSourceMap;
    }

    var source_map = output.source_map;
    if (source_map) {
        source_map = source_map + "";
    }

    return {
        code : stream + "",
        map  : source_map
    };
};

exports.describe_ast = function () {
    var out = UglifyJS.OutputStream({ beautify: true });
    function doitem(ctor) {
        out.print("AST_" + ctor.TYPE);
        var props = ctor.SELF_PROPS.filter(function(prop){
            return !/^\$/.test(prop);
        });
        if (props.length > 0) {
            out.space();
            out.with_parens(function(){
                props.forEach(function(prop, i){
                    if (i) out.space();
                    out.print(prop);
                });
            });
        }
        if (ctor.documentation) {
            out.space();
            out.print_string(ctor.documentation);
        }
        if (ctor.SUBCLASSES.length > 0) {
            out.space();
            out.with_block(function(){
                ctor.SUBCLASSES.forEach(function(ctor, i){
                    out.indent();
                    doitem(ctor);
                    out.newline();
                });
            });
        }
    };
    doitem(UglifyJS.AST_Node);
    return out + "";
};
},{"source-map":155,"util":167}],165:[function(requireb,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"dup":91}],166:[function(requireb,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],167:[function(requireb,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = requireb('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = requireb('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"./support/isBuffer":166,"inherits":165}],168:[function(requireb,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],169:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Backend, CONSTANTS, Collections, FILES_PATH, Lazy, Promise, SanitizeSettings, app, attributeMap, fs, j, len, mailreader, md5, minify, realm, ref, ref1, sanitizeHtml, sleep, tag, transaction, utf7, whereIn, wrap,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  realm = requireb('./realm');

  window.Promise = Promise = requireb('bluebird');

  Promise.coroutine.addYieldHandler(function(yielded) {
    if (Array.isArray(yielded)) {
      return Promise.all(yielded);
    }
  });

  mailreader = Promise.promisifyAll(requireb('mailreader'));

  utf7 = requireb('emailjs-utf7');

  Lazy = requireb('lazy.js');

  md5 = requireb('../utils/md5');

  wrap = requireb('async-class').wrap;

  Collections = requireb('./collections');

  CONSTANTS = requireb('./constants');

  sanitizeHtml = requireb('sanitize-html');

  minify = requireb('html-minifier').minify;

  fs = require('fs');

  app = require('electron').remote.app;

  FILES_PATH = app.getPath('userData') + '/files/';

  ref = requireb('./helpers'), transaction = ref.transaction, whereIn = ref.whereIn, sleep = ref.sleep;

  var getRanges = function(c) {
  for (var f = [], d, e, b = 0;b < c.length;b++) {
    for (e = d = c[b];1 == c[b + 1] - c[b];) {
      e = c[b + 1], b++;
    }
    f.push(d == e ? d + "," : d + ":" + e + ",");
  }
  return 0 < f.length ? f.slice(0, -1) : '';
};

  SanitizeSettings = {
    allowedTags: ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "center", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "i", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "small", "source", "span", "strong", "sub", "summary", "style", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"],
    allowedAttributes: ['cellpadding', 'cellspacing', 'height', 'width', 'href', 'valign', 'align', 'alt', 'center', 'bgcolor', 'content', 'initialscale', 'maximumscale', 'user-scalable', 'abbr', 'accept', 'acceptcharset', 'accesskey', 'action', 'align', 'alt', 'async', 'autocomplete', 'axis', 'border', 'bgcolor', 'cellpadding', 'cellspacing', 'char', 'charoff', 'charset', 'checked', 'classid', 'classname', 'colspan', 'cols', 'content', 'contextmenu', 'controls', 'coords', 'data', 'datetime', 'defer', 'dir', 'disabled', 'download', 'draggable', 'enctype', 'form', 'formaction', 'formenctype', 'formmethod', 'formnovalidate', 'formtarget', 'frame', 'frameborder', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'htmlfor', 'httpequiv', 'icon', 'id', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginheight', 'marginwidth', 'max', 'maxlength', 'media', 'mediagroup', 'method', 'min', 'multiple', 'muted', 'name', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'radiogroup', 'readonly', 'rel', 'requirebd', 'role', 'rowspan', 'rows', 'rules', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected', 'shape', 'size', 'sizes', 'sortable', 'sorted', 'span', 'spellcheck', 'src', 'srcdoc', 'srcset', 'start', 'step', 'style', 'summary', 'tabindex', 'target', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wmode'],
    allowedSchemes: {
      indexOf: function(scheme) {
        return scheme !== 'file';
      }
    }
  };

  attributeMap = {};

  ref1 = SanitizeSettings.allowedTags;
  for (j = 0, len = ref1.length; j < len; j++) {
    tag = ref1[j];
    attributeMap[tag] = SanitizeSettings.allowedAttributes;
  }

  SanitizeSettings.allowedAttributes = attributeMap;

  Backend = (function() {
    function Backend(account, client) {
      this.account = account;
      this.client = client;
      this.getInlineFiles = bind(this.getInlineFiles, this);
      this.getBody = bind(this.getBody, this);
      this.streamBodyparts = bind(this.streamBodyparts, this);
      this.fileUrl = bind(this.fileUrl, this);
      this.streamFiles = bind(this.streamFiles, this);
      this.getFiles = bind(this.getFiles, this);
      this.getBodyparts = bind(this.getBodyparts, this);
      this.markMessages = bind(this.markMessages, this);
      this.wakeMessages = bind(this.wakeMessages, this);
      this.snoozeMessages = bind(this.snoozeMessages, this);
      this.purgeFolder = bind(this.purgeFolder, this);
      this.deleteMessages = bind(this.deleteMessages, this);
      this.moveMessages = bind(this.moveMessages, this);
      this.uidForSeq = bind(this.uidForSeq, this);
      this.seqForUid = bind(this.seqForUid, this);
      this.searchUids = bind(this.searchUids, this);
      this.uids = bind(this.uids, this);
      this.modseqs = bind(this.modseqs, this);
      this.fetchMessages = bind(this.fetchMessages, this);
      this.listMessages = bind(this.listMessages, this);
      this.listFolders = bind(this.listFolders, this);
      this.renameFolder = bind(this.renameFolder, this);
      this.deleteFolder = bind(this.deleteFolder, this);
      this.createFolder = bind(this.createFolder, this);
      this.status = bind(this.status, this);
      this.select = bind(this.select, this);
      this.saveDraft = bind(this.saveDraft, this);
      this.dequeueOutbox = bind(this.dequeueOutbox, this);
      this.hasCapability = bind(this.hasCapability, this);
      this.errorResponse = bind(this.errorResponse, this);
      this.close = bind(this.close, this);
      this.connect = bind(this.connect, this);
      if (process.env.NODE_ENV !== 'development') {
        this.client.logLevel = this.client.LOG_LEVEL_NONE;
      }
      this.collections = new Collections(this.account);
    }

    Backend.prototype.connect = function*() {
      var error;
      try {
        if (!navigator.onLine) {
          throw 'Not connected';
        }
        if (!this.client.connected) {
          (yield this.client.connect());
        }
        return this.client.connected = true;
      } catch (error) {
        this.client.connected = false;
        throw 'Not connected';
      }
    };

    Backend.prototype.close = function*() {
      this.client.connected = false;
      return (yield this.client.close());
    };

    Backend.prototype.errorResponse = function() {};

    Backend.prototype.hasCapability = function(capability) {
      return indexOf.call(this.client._capability, capability) >= 0;
    };

    Backend.prototype.dequeueOutbox = function() {};

    Backend.prototype.saveDraft = function() {};

    Backend.prototype.select = function*(path) {
      var exists, highestModseq, mailbox, uidNext, uidValidity;
      (yield this.connect());
      if (this.client._selectedMailbox === path) {
        return (yield this.status(path));
      }
      mailbox = (yield this.client.selectMailbox(path));
      if (mailbox.exists != null) {
        uidValidity = mailbox.uidValidity, uidNext = mailbox.uidNext, highestModseq = mailbox.highestModseq, exists = mailbox.exists;
        return {
          uidvalidity: uidValidity,
          uidnext: uidNext,
          highestmodseq: highestModseq,
          messages: exists
        };
      } else {
        return (yield this.status(path));
      }
    };

    Backend.prototype.status = function*(path, options) {
      var attribute, attributes, i, k, key, len1, ref2, resp, response, statusResponse, value;
      (yield this.connect());
      options = options || {};
      attributes = ['UIDVALIDITY', 'UIDNEXT', 'MESSAGES'];
      if (indexOf.call(this.client._capability, 'CONDSTORE') >= 0 || indexOf.call(this.client._capability, 'XYMHIGHESTMODSEQ') >= 0) {
        attributes.push('HIGHESTMODSEQ');
      }
      response = (yield this.client.exec({
        command: 'STATUS',
        attributes: [
          {
            type: 'STRING',
            value: path
          }, attributes.map((function(_this) {
            return function(attribute) {
              return {
                type: 'ATOM',
                value: attribute
              };
            };
          })(this))
        ]
      }, 'STATUS', {
        precheck: (function(_this) {
          return function(ctx) {
            if (_this.client._selectedMailbox === path) {
              return Promise.resolve();
            } else {
              return _this.client.selectMailbox(path, {
                ctx: ctx
              });
            }
          };
        })(this)
      }));
      if (!(response != null ? response.payload : void 0)) {
        return;
      }
      statusResponse = response.payload.STATUS[0] || [];
      resp = {};
      ref2 = statusResponse.attributes[1];
      for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
        attribute = ref2[i];
        if (i % 2 !== 0) {
          key = statusResponse.attributes[1][i - 1].value.toLowerCase();
          value = attribute.value;
          switch (key) {
            case 'uidvalidity':
              value = Number(value) || 0;
              break;
            case 'uidnext':
              value = Number(value) || 0;
              break;
            case 'highestmodseq':
              value = value || '0';
              break;
            case 'messages':
              value = Number(value) || 0;
          }
          resp[key] = value;
        }
      }
      return resp;
    };

    Backend.prototype.createFolder = function*(name, path) {
      var folder, highestModseq, ref2, ref3, uidNext, uidValidity;
      folder = realm.objects('Folder').filtered('path == $0 && account == $1', path, this.account).find(function() {
        return true;
      });
      if ((ref2 = folder[0]) != null ? ref2.isValid() : void 0) {
        throw 'Folder already exists';
      }
      (yield this.client.createMailbox(path));
      ref3 = (yield this.client.selectMailbox(path, {
        readOnly: true,
        condstore: true
      })), uidNext = ref3.uidNext, uidValidity = ref3.uidValidity, highestModseq = ref3.highestModseq;
      return transaction(null, (function(_this) {
        return function() {
          return realm.create('Folder', {
            type: CONSTANTS.FOLDER.OTHER,
            path: path,
            name: name,
            uidNext: uidNext,
            uidValidity: uidValidity,
            highestModseq: highestModseq,
            firstSync: true,
            account: _this.account
          });
        };
      })(this));
    };

    Backend.prototype.deleteFolder = function*(path) {
      var folder, ref2;
      (yield this.connect());
      folder = this.collections.folders().filtered('path == $0', path).snapshot();
      if ((ref2 = folder[0]) != null ? ref2.isValid() : void 0) {
        folder = folder[0];
      } else {
        throw 'Folder does not exist.';
      }
      (yield this.client.exec({
        command: 'DELETE',
        attributes: [utf7.imap.encode(folder.path)]
      }, 'DELETE', {})["catch"]((function(_this) {
        return function(err) {
          if (err && err.code === 'NONEXISTENT') {
            return;
          }
          throw err;
        };
      })(this)));
      return transaction(null, function() {
        return realm["delete"](folder);
      });
    };

    Backend.prototype.renameFolder = function*(path, newPath) {
      var folder, ref2;
      (yield this.connect());
      folder = this.collections.folders().filtered('path == $0', path).snapshot();
      if ((ref2 = folder[0]) != null ? ref2.isValid() : void 0) {
        folder = folder[0];
      } else {
        throw 'Folder does not exist.';
      }
      (yield this.client.exec({
        command: 'RENAME',
        attributes: [utf7.imap.encode(path), utf7.imap.encode(newPath)]
      }, 'RENAME', {})["catch"]((function(_this) {
        return function(err) {
          if (err && err.code === 'ALREADYEXISTS') {
            return;
          }
          throw err;
        };
      })(this)));
      return transaction(null, function() {
        return folder.path = newPath;
      });
    };

    Backend.prototype.listFolders = function*() {
      var existingPaths, folders, format, ignore, k, len1, path, removed, root, serverPaths, specialUses;
      (yield this.connect());
      root = (yield this.client.listMailboxes());
      existingPaths = this.collections.folders().snapshot().map(function(arg) {
        var path;
        path = arg.path;
        return path;
      });
      specialUses = {
        '\\Trash': CONSTANTS.FOLDER.TRASH,
        '\\Sent': CONSTANTS.FOLDER.SENT,
        '\\Drafts': CONSTANTS.FOLDER.DRAFTS,
        '\\Archive': CONSTANTS.FOLDER.ARCHIVE,
        '\\All': CONSTANTS.FOLDER.ARCHIVE
      };
      ignore = ['\\Junk', '\\Flagged'];
      serverPaths = [];
      folders = [];
      format = (function(_this) {
        return function(mailboxes) {
          return Promise.map(mailboxes, function(arg) {
            var children, delimiter, flags, listed, name, path, specialUse, subscribed;
            specialUse = arg.specialUse, subscribed = arg.subscribed, listed = arg.listed, path = arg.path, name = arg.name, delimiter = arg.delimiter, children = arg.children, flags = arg.flags;
            return Promise.coroutine(function*() {
              var folder, hierarchy;
              if (children.length > 0) {
                (yield format(children));
              }
              if (((specialUse == null) || indexOf.call(ignore, specialUse) < 0) && subscribed && listed && indexOf.call(existingPaths, path) < 0 && path !== '[Gmail]/Important' && path !== '[Gmail]/Starred' && !(indexOf.call(flags, '\\Noselect') >= 0 || indexOf.call(flags, '\\NoSelect') >= 0 || indexOf.call(flags, '\\NonExistent') >= 0)) {
                hierarchy = path.split(delimiter) || [];
                if (specialUse === '\\All') {
                  if (path !== '[Gmail]/All Mail') {
                    return;
                  }
                  if (!_this.hasCapability('X-GM-EXT-1')) {
                    return;
                  }
                  hierarchy = ['Archive'];
                }
                folder = {
                  name: hierarchy[hierarchy.length - 1],
                  parent: hierarchy.length > 1 ? hierarchy.slice(0, hierarchy.length - 1).join(delimiter) : null,
                  type: name.toUpperCase() === 'INBOX' ? CONSTANTS.FOLDER.INBOX : specialUses[specialUse] || CONSTANTS.FOLDER.OTHER,
                  path: path,
                  account: _this.collections.account
                };
                folders.push(folder);
              }
              return serverPaths.push(path);
            })();
          });
        };
      })(this);
      removed = [];
      (yield format(root.children));
      for (k = 0, len1 = existingPaths.length; k < len1; k++) {
        path = existingPaths[k];
        if (indexOf.call(serverPaths, path) < 0) {
          removed.push(path);
        }
      }
      return transaction(null, (function(_this) {
        return function() {
          var folder, len2, m;
          for (m = 0, len2 = folders.length; m < len2; m++) {
            folder = folders[m];
            realm.create('Folder', folder);
          }
          if (removed.length > 0) {
            return realm["delete"](_this.collections.folders().filtered(whereIn('path', removed)));
          }
        };
      })(this));
    };

    Backend.prototype.listMessages = function*(arg, attributes) {
      var byUid, path, sequence;
      path = arg.path, sequence = arg.sequence, byUid = arg.byUid;
      (yield this.connect());
      return (yield this.client.listMessages(path, sequence, attributes, {
        byUid: byUid
      }));
    };

    Backend.prototype.labelResolver = function(labels, type) {
      var k, label, len1, level, resolvedTo;
      resolvedTo = null;
      level = 5;
      for (k = 0, len1 = labels.length; k < len1; k++) {
        label = labels[k];
        if (label === '\\Sent' || type === CONSTANTS.FOLDER['SENT']) {
          if ((resolvedTo == null) || 1 < level) {
            resolvedTo = CONSTANTS.FOLDER['SENT'];
            level = 1;
            break;
          }
        } else if (label === '\\Draft' || type === CONSTANTS.FOLDER['DRAFTS']) {
          if ((resolvedTo == null) || 2 < level) {
            resolvedTo = CONSTANTS.FOLDER['DRAFTS'];
            level = 2;
          }
        }

        /*
        else if label is '\\Inbox'
          if not resolvedTo? or 3 < level
            resolvedTo = CONSTANTS.FOLDER['INBOX']
            level = 3
         */
      }
      return resolvedTo;
    };

    Backend.prototype.fetchMessages = function*(options, type) {
      var boundOn, doesBound, messages, query;
      query = ['uid', 'flags', 'envelope', 'internaldate', 'bodystructure', 'body.peek[header.fields (references)]', 'body.peek[header.fields (list-unsubscribe)]'];
      if (this.hasCapability('X-GM-EXT-1')) {
        query.push('X-GM-LABELS');
      }
      messages = (yield this.listMessages(options, query));
      boundOn = options.byUid ? 'uid' : '#';
      doesBound = function() {
        return true;
      };
      if ((options.bounds.low != null) && (options.bounds.high != null)) {
        doesBound = function(message) {
          return message[boundOn] >= options.bounds.low && message['uid'] < options.bounds.high;
        };
      } else if (options.bounds.low != null) {
        doesBound = function(message) {
          return message[boundOn] >= options.bounds.low;
        };
      } else if (options.bounds.high != null) {
        doesBound = function(message) {
          return message['uid'] < options.bounds.high;
        };
      }
      return Lazy(messages).filter(function(message) {
        return !!message.uid && doesBound(message);
      }).map((function(_this) {
        return function(message) {
          var desktop, flag, flags, k, label, labels, len1, mobile, references, resolveDate, snoozeTimestamp, snoozedTo, unread, unsubscribe;
          labels = message['x-gm-labels'] || [];
          label = _this.labelResolver(labels, type);
          references = (message['body[header.fields (references)]'] || '').replace(/^references:\s*/i, '').trim();
          unsubscribe = (message['body[header.fields (list-unsubscribe)]'] || '').toLowerCase().replace(/^list-unsubscribe:\s*/i, '').trim();
          flags = message.flags || [];
          unread = true;
          snoozedTo = null;
          for (k = 0, len1 = flags.length; k < len1; k++) {
            flag = flags[k];
            if (flag === '\\Seen') {
              unread = false;
            } else if (flag.indexOf('DMSZ') === 0) {
              mobile = false;
              desktop = false;
              if (flag[4] === 'M') {
                mobile = true;
              } else if (flag[4] === 'D') {
                desktop = true;
              }
              snoozeTimestamp = parseInt(flag.replace(/\D+/g, '')) || 0;
              if ((snoozedTo == null) || snoozeTimestamp > snoozedTo) {
                snoozedTo = new Date(snoozeTimestamp);
              }
            }
          }
          resolveDate = function(sentDate, internalDate) {
            var d;
            d = null;
            if (sentDate) {
              d = new Date(sentDate);
            }
            if (!d || !d.getTime()) {
              d = new Date(internalDate);
            }
            return d;
          };
          return {
            uid: message.uid,
            id: (message.envelope['message-id'] || '').replace(/[<>]/g, ''),
            from: message.envelope.from || [],
            replyTo: message.envelope['reply-to'] || [],
            to: message.envelope.to || [],
            cc: message.envelope.cc || [],
            bcc: message.envelope.bcc || [],
            subject: message.envelope.subject || '(no subject)',
            sentDate: resolveDate(message.envelope.date, message.internaldate),
            unread: unread,
            snoozedTo: snoozedTo,
            bodystructure: message.bodystructure,
            references: references != null ? references.split(/\s+/).map(function(reference) {
              return reference.replace(/[<>]/g, '');
            }) : [],
            unsubscribe: unsubscribe != null ? unsubscribe.split(/\s+/).map(function(unsubscribe) {
              return unsubscribe.replace(/[<>]/g, '');
            })[0] : null,
            label: label,
            inReplyTo: message.envelope['in-reply-to']
          };
        };
      })(this)).toArray();
    };

    Backend.prototype.modseqs = function*(arg, sequence) {
      var highestmodseq, path;
      path = arg.path, highestmodseq = arg.highestmodseq;
      (yield this.connect());
      return (yield this.client.listMessages(path, sequence, ['uid', 'flags', 'modseq'], {
        byUid: true,
        changedSince: highestmodseq
      }));
    };

    Backend.prototype.uids = function*(path, query) {
      (yield this.connect());
      return (yield this.client.search(path, query, {
        byUid: true
      }));
    };

    Backend.prototype.searchUids = function*(path, query) {
      return (yield this.uids(path, {
        text: query
      }));
    };

    Backend.prototype.seqForUid = function*(path, uid) {
      var messages;
      (yield this.connect());
      messages = (yield this.client.listMessages(path, uid, ['uid'], {
        byUid: true
      }));
      if (messages.length === 0) {
        throw 'Doesn\'t exist';
      }
      return messages[0]['#'];
    };

    Backend.prototype.uidForSeq = function*(path, seq) {
      var messages;
      (yield this.connect());
      messages = (yield this.client.listMessages(path, seq, ['uid']));
      if (messages.length === 0) {
        throw 'Doesn\'t exist';
      }
      return messages[0]['uid'];
    };

    Backend.prototype.moveMessages = function*(path, uids, target) {
      var batch;
      (yield this.connect());
      batch = uids;
      return (yield this.client.moveMessages(path, batch.join(','), target, {
        byUid: true
      }));
    };

    Backend.prototype.deleteMessages = function*(path, uids) {
      var batch;
      (yield this.connect());
      batch = uids;
      return (yield this.client.deleteMessages(path, batch.join(','), {
        byUid: true
      }));
    };

    Backend.prototype.purgeFolder = function*(path) {
      (yield this.connect());
      return (yield this.client.deleteMessages(path, '1:*'));
    };

    Backend.prototype.snoozeMessages = function*(path, uids, timestamp, target) {
      var batch, flag, sequence;
      (yield this.connect());
      batch = uids;
      flag = 'DMSZ';
      if (target != null) {
        flag += target;
      }
      flag += timestamp;
      sequence = batch.join(',');
      return (yield this.client.setFlags(path, sequence, {
        set: [flag, 'DMSZ']
      }, {
        byUid: true,
        silent: true
      }));
    };

    Backend.prototype.wakeMessages = function*(path, flags) {
      (yield this.connect());
      return (yield this.client.setFlags(path, '1:*', {
        remove: slice.call(flags).concat(['DMSZ'])
      }, {
        byUid: true,
        silent: true
      }));
    };

    Backend.prototype.markMessages = function*(path, uids, unread) {
      var batch;
      (yield this.connect());
      batch = uids;
      if (unread) {
        return (yield this.client.setFlags(path, batch.join(','), {
          remove: ['\\Seen']
        }, {
          byUid: true,
          silent: true
        }));
      } else {
        return (yield this.client.setFlags(path, batch.join(','), {
          set: ['\\Seen']
        }, {
          byUid: true,
          silent: true
        }));
      }
    };

    Backend.prototype.getBodyparts = function*(uid, path) {
      var bodyParts, bodystructure, files, matches, walkBodyPart;
      (yield this.connect());
      matches = (yield this.client.listMessages(path, uid, ['bodystructure'], {
        byUid: true
      }));
      if (matches.length === 0) {
        throw 'Server error.';
      }
      bodystructure = matches[0].bodystructure;
      if (bodystructure == null) {
        throw 'Server error.';
      }
      bodyParts = [];
      files = [];
      walkBodyPart = function(arg) {
        var child, childNodes, contentId, dispParams, disposition, dispositionParameters, filename, id, k, len1, parameters, params, part, pushFile, size, type;
        type = arg.type, part = arg.part, parameters = arg.parameters, disposition = arg.disposition, dispositionParameters = arg.dispositionParameters, size = arg.size, contentId = arg.contentId, childNodes = arg.childNodes;
        if (type == null) {
          return;
        }
        if (/^multipart\//i.test(type)) {
          if (childNodes && Array.isArray(childNodes)) {
            for (k = 0, len1 = childNodes.length; k < len1; k++) {
              child = childNodes[k];
              walkBodyPart(child);
            }
          }
          return;
        }
        params = parameters;
        dispParams = dispositionParameters;
        id = contentId;
        if (/^text\/plain/i.test(type) && disposition !== 'attachment') {
          return bodyParts.push({
            type: 'text',
            partNumber: part || 1
          });
        }
        if (/^text\/html/i.test(type) && disposition !== 'attachment') {
          return bodyParts.push({
            type: 'html',
            partNumber: part || 1
          });
        }
        filename = null;
        if (dispParams && dispParams.filename) {
          filename = dispParams.filename;
        } else if (params && params.name) {
          filename = params.name;
        }
        if ((filename != null) && filename.replace(/\s+/g, ' ').trim() === '') {
          filename = null;
        }
        if ((disposition !== 'inline' && disposition !== 'attachment') && (disposition != null)) {
          return;
        }
        pushFile = function() {
          return files.push({
            partNumber: part || '',
            mimeType: type || 'application/octet-stream',
            contentId: id ? id.replace(/[<>]/g, '') : void 0,
            size: parseInt(size) || null,
            filename: filename
          });
        };
        if (disposition === 'attachment') {
          return pushFile();
        }
        if (disposition === 'inline' && !(filename && id)) {
          bodyParts.push({
            type: 'inline',
            partNumber: part || ''
          });
        }
        return pushFile();
      };
      walkBodyPart(bodystructure);
      return {
        bodyParts: bodyParts,
        files: files
      };
    };

    Backend.prototype.getFiles = function(bodystructure, message) {
      var files, walkBodyPart;
      if (bodystructure == null) {
        return [];
      }
      files = [];
      walkBodyPart = function(arg) {
        var child, childNodes, dispParams, disposition, dispositionParameters, filename, id, k, len1, parameters, params, part, pushFile, size, type;
        type = arg.type, part = arg.part, parameters = arg.parameters, disposition = arg.disposition, dispositionParameters = arg.dispositionParameters, size = arg.size, id = arg.id, childNodes = arg.childNodes;
        if (type == null) {
          return;
        }
        if (/^multipart\//i.test(type)) {
          if (childNodes && Array.isArray(childNodes)) {
            for (k = 0, len1 = childNodes.length; k < len1; k++) {
              child = childNodes[k];
              walkBodyPart(child);
            }
          }
          return;
        }
        params = parameters;
        dispParams = dispositionParameters;
        filename = null;
        if (dispParams && dispParams.filename) {
          filename = dispParams.filename;
        } else if (params && params.name) {
          filename = params.name;
        }
        if (/^text\/plain/i.test(type) && disposition !== 'attachment') {
          return;
        }
        if (/^text\/html/i.test(type) && disposition !== 'attachment') {
          return;
        }
        if ((disposition !== 'inline' && disposition !== 'attachment') && (disposition != null)) {
          return;
        }
        if ((filename != null) && filename.replace(/\s+/g, ' ').trim() === '') {
          filename = void 0;
        }
        pushFile = function() {
          return files.push({
            partNumber: part != null ? "" + part : void 0,
            mimeType: type || 'application/octet-stream',
            contentId: id ? id.replace(/[<>]/g, '') : void 0,
            size: parseInt(size) || 0,
            filename: filename,
            message: message
          });
        };
        return pushFile();
      };
      walkBodyPart(bodystructure);
      return files;
    };

    Backend.prototype.streamFiles = function*(id) {
      var content, file, filename, message, partNumber, ref2, ref3, type;
      ref2 = file = realm.objects('File').filtered('id == $0', id)[0], partNumber = ref2.partNumber, message = ref2.message, filename = ref2.filename;
      ref3 = (yield this.streamBodyparts(message.folder.path, message.uid, [
        {
          partNumber: partNumber,
          type: 'attachment'
        }
      ]))[0], content = ref3.content, type = ref3.type;
      return (yield this.fileUrl(file, content));
    };

    Backend.prototype.fileUrl = function*(file, content) {
      return (yield new Promise((function(_this) {
        return function(resolve, reject) {
          return fs.writeFile(FILES_PATH + file.id, content, function(err) {
            var error;
            if (err) {
              return reject(err);
            }
            try {
              return transaction(null, function() {
                file.saved = true;
                return resolve();
              });
            } catch (error) {
              err = error;
              return reject(err);
            }
          });
        };
      })(this)));
    };

    Backend.prototype.streamBodyparts = function*(path, uid, bodyParts) {
      var k, len1, partNumber, partNumbers, partTypes, ref2, type;
      (yield this.connect());
      partTypes = {};
      partNumbers = [];
      for (k = 0, len1 = bodyParts.length; k < len1; k++) {
        ref2 = bodyParts[k], type = ref2.type, partNumber = ref2.partNumber;
        partTypes[partNumber] = type;
        partNumbers.push("body.peek[" + partNumber + ".mime]");
        partNumbers.push("body.peek[" + partNumber + "]");
      }
      if (partNumbers.length === 0) {
        return [];
      }
      bodyParts = (yield this.client.listMessages(path, uid, partNumbers, {
        byUid: true
      }));
      bodyParts = Object.keys(partTypes).map(function(partNumber) {
        var raw;
        raw = bodyParts[0]["body[" + partNumber + ".mime]"] + bodyParts[0]["body[" + partNumber + "]"];
        type = partTypes[partNumber];
        return {
          raw: raw,
          type: type,
          partNumber: partNumber
        };
      });
      return (yield mailreader.parseAsync({
        bodyParts: bodyParts
      }));
    };

    Backend.prototype.getBody = function*(messageId) {
      var body, bodyParts, folderPath, htmlParts, idx, inlineParts, k, len1, message, part, textParts, type, uid;
      message = realm.objectForPrimaryKey('Message', messageId);
      if (!(message != null ? message.isValid() : void 0)) {
        throw 'Message deleted.';
      }
      body = message.body;
      folderPath = message.folder.path;
      uid = message.uid;
      if (body && body.length > 0) {
        return body;
      }
      bodyParts = (yield this.getBodyparts(uid, folderPath)).bodyParts;
      textParts = [];
      htmlParts = [];
      inlineParts = [];
      for (idx = k = 0, len1 = bodyParts.length; k < len1; idx = ++k) {
        part = bodyParts[idx];
        type = part.type;
        if (type === 'html') {
          htmlParts.push(part);
        } else if (type === 'inline') {
          inlineParts.push({
            type: 'attachment',
            partNumber: bodyParts[idx].partNumber
          });
        } else if (type === 'text') {
          textParts.push(part);
        }
      }
      bodyParts = htmlParts.length > 0 ? htmlParts : textParts;
      bodyParts = (yield this.streamBodyparts(folderPath, uid, bodyParts));
      if (htmlParts.length === 0) {
        bodyParts = bodyParts.concat(inlineParts).sort(function(x, y) {
          var a, b, diff, i, l, m, ref2, segmentsA, segmentsB;
          a = x.partNumber;
          b = y.partNumber;
          segmentsA = a.replace(/(\.0+)+$/, '').split('.');
          segmentsB = b.replace(/(\.0+)+$/, '').split('.');
          l = Math.min(segmentsA.length, segmentsB.length);
          for (i = m = 0, ref2 = l; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
            diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
            if (diff) {
              return diff;
            }
          }
          return segmentsA.length - segmentsB.length;
        });
      }
      body = '';
      transaction(null, (function(_this) {
        return function() {
          var char, charCode, charEncodings, content, contentId, emailAddressPattern, file, html, i, id, lastChar, len2, len3, m, n, noWidthSpace, partNumber, pseudoUrlPattern, ref2, space, urlPattern;
          for (m = 0, len2 = bodyParts.length; m < len2; m++) {
            ref2 = bodyParts[m], content = ref2.content, type = ref2.type, partNumber = ref2.partNumber, id = ref2.id;
            if (type === 'html') {
              body += content;
            } else if (type === 'text') {
              charEncodings = {
                '\t': '&nbsp;&nbsp;&nbsp;&nbsp;',
                ' ': '&nbsp;',
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '\n': '<br />',
                '\r': '<br />'
              };
              space = /[\t ]/;
              noWidthSpace = '&#8203;';
              content = content.replace(/\r\n/g, '\n');
              html = '';
              lastChar = '';
              for (i = n = 0, len3 = content.length; n < len3; i = ++n) {
                char = content[i];
                charCode = content.charCodeAt(i);
                if (space.test(char) && !space.test(lastChar) && space.test(content[i + 1] || '')) {
                  html += noWidthSpace;
                }
                html += indexOf.call(Object.keys(charEncodings), char) >= 0 ? charEncodings[char] : (charCode > 127 ? "&#" + charCode + ";" : char);
                lastChar = char;
              }
              urlPattern = /\b(?:https?|ftp):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*[a-z0-9-+&@#\/%=~_|]/gim;
              pseudoUrlPattern = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
              emailAddressPattern = /\w+@[a-zA-Z_]+?(?:\.[a-zA-Z]{2,6})+/gim;
              html = html.replace(urlPattern, '<a href="$&" class="dropmail-inline-link">$&</a>').replace(pseudoUrlPattern, '$1<a href="http://$2" class="dropmail-inline-link">$2</a>').replace(emailAddressPattern, '<a href="mailto:$&" class="dropmail-inline-link">$&</a>');
              body += html;
            } else if (type === 'attachment') {
              contentId = null;
              if (id != null) {
                contentId = id;
              }
              if (contentId == null) {
                file = message.files.filtered('partNumber == $0', partNumber).find(function() {
                  return true;
                });
                if (file != null) {
                  if (file.contentId != null) {
                    contentId = file.contentId;
                  }
                  contentId = Math.random().toString(36).substring(7);
                }
                file.contentId = contentId;
              }
              body += "<img src=\"cid:" + contentId + "\" class=\"dropmail-inline\" />";
            }
          }
          body = sanitizeHtml(body, SanitizeSettings);
          body = minify(body, {
            collapseInlineTagWhitespace: true,
            collapseWhitespace: true,
            conservativeCollapse: true,
            minifyCSS: true,
            removeComments: true,
            removeRedundantAttributes: true,
            useShortDoctype: true
          });
          if (message != null ? message.isValid() : void 0) {
            if (body.length === 0) {
              body = ' ';
            }
            return message.body = body;
          } else {
            throw 'Message deleted.';
          }
        };
      })(this));
      return body;
    };

    Backend.prototype.getInlineFiles = function*(messageId) {
      var file, k, len1, message, ref2;
      message = realm.objectForPrimaryKey('Message', messageId);
      if (!(message != null ? message.isValid() : void 0)) {
        return;
      }
      ref2 = message.files;
      for (k = 0, len1 = ref2.length; k < len1; k++) {
        file = ref2[k];
        if (!file.isValid()) {
          continue;
        }
        if (!file.saved && file.mimeType.indexOf('image') === 0 && file.size <= 12 * 1024 * 1024) {
          (yield this.streamFiles(file.id));
        }
      }
      return null;
    };

    return Backend;

  })();

  module.exports = wrap(Backend);

}).call(this);


},{"../utils/md5":188,"./collections":170,"./constants":171,"./helpers":172,"./realm":182,"async-class":2,"bluebird":4,"electron":"electron","emailjs-utf7":78,"fs":"fs","html-minifier":88,"lazy.js":93,"mailreader":95,"sanitize-html":132}],170:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Collections, Realm,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Realm = requireb('./realm');

  Collections = (function() {
    function Collections(account) {
      this.account = account;
      this.files = bind(this.files, this);
      this.messages = bind(this.messages, this);
      this.conversations = bind(this.conversations, this);
      this.folders = bind(this.folders, this);
    }

    Collections.prototype.folders = function() {
      return Realm.objects('Folder').filtered('account == $0', this.account);
    };

    Collections.prototype.conversations = function() {
      return Realm.objects('Conversation').filtered('account == $0', this.account);
    };

    Collections.prototype.messages = function() {
      return Realm.objects('Message').filtered('conversation.account == $0', this.account);
    };

    Collections.prototype.files = function() {
      return Realm.objects('File').filtered('message.conversation.account == $0', this.account);
    };

    return Collections;

  })();

  module.exports = Collections;

}).call(this);


},{"./realm":182}],171:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    FOLDER: {
      INBOX: 1,
      SENT: 2,
      DRAFTS: 3,
      TRASH: 4,
      OTHER: 5,
      ARCHIVE: 7
    },
    OUTBOX: {
      CONVERSATIONS: 1,
      FOLDER: 2,
      DRAFT: 3
    },
    ACTIONS: {
      MOVE: 1,
      DELETE: 2,
      UNREAD: 3,
      SNOOZE: 4,
      PURGE: 5
    }
  };

}).call(this);


},{}],172:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Helpers, Promise, realm,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = requireb('bluebird');

  realm = requireb('./realm');

  Helpers = (function() {
    function Helpers() {
      this.whereNotIn = bind(this.whereNotIn, this);
      this.whereIn = bind(this.whereIn, this);
      this.transaction = bind(this.transaction, this);
      this.transaction_next = bind(this.transaction_next, this);
    }

    Helpers.prototype.inTransaction = false;

    Helpers.prototype.queue = [];

    Helpers.prototype.sleep = function(ms) {
      return new Promise(function(resolve) {
        return setTimeout(function() {
          return resolve();
        }, ms);
      });
    };

    Helpers.prototype.transaction_next = function() {
      var callback;
      if (this.queue.length === 0) {
        return;
      }
      callback = this.queue[0];
      try {
        return realm.write((function(_this) {
          return function() {
            return callback({
              tx: true
            });
          };
        })(this));
      } finally {
        this.queue.splice(0, 1);
        if (this.queue.length > 0) {
          this.transaction_next();
        } else {
          this.inTransaction = false;
        }
      }
    };

    Helpers.prototype.transaction = function(trace, callback) {
      if ((trace != null) && trace.tx === true) {
        return callback(trace);
      }
      this.queue.push(callback);
      if (!this.inTransaction) {
        this.inTransaction = true;
        return this.transaction_next();
      }
    };

    Helpers.prototype.whereIn = function(needle, haystack) {
      var hay, i, len, values;
      values = [];
      for (i = 0, len = haystack.length; i < len; i++) {
        hay = haystack[i];
        values.push(needle + " == $" + values.length);
      }
      return values.join(' || ');
    };

    Helpers.prototype.whereNotIn = function(needle, haystack) {
      var hay, i, len, values;
      values = [];
      for (i = 0, len = haystack.length; i < len; i++) {
        hay = haystack[i];
        values.push(needle + " != $" + values.length);
      }
      return values.join(' && ');
    };

    return Helpers;

  })();

  module.exports = new Helpers();

}).call(this);


},{"./realm":182,"bluebird":4}],173:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Account',
    primaryKey: 'address',
    properties: {
      name: {
        type: 'string',
        "default": ''
      },
      address: 'string',
      aliases: {
        type: 'list',
        objectType: 'Alias'
      },
      avatar: {
        type: 'string',
        optional: true
      },
      oauth: {
        type: 'bool',
        "default": false
      },
      signature: {
        type: 'string',
        "default": 'Sent from <a href="https://dropmailapp.com">DropMail</a>'
      },
      configuration: 'string'
    }
  };

}).call(this);


},{}],174:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Alias',
    primaryKey: 'address',
    properties: {
      name: {
        type: 'string',
        optional: true
      },
      address: 'string',
      signature: {
        type: 'string',
        optional: true
      }
    }
  };

}).call(this);


},{}],175:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Contact',
    primaryKey: 'hash',
    properties: {
      name: {
        type: 'string',
        "default": ''
      },
      address: {
        type: 'string',
        indexed: true
      },
      hash: 'string',
      addressHash: 'string',
      cached: {
        type: 'bool',
        "default": false
      },
      uncacheable: {
        type: 'bool',
        "default": false
      },
      rank: {
        type: 'int',
        "default": 0
      }
    }
  };

}).call(this);


},{}],176:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Conversation',
    primaryKey: 'id',
    properties: {
      id: 'int',
      count: {
        type: 'int',
        "default": 0
      },
      subject: {
        type: 'string',
        indexed: true
      },
      toSelf: {
        type: 'bool',
        "default": false
      },
      snoozed: {
        type: 'bool',
        "default": false
      },
      tag: 'int',
      unread: 'bool',
      hasFiles: {
        type: 'bool',
        "default": false
      },
      deleted: {
        type: 'bool',
        "default": false
      },
      messages: {
        type: 'list',
        objectType: 'Message'
      },
      participants: {
        type: 'list',
        objectType: 'Contact'
      },
      timestamp: 'date',
      lastExchange: {
        type: 'Message',
        optional: true
      },
      account: 'Account'
    }
  };

}).call(this);


},{}],177:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'File',
    primaryKey: 'id',
    properties: {
      id: 'int',
      message: 'Message',
      partNumber: {
        type: 'string',
        optional: true
      },
      mimeType: 'string',
      contentId: {
        type: 'string',
        optional: true
      },
      size: 'int',
      filename: {
        type: 'string',
        optional: true
      },
      saved: {
        type: 'bool',
        "default": false
      }
    }
  };

}).call(this);


},{}],178:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Folder',
    properties: {
      account: 'Account',
      path: 'string',
      type: {
        type: 'int',
        "default": 0,
        indexed: true
      },
      name: 'string',
      parent: {
        type: 'string',
        optional: true
      },
      uidNext: {
        type: 'int',
        optional: true
      },
      uidValidity: {
        type: 'int',
        optional: true
      },
      exists: {
        type: 'int',
        optional: true
      },
      checkpoint: {
        type: 'int',
        optional: true
      },
      highestModseq: {
        type: 'string',
        optional: true
      },
      firstSync: {
        type: 'bool',
        "default": false
      }
    }
  };

}).call(this);


},{}],179:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Message',
    primaryKey: 'id',
    properties: {
      id: 'int',
      serverId: 'string',
      folder: 'Folder',
      tempFolder: 'Folder',
      uid: 'int',
      unread: 'bool',
      deleted: {
        type: 'bool',
        "default": false
      },
      prefix: 'string',
      timestamp: 'date',
      snoozedTo: {
        type: 'date',
        optional: true
      },
      unsubscribe: {
        type: 'string',
        optional: true
      },
      body: {
        type: 'string',
        optional: true
      },
      toSelf: 'bool',
      files: {
        type: 'list',
        objectType: 'File'
      },
      to: {
        type: 'list',
        objectType: 'Contact'
      },
      from: {
        type: 'list',
        objectType: 'Contact'
      },
      cc: {
        type: 'list',
        objectType: 'Contact'
      },
      bcc: {
        type: 'list',
        objectType: 'Contact'
      },
      replyTo: {
        type: 'list',
        objectType: 'Contact'
      },
      messageId: 'string',
      inReplyTo: {
        type: 'string',
        optional: true
      },
      references: {
        type: 'string',
        optional: true
      },
      conversation: 'Conversation'
    }
  };

}).call(this);


},{}],180:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Outbox',
    properties: {
      account: 'Account',
      type: 'int',
      target: 'int',
      initialState: {
        type: 'string',
        optional: true
      },
      targetState: {
        type: 'string',
        optional: true
      },
      waitingForIMAP: {
        type: 'bool',
        "default": false
      },
      timestamp: 'date',
      conversations: {
        type: 'list',
        objectType: 'Conversation'
      },
      message: 'Message',
      folder: 'Folder',
      attempts: {
        type: 'int',
        "default": 0
      }
    }
  };

}).call(this);


},{}],181:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    name: 'Setting',
    primaryKey: 'key',
    properties: {
      key: 'string',
      value: {
        type: 'string',
        optional: true
      },
      state: {
        type: 'bool',
        "default": true
      }
    }
  };

}).call(this);


},{}],182:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Account, Alias, Contact, Conversation, File, Folder, Message, Outbox, Realm, Setting, app;

  app = require('electron').remote.app;

  Realm = require('realm');

  Alias = requireb('./models/alias');

  Account = requireb('./models/account');

  Contact = requireb('./models/contact');

  Folder = requireb('./models/folder');

  Message = requireb('./models/message');

  Conversation = requireb('./models/conversation');

  File = requireb('./models/file');

  Outbox = requireb('./models/outbox');

  Setting = requireb('./models/setting');

  module.exports = new Realm({
    path: app.getPath('userData') + "/dropmail.realm",
    schema: [Alias, Account, Contact, Folder, Message, Conversation, File, Outbox, Setting]
  });

}).call(this);


},{"./models/account":173,"./models/alias":174,"./models/contact":175,"./models/conversation":176,"./models/file":177,"./models/folder":178,"./models/message":179,"./models/outbox":180,"./models/setting":181,"electron":"electron","realm":"realm"}],183:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var AVATAR_PATH, AvatarSync, BATCH_SIZE, Promise, app, fetch, fs, md5, realm, transaction, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  realm = requireb('../realm');

  Promise = requireb('bluebird');

  md5 = requireb('../../utils/md5');

  app = require('electron').remote.app;

  AVATAR_PATH = app.getPath('userData') + '/avatars/';

  transaction = requireb('../helpers').transaction;

  fs = require('fs');

  util = requireb('util');

  fetch = require('node-fetch');

  BATCH_SIZE = 50;

  AvatarSync = (function() {
    AvatarSync.prototype.timeout = null;

    AvatarSync.prototype.firstRound = false;

    function AvatarSync() {
      this.reqBlob = bind(this.reqBlob, this);
      this.reqClearbit = bind(this.reqClearbit, this);
      this.reqGravatar = bind(this.reqGravatar, this);
      this.fetch = bind(this.fetch, this);
      this.processContacts = bind(this.processContacts, this);
      this.ready = bind(this.ready, this);
      fs.stat(AVATAR_PATH, (function(_this) {
        return function(err) {
          if (err) {
            if (err.code === 'ENOENT') {
              return fs.mkdir(AVATAR_PATH, _this.ready);
            }
          } else {
            return _this.ready();
          }
        };
      })(this));
    }

    AvatarSync.prototype.ready = function() {
      return this.processContacts();
    };

    AvatarSync.prototype.processContacts = function() {
      clearTimeout(this.timeout);
      if (!navigator.onLine) {
        return;
      }
      return this.timeout = setTimeout((function(_this) {
        return function() {
          return process.nextTick(function() {
            var acceptedContacts, contact, contacts, conversation, conversations, hashmap, i, j, len, len1, ref, rejectedContacts;
            if (!_this.firstRound) {
              hashmap = {};
              contacts = [];
              conversations = realm.objects('Conversation').filtered('participants.cached == false').sorted('timestamp', true).slice(0, BATCH_SIZE);
              for (i = 0, len = conversations.length; i < len; i++) {
                conversation = conversations[i];
                ref = conversation.participants.filtered('cached == false && uncacheable == false').sorted('rank', true).snapshot();
                for (j = 0, len1 = ref.length; j < len1; j++) {
                  contact = ref[j];
                  if (!hashmap[contact.addressHash]) {
                    hashmap[contact.addressHash] = true;
                    contacts.push(contact);
                  }
                }
              }
              if (conversations.length > 0) {
                _this.firstRound = true;
              }
            } else {
              contacts = realm.objects('Contact').filtered('cached == false && uncacheable == false').sorted('rank', true).snapshot();
            }
            if (!contacts.length) {
              realm.objects('Contact').addListener(_this.processContacts);
              return;
            } else {
              realm.objects('Contact').removeListener(_this.processContacts);
            }
            acceptedContacts = [];
            rejectedContacts = [];
            Promise.map(contacts.slice(0, BATCH_SIZE), function(contact) {
              if (!contact.isValid()) {
                reject();
              }
              return _this.fetch(contact.address, contact.addressHash).then(function() {
                return acceptedContacts.push(contact);
              })["catch"](function() {
                return rejectedContacts.push(contact);
              })["finally"](function() {
                return Promise.resolve();
              });
            }).then(function() {
              if (!navigator.onLine) {
                return;
              }
              transaction(null, function() {
                var k, l, len2, len3, len4, len5, m, n, relatives;
                for (k = 0, len2 = acceptedContacts.length; k < len2; k++) {
                  contact = acceptedContacts[k];
                  relatives = realm.objects('Contact').filtered('addressHash == $0 && cached == false && uncacheable == false', contact.addressHash).snapshot();
                  for (l = 0, len3 = relatives.length; l < len3; l++) {
                    contact = relatives[l];
                    contact.cached = true;
                  }
                }
                for (m = 0, len4 = rejectedContacts.length; m < len4; m++) {
                  contact = rejectedContacts[m];
                  relatives = realm.objects('Contact').filtered('addressHash == $0 && cached == false && uncacheable == false', contact.addressHash).snapshot();
                  for (n = 0, len5 = relatives.length; n < len5; n++) {
                    contact = relatives[n];
                    contact.uncacheable = true;
                  }
                }
              });
              return _this.processContacts();
            });
          });
        };
      })(this), 5000);
    };

    AvatarSync.prototype.fetch = function(address, addressHash) {
      var host, parts;
      host = address.split('@')[1];
      parts = host.split('.');
      if (parts.length > 2) {
        host = parts[parts.length - 2] + '.' + parts[parts.length - 1];
      }
      if (host === 'gmail.com') {
        return this.reqGravatar(address, addressHash);
      } else {
        return this.reqClearbit(host, addressHash)["catch"]((function(_this) {
          return function() {
            host = host.replace(/(email|mail|systems)/i, '');
            return _this.reqClearbit(host, addressHash);
          };
        })(this))["catch"]((function(_this) {
          return function() {
            return _this.reqGravatar(address, addressHash);
          };
        })(this));
      }
    };

    AvatarSync.prototype.reqGravatar = function(address, addressHash) {
      return this.reqBlob("https://secure.gravatar.com/avatar/" + (md5(address)) + "?d=404&r=pg&s=200", addressHash);
    };

    AvatarSync.prototype.reqClearbit = function(address, addressHash) {
      return this.reqBlob("https://logo.clearbit.com/" + address + "?s=128", addressHash);
    };

    AvatarSync.prototype.reqBlob = function(url, addressHash) {
      return fetch(url).then((function(_this) {
        return function(res) {
          return new Promise(function(resolve, reject) {
            if (res.status === 404) {
              return reject();
            }
            return res.body.pipe(fs.createWriteStream(AVATAR_PATH + addressHash)).on('error', function(err) {
              return reject(err);
            }).on('finish', function() {
              return resolve(AVATAR_PATH + addressHash);
            });
          });
        };
      })(this));
    };

    return AvatarSync;

  })();

  module.exports = new AvatarSync();

}).call(this);


},{"../../utils/md5":188,"../helpers":172,"../realm":182,"bluebird":4,"electron":"electron","fs":"fs","node-fetch":"node-fetch","util":167}],184:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var AvatarSync, Backend, CONSTANTS, FolderSync, OutboxSync, Promise, SYNC_BATCH_LIMIT, SnoozeSync, SyncEngine, config, electronOauth2, imap, keytar, oauthSession, realm, ref, sleep, transaction, wrap,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = requireb('bluebird');

  Promise.coroutine.addYieldHandler(function(yielded) {
    if (Array.isArray(yielded)) {
      return Promise.all(yielded);
    }
  });

  imap = requireb('emailjs-imap-client');

  realm = requireb('../realm');

  wrap = requireb('async-class').wrap;

  ref = requireb('../helpers'), sleep = ref.sleep, transaction = ref.transaction;

  Backend = requireb('../backend');

  FolderSync = requireb('./foldersync');

  OutboxSync = requireb('./outboxsync');

  AvatarSync = requireb('./avatarsync');

  SnoozeSync = requireb('./snoozesync');

  CONSTANTS = requireb('../constants');

  keytar = require('keytar');

  electronOauth2 = requireb('electron-oauth2');

  SYNC_BATCH_LIMIT = 500;


  /*
  We use 4 IMAP clients at most.
  - inbox[idle] (optional)
  - sent[idle] (optional)
  - action_client (requirebd)
  - sync_client[temporary] (optional)
  
  SyncEngine will only fail sync is an action_client cannot be created.
  No other cleints will trigger errors.
   */

  config = {
    clientId: '771407356645-sndp43sjejl7ki9dssv8b7a05hab4q4p.apps.googleusercontent.com',
    clientSecret: 'JS_LGj87qQ7wXEXiDnwKrHhq',
    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth',
    tokenUrl: 'https://www.googleapis.com/oauth2/v4/token',
    useBasicAuthorizationHeader: false,
    redirectUri: 'http://localhost'
  };

  oauthSession = electronOauth2(config, {
    alwaysOnTop: true,
    autoHideMenuBar: true,
    width: 350,
    height: 420,
    frame: false,
    webPreferences: {
      nodeIntegration: false
    }
  });

  SyncEngine = (function() {
    SyncEngine.prototype.accounts = {};

    SyncEngine.prototype.ready = false;

    SyncEngine.prototype.outbox = null;

    SyncEngine.prototype.setOutboxHook = function(hook) {
      var address, engine, engines, path, ref1;
      ref1 = this.accounts;
      for (address in ref1) {
        engines = ref1[address].engines;
        for (path in engines) {
          engine = engines[path];
          engine.setHook(hook);
        }
      }
    };

    SyncEngine.prototype.reset = function*(accounts) {
      var account, j, len, ref1, ref2, ref3;
      ref1 = realm.objects('Account').snapshot();
      for (j = 0, len = ref1.length; j < len; j++) {
        account = ref1[j];
        if (!account.isValid()) {
          continue;
        }
        (yield this.init(account));
      }
      if ((ref2 = this.outbox) != null) {
        ref2.reset();
      }
      if ((ref3 = this.snooze) != null) {
        ref3.run();
      }
    };

    SyncEngine.prototype.cleanup = function*() {
      var account, address, ref1;
      ref1 = this.accounts;
      for (address in ref1) {
        account = ref1[address];
        (yield this.cleanupAccount(address, account));
      }
    };

    SyncEngine.prototype.cleanupAccount = function*(address, account) {
      var backend, client, engine, folder, id, ref1, ref2, ref3, ref4, ref5, ref6;
      ref1 = account.engines;
      for (folder in ref1) {
        engine = ref1[folder];
        try {
          if (engine != null) {
            engine.stop();
          }
        } catch (undefined) {}
      }
      ref2 = account.backends;
      for (id in ref2) {
        backend = ref2[id];
        try {
          (yield ((ref3 = backend.client) != null ? ref3.close() : void 0));
        } finally {
          if ((ref4 = backend.client) != null) {
            ref4.onupdate = null;
          }
          if ((ref5 = backend.client) != null) {
            ref5.onerror = null;
          }
        }
      }
      ref6 = account.idle;
      for (folder in ref6) {
        client = ref6[folder];
        try {
          (yield (client != null ? client.close() : void 0));
        } finally {
          if (client != null) {
            client.onupdate = null;
          }
          if (client != null) {
            client.onerror = null;
          }
        }
      }
    };

    function SyncEngine() {
      this.addAccount = bind(this.addAccount, this);
      this.onerror = bind(this.onerror, this);
      this.onupdate = bind(this.onupdate, this);
      this.init = bind(this.init, this);
      this.cleanupAccount = bind(this.cleanupAccount, this);
      this.cleanup = bind(this.cleanup, this);
      this.reset = bind(this.reset, this);
      this.setOutboxHook = bind(this.setOutboxHook, this);
      window.addEventListener('online', (function(_this) {
        return function() {
          return _this.reset();
        };
      })(this));
      window.addEventListener('offline', this.cleanup);
      this.reset();
      this.outbox = new OutboxSync(this);
      this.snooze = new SnoozeSync(this);
      realm.objects('Account').addListener((function(_this) {
        return function(collection, changes) {
          var account, address, addresses, j, len, ref1;
          if (changes.insertions.length > 0) {
            Promise.coroutine(function*() {
              var idx, j, len, ref1;
              ref1 = changes.insertions;
              for (j = 0, len = ref1.length; j < len; j++) {
                idx = ref1[j];
                if (!accounts[idx].isValid()) {
                  continue;
                }
                if (_this.accounts[accounts[idx].address] == null) {
                  (yield _this.init(accounts[idx]));
                }
              }
              _this.setOutboxHook(_this.outbox.syncHook);
            })();
          }
          if (changes.deletions.length > 0) {
            addresses = realm.objects('Account').snapshot().map(function(arg) {
              var address;
              address = arg.address;
              return address;
            });
            ref1 = _this.accounts;
            for (account = j = 0, len = ref1.length; j < len; account = ++j) {
              address = ref1[account];
              if (indexOf.call(addresses, address) < 0) {
                _this.cleanupAccount(address, account);
              }
            }
          }
        };
      })(this));
    }

    SyncEngine.prototype.init = function*(account) {
      var access_token, auth, base, batches, err, error, error1, error2, error3, expires_in, folder, folders, j, k, len, len1, pass, priorities, ref1, ref2, refreshToken, refresh_token, syncClient;
      this.accounts[account.address] = {
        backends: {},
        idle: {},
        engines: {},
        client: null,
        canIdle: null
      };
      if (account.oauth) {
        refreshToken = keytar.getPassword('DropMail', account.address + '_refresh');
        try {
          if (refreshToken == null) {
            throw 'Missing Refresh Token';
          }
          ref1 = (yield oauthSession.refreshToken(refreshToken)), access_token = ref1.access_token, expires_in = ref1.expires_in;
          keytar.replacePassword('DropMail', account.address, access_token);
        } catch (error) {
          err = error;
          ref2 = (yield oauthSession.getAccessToken({
            scope: 'email profile https://mail.google.com/',
            accessType: 'offline'
          })), access_token = ref2.access_token, refresh_token = ref2.refresh_token, expires_in = ref2.expires_in;
          keytar.replacePassword('DropMail', account.address, access_token);
          keytar.replacePassword('DropMail', account.address + '_refresh', refresh_token);
        }
      }
      pass = keytar.getPassword('DropMail', account.address);
      auth = {
        user: account.address,
        xoauth2: pass
      };
      this.accounts[account.address].client = new imap('imap.gmail.com', 993, {
        auth: auth,
        enableCompression: true
      });
      try {
        (yield this.accounts[account.address].client.connect());
        this.accounts[account.address].client.connected = true;
      } catch (error1) {
        try {
          this.accounts[account.address].client.close();
        } catch (undefined) {}
        throw new Error("Failed to connect to IMAP for: " + account.address);
      }
      this.accounts[account.address].backends['ACTION_CLIENT'] = new Backend(account, this.accounts[account.address].client);
      (yield this.accounts[account.address].backends['ACTION_CLIENT'].listFolders());
      if (realm.objects('Folder').filtered('account == $0 && firstSync == false', account).length > 0) {
        syncClient = new imap('imap.gmail.com', 993, {
          auth: auth,
          enableCompression: true
        });
        try {
          (yield syncClient.connect());
          syncClient.connected = true;
          this.accounts[account.address].backends['SYNC_CLIENT'] = new Backend(account, syncClient);
        } catch (undefined) {}
      }
      this.accounts[account.address].canIdle = indexOf.call(this.accounts[account.address].client._capability, 'IDLE') >= 0 ? true : false;
      if (this.accounts[account.address].canIdle) {
        if ((base = this.accounts[account.address]).idle == null) {
          base.idle = {};
        }
        this.accounts[account.address].idle.Inbox = new imap('imap.gmail.com', 993, {
          auth: auth,
          enableCompression: true
        });
        try {
          (yield this.accounts[account.address].idle.Inbox.connect());
          this.accounts[account.address].idle.Inbox.connected = true;
          this.accounts[account.address].idle.Inbox.onupdate = this.onupdate.bind(void 0, account.address);
          this.accounts[account.address].idle.Inbox.onerror = this.onerror.bind(void 0, account.address);
        } catch (error2) {
          try {
            (yield this.accounts[account.address].idle.Inbox.close());
          } catch (undefined) {}
          this.accounts[account.address].idle.Inbox = null;
        }
        this.accounts[account.address].idle.Sent = new imap('imap.gmail.com', 993, {
          auth: auth,
          enableCompression: true
        });
        try {
          (yield this.accounts[account.address].idle.Sent.connect());
          this.accounts[account.address].idle.Sent.connected = true;
          this.accounts[account.address].idle.Sent.onupdate = this.onupdate.bind(void 0, account.address);
          this.accounts[account.address].idle.Sent.onerror = this.onerror.bind(void 0, account.address);
        } catch (error3) {
          try {
            (yield this.accounts[account.address].idle.Sent.close());
          } catch (undefined) {}
          this.accounts[account.address].idle.Sent = null;
        }
      }
      folders = realm.objects('Folder').filtered('account == $0', account).snapshot();
      priorities = folders.reduce((function(p, c, i) {
        var ref3;
        p[+((ref3 = c.type) === CONSTANTS.FOLDER.OTHER || ref3 === CONSTANTS.FOLDER.ARCHIVE)].push(c);
        return p;
      }), [[], []]);
      batches = 0;
      for (j = 0, len = priorities.length; j < len; j++) {
        folders = priorities[j];
        for (k = 0, len1 = folders.length; k < len1; k++) {
          folder = folders[k];
          if (!folder.isValid()) {
            continue;
          }
          (yield (function(_this) {
            return (function(folder) {
              return Promise.coroutine(function*() {
                var client, folderBackend, folderBatches, polling, ref3, ref4;
                polling = false;
                if (folder.type === CONSTANTS.FOLDER.INBOX && (((ref3 = _this.accounts[account.address].idle) != null ? ref3.Inbox : void 0) != null)) {
                  client = _this.accounts[account.address].idle.Inbox;
                  _this.accounts[account.address].backends[folder.path] = new Backend(account, client);
                } else if (folder.type === CONSTANTS.FOLDER.SENT && (((ref4 = _this.accounts[account.address].idle) != null ? ref4.Sent : void 0) != null)) {
                  client = _this.accounts[account.address].idle.Sent;
                  _this.accounts[account.address].backends[folder.path] = new Backend(account, client);
                } else {
                  polling = true;
                  client = _this.accounts[account.address].client;
                }
                folderBackend = _this.accounts[account.address].backends[folder.path] || _this.accounts[account.address].backends['ACTION_CLIENT'];
                _this.accounts[account.address].engines[folder.path] = new FolderSync(polling, folder, folderBackend, _this.accounts[account.address].backends['SYNC_CLIENT']);
                (yield _this.accounts[account.address].engines[folder.path].initialSync());
                folderBatches = Math.ceil(_this.accounts[account.address].engines[folder.path].uids.length / SYNC_BATCH_LIMIT);
                Promise.coroutine(function*() {
                  while (folderBatches--) {
                    (yield (function(folder) {
                      return _this.accounts[account.address].engines[folder.path].incrementSync();
                    })(folder));
                  }
                })();
              })();
            });
          })(this)(folder));
        }
      }
      return Promise.resolve();
    };

    SyncEngine.prototype.onupdate = function(user, path, type, value) {
      return this.accounts[user].engines[path].onIdle(type, value);
    };

    SyncEngine.prototype.onerror = function(user) {};

    SyncEngine.prototype.addAccount = function*(arg) {
      var account, avatar, err, error, error1, existing, expires_in, name, oauth, pass, refresh_token, tempBackend, user;
      user = arg.user, pass = arg.pass, refresh_token = arg.refresh_token, name = arg.name, expires_in = arg.expires_in, avatar = arg.avatar, oauth = arg.oauth;
      user = user.toLowerCase();
      existing = realm.objectForPrimaryKey('Account', user);
      if (existing != null) {
        return {
          success: false,
          error: 'Account already added.'
        };
      }
      try {
        tempBackend = new Backend(null, new imap('imap.gmail.com', 993, {
          auth: {
            user: user,
            xoauth2: pass
          },
          enableCompression: true
        }));
        (yield tempBackend.connect());
      } catch (error) {
        err = error;
        return {
          success: false,
          error: "Couldn\'t connect to account.",
          details: err.toString()
        };
      } finally {
        (yield tempBackend.close());
        tempBackend = null;
      }
      try {
        keytar.replacePassword('DropMail', user, pass);
        if (refresh_token != null) {
          keytar.replacePassword('DropMail', user + '_refresh', refresh_token);
        }
      } catch (error1) {
        throw 'DropMail failed to save your password due to an unknown error.';
      }
      account = null;
      transaction(null, (function(_this) {
        return function() {
          return account = realm.create('Account', {
            address: user,
            name: name,
            avatar: avatar,
            oauth: oauth,
            configuration: JSON.stringify({})
          });
        };
      })(this));
      this.init(account);
      return {
        success: true
      };
    };

    SyncEngine.prototype.getRealm = function() {
      return realm;
    };

    return SyncEngine;

  })();

  module.exports = wrap(SyncEngine);

}).call(this);


},{"../backend":169,"../constants":171,"../helpers":172,"../realm":182,"./avatarsync":183,"./foldersync":185,"./outboxsync":186,"./snoozesync":187,"async-class":2,"bluebird":4,"electron-oauth2":63,"emailjs-imap-client":68,"keytar":"keytar"}],185:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var CONSTANTS, DEFAULT_POLL_FREQUENCY, FAST_REFRESH_INTERVAL, FAST_REFRESH_LIMIT, FULL_REFRESH_INTERVAL, FolderSync, GMAIL_ARCHIVE_RAW, INBOX_POLL_FREQUENCY, MAX_UIDINVALID, NONACTIVE_POLL_FREQUENCY, Promise, SLOW_REFRESH_INTERVAL, SLOW_REFRESH_LIMIT, SYNC_BATCH_LIMIT, TimSort, dateFormat, imap, maxConvo, maxFile, maxMessage, md5, realm, ref1, sleep, transaction, whereIn, whereNotIn, wrap,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  Promise = requireb('bluebird');

  Promise.coroutine.addYieldHandler(function(yielded) {
    if (Array.isArray(yielded)) {
      return Promise.all(yielded);
    }
  });

  imap = requireb('emailjs-imap-client');

  realm = requireb('../realm');

  TimSort = requireb('timsort');

  md5 = requireb('../../utils/md5');

  dateFormat = requireb('dateformat');

  wrap = requireb('async-class').wrap;

  ref1 = requireb('../helpers'), transaction = ref1.transaction, whereNotIn = ref1.whereNotIn, sleep = ref1.sleep, whereIn = ref1.whereIn;

  CONSTANTS = requireb('../constants');

  SYNC_BATCH_LIMIT = 500;

  DEFAULT_POLL_FREQUENCY = 30000;

  INBOX_POLL_FREQUENCY = 10000;

  NONACTIVE_POLL_FREQUENCY = 600000;

  FAST_REFRESH_LIMIT = 200;

  SLOW_REFRESH_LIMIT = 500;

  SLOW_REFRESH_INTERVAL = 300000;

  FAST_REFRESH_INTERVAL = 30000;

  FULL_REFRESH_INTERVAL = 600000;

  MAX_UIDINVALID = 5;

  GMAIL_ARCHIVE_RAW = '-has:userlabels -in:inbox -in:sent -in:trash -in:spam -in:draft -in:chat';

  maxMessage = realm.objects('Message').sorted('id', true).find(function() {
    return true;
  });

  maxConvo = realm.objects('Conversation').sorted('id', true).find(function() {
    return true;
  });

  maxFile = realm.objects('File').sorted('id', true).find(function() {
    return true;
  });

  maxConvo = maxConvo != null ? maxConvo.id : 0;

  maxMessage = maxMessage != null ? maxMessage.id : 0;

  maxFile = maxFile != null ? maxFile.id : 0;

  FolderSync = (function() {
    FolderSync.prototype.lastFlagRefresh = 0;

    FolderSync.prototype.lastFullRefresh = 0;

    FolderSync.prototype.uids = [];

    FolderSync.prototype.idleTimer = null;

    FolderSync.prototype.events = {
      expunge: [],
      exists: false,
      fetch: {
        unread: [],
        read: []
      }
    };

    FolderSync.prototype.active = true;

    FolderSync.prototype.tries = 0;

    FolderSync.prototype.exists = 0;

    FolderSync.prototype.gmailArchive = false;

    FolderSync.prototype.setHook = function(outboxHook) {
      this.outboxHook = outboxHook;
    };

    FolderSync.prototype.outboxHook = function() {};

    function FolderSync(polling, folder, backend, syncBackend) {
      this.polling = polling;
      this.folder = folder;
      this.setMessageUnread = bind(this.setMessageUnread, this);
      this.hardDeleteConversation = bind(this.hardDeleteConversation, this);
      this.deleteUids = bind(this.deleteUids, this);
      this.messagesToConversations = bind(this.messagesToConversations, this);
      this.tagConversation = bind(this.tagConversation, this);
      this.invalidatePurgedMessages = bind(this.invalidatePurgedMessages, this);
      this.collectTrash = bind(this.collectTrash, this);
      this.syncNewMessages = bind(this.syncNewMessages, this);
      this.fullFlagCheck = bind(this.fullFlagCheck, this);
      this.quickFlagCheck = bind(this.quickFlagCheck, this);
      this.condstoreFlagCheck = bind(this.condstoreFlagCheck, this);
      this.expungeUidCache = bind(this.expungeUidCache, this);
      this.getMessageChanges = bind(this.getMessageChanges, this);
      this.idleHandler = bind(this.idleHandler, this);
      this.onIdle = bind(this.onIdle, this);
      this.incrementSync = bind(this.incrementSync, this);
      this.initialSync = bind(this.initialSync, this);
      this.reset = bind(this.reset, this);
      this.stop = bind(this.stop, this);
      this.run = bind(this.run, this);
      this.closeSyncClient = bind(this.closeSyncClient, this);
      this.setHook = bind(this.setHook, this);
      if (!this.folder.firstSync && (syncBackend != null)) {
        this.backend = syncBackend;
        this.nextBackend = backend;
      } else {
        this.backend = backend;
      }
      if (this.folder.type === CONSTANTS.FOLDER.INBOX) {
        this.POLL_FREQUENCY = INBOX_POLL_FREQUENCY;
      } else if (this.folder.type === CONSTANTS.FOLDER.OTHER) {
        this.POLL_FREQUENCY = NONACTIVE_POLL_FREQUENCY;
      } else {
        this.POLL_FREQUENCY = DEFAULT_POLL_FREQUENCY;
      }
    }

    FolderSync.prototype.closeSyncClient = function*() {
      var processing;
      processing = realm.objects('Folder').filtered('account == $0 && firstSync == false', this.folder.account).length;
      if (processing === 0) {
        try {
          (yield this.backend.close());
        } catch (undefined) {}
      }
      this.backend = this.nextBackend;
      return this.nextBackend = null;
    };

    FolderSync.prototype.run = function*() {
      this.tries = 0;
      this.active = true;
      if (!this.backend.hasCapability('IDLE') || this.polling || this.gmailArchive) {
        (yield sleep(this.POLL_FREQUENCY));
        while (this.active) {
          this.getMessageChanges();
          (yield sleep(this.POLL_FREQUENCY));
        }
      } else {
        this.backend.select(this.folder.path);
      }
    };

    FolderSync.prototype.stop = function() {
      return this.active = false;
    };

    FolderSync.prototype.reset = function*() {
      var status;
      status = (yield this.backend.status(this.folder.path));
      transaction(null, (function(_this) {
        return function() {
          var j, len, message, messages;
          messages = realm.objects('Message').filtered('folder == $0', _this.folder).snapshot();
          for (j = 0, len = messages.length; j < len; j++) {
            message = messages[j];
            if (!message.isValid()) {
              continue;
            }
            realm["delete"](message.files);
            if (message.conversation.messages.length === 1) {
              realm["delete"](message.conversation);
            }
            realm["delete"](message);
          }
          _this.folder.uidNext = status.uidnext;
          _this.folder.uidValidity = status.uidvalidity;
          _this.folder.checkpoint = null;
          _this.folder.highestModseq = status.highestmodseq;
          _this.folder.firstSync = false;
        };
      })(this));
      return this.initialSync();
    };

    FolderSync.prototype.initialSync = function*() {
      var exists, highestmodseq, messages, status, uidnext;
      status = (yield this.backend.select(this.folder.path));
      this.gmailArchive = this.backend.hasCapability('X-GM-EXT-1') && this.folder.type === CONSTANTS.FOLDER.ARCHIVE && this.folder.path === '[Gmail]/All Mail';
      this.uids = [];
      this.lastFlagRefresh = 0;
      this.lastFullRefresh = 0;
      (yield this.getMessageChanges(status));
      if (!this.folder.firstSync) {
        messages = status.messages, uidnext = status.uidnext, highestmodseq = status.highestmodseq, exists = status.exists;
        transaction(null, (function(_this) {
          return function() {
            if (_this.folder.checkpoint == null) {
              _this.folder.checkpoint = _this.uids[_this.uids.length - 1];
            }
            if (exists === 0 || messages === 0) {
              Object.assign(_this.folder, {
                checkpoint: null,
                firstSync: true
              });
              return _this.closeSyncClient();
            }
          };
        })(this));
        if (exists === 0 || messages === 0) {
          this.run();
        }
        return;
      }
      this.run();
    };

    FolderSync.prototype.incrementSync = function*() {
      var checkpoint, err, error, idx, messages, offset, range, subsection;
      if (!this.folder.checkpoint || this.uids.length === 0) {
        return;
      }
      idx = this.backend.client._binSearch(this.uids, this.folder.checkpoint, (function(_this) {
        return function(a, b) {
          return a - b;
        };
      })(this)) + 1;
      if (idx < 0) {
        idx = Math.abs(idx) - 1;
        if (typeof lower === "undefined" || lower === null) {
          return;
        }
      }
      if (idx === 0) {
        transaction(null, (function(_this) {
          return function() {
            Object.assign(_this.folder, {
              checkpoint: null,
              firstSync: true
            });
            _this.closeSyncClient();
            _this.run();
          };
        })(this));
        return;
      }
      offset = idx - SYNC_BATCH_LIMIT;
      offset = offset < 0 ? 0 : offset;
      range = [this.uids[offset], this.uids[idx - 1]];
      if (this.gmailArchive) {
        subsection = this.uids.slice(offset, +(idx - 1) + 1 || 9e9);
      }
      idx = idx - SYNC_BATCH_LIMIT;
      checkpoint = this.uids[idx - 1];
      try {
        messages = (yield this.backend.fetchMessages({
          path: this.folder.path,
          sequence: (this.gmailArchive ? subsection.join(',') : range[0] + ':' + range[1]),
          bounds: {
            low: range[0],
            high: range[1] + 1
          },
          byUid: true
        }, this.folder.type));
        transaction(null, (function(_this) {
          return function() {
            return _this.messagesToConversations(messages);
          };
        })(this));
      } catch (error) {
        err = error;
        throw "Sync Failed: " + err;
      }
      transaction(null, (function(_this) {
        return function() {
          var error1, failure;
          failure = false;
          try {
            if ((_this.folder.checkpoint == null) || checkpoint < _this.folder.checkpoint) {
              return _this.folder.checkpoint = checkpoint;
            }
          } catch (error1) {
            err = error1;
            failure = true;
            throw "Sync Failed";
          } finally {
            if (idx <= 0 && !failure) {
              Object.assign(_this.folder, {
                checkpoint: null,
                firstSync: true
              });
              _this.closeSyncClient();
              _this.run();
              return;
            }
          }
        };
      })(this));
    };

    FolderSync.prototype.onIdle = function(type, value) {
      var deletedUid, unread;
      clearTimeout(this.idleTimer);
      if (this.gmailArchive) {
        return;
      }
      if (type === 'expunge') {
        deletedUid = this.uids[value - 1];
        this.uids.splice(value - 1, 1);
        this.events.expunge.push(deletedUid);
      } else if (type === 'exists') {
        this.exists = value;
        this.events.exists = true;
      } else if (type === 'fetch') {
        if (!((value.flags != null) && (value['#'] != null))) {
          return;
        }
        if (value.uid == null) {
          value.uid = this.uids[value['#'] - 1];
        }
        unread = indexOf.call(value.flags, '\\Seen') >= 0 ? 'read' : 'unread';
        this.events.fetch[unread].push(value.uid);
      }
      return this.idleTimer = setTimeout(this.idleHandler, 150);
    };

    FolderSync.prototype.idleHandler = function() {
      if (this.events.exists) {
        this.syncNewMessages();
      }
      if (this.events.expunge.length || this.events.fetch.unread.length || this.events.fetch.read.length) {
        transaction(null, (function(_this) {
          return function() {
            var j, k, len, len1, message, messages;
            _this.deleteUids(_this.events.expunge);
            if (_this.events.fetch.read.length) {
              messages = _this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread == true', _this.folder), _this.events.fetch.read, function(idx) {
                return "uid == $" + idx;
              });
              for (j = 0, len = messages.length; j < len; j++) {
                message = messages[j];
                _this.setMessageUnread(message, false);
              }
            }
            if (_this.events.fetch.unread.length) {
              messages = _this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread == false', _this.folder), _this.events.fetch.unread, function(idx) {
                return "uid == $" + idx;
              });
              for (k = 0, len1 = messages.length; k < len1; k++) {
                message = messages[k];
                _this.setMessageUnread(message, true);
              }
            }
          };
        })(this));
      }
      this.events.exists = false;
      this.events.expunge = [];
      this.events.fetch.unread = [];
      return this.events.fetch.read = [];
    };

    FolderSync.prototype.getMessageChanges = function*(status) {
      var changed, didChange, ref2;
      didChange = false;
      if (!navigator.onLine) {
        return;
      }
      if (status == null) {
        status = (yield this.backend.status(this.folder.path));
      }
      this.exists = (ref2 = status.exists) != null ? ref2 : status.messages;
      if (status.uidvalidity > this.folder.uidValidity) {
        if (this.tries === 5) {
          throw 'Sync failed';
        }
        this.tries++;
        return this.reset();
      }
      changed = {};
      if (!this.backend.hasCapability('UIDNEXT') || status.uidnext > this.folder.uidNext || this.gmailArchive) {
        this.syncNewMessages();
      } else {
        transaction(null, (function(_this) {
          return function() {
            _this.outboxHook(_this.folder);
            return _this.collectTrash();
          };
        })(this));
      }
      if (new Date().getTime() - this.lastFullRefresh >= FULL_REFRESH_INTERVAL) {
        return this.fullFlagCheck(status);
      } else if (this.backend.hasCapability('CONDSTORE')) {
        if (this.folder.highestModseq !== status.highestmodseq || this.folder.exists !== this.exists || this.folder.uidNext !== status.uidnext) {
          return this.condstoreFlagCheck(status);
        }
      } else {
        return this.quickFlagCheck(status);
      }
    };

    FolderSync.prototype.expungeUidCache = function(deleted) {
      var idx, j, len, uid;
      for (j = 0, len = deleted.length; j < len; j++) {
        uid = deleted[j];
        idx = this.backend.client._binSearch(this.uids, uid, (function(_this) {
          return function(a, b) {
            return a - b;
          };
        })(this)) + 1;
        if (idx < 0) {
          continue;
        }
        this.uids.splice(idx, 1);
      }
    };

    FolderSync.prototype.condstoreFlagCheck = function*(status) {
      var localUids, messages, refresh_limit, removed, resetTimer, seen, since, timestamp, uidOptions, uids, unseen;
      refresh_limit = FAST_REFRESH_LIMIT;
      resetTimer = false;
      if (new Date().getTime() - this.lastFlagRefresh >= SLOW_REFRESH_INTERVAL) {
        refresh_limit = SLOW_REFRESH_LIMIT;
        resetTimer = true;
      }
      uidOptions = {};
      if (this.gmailArchive) {
        uidOptions['X-GM-RAW'] = GMAIL_ARCHIVE_RAW;
      }
      seen = (yield this.backend.uids(this.folder.path, Object.assign({
        seen: true,
        modseq: new Number(this.folder.highestModseq).valueOf()
      }, uidOptions)));
      unseen = (yield this.backend.uids(this.folder.path, Object.assign({
        unseen: true,
        modseq: new Number(this.folder.highestModseq).valueOf()
      }, uidOptions)));
      removed = [];
      if (seen.length > 0) {
        seen = this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread != false', this.folder), seen, function(idx) {
          return "uid == $" + idx;
        });
      }
      if (unseen.length > 0) {
        unseen = this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread != true', this.folder), unseen, function(idx) {
          return "uid == $" + idx;
        });
      }
      if (this.folder.exists !== this.exists || this.folder.uidNext !== status.uidnext) {
        messages = realm.objects('Message').filtered('folder == $0', this.folder).sorted('timestamp', true).slice(0, refresh_limit);
        if (messages.length > 0) {
          timestamp = messages[messages.length - 1].timestamp;
          since = dateFormat(timestamp, "dd-mmm-yyyy");
          uids = (yield this.backend.uids(this.folder.path, {
            since: since
          }));
          TimSort.sort(uids, function(a, b) {
            return a - b;
          });
          localUids = messages.map(function(message) {
            return message.uid;
          });
          removed = this.difference(localUids, uids);
        }
      }
      transaction(null, (function(_this) {
        return function() {
          var j, k, len, len1, message;
          Object.assign(_this.folder, {
            highestModseq: status.highestmodseq,
            exists: _this.exists
          });
          _this.expungeUidCache(removed);
          _this.invalidatePurgedMessages();
          _this.deleteUids(removed);
          for (j = 0, len = seen.length; j < len; j++) {
            message = seen[j];
            _this.setMessageUnread(message, false);
          }
          for (k = 0, len1 = unseen.length; k < len1; k++) {
            message = unseen[k];
            _this.setMessageUnread(message, true);
          }
        };
      })(this));
      if (resetTimer) {
        return this.lastFlagRefresh = new Date().getTime();
      }
    };

    FolderSync.prototype.quickFlagCheck = function*(status) {
      var localUids, messages, refresh_limit, removed, resetTimer, seen, since, timestamp, uidOptions, uids, unseen;
      refresh_limit = FAST_REFRESH_LIMIT;
      resetTimer = false;
      if (new Date().getTime() - this.lastFlagRefresh >= SLOW_REFRESH_INTERVAL) {
        refresh_limit = SLOW_REFRESH_LIMIT;
        resetTimer = true;
      }
      messages = realm.objects('Message').filtered('folder == $0', this.folder).sorted('timestamp', true).slice(0, refresh_limit);
      if (messages.length === 0) {
        return;
      }
      timestamp = messages[messages.length - 1].timestamp;
      since = dateFormat(timestamp, "dd-mmm-yyyy");
      uidOptions = {};
      if (this.gmailArchive) {
        uidOptions['X-GM-RAW'] = GMAIL_ARCHIVE_RAW;
      }
      seen = (yield this.backend.uids(this.folder.path, Object.assign({
        seen: true,
        since: since
      }, uidOptions)));
      unseen = (yield this.backend.uids(this.folder.path, Object.assign({
        unseen: true,
        since: since
      }, uidOptions)));
      uids = slice.call(seen).concat(slice.call(unseen));
      TimSort.sort(uids, function(a, b) {
        return a - b;
      });
      localUids = realm.objects('Message').filtered('folder == $0', this.folder).sorted('timestamp', true).slice(0, refresh_limit).map(function(message) {
        return message.uid;
      });
      removed = this.difference(localUids, uids);
      if (seen.length > 0) {
        seen = this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread != false', this.folder), seen, function(idx) {
          return "uid == $" + idx;
        });
      }
      if (unseen.length > 0) {
        unseen = this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread != true', this.folder), unseen, function(idx) {
          return "uid == $" + idx;
        });
      }
      transaction(null, (function(_this) {
        return function() {
          var j, k, len, len1, message;
          Object.assign(_this.folder, {
            exists: _this.exists
          });
          _this.expungeUidCache(removed);
          _this.invalidatePurgedMessages();
          _this.deleteUids(removed);
          for (j = 0, len = seen.length; j < len; j++) {
            message = seen[j];
            _this.setMessageUnread(message, false);
          }
          for (k = 0, len1 = unseen.length; k < len1; k++) {
            message = unseen[k];
            _this.setMessageUnread(message, true);
          }
        };
      })(this));
      if (resetTimer) {
        return this.lastFlagRefresh = new Date().getTime();
      }
    };

    FolderSync.prototype.fullFlagCheck = function*(status) {
      var added, general, localUids, removed, seen, uidOptions, uids, unseen;
      if (this.folder.exists !== this.exists || this.folder.uidNext !== status.uidnext || this.folder.highestModseq !== status.highestmodseq || this.lastFullRefresh === 0) {
        uidOptions = {};
        if (this.gmailArchive) {
          uidOptions['X-GM-RAW'] = GMAIL_ARCHIVE_RAW;
        }
        seen = (yield this.backend.uids(this.folder.path, Object.assign({
          seen: true
        }, uidOptions)));
        unseen = (yield this.backend.uids(this.folder.path, Object.assign({
          unseen: true
        }, uidOptions)));
        general = {
          seen: seen,
          unseen: unseen
        };
        uids = slice.call(general.seen).concat(slice.call(general.unseen));
        TimSort.sort(uids, function(a, b) {
          return a - b;
        });
        this.uids = uids;
        localUids = realm.objects('Message').filtered('folder == $0 && deleted == false', this.folder).snapshot().map(function(message) {
          return message.uid;
        });
        added = [];
        removed = this.difference(localUids, this.uids);
        if (this.gmailArchive) {
          added = this.difference(this.uids, localUids);
        }
        if (added.length > 0) {
          added = (yield this.backend.fetchMessages({
            path: this.folder.path,
            sequence: added.join(','),
            bounds: {
              low: added[0]
            },
            byUid: true
          }, this.folder.type));
        }
        seen = [];
        unseen = [];
        if (general.seen.length > 0) {
          seen = this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread != false', this.folder), general.seen, function(idx) {
            return "uid == $" + idx;
          });
        }
        if (general.unseen.length > 0) {
          unseen = this.batchWhereIn(realm.objects('Message').filtered('folder == $0 && unread != true', this.folder), general.unseen, function(idx) {
            return "uid == $" + idx;
          });
        }
        transaction(null, (function(_this) {
          return function() {
            var j, k, len, len1, message;
            Object.assign(_this.folder, {
              highestModseq: status.highestmodseq,
              exists: _this.exists
            });
            _this.expungeUidCache(removed);
            _this.invalidatePurgedMessages();
            _this.deleteUids(removed);
            if (added.length > 0) {
              _this.messagesToConversations(added);
            }
            for (j = 0, len = seen.length; j < len; j++) {
              message = seen[j];
              _this.setMessageUnread(message, false);
            }
            for (k = 0, len1 = unseen.length; k < len1; k++) {
              message = unseen[k];
              _this.setMessageUnread(message, true);
            }
          };
        })(this));
      }
      return this.lastFullRefresh = new Date().getTime();
    };

    FolderSync.prototype.syncNewMessages = function*() {
      var latest, messages, uidOptions;
      uidOptions = {
        uid: '*'
      };
      if (this.gmailArchive) {
        uidOptions.uid = this.folder.uidNext + ':*';
        uidOptions['X-GM-RAW'] = GMAIL_ARCHIVE_RAW;
      }
      latest = (yield this.backend.uids(this.folder.path, uidOptions));
      if ((latest[0] != null) && latest[0] >= this.folder.uidNext) {
        messages = (yield this.backend.fetchMessages({
          path: this.folder.path,
          sequence: (this.gmailArchive ? latest.join(',') : this.folder.uidNext + ':*'),
          bounds: {
            low: this.folder.uidNext
          },
          byUid: true
        }, this.folder.type));
        return transaction(null, (function(_this) {
          return function() {
            var j, len, ref2, ref3, uid, uids;
            if (messages.length === 0) {
              _this.folder.uidNext = ((ref2 = latest[0]) != null ? ref2 : _this.folder.uidNext) + 1;
              _this.outboxHook(_this.folder);
              _this.collectTrash();
              return;
            }
            uids = _this.messagesToConversations(messages);
            TimSort.sort(uids, function(a, b) {
              return a - b;
            });
            if (_this.uids.length === 0 || uids[0] > _this.uids[_this.uids.length - 1]) {
              for (j = 0, len = uids.length; j < len; j++) {
                uid = uids[j];
                _this.uids.push(uid);
              }
            }
            if (uids[uids.length - 1] >= _this.folder.uidNext) {
              _this.folder.uidNext = ((ref3 = uids[uids.length - 1]) != null ? ref3 : _this.folder.uidNext) + 1;
              _this.outboxHook(_this.folder);
              _this.collectTrash();
            }
          };
        })(this));
      } else {
        return transaction(null, (function(_this) {
          return function() {
            _this.outboxHook(_this.folder);
            return _this.collectTrash();
          };
        })(this));
      }
    };

    FolderSync.prototype.collectTrash = function() {
      var conversation, conversations, j, len;
      conversations = realm.objects('Conversation').filtered('deleted == true && account == $0', this.folder.account).snapshot();
      for (j = 0, len = conversations.length; j < len; j++) {
        conversation = conversations[j];
        if (!conversation.isValid()) {
          continue;
        }
        this.hardDeleteConversation(conversation);
      }
    };

    FolderSync.prototype.invalidatePurgedMessages = function() {
      var invalidated, j, len, message;
      invalidated = realm.objects('Message').filtered('tempFolder == $0 && deleted == true && folder != $0', this.folder).snapshot();
      for (j = 0, len = invalidated.length; j < len; j++) {
        message = invalidated[j];
        if (!message.isValid()) {
          continue;
        }
        message.tempFolder = null;
        if (message.conversation.messages.filtered('deleted == false').length === 0) {
          message.conversation.deleted = true;
        }
      }
    };

    FolderSync.prototype.tagConversation = function(address, unsubscribe) {
      var tag;
      tag = 1;
      if ((unsubscribe != null ? unsubscribe.length : void 0) > 0) {
        tag = 3;
      } else if (/^linkedin|twitter|facebook(mail)?|plus\\.google|spring\\.me|habbo|vkontakte|taggedmail|accounts\\.google|netlogmail|flixstermail|email\\.classmates|sonicomail|mx\\.plaxo|odnoklassniki|flickr|wwwemail\\.weeworld|last\\.fm|myspace|myheritage|mixi\\.jp|cyworld|gaiaonline|deviantart|skyrock|weheartit|stumblemail|foursquare|fotolog|friendsreunited|livejournal|studivz|@geni|mail\\.goodreads|tuenti|busuu|@xing|nasza-klasa|hyves|whereareyounow|soundcloudmail|australia\\.care2|t\\.caringbridge|delicious|opendiaryplus|email\\.livemocha|service@trombi|weread-mailer|iwiw\\.hu|admin\\.ibibo|43things|@ravelry|mocospace|no-reply@jiepangmail|couchsurfing|@itsmy|mailer\\.etoro|kiwibox|dxy\\.cn|getglue|vampirefreaks|fotki\\.com|englishbaby|travbuddy|nexopia|librarything|cafemom\\.com|notify\\.fetlifemail|fubar\\.com|zoo\\.gr|faces\\.com|irc-galleria|admin@ryze\\.com|reverbnation|mymfb\\.com|cross.tv|skoob.com.br|indabamusic|hospitalityclub\\.org|partyflock|travellerspoint|gamerdna|filmaffinity|laibhaari|academia\\.edu|faceparty|@mubi\\.com|info@hr\\.com|hedda\\.user\\.lysator\\.liu|cozycot\\.com|patientslikeme|support@gays\\.com|blogster|wiser\\.org|writeaprisoner|zooppa|touchtalent|fuelmyblog|dol2day@dolnow|hubculture|ngopost\\.org|admin@notify\\.vk/i.test(address)) {
        tag = 0;
      } else if (/^news|reply|customer|feedback|support|market|info|notification|ebay|linkedin|deliver|subscription|service|mailer|flipboard|twitter|pinterest|booking\\.com|leumi-card|nytimes|boxteam|businessinsider|everestgear|ebookers|reminder|itunes|-update|justdeals|sportsauthority|sysmail|amazon|report@|hello@|maillist|ynet\\.co|appannie|alert|deals|publisher|online|buy|reuters|ups\\.|@about|membership|^mail@|bmw\\.de|stiftung-warentest|overblog|inscription|register|community|scout24|aolmember|admin@|facebookmail|otherinbox|rakuten|bounces|skydrive|insideapple|promotion@|bounce|communication|corporate|getpocket|@yad2|automated|auto-contact|moltoapp|atom\\.io|clalit\\.org|remind@|alibaba/i.test(address)) {
        tag = 2;
      }
      return tag;
    };

    FolderSync.prototype.messagesToConversations = function(messages, disallowUid) {
      var address, cleanSubject, contact, conversation, conversations, convo, count, duplicate, duplicates, existing, file, files, fromCheck, hash, hashmap, idx, interim, j, k, l, len, len1, len10, len11, len2, len3, len4, len5, len6, len7, len8, len9, m, message, messageIdHeader, messageOverwritten, messageRealm, name, o, overlap, p, participantMap, participantReferences, participantString, participantVals, participants, pushParticipant, q, query, r, ref, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, referencesSelf, s, serverIdDigest, sessionAddresses, t, tempFolder, toCheck, toMap, toselfs, u, uids, unreadValid, v, x;
      uids = [];
      for (x = j = 0, len = messages.length; j < len; x = ++j) {
        message = messages[x];
        if (!disallowUid) {
          uids.push(message.uid);
        }
        messageIdHeader = message.id;
        message.id = ++maxMessage;
        message.messageId = messageIdHeader;
        existing = realm.objects('Message').filtered('folder == $0 && uid == $1 && deleted == false', this.folder, message.uid).find(function() {
          return true;
        });
        if (existing != null) {
          continue;
        }
        cleanSubject = message.subject.replace(/([\[\(] *)?(RE|FWD?|AW|WG) *([-:;)\]][ :;\])-]*|$)|\]+ *$/igm, '');
        message.prefix = (ref2 = message.subject.split(cleanSubject)[0]) != null ? ref2 : '';
        cleanSubject = cleanSubject.trim();
        message.timestamp = new Date(message.sentDate);
        message.participants = [];
        participantVals = [];
        participantMap = new Set();
        participantReferences = {};
        idx = 0;
        pushParticipant = function(arg) {
          var address, addressHash, addressParts, extension, hash, hostParts, k, n, name, names, newName, ref3, ref4, userParts;
          name = arg.name, address = arg.address;
          newName = (ref3 = name != null ? name.trim() : void 0) != null ? ref3 : null;
          address = address.toLowerCase();
          if (newName != null ? newName.length : void 0) {
            names = newName.split(' ');
            newName = ((function() {
              var k, len1, results1;
              results1 = [];
              for (k = 0, len1 = names.length; k < len1; k++) {
                n = names[k];
                results1.push(n.charAt(0).toUpperCase() + n.slice(1));
              }
              return results1;
            })()).join(' ');
          } else {
            addressParts = address.split('@');
            userParts = addressParts[0].split(/\_|\-|\./);
            hostParts = addressParts[1].split(/\_|\-|\./);
            ref4 = hostParts, hostParts = 2 <= ref4.length ? slice.call(ref4, 0, k = ref4.length - 1) : (k = 0, []), extension = ref4[k++];
            newName = ((function() {
              var l, len1, results1;
              results1 = [];
              for (l = 0, len1 = userParts.length; l < len1; l++) {
                n = userParts[l];
                results1.push(n.charAt(0).toUpperCase() + n.slice(1));
              }
              return results1;
            })()).join(' ');
          }
          participantVals.push(address);
          hash = md5(name.toLowerCase() + address);
          addressHash = md5(address);
          participantMap.add(address);
          participantReferences[name + address] = realm.create('Contact', {
            hash: hash,
            name: newName,
            address: address,
            addressHash: addressHash
          }, true);
          message.participants.push(participantReferences[name + address]);
          return idx++;
        };
        ref3 = message.to;
        for (k = 0, len1 = ref3.length; k < len1; k++) {
          contact = ref3[k];
          pushParticipant(contact);
        }
        ref4 = message.cc;
        for (l = 0, len2 = ref4.length; l < len2; l++) {
          contact = ref4[l];
          pushParticipant(contact);
        }
        ref5 = message.from;
        for (m = 0, len3 = ref5.length; m < len3; m++) {
          contact = ref5[m];
          pushParticipant(contact);
        }
        ref6 = message.replyTo;
        for (o = 0, len4 = ref6.length; o < len4; o++) {
          contact = ref6[o];
          pushParticipant(contact);
        }
        ref7 = message.bcc;
        for (p = 0, len5 = ref7.length; p < len5; p++) {
          contact = ref7[p];
          pushParticipant(contact);
        }
        conversations = this.batchWhereIn(realm.objects('Conversation').filtered('account == $0 && subject == $1', this.folder.account, cleanSubject), participantVals, function(idx) {
          return "(participants.address ==[c] $" + idx + ")";
        });
        conversation = null;
        for (q = 0, len6 = conversations.length; q < len6; q++) {
          convo = conversations[q];
          if (!convo.isValid()) {
            continue;
          }
          overlap = 0;
          sessionAddresses = new Set();
          ref8 = convo.participants;
          for (r = 0, len7 = ref8.length; r < len7; r++) {
            address = ref8[r].address;
            if (sessionAddresses.has(address)) {
              continue;
            } else {
              sessionAddresses.add(address);
            }
            if (participantMap.has(address)) {
              overlap++;
            }
            if (overlap >= 2 || overlap === participantMap.size) {
              conversation = convo;
              break;
            }
          }
          sessionAddresses.clear();
          sessionAddresses = null;
        }
        toCheck = false;
        fromCheck = false;
        referencesSelf = false;
        participantString = '';
        toMap = {};
        message.to = message.to.map((function(_this) {
          return function(arg) {
            var address, name, ref;
            name = arg.name, address = arg.address;
            address = address.toLowerCase();
            toMap[address] = true;
            if (address === _this.folder.account.address) {
              toCheck = true;
            }
            ref = participantReferences[name + address];
            ref.rank++;
            participantString += ref.hash;
            return ref;
          };
        })(this));
        message.from = message.from.map((function(_this) {
          return function(arg) {
            var address, name, ref;
            name = arg.name, address = arg.address;
            address = address.toLowerCase();
            if (toMap[address]) {
              referencesSelf = true;
            }
            if (address === _this.folder.account.address) {
              fromCheck = true;
            }
            ref = participantReferences[name + address];
            ref.rank++;
            participantString += ref.hash;
            return ref;
          };
        })(this));
        message.cc = message.cc.map((function(_this) {
          return function(arg) {
            var address, name, ref;
            name = arg.name, address = arg.address;
            address = address.toLowerCase();
            if (address === _this.folder.account.address) {
              toCheck = true;
            }
            ref = participantReferences[name + address];
            ref.rank++;
            participantString += ref.hash;
            return ref;
          };
        })(this));
        toMap = null;
        message.bcc = message.bcc.map(function(arg) {
          var address, name, ref;
          name = arg.name, address = arg.address;
          address = address.toLowerCase();
          ref = participantReferences[name + address];
          ref.rank++;
          participantString += ref.hash;
          return ref;
        });
        message.replyTo = message.replyTo.map(function(arg) {
          var address, name, ref;
          name = arg.name, address = arg.address;
          address = address.toLowerCase();
          ref = participantReferences[name + address];
          ref.rank++;
          participantString += ref.hash;
          return ref;
        });
        message.toSelf = toCheck && fromCheck ? true : false;
        message.folder = this.folder;
        message.tempFolder = this.folder;
        if (message.label != null) {
          tempFolder = realm.objects('Folder').filtered('account == $0 && type == $1', this.folder.account, message.label).find(function() {
            return true;
          });
          if (tempFolder) {
            message.tempFolder = tempFolder;
          } else {
            message.tempFolder = this.folder;
          }
        } else {
          message.tempFolder = this.folder;
        }
        message.references = message.references.join(' ');
        serverIdDigest = messageIdHeader + JSON.stringify(message.bodystructure) + message.subject + participantString + message.references;
        message.serverId = new Date(message.sentDate).getTime() + md5(serverIdDigest);
        query = 'conversation.account.address ==[c] $0 && serverId == $1';
        if (referencesSelf) {
          query += "&& (tempFolder.type == " + message.folder.type + " || tempFolder == null)";
        }
        duplicates = realm.objects('Message').filtered(query, this.folder.account.address, message.serverId).snapshot();
        messageOverwritten = false;
        if (duplicates.length === 1) {
          conversation = null;
          interim = duplicates[0];
          interim.folder = message.folder;
          interim.tempFolder = message.folder;
          if (message.label != null) {
            tempFolder = realm.objects('Folder').filtered('account == $0 && type == $1', this.folder.account, message.label).find(function() {
              return true;
            });
            if (tempFolder) {
              interim.tempFolder = tempFolder;
            } else {
              interim.tempFolder = message.folder;
            }
          } else {
            interim.tempFolder = message.folder;
          }
          interim.uid = message.uid;
          interim.messageId = message.messageId;
          interim.inReplyTo = message.inReplyTo;
          interim.unread = message.unread;
          interim.deleted = disallowUid ? true : false;
          interim.snoozedTo = message.snoozedTo;
          interim.references = message.references;
          message = interim;
          conversation = interim.conversation;
          if (conversation.unread && !message.unread) {
            unreadValid = conversation.messages.filtered('unread == true').find(function() {
              return true;
            });
            if (unreadValid == null) {
              conversation.unread = false;
            }
          }
          messageOverwritten = true;
        } else if (duplicates.length > 1) {
          for (s = 0, len8 = duplicates.length; s < len8; s++) {
            duplicate = duplicates[s];
            if (!duplicate.isValid()) {
              continue;
            }
            realm["delete"](duplicate.files);
          }
          realm["delete"](duplicates);
        }
        if (conversation == null) {
          conversation = realm.create('Conversation', {
            id: ++maxConvo,
            subject: cleanSubject,
            toSelf: false,
            tag: 1,
            unread: false,
            timestamp: message.timestamp,
            account: this.folder.account
          });
        }
        conversation.deleted = false;
        if (message.unread) {
          conversation.unread = true;
        }
        if (message.timestamp.getTime() >= conversation.timestamp.getTime()) {
          conversation.timestamp = message.timestamp;
          conversation.tag = (ref9 = this.tagConversation((ref10 = message.from[0]) != null ? ref10.address : void 0, message.unsubscribe)) != null ? ref9 : 1;
        }
        messageRealm = {};
        if (messageOverwritten) {
          messageRealm = message;
        } else {
          participants = new Set();
          existing = conversation.participants.map(function(arg) {
            var hash;
            hash = arg.hash;
            return hash;
          });
          ref11 = message.participants;
          for (t = 0, len9 = ref11.length; t < len9; t++) {
            ref = ref11[t];
            name = ref.name, address = ref.address, hash = ref.hash;
            if (indexOf.call(existing, hash) < 0 && !participants.has(hash)) {
              conversation.participants.push(ref);
            }
            participants.add(hash);
          }
          conversation.toSelf = participants.size > 1 ? false : true;
          message.conversation = conversation;
          idx = conversation.messages.push(message) - 1;
          messageRealm = conversation.messages[idx];
        }
        if ((conversation.lastExchange == null) || message.timestamp > conversation.lastExchange.timestamp) {
          conversation.lastExchange = messageRealm;
          conversation.snoozed = messageRealm.snoozedTo != null;
        }
        files = this.backend.getFiles(message.bodystructure, messageRealm) || [];
        for (u = 0, len10 = files.length; u < len10; u++) {
          file = files[u];
          file.id = ++maxFile;
        }
        messageRealm.files = files;
        if (!conversation.hasFiles && files.length > 0) {
          conversation.hasFiles = true;
        }
        hashmap = {};
        count = conversation.messages.length;
        toselfs = conversation.messages.filtered('toSelf == true').snapshot();
        for (v = 0, len11 = toselfs.length; v < len11; v++) {
          message = toselfs[v];
          if (hashmap[message.serverId]) {
            count--;
          }
          hashmap[message.serverId] = true;
        }
        conversation.count = count;
        if (disallowUid) {
          uids.push(conversation);
        }
      }
      return uids;
    };

    FolderSync.prototype.deleteUids = function(uids) {
      var active, j, len, message, messages, ref2, ref3;
      if (uids.length === 0) {
        return;
      }
      messages = this.batchWhereIn(realm.objects('Message').filtered('folder == $0', this.folder), uids, function(idx) {
        return "uid == $" + idx;
      });
      for (j = 0, len = messages.length; j < len; j++) {
        message = messages[j];
        if (!message.isValid()) {
          continue;
        }
        active = message.conversation.messages.filtered('deleted == false');
        if (active.length > 1) {
          if (((ref2 = message.tempFolder) != null ? ref2.path : void 0) === message.folder.path) {
            message.tempFolder = null;
          }
          message.deleted = true;
        } else if (!message.deleted) {
          if (((ref3 = message.tempFolder) != null ? ref3.path : void 0) === message.folder.path) {
            message.tempFolder = null;
          }
          message.deleted = true;
          if (message.tempFolder == null) {
            message.conversation.deleted = true;
          }
        }
      }
    };

    FolderSync.prototype.hardDeleteConversation = function(conversation) {
      var j, len, message, messages, ref2, track;
      messages = conversation.messages.filtered('folder == $0', this.folder).snapshot();
      if (messages.length > 0) {
        track = messages[0];
        ref2 = messages.slice(1);
        for (j = 0, len = ref2.length; j < len; j++) {
          message = ref2[j];
          if (!message.isValid()) {
            continue;
          }
          realm["delete"](message.files);
          realm["delete"](message);
        }
        if (conversation != null ? conversation.isValid() : void 0) {
          realm["delete"](conversation);
        }
        if (track != null ? track.isValid() : void 0) {
          realm["delete"](track);
        }
      }
    };

    FolderSync.prototype.setMessageUnread = function(message, unread) {
      var unreadMgs;
      message.unread = unread;
      if (message.conversation.messages.length === 1) {
        return message.conversation.unread = unread;
      } else if (message.conversation.unread !== message.unread) {
        if (unread) {
          return message.conversation.unread = true;
        } else {
          unreadMgs = message.conversation.messages.filtered('unread == true');
          if (unreadMgs.length === 0) {
            return message.conversation.unread = false;
          }
        }
      }
    };

    FolderSync.prototype.difference = function(old, latest, rehash, latestHash) {
      var hash, i, j, k, l, len, len1, len2, oldHash, result;
      hash = latestHash || {};
      result = [];
      oldHash = {};
      if (!latestHash) {
        for (j = 0, len = latest.length; j < len; j++) {
          i = latest[j];
          hash[i] = true;
        }
      }
      hash[latest.length] = false;
      if (rehash) {
        for (k = 0, len1 = old.length; k < len1; k++) {
          i = old[k];
          oldHash[i] = true;
          if (hash[i] === void 0) {
            result.push(i);
          } else if (hash[i] === false) {
            break;
          }
        }
        return [result, oldHash];
      } else {
        for (l = 0, len2 = old.length; l < len2; l++) {
          i = old[l];
          if (hash[i] === void 0) {
            result.push(i);
          } else if (hash[i] === false) {
            break;
          }
        }
      }
      return result;
    };

    FolderSync.prototype.batchWhereIn = function(realmQuery, items, iterator) {
      var batch, batchSize, batches, idx, item, itemSet, j, k, l, len, m, query, ref2, ref3, ref4, ref5, results, start;
      results = [];
      batchSize = 10000;
      if (items.length > batchSize) {
        batches = Math.ceil(items.length / batchSize);
        for (batch = j = 1, ref2 = batches; 1 <= ref2 ? j <= ref2 : j >= ref2; batch = 1 <= ref2 ? ++j : --j) {
          start = (batch * batchSize) - batchSize;
          itemSet = items.slice(start, start + batchSize);
          query = '';
          for (idx = k = 0, ref3 = itemSet.length; 0 <= ref3 ? k < ref3 : k > ref3; idx = 0 <= ref3 ? ++k : --k) {
            query += iterator(idx);
            query += ' || ';
          }
          query = query.slice(0, query.length - 4);
          ref4 = realmQuery.filtered.apply(realmQuery, [query].concat(slice.call(itemSet))).snapshot();
          for (l = 0, len = ref4.length; l < len; l++) {
            item = ref4[l];
            if (!item.isValid()) {
              continue;
            }
            results.push(item);
          }
        }
      } else {
        query = '';
        for (idx = m = 0, ref5 = items.length; 0 <= ref5 ? m < ref5 : m > ref5; idx = 0 <= ref5 ? ++m : --m) {
          query += iterator(idx);
          query += ' || ';
        }
        query = query.slice(0, query.length - 4);
        if (items.length !== 0) {
          results = realmQuery.filtered.apply(realmQuery, [query].concat(slice.call(items))).snapshot();
        }
      }
      return results;
    };

    return FolderSync;

  })();

  module.exports = wrap(FolderSync);

}).call(this);


},{"../../utils/md5":188,"../constants":171,"../helpers":172,"../realm":182,"async-class":2,"bluebird":4,"dateformat":49,"emailjs-imap-client":68,"timsort":154}],186:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0

/*
  'snooze': {}
'draft': {
  'send': {} # TODO
  'update': {} # TODO
  'delete': {} # TODO
}
'folder': {
  'rename': class
  'path': class
  'delete': class
}
 */

(function() {
  var CONSTANTS, Outbox, Promise, realm, tasks, transaction, wrap,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = requireb('bluebird');

  Promise.coroutine.addYieldHandler(function(yielded) {
    if (Array.isArray(yielded)) {
      return Promise.all(yielded);
    }
  });

  realm = requireb('../realm');

  wrap = requireb('async-class').wrap;

  CONSTANTS = requireb('../constants');

  transaction = requireb('../helpers').transaction;

  tasks = {};

  tasks[CONSTANTS.OUTBOX.CONVERSATIONS] = {};

  tasks[CONSTANTS.OUTBOX.CONVERSATIONS][CONSTANTS.ACTIONS.MOVE] = {
    waitForIMAP: true,
    remote: function(SyncEngine, task) {
      return Promise.coroutine(function*() {
        var backend, conversation, foldermap, i, len, path, ref, uids;
        foldermap = {};
        ref = task.conversations;
        for (i = 0, len = ref.length; i < len; i++) {
          conversation = ref[i];
          conversation.messages.filtered('folder.type != $0 && folder.type != $1 && folder.path != $2', CONSTANTS.FOLDER.SENT, CONSTANTS.FOLDER.DRAFTS, task.targetState).snapshot().map(function(message) {
            var name;
            if (foldermap[name = message.folder.path] == null) {
              foldermap[name] = [];
            }
            return foldermap[message.folder.path].push(message.uid);
          });
        }
        for (path in foldermap) {
          uids = foldermap[path];
          backend = SyncEngine.accounts[task.account.address].engines[path].backend;
          (yield backend.moveMessages(path, uids, task.targetState));
        }
      })();
    },
    local: function(task) {
      var conversation, i, j, len, len1, message, ref, ref1, targetFolder;
      targetFolder = realm.objects('Folder').filtered('account == $0 && path == $1', task.account, task.targetState).find(function() {
        return true;
      });
      if (!targetFolder) {
        throw 'Moving conversations to unknown folder';
      }
      ref = task.conversations.snapshot();
      for (i = 0, len = ref.length; i < len; i++) {
        conversation = ref[i];
        ref1 = conversation.messages.filtered('folder.type != $0 && folder.type != $1', CONSTANTS.FOLDER.SENT, CONSTANTS.FOLDER.DRAFTS).snapshot();
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          message = ref1[j];
          message.tempFolder = targetFolder;
        }
      }
    }
  };

  tasks[CONSTANTS.OUTBOX.CONVERSATIONS][CONSTANTS.ACTIONS.DELETE] = {
    waitForIMAP: false,
    remote: function(SyncEngine, task) {
      return Promise.coroutine(function*() {
        var backend, conversation, foldermap, i, len, path, ref, uids;
        foldermap = {};
        ref = task.conversations;
        for (i = 0, len = ref.length; i < len; i++) {
          conversation = ref[i];
          conversation.messages.filtered('deleted == false').snapshot().map(function(message) {
            var name;
            if (foldermap[name = message.folder.path] == null) {
              foldermap[name] = [];
            }
            return foldermap[message.folder.path].push(message.uid);
          });
        }
        for (path in foldermap) {
          uids = foldermap[path];
          backend = SyncEngine.accounts[task.account.address].engines[path].backend;
          (yield backend.deleteMessages(path, uids));
        }
      })();
    },
    local: function(task) {
      var conversation, i, len, ref;
      ref = task.conversations;
      for (i = 0, len = ref.length; i < len; i++) {
        conversation = ref[i];
        conversation.deleted = true;
      }
    }
  };

  tasks[CONSTANTS.OUTBOX.CONVERSATIONS][CONSTANTS.ACTIONS.UNREAD] = {
    waitForIMAP: false,
    remote: function(SyncEngine, task) {
      return Promise.coroutine(function*() {
        var backend, booleanState, conversation, foldermap, i, len, path, ref, uids;
        booleanState = task.targetState === '1';
        foldermap = {};
        ref = task.conversations;
        for (i = 0, len = ref.length; i < len; i++) {
          conversation = ref[i];
          conversation.messages.filtered('unread != $0', booleanState).snapshot().map(function(message) {
            var name;
            if (foldermap[name = message.folder.path] == null) {
              foldermap[name] = [];
            }
            return foldermap[message.folder.path].push(message.uid);
          });
        }
        for (path in foldermap) {
          uids = foldermap[path];
          backend = SyncEngine.accounts[task.account.address].engines[path].backend;
          (yield backend.markMessages(path, uids, booleanState));
        }
      })();
    },
    local: function(task) {
      var conversation, i, len, ref;
      ref = task.conversations;
      for (i = 0, len = ref.length; i < len; i++) {
        conversation = ref[i];
        conversation.unread = task.targetState === '1';
      }
    }
  };

  tasks[CONSTANTS.OUTBOX.CONVERSATIONS][CONSTANTS.ACTIONS.SNOOZE] = {
    waitForIMAP: false,
    remote: function(SyncEngine, task) {
      return Promise.coroutine(function*() {
        var backend, conversation, foldermap, i, len, path, ref, snoozedTo, target, uids;
        target = null;
        if (task.targetState[0] === 'M') {
          target = 'M';
        } else if (task.targetState[0] === 'D') {
          target = 'D';
        }
        snoozedTo = new Date(parseInt(target != null ? task.targetState.slice(1) : task.targetState)).getTime();
        foldermap = {};
        ref = task.conversations;
        for (i = 0, len = ref.length; i < len; i++) {
          conversation = ref[i];
          conversation.messages.snapshot().map(function(message) {
            var name;
            if (foldermap[name = message.folder.path] == null) {
              foldermap[name] = [];
            }
            return foldermap[message.folder.path].push(message.uid);
          });
        }
        for (path in foldermap) {
          uids = foldermap[path];
          backend = SyncEngine.accounts[task.account.address].engines[path].backend;
          (yield backend.snoozeMessages(path, uids, snoozedTo, target));
        }
      })();
    },
    local: function(task) {
      var conversation, i, len, ref, snoozedTo, target;
      target = null;
      if (task.targetState[0] === 'M') {
        target = 'M';
      } else if (task.targetState[0] === 'D') {
        target = 'D';
      }
      snoozedTo = new Date(parseInt(target != null ? task.targetState.slice(1) : task.targetState));
      ref = task.conversations;
      for (i = 0, len = ref.length; i < len; i++) {
        conversation = ref[i];
        conversation.snoozed = true;
        conversation.lastExchange.snoozedTo = snoozedTo;

        /*
        for message in conversation.messages
          message.snoozedTo = snoozedTo
         */
      }
    }
  };

  tasks[CONSTANTS.OUTBOX.CONVERSATIONS][CONSTANTS.ACTIONS.PURGE] = {
    waitForIMAP: false,
    remote: function(SyncEngine, task) {
      return Promise.coroutine(function*() {
        var backend, conversation, conversations, foldermap, i, len, path, uids;
        foldermap = {};
        conversations = realm.objects('Conversation').filtered('account == $0 && deleted == true && !(messages.tempFolder.type == 1 || messages.tempFolder.type == 5) && messages.tempFolder.type == 4', task.account).snapshot();
        for (i = 0, len = conversations.length; i < len; i++) {
          conversation = conversations[i];
          conversation.messages.filtered('deleted == false && tempFolder.type != 4').snapshot().map(function(message) {
            var name;
            if (foldermap[name = message.folder.path] == null) {
              foldermap[name] = [];
            }
            return foldermap[message.folder.path].push(message.uid);
          });
        }
        for (path in foldermap) {
          uids = foldermap[path];
          backend = SyncEngine.accounts[task.account.address].engines[path].backend;
          (yield backend.deleteMessages(path, uids));
        }
        backend = SyncEngine.accounts[task.account.address].engines[task.folder.path].backend;
        (yield backend.purgeFolder(task.folder.path));
      })();
    },
    local: function(task) {
      var conversation, conversations, i, len;
      if (task.folder.type !== 4) {
        return;
      }
      conversations = realm.objects('Conversation').filtered('account == $0 && !(messages.tempFolder.type == 1 || messages.tempFolder.type == 5) && messages.tempFolder.type == 4', task.account).snapshot();
      for (i = 0, len = conversations.length; i < len; i++) {
        conversation = conversations[i];
        conversation.deleted = true;
      }
    }
  };

  Outbox = (function() {
    Outbox.prototype.items = [];

    Outbox.prototype.running = false;

    Outbox.prototype.lastTask = null;

    function Outbox(SyncEngine1) {
      var dangling;
      this.SyncEngine = SyncEngine1;
      this.runTask = bind(this.runTask, this);
      this.undoTask = bind(this.undoTask, this);
      this.addTask = bind(this.addTask, this);
      this.run = bind(this.run, this);
      this.syncHook = bind(this.syncHook, this);
      this.listDependencies = bind(this.listDependencies, this);
      this.reset = bind(this.reset, this);
      dangling = realm.objects('Outbox').filtered('waitingForIMAP == true');
      if (dangling.length > 0) {
        transaction(null, function() {
          return realm["delete"](dangling);
        });
      }
      this.items = realm.objects('Outbox').sorted('timestamp');
      this.items.addListener((function(_this) {
        return function(collection, changes) {
          if (changes.insertions.length > 0 || changes.modifications.length > 0) {
            if (changes.insertions.length > 0) {
              transaction(null, function() {
                var err, error, i, idx, item, len, ref, results;
                try {
                  ref = changes.insertions;
                  results = [];
                  for (i = 0, len = ref.length; i < len; i++) {
                    idx = ref[i];
                    item = _this.items[idx];
                    if (!item.isValid()) {
                      continue;
                    }
                    results.push(tasks[item.target][item.type].local(item));
                  }
                  return results;
                } catch (error) {
                  err = error;
                  return console.log(err);
                }
              });
            }
          }
          _this.run();
        };
      })(this));
      this.run();
      this.SyncEngine.setOutboxHook(this.syncHook);
    }

    Outbox.prototype.reset = function() {
      var dangling;
      dangling = realm.objects('Outbox').filtered('waitingForIMAP == true');
      if (dangling.length > 0) {
        transaction(null, function() {
          return realm["delete"](dangling);
        });
      }
      this.run();
      return this.SyncEngine.setOutboxHook(this.syncHook);
    };

    Outbox.prototype.listDependencies = function(item) {
      var dependencies, hashmap, i, id, ids, j, len, len1, parent, potentialParents, ref;
      dependencies = [];
      hashmap = {};
      ids = item.conversations.snapshot().forEach(function(arg) {
        var id;
        id = arg.id;
        return hashmap[id] = true;
      });
      potentialParents = this.items.filtered('account == $0 && type == $1 && target == $2 && timestamp < $3', item.account, item.type, item.target, item.timestamp).snapshot();
      this.dependencies = [];
      for (i = 0, len = potentialParents.length; i < len; i++) {
        parent = potentialParents[i];
        ref = parent.conversations;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          id = ref[j];
          if (hashmap[id] != null) {
            dependencies.push(parent);
            break;
          }
        }
      }
      return [dependencies, hashmap];
    };

    Outbox.prototype.syncHook = function(folder) {
      var removable;
      console.log('hook called..');
      removable = this.items.filtered('account == $0 && waitingForIMAP == true && targetState == $1', folder.account, folder.path);
      if (removable.length > 0) {
        return realm["delete"](removable);
      }
    };

    Outbox.prototype.run = function() {
      var dependencies, hashmap, i, item, len, ref, ref1;
      ref = this.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (!item.isValid()) {
          continue;
        }
        if (!item.waitingForIMAP) {
          ref1 = this.listDependencies(item), dependencies = ref1[0], hashmap = ref1[1];
          if (dependencies.length === 0) {
            this.runTask(item, hashmap);
          }
        }
      }
    };

    Outbox.prototype.addTask = function(task) {
      return transaction(null, (function(_this) {
        return function() {
          tasks[task.target][task.type].local(task);
          return _this.items.push(task);
        };
      })(this));
    };

    Outbox.prototype.undoTask = function(task) {
      return transaction(null, (function(_this) {
        return function() {
          var targetState;
          targetState = task.initialState;
          task.initialState = task.targetState;
          task.targetState = targetState;
          return task.timestamp = new Date();
        };
      })(this));
    };

    Outbox.prototype.runTask = function*(task, hashmap) {
      var err, error;
      if (task.waitingForIMAP || !navigator.onLine) {
        return;
      }
      try {
        (yield tasks[task.target][task.type].remote(this.SyncEngine, task));
        return transaction(null, (function(_this) {
          return function() {
            if (tasks[task.target][task.type].waitForIMAP) {
              return task.waitingForIMAP = true;
            } else {
              return realm["delete"](task);
            }
          };
        })(this));
      } catch (error) {
        err = error;
        console.log(err);
        return transaction(null, (function(_this) {
          return function() {
            if (task.attempts >= 5) {
              console.log('conflict resolution not complete');

              /*
              dependencies = [] # just like dependency code but with no timestamp constraint
              
              hashmap = task.hashmap() # we can cache this from dependency checks!
              transaction null, =>
                for item in dependencies
                  for conversation in item.conversations
                    if hashmap[conversation.id]? # hmm, I feel like it might be redundant to run this after a dependency fetch...
                      realm.delete(conversation)
               */
              return realm["delete"](task);
            } else {
              return task.attempts++;
            }
          };
        })(this));
      }
    };

    return Outbox;

  })();

  module.exports = wrap(Outbox);

}).call(this);


},{"../constants":171,"../helpers":172,"../realm":182,"async-class":2,"bluebird":4}],187:[function(requireb,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var SnoozeSync, realm, transaction, wrap,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  realm = requireb('../realm');

  wrap = requireb('async-class').wrap;

  transaction = requireb('../helpers').transaction;

  SnoozeSync = (function() {
    SnoozeSync.prototype.running = false;

    SnoozeSync.prototype.timers = [];

    function SnoozeSync(engine) {
      this.engine = engine;
      this.sync = bind(this.sync, this);
      this.run = bind(this.run, this);
      this.reset = bind(this.reset, this);
    }

    SnoozeSync.prototype.reset = function() {
      var i, len, ref, timer;
      ref = this.timers;
      for (i = 0, len = ref.length; i < len; i++) {
        timer = ref[i];
        clearTimeout(timer);
      }
      this.timers = [];
    };

    SnoozeSync.prototype.run = function*() {
      var address, backends, flag, flags, i, inbox, len, now, ref, ref1, removeFlags, timestamp;
      ref = this.engine.accounts;
      for (address in ref) {
        backends = ref[address].backends;
        inbox = realm.objects('Folder').filtered('account.address == $0 && type == 1', address).find(function() {
          return true;
        });
        if (!(inbox != null ? inbox.isValid() : void 0)) {
          continue;
        }
        flags = (yield backends['ACTION_CLIENT'].client.selectMailbox(inbox.path)).flags;
        now = new Date().getTime();
        removeFlags = [];
        for (i = 0, len = flags.length; i < len; i++) {
          flag = flags[i];
          if (flag.indexOf('DMSZ') === 0) {
            timestamp = parseInt((ref1 = flag[4]) === 'M' || ref1 === 'D' ? flag.slice(5) : flag.slice(4));
            if ((timestamp == null) || timestamp <= now) {
              removeFlags.push(flag);
            } else {
              this.timers.push(setTimeout((function(_this) {
                return function*() {
                  (yield backends['ACTION_CLIENT'].wakeMessages(inbox.path, [flag]));
                  return _this.timers.splice(0, 1);
                };
              })(this), new Date(timestamp - new Date)));
            }
          }
        }
        (yield backends['ACTION_CLIENT'].wakeMessages(inbox.path, removeFlags));
      }
      this.sync();
    };

    SnoozeSync.prototype.sync = function() {
      var snoozed;
      snoozed = realm.objects('Conversation').filtered('snoozed == true && messages.snoozedTo <= $0', new Date()).snapshot();
      if (snoozed.length > 0) {
        return transaction(null, (function(_this) {
          return function() {
            var conversation, i, len;
            for (i = 0, len = snoozed.length; i < len; i++) {
              conversation = snoozed[i];
              conversation.snoozed = false;
            }
          };
        })(this));
      }
    };

    return SnoozeSync;

  })();

  module.exports = wrap(SnoozeSync);

}).call(this);


},{"../helpers":172,"../realm":182,"async-class":2}],188:[function(requireb,module,exports){
/*
Modifications By Marcus Ferrario (MIT)
(The MIT License)

Copyright (c) 2014-2015 iReal

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var $0 = [], // result
	$1 = [], // tail
	$2 = [], // blocks
	$3 = [], // s1
	$4 = ("0123456789abcdef").split(""), // hex
	$5 = [], // s2
	$6 = [], // state
	$7 = false, // is state created
	$8 = 0, // len_cache
	$9 = 0, // len
	BUF = [];

$1 = new Int32Array(16);
$2 = new Int32Array(16);
$3 = new Int32Array(4);
$5 = new Int32Array(4);
$6 = new Int32Array(4);
BUF = new Int32Array(4);

// fill s1
$3[0] = 128;
$3[1] = 32768;
$3[2] = 8388608;
$3[3] = -2147483648;

// fill s2
$5[0] = 0;
$5[1] = 8;
$5[2] = 16;
$5[3] = 24;

function encode(s) {
	var utf = "",
		enc = "",
		start = 0,
		end = 0;

	for(var i = 0, j = s.length;i < j;i++) {
		var c = s.charCodeAt(i);

		if(c < 128) {
			end++;
			continue;
		}else if(c < 2048)
			enc = String.fromCharCode((c >> 6) | 192, (c & 63) | 128);
		else
			enc = String.fromCharCode((c >> 12) | 224, ((c >> 6) & 63) | 128, (c & 63) | 128);

		if(end > start)
			utf += s.slice(start, end);

		utf += enc;
		start = end = i + 1;
	}

	if(end > start)
		utf += s.slice(start, j);

	return utf;
}

function md5_update(s) {
	var i, I;

	s += "";
	$7 = false;
	$8 = $9 = s.length;

	if($9 > 63) {
		getBlocks(s.substring(0, 64));
		md5cycle($2);
		$7 = true;

		for(i = 128;i <= $9;i += 64) {
			getBlocks(s.substring(i - 64, i));
			md5cycleAdd($2);
		}

		s = s.substring(i - 64);
		$9 = s.length;
	}

	$1[0] = $1[1] = $1[2] = $1[3] =
	$1[4] = $1[5] = $1[6] = $1[7] =
	$1[8] = $1[9] = $1[10] = $1[11] =
	$1[12] = $1[13] = $1[14] = $1[15] = 0;

	for(i = 0;i < $9;i++) {
		I = i & 3;
		if(I === 0)
			$1[i >> 2] = s.charCodeAt(i);
		else
			$1[i >> 2] |= s.charCodeAt(i) << $5[I];
	}
	$1[i >> 2] |= $3[i & 3];

	if(i > 55) {
		if($7) md5cycleAdd($1);
		else {
			md5cycle($1);
			$7 = true;
		}

		return md5cycleAdd([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $8 << 3, 0]);
	}

	$1[14] = $8 << 3;

	if($7) md5cycleAdd($1);
	else md5cycle($1);
}

function getBlocks(s) {
	for(var i = 16;i--;) {
		var I = i << 2;
		$2[i] = s.charCodeAt(I) + (s.charCodeAt(I + 1) << 8) + (s.charCodeAt(I + 2) << 16) + (s.charCodeAt(I + 3) << 24);
	}
}

function md5(data, ascii, arrayOutput) {
	md5_update(ascii ? data : encode(data));

	var tmp = $6[0];$0[1] = $4[tmp & 15];
	$0[0] = $4[(tmp >>= 4) & 15];
	$0[3] = $4[(tmp >>= 4) & 15];
	$0[2] = $4[(tmp >>= 4) & 15];
	$0[5] = $4[(tmp >>= 4) & 15];
	$0[4] = $4[(tmp >>= 4) & 15];
	$0[7] = $4[(tmp >>= 4) & 15];
	$0[6] = $4[(tmp >>= 4) & 15];

	tmp = $6[1];$0[9] = $4[tmp & 15];
	$0[8] = $4[(tmp >>= 4) & 15];
	$0[11] = $4[(tmp >>= 4) & 15];
	$0[10] = $4[(tmp >>= 4) & 15];
	$0[13] = $4[(tmp >>= 4) & 15];
	$0[12] = $4[(tmp >>= 4) & 15];
	$0[15] = $4[(tmp >>= 4) & 15];
	$0[14] = $4[(tmp >>= 4) & 15];

	tmp = $6[2];$0[17] = $4[tmp & 15];
	$0[16] = $4[(tmp >>= 4) & 15];
	$0[19] = $4[(tmp >>= 4) & 15];
	$0[18] = $4[(tmp >>= 4) & 15];
	$0[21] = $4[(tmp >>= 4) & 15];
	$0[20] = $4[(tmp >>= 4) & 15];
	$0[23] = $4[(tmp >>= 4) & 15];
	$0[22] = $4[(tmp >>= 4) & 15];

	tmp = $6[3];$0[25] = $4[tmp & 15];
	$0[24] = $4[(tmp >>= 4) & 15];
	$0[27] = $4[(tmp >>= 4) & 15];
	$0[26] = $4[(tmp >>= 4) & 15];
	$0[29] = $4[(tmp >>= 4) & 15];
	$0[28] = $4[(tmp >>= 4) & 15];
	$0[31] = $4[(tmp >>= 4) & 15];
	$0[30] = $4[(tmp >>= 4) & 15];

	return arrayOutput ? $0 : $0.join("");
}

function R(q, a, b, x, s1, s2, t) {
	a += q + x + t;
	return ((a << s1 | a >>> s2) + b) << 0;
}

function md5cycle(k) {
	md5_rounds(0, 0, 0, 0, k);

	$6[0] = (BUF[0] + 1732584193) << 0;
	$6[1] = (BUF[1] - 271733879) << 0;
	$6[2] = (BUF[2] - 1732584194) << 0;
	$6[3] = (BUF[3] + 271733878) << 0;
}

function md5cycleAdd(k) {
	md5_rounds($6[0], $6[1], $6[2], $6[3], k);

	$6[0] = (BUF[0] + $6[0]) << 0;
	$6[1] = (BUF[1] + $6[1]) << 0;
	$6[2] = (BUF[2] + $6[2]) << 0;
	$6[3] = (BUF[3] + $6[3]) << 0;
}

function md5_rounds(a, b, c, d, k) {
	var bc, da;

	if($7) {
		a = R(((c ^ d) & b) ^ d, a, b, k[0], 7, 25, -680876936);
		d = R(((b ^ c) & a) ^ c, d, a, k[1], 12, 20, -389564586);
		c = R(((a ^ b) & d) ^ b, c, d, k[2], 17, 15, 606105819);
		b = R(((d ^ a) & c) ^ a, b, c, k[3], 22, 10, -1044525330);
	}else{
		a = k[0] - 680876937;
		a = ((a << 7 | a >>> 25) - 271733879) << 0;
		d = k[1] - 117830708 + ((2004318071 & a) ^ -1732584194);
		d = ((d << 12 | d >>> 20) + a) << 0;
		c = k[2] - 1126478375 + (((a ^ -271733879) & d) ^ -271733879);
		c = ((c << 17 | c >>> 15) + d) << 0;
		b = k[3] - 1316259209 + (((d ^ a) & c) ^ a);
		b = ((b << 22 | b >>> 10) + c) << 0;
	}

	a = R(((c ^ d) & b) ^ d, a, b, k[4], 7, 25, -176418897);
	d = R(((b ^ c) & a) ^ c, d, a, k[5], 12, 20, 1200080426);
	c = R(((a ^ b) & d) ^ b, c, d, k[6], 17, 15, -1473231341);
	b = R(((d ^ a) & c) ^ a, b, c, k[7], 22, 10, -45705983);
	a = R(((c ^ d) & b) ^ d, a, b, k[8], 7, 25, 1770035416);
	d = R(((b ^ c) & a) ^ c, d, a, k[9], 12, 20, -1958414417);
	c = R(((a ^ b) & d) ^ b, c, d, k[10], 17, 15, -42063);
	b = R(((d ^ a) & c) ^ a, b, c, k[11], 22, 10, -1990404162);
	a = R(((c ^ d) & b) ^ d, a, b, k[12], 7, 25, 1804603682);
	d = R(((b ^ c) & a) ^ c, d, a, k[13], 12, 20, -40341101);
	c = R(((a ^ b) & d) ^ b, c, d, k[14], 17, 15, -1502002290);
	b = R(((d ^ a) & c) ^ a, b, c, k[15], 22, 10, 1236535329);

	a = R(((b ^ c) & d) ^ c, a, b, k[1], 5, 27, -165796510);
	d = R(((a ^ b) & c) ^ b, d, a, k[6], 9, 23, -1069501632);
	c = R(((d ^ a) & b) ^ a, c, d, k[11], 14, 18, 643717713);
	b = R(((c ^ d) & a) ^ d, b, c, k[0], 20, 12, -373897302);
	a = R(((b ^ c) & d) ^ c, a, b, k[5], 5, 27, -701558691);
	d = R(((a ^ b) & c) ^ b, d, a, k[10], 9, 23, 38016083);
	c = R(((d ^ a) & b) ^ a, c, d, k[15], 14, 18, -660478335);
	b = R(((c ^ d) & a) ^ d, b, c, k[4], 20, 12, -405537848);
	a = R(((b ^ c) & d) ^ c, a, b, k[9], 5, 27, 568446438);
	d = R(((a ^ b) & c) ^ b, d, a, k[14], 9, 23, -1019803690);
	c = R(((d ^ a) & b) ^ a, c, d, k[3], 14, 18, -187363961);
	b = R(((c ^ d) & a) ^ d, b, c, k[8], 20, 12, 1163531501);
	a = R(((b ^ c) & d) ^ c, a, b, k[13], 5, 27, -1444681467);
	d = R(((a ^ b) & c) ^ b, d, a, k[2], 9, 23, -51403784);
	c = R(((d ^ a) & b) ^ a, c, d, k[7], 14, 18, 1735328473);
	b = R(((c ^ d) & a) ^ d, b, c, k[12], 20, 12, -1926607734);

	bc = b ^ c;
	a = R(bc ^ d, a, b, k[5], 4, 28, -378558);
	d = R(bc ^ a, d, a, k[8], 11, 21, -2022574463);
	da = d ^ a;
	c = R(da ^ b, c, d, k[11], 16, 16, 1839030562);
	b = R(da ^ c, b, c, k[14], 23, 9, -35309556);
	bc = b ^ c;
	a = R(bc ^ d, a, b, k[1], 4, 28, -1530992060);
	d = R(bc ^ a, d, a, k[4], 11, 21, 1272893353);
	da = d ^ a;
	c = R(da ^ b, c, d, k[7], 16, 16, -155497632);
	b = R(da ^ c, b, c, k[10], 23, 9, -1094730640);
	bc = b ^ c;
	a = R(bc ^ d, a, b, k[13], 4, 28, 681279174);
	d = R(bc ^ a, d, a, k[0], 11, 21, -358537222);
	da = d ^ a;
	c = R(da ^ b, c, d, k[3], 16, 16, -722521979);
	b = R(da ^ c, b, c, k[6], 23, 9, 76029189);
	bc = b ^ c;
	a = R(bc ^ d, a, b, k[9], 4, 28, -640364487);
	d = R(bc ^ a, d, a, k[12], 11, 21, -421815835);
	da = d ^ a;
	c = R(da ^ b, c, d, k[15], 16, 16, 530742520);
	b = R(da ^ c, b, c, k[2], 23, 9, -995338651);

	a = R(c ^ (b | ~d), a, b, k[0], 6, 26, -198630844);
	d = R(b ^ (a | ~c), d, a, k[7], 10, 22, 1126891415);
	c = R(a ^ (d | ~b), c, d, k[14], 15, 17, -1416354905);
	b = R(d ^ (c | ~a), b, c, k[5], 21, 11, -57434055);
	a = R(c ^ (b | ~d), a, b, k[12], 6, 26, 1700485571);
	d = R(b ^ (a | ~c), d, a, k[3], 10, 22, -1894986606);
	c = R(a ^ (d | ~b), c, d, k[10], 15, 17, -1051523);
	b = R(d ^ (c | ~a), b, c, k[1], 21, 11, -2054922799);
	a = R(c ^ (b | ~d), a, b, k[8], 6, 26, 1873313359);
	d = R(b ^ (a | ~c), d, a, k[15], 10, 22, -30611744);
	c = R(a ^ (d | ~b), c, d, k[6], 15, 17, -1560198380);
	b = R(d ^ (c | ~a), b, c, k[13], 21, 11, 1309151649);
	a = R(c ^ (b | ~d), a, b, k[4], 6, 26, -145523070);
	d = R(b ^ (a | ~c), d, a, k[11], 10, 22, -1120210379);
	c = R(a ^ (d | ~b), c, d, k[2], 15, 17, 718787259);
	b = R(d ^ (c | ~a), b, c, k[9], 21, 11, -343485551);

	BUF[0] = a;
	BUF[1] = b;
	BUF[2] = c;
	BUF[3] = d;
}

module.exports = md5;

},{}]},{},[184])(184)
});